//<auto-generated/>
using System;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using TFX.Core;
using TFX.Core.Model;
using TFX.Core.Services;
using TFX.Core.Reflections;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.Extensions.DependencyInjection;
using TFX.Core.Exceptions;
using Microsoft.AspNetCore.Http;
using System.Data;
using TFX.Core.Lzma;
using TFX.Core.Identity;
using TFX.Core.Access.Usuarios.Rules;
using TFX.Core.Access.Usuarios;
using TFX.Core.Access.DB;

namespace TFX.Core.Access.Usuarios
{
    [XGuid("961B7E48-A442-4096-80DF-B65F8C459754", typeof(IUsuariosAtivosService))]
    public class UsuariosAtivosService : XService, IUsuariosAtivosService
    {
        public class DBContext : XDBContext
        {
            public DBContext(DbContextOptions<DBContext> pOptions, XITenantProvider pTenantProvider, XISharedTransaction pSharedTransaction)
                   : base(pOptions, pTenantProvider, pSharedTransaction)
            {
            }

            public DbSet<TAFxUsuario> TAFxUsuario{get; set;}

            private void ConfigureTAFxUsuario(ModelBuilder pBuilder)
            {
                pBuilder.Entity<TAFxUsuario>(ett =>
                {
                    ett.HasKey(e => e.TAFxUsuarioID).HasName("PK_TAFxUsuario");
                    
                    ett.Property(d => d.TAFxUsuarioID).HasColumnType(GetDBType("Guid"));
                    ett.Property(d => d.Login).HasColumnType(GetDBType("String"));
                    ett.Property(d => d.CORxEstadoID).HasColumnType(GetDBType("Int16"));
                    ett.ToTable("TAFxUsuario");
                });
            }

            protected override void OnModelCreating(ModelBuilder pBuilder)
            {
                ConfigureTAFxUsuario(pBuilder);
                base.OnModelCreating(pBuilder);
            }

            protected override string GetConnectionString()
            {
                if (ConnectionString != null)
                    return ConnectionString;
                return XEnvironment.Read("SQL_SERVER_TFX", base.GetConnectionString());
            }
        }

        public abstract class BaseINFUsuariosAtivosServiceRule : XServiceINFRule<UsuariosAtivosService, UsuariosAtivosTuple>
        {
            public BaseINFUsuariosAtivosServiceRule(UsuariosAtivosService pService)
                : base(pService)
            {
            }
            protected DBContext Context
            {
                get;
                private set;
            }
            protected internal virtual T GetWhere<T>(T pQuery)
            {
                return pQuery;
            }
            internal void SetContext(DBContext pContext)
            {
                Context = pContext;
            }

        }

        public UsuariosAtivosService(ILogger<XService> pLogger, DBContext pContext)
               :base(pLogger)
        {
            Rule = new UsuariosAtivosRule(this);
            _INFRule = new INFUsuariosAtivosServiceRule(this);
            Context = pContext;
            _INFRule.SetContext(Context);
        }

        internal XIServiceRule<UsuariosAtivosTuple, UsuariosAtivosTuple> Rule;
        private INFUsuariosAtivosServiceRule _INFRule;

        public override Guid ID => new Guid("961B7E48-A442-4096-80DF-B65F8C459754");

        public DBContext Context
        {
            get;
        }

        public override void GracefullyClose()
        {
            Context.Commit();
        }
        public IQueryable<UsuariosAtivosTuple> ExecuteQuery(UsuariosAtivosFilter pFilter)
        {
            var ctx = Context;
            var query = from TAFxUsuario in ctx.TAFxUsuario
                        
                        select new {TAFxUsuario};
            query = _INFRule.GetWhere(query);


            if (pFilter != null)
            {
                if (pFilter.CORxEstadoID.HasValue)
                    query = query.Where(q => q.TAFxUsuario.CORxEstadoID == pFilter.CORxEstadoID);
                if (!pFilter.Login.IsEmpty())
                    query = query.Where(q => q.TAFxUsuario.Login == pFilter.Login);
            }

            if (!LoadAll)
            {
                if (pFilter?.SkipRows > 0)
                    query = query.Skip(pFilter.SkipRows.Value);

                if (pFilter?.TakeRows > 0)
                    query = query.Take(pFilter.TakeRows.Value);
                else
                    query = query.Take(75);
            }

            var qry = query.Select(q => new UsuariosAtivosTuple(q.TAFxUsuario.TAFxUsuarioID,
                                    q.TAFxUsuario.Login,
                                    q.TAFxUsuario.CORxEstadoID));
            return qry;
        }

        public UsuariosAtivosDataSet Execute(UsuariosAtivosFilter pFilter)
        {
            _INFRule.InternalBeforeExecute();
            var qry = ExecuteQuery(pFilter);
            var tuples = qry.ToList();
            tuples = Rule.InternalAfterSelect(tuples);
            _INFRule.InternalAfterExecute(tuples);
            var dataset = new UsuariosAtivosDataSet { Tuples = tuples };
            return dataset;
        }

        public object Flush(UsuariosAtivosDataSet pDataSet)
        {
            if (pDataSet?.Tuples.Count == 0)
                throw new XUnconformity("Não é permitido Flush sem Tuplas.");
            using (var scope = XEnvironment.Services.CreateScope())
            using (var ctx = scope.ServiceProvider.GetRequiredService<DBContext>())
            {
                Rule?.InternalBeforeFlush(pDataSet.Tuples);

                SetUsuariosAtivosValues(ctx, pDataSet);
                ctx.SaveChanges();

                Rule?.InternalAfterFlush(pDataSet.Tuples);
                pDataSet.AssignBack(pDataSet);

                return XEndPointMessage.Ok;
            }
        }

        private void SetUsuariosAtivosValues(DBContext ctx, UsuariosAtivosDataSet pDataSet)
        {
            if (pDataSet == null || pDataSet.Tuples == null)
                return;
            foreach (UsuariosAtivosTuple stpl in pDataSet.Tuples)
            {
                var TAFxUsuariotpl = new TAFxUsuario();
                stpl.EntityTuple = TAFxUsuariotpl;
                if (stpl.TAFxUsuarioID.Value != Guid.Empty)
                    TAFxUsuariotpl.TAFxUsuarioID = stpl.TAFxUsuarioID.Value;
                TAFxUsuariotpl.Login = stpl.Login.Value;
                TAFxUsuariotpl.CORxEstadoID = stpl.CORxEstadoID.Value;
                var sb = TAFxUsuariotpl.Validate();
                if (sb.Length > 0)
                    throw new Exception(sb.ToString());
                ctx.TAFxUsuario.Add(TAFxUsuariotpl);
                if (!TAFxUsuariotpl.IsPKEmpty)
                    ctx.Entry(TAFxUsuariotpl).State = EntityState.Modified;
                else
                    ctx.Entry(TAFxUsuariotpl).State = EntityState.Added;
            }
        }
    }
}