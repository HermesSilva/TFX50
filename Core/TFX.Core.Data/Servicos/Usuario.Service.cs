//<auto-generated/>
using System;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using TFX.Core;
using TFX.Core.Model;
using TFX.Core.Services;
using TFX.Core.Reflections;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.Extensions.DependencyInjection;
using TFX.Core.Exceptions;
using Microsoft.AspNetCore.Http;
using System.Data;
using TFX.Core.Lzma;
using TFX.Core.Identity;
using TFX.Core.Data.Servicos.Rules;
using TFX.Core.Data.Servicos;
using TFX.Core.Data.DB;

namespace TFX.Core.Data.Servicos
{
    [XGuid("53F17DAC-4376-4424-8454-0866B122BFDB", typeof(IUsuarioService))]
    public class UsuarioService : XService, IUsuarioService
    {
        public class DBContext : XDBContext
        {
            public DBContext(DbContextOptions<DBContext> pOptions, XITenantProvider pTenantProvider, XISharedTransaction pSharedTransaction)
                   : base(pOptions, pTenantProvider, pSharedTransaction)
            {
            }

            public DbSet<CORxUsuario> CORxUsuario{get; set;}
            public DbSet<CORxPessoa> CORxPessoa{get; set;}

            private void ConfigureCORxUsuario(ModelBuilder pBuilder)
            {
                pBuilder.Entity<CORxUsuario>(ett =>
                {
                    ett.HasKey(e => e.CORxUsuarioID).HasName("PK_CORxUsuario");
                    
                    ett.Property(d => d.EMail).HasColumnType(GetDBType("String", 80));
                    ett.ToTable("CORxUsuario");
                });
            }
            private void ConfigureCORxPessoa(ModelBuilder pBuilder)
            {
                pBuilder.Entity<CORxPessoa>(ett =>
                {
                    ett.HasKey(e => e.CORxPessoaID).HasName("PK_CORxPessoa");
                    
                    ett.Property(d => d.CORxPessoaID).HasColumnType(GetDBType("Guid"));
                    ett.Property(d => d.Nome).HasColumnType(GetDBType("String", 180));
                    ett.ToTable("CORxPessoa");
                });
            }

            protected override void OnModelCreating(ModelBuilder pBuilder)
            {
                ConfigureCORxUsuario(pBuilder);
                ConfigureCORxPessoa(pBuilder);
                base.OnModelCreating(pBuilder);
            }

            protected override string GetConnectionString()
            {
                if (ConnectionString != null)
                    return ConnectionString;
                return XEnvironment.Read("SQL_SERVER_TFX", base.GetConnectionString());
            }
        }

        public abstract class BaseINFUsuarioServiceRule : XServiceINFRule<UsuarioService, UsuarioTuple>
        {
            public BaseINFUsuarioServiceRule(UsuarioService pService)
                : base(pService)
            {
            }
            protected DBContext Context
            {
                get;
                private set;
            }
            protected internal virtual T GetWhere<T>(T pQuery)
            {
                return pQuery;
            }
            internal void SetContext(DBContext pContext)
            {
                Context = pContext;
            }

        }

        public UsuarioService(ILogger<XService> pLogger, DBContext pContext)
               :base(pLogger)
        {
            Rule = new UsuarioRule(this);
            _INFRule = new INFUsuarioServiceRule(this);
            Context = pContext;
            _INFRule.SetContext(Context);
        }

        internal XIServiceRule<UsuarioTuple, UsuarioTuple> Rule;
        private INFUsuarioServiceRule _INFRule;

        public override Guid ID => new Guid("53F17DAC-4376-4424-8454-0866B122BFDB");

        public DBContext Context
        {
            get;
        }

        public override void GracefullyClose()
        {
            Context.Commit();
        }
        public IQueryable<UsuarioTuple> ExecuteQuery(UsuarioFilter pFilter)
        {
            var ctx = Context;
            var query = from CORxPessoa in ctx.CORxPessoa
                        join CORxUsuario in ctx.CORxUsuario on CORxPessoa.CORxPessoaID equals CORxUsuario.CORxUsuarioID
                        
                        select new {CORxUsuario, CORxPessoa};
            query = _INFRule.GetWhere(query);


            if (pFilter != null)
            {
                if (!pFilter.Nome.IsEmpty())
                    query = query.Where(q => q.CORxPessoa.Nome == pFilter.Nome);
            }

            if (!LoadAll)
            {
                if (pFilter?.SkipRows > 0)
                    query = query.Skip(pFilter.SkipRows.Value);

                if (pFilter?.TakeRows > 0)
                    query = query.Take(pFilter.TakeRows.Value);
                else
                    query = query.Take(75);
            }

            var qry = query.Select(q => new UsuarioTuple(q.CORxUsuario.EMail,
                             q.CORxPessoa.CORxPessoaID,
                             q.CORxPessoa.Nome));
            return qry;
        }

        public UsuarioDataSet Execute(UsuarioFilter pFilter)
        {
            _INFRule.InternalBeforeExecute();
            var qry = ExecuteQuery(pFilter);
            var tuples = qry.ToList();
            tuples = Rule.InternalAfterSelect(tuples);
            _INFRule.InternalAfterExecute(tuples);
            var dataset = new UsuarioDataSet { Tuples = tuples };
            return dataset;
        }

        public object Flush(UsuarioDataSet pDataSet)
        {
            if (pDataSet?.Tuples.Count == 0)
                throw new XUnconformity("Não é permitido Flush sem Tuplas.");
            using (var scope = XEnvironment.Services.CreateScope())
            using (var ctx = scope.ServiceProvider.GetRequiredService<DBContext>())
            {
                Rule?.InternalBeforeFlush(pDataSet.Tuples);

                SetUsuarioValues(ctx, pDataSet);
                ctx.SaveChanges();

                Rule?.InternalAfterFlush(pDataSet.Tuples);
                pDataSet.AssignBack(pDataSet);

                return XEndPointMessage.Ok;
            }
        }

        private void SetUsuarioValues(DBContext ctx, UsuarioDataSet pDataSet)
        {
            if (pDataSet == null || pDataSet.Tuples == null)
                return;
            foreach (UsuarioTuple stpl in pDataSet.Tuples)
            {
                var CORxUsuariotpl = new CORxUsuario();
                stpl.EntityTuple = CORxUsuariotpl;
                if (stpl.CORxPessoaID.Value != Guid.Empty)
                    CORxUsuariotpl.CORxUsuarioID = stpl.CORxPessoaID.Value;
                CORxUsuariotpl.EMail = stpl.EMail.Value;
                var sb = CORxUsuariotpl.Validate();
                if (sb.Length > 0)
                    throw new Exception(sb.ToString());
                ctx.CORxUsuario.Add(CORxUsuariotpl);
                if (!CORxUsuariotpl.IsPKEmpty)
                    ctx.Entry(CORxUsuariotpl).State = EntityState.Modified;
                else
                    ctx.Entry(CORxUsuariotpl).State = EntityState.Added;

                var CORxPessoatpl = new CORxPessoa();
                stpl.EntityTuple = CORxPessoatpl;
                if (stpl.CORxPessoaID.Value != Guid.Empty)
                    CORxPessoatpl.CORxPessoaID = stpl.CORxPessoaID.Value;
                CORxPessoatpl.Nome = stpl.Nome.Value;
                var sb = CORxPessoatpl.Validate();
                if (sb.Length > 0)
                    throw new Exception(sb.ToString());
                ctx.CORxPessoa.Add(CORxPessoatpl);
                if (!CORxPessoatpl.IsPKEmpty)
                    ctx.Entry(CORxPessoatpl).State = EntityState.Modified;
                else
                    ctx.Entry(CORxPessoatpl).State = EntityState.Added;
            }
        }
    }
}