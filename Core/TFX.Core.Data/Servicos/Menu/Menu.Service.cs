//<auto-generated/>
using System;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using TFX.Core;
using TFX.Core.Model;
using TFX.Core.Services;
using TFX.Core.Reflections;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.Extensions.DependencyInjection;
using TFX.Core.Exceptions;
using Microsoft.AspNetCore.Http;
using System.Data;
using TFX.Core.Lzma;
using TFX.Core.Identity;
using System.Text;
using TFX.Core.Data.Servicos.Menu.Rules;
using TFX.Core.Data.Servicos.Menu;

namespace TFX.Core.Data.Servicos.Menu
{
    [XGuid("CA94C52B-3EC3-495C-B034-B3652CED2947", typeof(IMenuService))]
    public class MenuService : XService, IMenuService
    {
        public class CORxMenu : XEntity
        {
            public Boolean IsPKEmpty => !CORxMenuID.HasValue;
            [Display(Name = "Menu")]
            [Required()]
            public Guid? CORxMenuID {get; set;}

            [Display(Name = "√çcone")]
            [MaxLength(25)]
            public String Icone {get; set;}

            [MaxLength(50)]
            [Required()]
            public String Menu {get; set;}


            public List<CORxMenuItem> CORxMenuItem {get; set;} = new List<CORxMenuItem>();
        }
        public class CORxMenuItem : XEntity
        {
            [Display(Name = "Menu")]
            [Required()]
            public Guid CORxMenuID {get; set;}

            public Boolean IsPKEmpty => !CORxMenuItemID.HasValue;
            [Display(Name = "Item de Menu")]
            [Required()]
            public Guid? CORxMenuItemID {get; set;}

            [Display(Name = "Recurso")]
            [Required()]
            public Guid CORxRecursoID {get; set;}

            [MaxLength(50)]
            [Required()]
            public String Item {get; set;}


            public CORxMenu CORxMenu {get; set;}
        }
        public class DBContext : XDBContext
        {
            public DBContext(DbContextOptions<DBContext> pOptions, XITenantProvider pTenantProvider, XISharedTransaction pSharedTransaction)
                   : base(pOptions, pTenantProvider, pSharedTransaction)
            {
            }

            public DbSet<CORxMenu> CORxMenu{get; set;}
            public DbSet<CORxMenuItem> CORxMenuItem{get; set;}

        private void ConfigureCORxMenu(ModelBuilder pBuilder)
        {
            pBuilder.Entity<CORxMenu>(ett =>
            {
                ett.HasKey(e => e.CORxMenuID).HasName("PK_CORxMenu");

                ett.Property(d => d.CORxMenuID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.Menu).HasColumnType(GetDBType("String", 50));
                ett.Property(d => d.Icone).HasColumnType(GetDBType("String", 25)).IsRequired(false);
                ett.ToTable("CORxMenu");
            });
        }
        private void ConfigureCORxMenuItem(ModelBuilder pBuilder)
        {
            pBuilder.Entity<CORxMenuItem>(ett =>
            {
                ett.HasKey(e => e.CORxMenuItemID).HasName("PK_CORxMenuItem");

                ett.Property(d => d.CORxMenuItemID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.CORxMenuID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.Item).HasColumnType(GetDBType("String", 50));
                ett.Property(d => d.CORxRecursoID).HasColumnType(GetDBType("Guid"));
                ett.ToTable("CORxMenuItem");
                ett.HasOne(d => d.CORxMenu)
                   .WithMany(p => p.CORxMenuItem)
                   .HasForeignKey(d => d.CORxMenuID)
                   .OnDelete(DeleteBehavior.Restrict);
            });
        }

            protected override void OnModelCreating(ModelBuilder pBuilder)
            {
                ConfigureCORxMenu(pBuilder);
                ConfigureCORxMenuItem(pBuilder);
                base.OnModelCreating(pBuilder);
            }

            protected override string GetConnectionString()
            {
                if (ConnectionString != null)
                    return ConnectionString;
                return XEnvironment.Read("SQL_SERVER_TFX", base.GetConnectionString());
            }
        }

        public abstract class BaseINFMenuServiceRule : XServiceINFRule<MenuService, MenuTuple>
        {
            public BaseINFMenuServiceRule(MenuService pService)
                : base(pService)
            {
            }
            protected DBContext Context
            {
                get;
                private set;
            }
            protected internal virtual T GetWhere<T>(T pQuery)
            {
                return pQuery;
            }
            internal void SetContext(DBContext pContext)
            {
                Context = pContext;
            }

        }

        public MenuService(ILogger<XService> pLogger, DBContext pContext)
               :base(pLogger)
        {
            Rule = new MenuRule(this);
            _INFRule = new INFMenuServiceRule(this);
            Context = pContext;
            _INFRule.SetContext(Context);
        }

        internal XIServiceRule<MenuTuple, MenuTuple> Rule;
        private INFMenuServiceRule _INFRule;

        public override Guid ID => new Guid("CA94C52B-3EC3-495C-B034-B3652CED2947");

        public DBContext Context
        {
            get;
        }

        public override void GracefullyClose()
        {
            Context.Commit();
        }
        public IQueryable<MenuTuple> ExecuteQuery()
        {
            var ctx = Context;
            var query = from CORxMenuItem in ctx.CORxMenuItem
                        join CORxMenu in ctx.CORxMenu on CORxMenuItem.CORxMenuID equals CORxMenu.CORxMenuID
                        
                        select new {CORxMenu, CORxMenuItem};
            query = _INFRule.GetWhere(query);


            var qry = query.Select(q => new MenuTuple(q.CORxMenu.Menu,
                          q.CORxMenu.Icone,
                          q.CORxMenuItem.Item,
                          q.CORxMenuItem.CORxMenuItemID));
            return qry;
        }

        public MenuDataSet Execute()
        {
            _INFRule.InternalBeforeExecute();
            var qry = ExecuteQuery();
            var tuples = qry.ToList();
            tuples = Rule.InternalAfterSelect(tuples);
            _INFRule.InternalAfterExecute(tuples);
            var dataset = new MenuDataSet { Tuples = tuples };
            return dataset;
        }
    }
}