//<auto-generated/>
using System;
using System.Linq;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore.Infrastructure;
using TFX.Core;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using TFX.Core.Lzma;

namespace TFX.Core.Data.DB
{
    public class TFXCoreDataContext : XDBContext
    {
        #region _CORxAgregado

        internal class _CORxAgregado
        {
            public Boolean IsPKEmpty => Object.Equals(CORxAgregadoID, typeof(Guid).GetDefault());
            [Display(Name = "Agregado")]
            [Required()]
            public Guid? CORxAgregadoID {get; set;}
            public _CORxPessoa CORxPessoa {get; set;}
            public List<_CORxEmpresa> CORxEmpresa {get; set;} = new List<_CORxEmpresa>();
            public List<_CORxEmpresaGrupo> CORxEmpresaGrupo {get; set;} = new List<_CORxEmpresaGrupo>();
        }

        #endregion _CORxAgregado

        #region _CORxDireitos

        internal class _CORxDireitos
        {
            public class XDefault
            {
                private static Dictionary<Int16, _CORxDireitos> _SeedData = new Dictionary<Int16, _CORxDireitos>()
                {
                    [(Int16)0] = new _CORxDireitos { CORxDireitosID = (Int16)0, Direito = @"NA", Titulo = @"NA" },
                    [(Int16)5] = new _CORxDireitos { CORxDireitosID = (Int16)5, Direito = @"Apagar", Titulo = @"Apagar" },
                    [(Int16)4] = new _CORxDireitos { CORxDireitosID = (Int16)4, Direito = @"Inativar", Titulo = @"Inativar" },
                    [(Int16)2] = new _CORxDireitos { CORxDireitosID = (Int16)2, Direito = @"Inserir", Titulo = @"Inserir" },
                    [(Int16)1] = new _CORxDireitos { CORxDireitosID = (Int16)1, Direito = @"Visualizar", Titulo = @"Visualizar" },
                    [(Int16)3] = new _CORxDireitos { CORxDireitosID = (Int16)3, Direito = @"Alterar", Titulo = @"Alterar" }
                };
                public static _CORxDireitos[] SeedData => _SeedData.Values.ToArray();
            }
            public Boolean IsPKEmpty => Object.Equals(CORxDireitosID, typeof(Int16).GetDefault());
            [Display(Name = "Direitos")]
            [Required()]
            [DatabaseGenerated(DatabaseGeneratedOption.None)]
            public Int16 CORxDireitosID {get; set;}
            [MaxLength(50)]
            [Required()]
            public String Direito {get; set;}
            [Display(Name = "TÃ­tulo")]
            [MaxLength(50)]
            [Required()]
            public String Titulo {get; set;}
        }

        #endregion _CORxDireitos

        #region _CORxEmpresa

        internal class _CORxEmpresa
        {
            [Display(Name = "Agregado")]
            [Required()]
            public Guid CORxAgregadoID {get; set;}
            public Boolean IsPKEmpty => Object.Equals(CORxEmpresaID, typeof(Guid).GetDefault());
            [Display(Name = "Empresa")]
            [Required()]
            public Guid? CORxEmpresaID {get; set;}
            public _CORxPessoa CORxPessoa {get; set;}
            public _CORxAgregado CORxAgregado {get; set;}
            public List<_CORxEmpresaGrupo> CORxEmpresaGrupo {get; set;} = new List<_CORxEmpresaGrupo>();
        }

        #endregion _CORxEmpresa

        #region _CORxEmpresaGrupo

        internal class _CORxEmpresaGrupo
        {
            [Display(Name = "Agregado")]
            [Required()]
            public Guid CORxAgregadoID {get; set;}
            public Boolean IsPKEmpty => Object.Equals(CORxEmpresaGrupoID, typeof(Guid).GetDefault());
            [Display(Name = "Grupo de Empresas")]
            [Required()]
            public Guid? CORxEmpresaGrupoID {get; set;}
            [Display(Name = "Empresa")]
            [Required()]
            public Guid CORxEmpresaID {get; set;}
            [Required()]
            public Guid Grupo {get; set;}
            public _CORxAgregado CORxAgregado {get; set;}
            public _CORxEmpresa CORxEmpresa {get; set;}
        }

        #endregion _CORxEmpresaGrupo

        #region _CORxPessoa

        internal class _CORxPessoa
        {
            public Boolean IsPKEmpty => Object.Equals(CORxPessoaID, typeof(Guid).GetDefault());
            [Display(Name = "Pessoa")]
            [Required()]
            public Guid? CORxPessoaID {get; set;}
            [MaxLength(180)]
            [Required()]
            public String Nome {get; set;}
            public List<_CORxAgregado> CORxAgregado {get; set;} = new List<_CORxAgregado>();
            public List<_CORxEmpresa> CORxEmpresa {get; set;} = new List<_CORxEmpresa>();
        }

        #endregion _CORxPessoa

        #region _CORxStatus

        internal class _CORxStatus
        {
            public class XDefault
            {
                private static Dictionary<Int16, _CORxStatus> _SeedData = new Dictionary<Int16, _CORxStatus>()
                {
                    [(Int16)0] = new _CORxStatus { CORxStatusID = (Int16)0, Status = @"Inatoivo" },
                    [(Int16)1] = new _CORxStatus { CORxStatusID = (Int16)1, Status = @"Ativo" }
                };
                public static _CORxStatus[] SeedData => _SeedData.Values.ToArray();
            }
            public Boolean IsPKEmpty => Object.Equals(CORxStatusID, typeof(Int16).GetDefault());
            [Display(Name = "Status")]
            [Required()]
            [DatabaseGenerated(DatabaseGeneratedOption.None)]
            public Int16 CORxStatusID {get; set;}
            [MaxLength(20)]
            [Required()]
            public String Status {get; set;}
        }

        #endregion _CORxStatus


        protected TFXCoreDataContext(DbContextOptions pOptions)
          : base(pOptions)
        {
        
        }

        public TFXCoreDataContext(DbContextOptions<TFXCoreDataContext> pOptions)
          : base(pOptions)
        {
        
        }

        internal DbSet<_CORxAgregado> CORxAgregado{get; set;}
        internal DbSet<_CORxDireitos> CORxDireitos{get; set;}
        internal DbSet<_CORxEmpresa> CORxEmpresa{get; set;}
        internal DbSet<_CORxEmpresaGrupo> CORxEmpresaGrupo{get; set;}
        internal DbSet<_CORxPessoa> CORxPessoa{get; set;}
        internal DbSet<_CORxStatus> CORxStatus{get; set;}
        protected override void OnModelCreating(ModelBuilder pBuilder)
        {
            ConfigureCORxAgregado(pBuilder);
            ConfigureCORxDireitos(pBuilder);
            ConfigureCORxEmpresa(pBuilder);
            ConfigureCORxEmpresaGrupo(pBuilder);
            ConfigureCORxPessoa(pBuilder);
            ConfigureCORxStatus(pBuilder);
        }

        private void ConfigureCORxAgregado(ModelBuilder pBuilder)
        {
            pBuilder.Entity<_CORxAgregado>(ett =>
            {
                ett.HasKey(e => e.CORxAgregadoID).HasName("PK_CORxAgregado");
                
                ett.Property(d => d.CORxAgregadoID).HasColumnType(GetDBType("Guid"));
                ett.ToTable("CORxAgregado");

                ett.HasOne(d => d.CORxPessoa)
                   .WithMany()
                   .HasForeignKey(d => d.CORxAgregadoID)
                   .OnDelete(DeleteBehavior.Restrict)
                   .HasConstraintName("FK_D129F24223084A40BDB3C6BF6BC16ABD");

                ett.HasIndex(d => d.CORxAgregadoID).HasDatabaseName("IX_D129F24223084A40BDB3C6BF6BC16ABD");
            });
        }

        private void ConfigureCORxDireitos(ModelBuilder pBuilder)
        {
            pBuilder.Entity<_CORxDireitos>(ett =>
            {
                ett.HasKey(e => e.CORxDireitosID).HasName("PK_CORxDireitos");
                
                ett.Property(d => d.CORxDireitosID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.Direito).HasColumnType(GetDBType("String", 50));
                ett.Property(d => d.Titulo).HasColumnType(GetDBType("String", 50));
                ett.ToTable("CORxDireitos");
                ett.HasData(_CORxDireitos.XDefault.SeedData);
            });
        }

        private void ConfigureCORxEmpresa(ModelBuilder pBuilder)
        {
            pBuilder.Entity<_CORxEmpresa>(ett =>
            {
                ett.HasKey(e => e.CORxEmpresaID).HasName("PK_CORxEmpresa");
                
                ett.Property(d => d.CORxEmpresaID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.CORxAgregadoID).HasColumnType(GetDBType("Guid"));
                ett.ToTable("CORxEmpresa");

                ett.HasOne(d => d.CORxPessoa)
                   .WithMany()
                   .HasForeignKey(d => d.CORxEmpresaID)
                   .OnDelete(DeleteBehavior.Restrict)
                   .HasConstraintName("FK_751AAA01BDC648D8A2B8DA03E5758339");

                ett.HasOne(d => d.CORxAgregado)
                   .WithMany(p => p.CORxEmpresa)
                   .HasForeignKey(d => d.CORxAgregadoID)
                   .OnDelete(DeleteBehavior.Restrict)
                   .HasConstraintName("FK_4F443AC8953246C19887C496C4CB7DCC");

                ett.HasIndex(d => d.CORxEmpresaID).HasDatabaseName("IX_751AAA01BDC648D8A2B8DA03E5758339");
                ett.HasIndex(d => d.CORxAgregadoID).HasDatabaseName("IX_4F443AC8953246C19887C496C4CB7DCC");
            });
        }

        private void ConfigureCORxEmpresaGrupo(ModelBuilder pBuilder)
        {
            pBuilder.Entity<_CORxEmpresaGrupo>(ett =>
            {
                ett.HasKey(e => e.CORxEmpresaGrupoID).HasName("PK_CORxEmpresaGrupo");
                
                ett.Property(d => d.CORxEmpresaGrupoID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.CORxAgregadoID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.CORxEmpresaID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.Grupo).HasColumnType(GetDBType("Guid"));
                ett.ToTable("CORxEmpresaGrupo");

                ett.HasOne(d => d.CORxEmpresa)
                   .WithMany(p => p.CORxEmpresaGrupo)
                   .HasForeignKey(d => d.CORxEmpresaID)
                   .OnDelete(DeleteBehavior.Restrict)
                   .HasConstraintName("FK_0392DD25ED2D4C209696C72A0858FF3F");

                ett.HasOne(d => d.CORxAgregado)
                   .WithMany(p => p.CORxEmpresaGrupo)
                   .HasForeignKey(d => d.CORxAgregadoID)
                   .OnDelete(DeleteBehavior.Restrict)
                   .HasConstraintName("FK_6F15186E1CAA445292860D8634F9D6F3");

                ett.HasIndex(d => d.CORxAgregadoID).HasDatabaseName("IX_6F15186E1CAA445292860D8634F9D6F3");
                ett.HasIndex(d => d.CORxEmpresaID).HasDatabaseName("IX_0392DD25ED2D4C209696C72A0858FF3F");
            });
        }

        private void ConfigureCORxPessoa(ModelBuilder pBuilder)
        {
            pBuilder.Entity<_CORxPessoa>(ett =>
            {
                ett.HasKey(e => e.CORxPessoaID).HasName("PK_CORxPessoa");
                
                ett.Property(d => d.CORxPessoaID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.Nome).HasColumnType(GetDBType("String", 180));
                ett.ToTable("CORxPessoa");
            });
        }

        private void ConfigureCORxStatus(ModelBuilder pBuilder)
        {
            pBuilder.Entity<_CORxStatus>(ett =>
            {
                ett.HasKey(e => e.CORxStatusID).HasName("PK_CORxStatus");
                
                ett.Property(d => d.CORxStatusID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.Status).HasColumnType(GetDBType("String", 20));
                ett.ToTable("CORxStatus");
                ett.HasData(_CORxStatus.XDefault.SeedData);
            });
        }
    }
}