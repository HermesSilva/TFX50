//<auto-generated/>
using System;
using System.Linq;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using Newtonsoft.Json;
using TFX.Core.Model.Cache;
using TFX.Core.Model.Data;
using TFX.Core.Model.DIC.SVC;
using TFX.Core.Model.DIC.ORM;
using TFX.Core.Model.DIC.Types;
using TFX.Core.Model.Interfaces;
using TFX.Core.Model.Services;
using TFX.Core.Reflections;
using TFX.Core.Objects;
#if !OnlyDef
using TFX.Core.Service.Job;
using TFX.Core.Service.SVC;
#endif
using TFX.Core.Model.DIC.FRM;
using TFX.Core.Model.DIC.APP;
using TFX.Core.Model.DIC.RPT;
using Projecao.Core.PET.DB;

namespace Projecao.Core.PET.CheckList
{
    [XDASESource(@"D:\Tootega\Source\TFX20\Modules\Projecao.Core.PET\Projecao.Core.PET.csproj", @"D:\Tootega\Source\TFX20\Modules\Projecao.Core.PET\CheckList\CheckList.dssvc")]
    [XRegister(typeof(CheckListSVC), sCID)]
    public class CheckListSVC : XSVCModel
    {
        #region CheckListFilterFRM

        [XRegister(typeof(CheckListFilterFRM), sCID)]
        public class CheckListFilterFRM : XFRMModel
        {
            public const String sCID = "4B29B2A7-6CE4-49F1-80A8-FADF0E2BC085";
            public static new readonly Guid gCID = new Guid(sCID);
            static CheckListFilterFRM()
            {
                gCID = new Guid(sCID);
            }
            public CheckListFilterFRM()
            {
                ID = gCID;
                Name = "CheckListFilter";
                Title = "";
                MinRows = 2;
                ConfigCID = new Guid("00000000-0000-0000-0000-000000000000");
                ConfigPKFilter = false;
                ReferenceScripts = new String[] { "TFX.Core.Service.js", "Projecao.Core.CEP.js", "Projecao.Core.ERP.js", "Projecao.Core.IMC.js", "Projecao.Core.ISE.js", "Projecao.Core.PET.js" };
                Rect = new XRect(0, 0, 909, 92);
                Style = XFRMStyle.Normal;
                ActionContext = XActionContext.All;
                AddItem(PETxTipoCheckListID);
                PETxTipoCheckListID.ForceRW = true;
                PETxTipoCheckListID.CanInsert = true;
                PETxTipoCheckListID.CanUpdate = false;
                PETxTipoCheckListID.RowCount = 2;
                PETxTipoCheckListID.ColCount = 7;
                PETxTipoCheckListID.RowCountSmall = 2;
                PETxTipoCheckListID.ColCountSmall = 7;
                PETxTipoCheckListID.IsHidden = false;
                PETxTipoCheckListID.IsHiddenSmall = false;
                PETxTipoCheckListID.AdditionalTitle = "";
                PETxTipoCheckListID.Icon = "";
                PETxTipoCheckListID.DataSourceID = global::Projecao.Core.PET.DB.PETx.PETxTipoCheckList.gCID;
                PETxTipoCheckListID.Location = 1;
                PETxTipoCheckListID.EditorCID = new Guid("AC111493-AD7B-4F74-A0E8-DF0E0BB6B74A");
                PETxTipoCheckListID.Operator = XOperator.EqualTo;
                PETxTipoCheckListID.ShowSpin = false;
                PETxTipoCheckListID.HotkeyChar = "";
                PETxTipoCheckListID.JustifyHeight = false;
                PETxTipoCheckListID.AllowEmpty = true;
                PETxTipoCheckListID.FontColor = "#000000";
                PETxTipoCheckListID.FontStyle = XFontStyle.Normal;
                PETxTipoCheckListID.ShowFooter = false;
                PETxTipoCheckListID.ViewSAM = new Guid("00000000-0000-0000-0000-000000000000");
                PETxTipoCheckListID.Order = 1;
                PETxTipoCheckListID.Scale = -1;
                PETxTipoCheckListID.Length = -1;
                PETxTipoCheckListID.SearchAction = XSearchAction.Default;
                PETxTipoCheckListID.TypeID = XInt16.CID;
                PETxTipoCheckListID.AdditionalFieldsID = new Guid[] {  };
                PETxTipoCheckListID.AdditionalDataFieldsID = new Guid[] {  };
                PETxTipoCheckListID.TargetFilterFieldID = new Guid[] {  };
                PETxTipoCheckListID.SourceFilterFieldID = new Guid[] {  };
                PETxTipoCheckListID.TargetDisplayFieldID = new Guid[] { new Guid("5BDB4333-15D4-4E95-BBD3-B9A756FF5889") };
                PETxTipoCheckListID.SourceDisplayFieldID = new Guid[] { new Guid("FB99EB89-8726-452D-B856-ED294C4AB42C") };
                PETxTipoCheckListID.DataSourceID = global::Projecao.Core.PET.DB.PETx.PETxTipoCheckList.gCID;
                PETxTipoCheckListID.AutoLoad = false;
                PETxTipoCheckListID.FilterInative = true;
                PETxTipoCheckListID.IsAnswer = false;
                PETxTipoCheckListID.AllowMultiSelect = false;
                AddItem(Nome);
                Nome.ForceRW = true;
                Nome.CanInsert = true;
                Nome.CanUpdate = true;
                Nome.RowCount = 2;
                Nome.ColCount = 25;
                Nome.RowCountSmall = 2;
                Nome.ColCountSmall = 25;
                Nome.IsHidden = false;
                Nome.IsHiddenSmall = false;
                Nome.AdditionalTitle = "";
                Nome.Icon = "";
                Nome.Location = 2;
                Nome.EditorCID = new Guid("F5982E79-BA45-40FB-85E1-9F2C8B90B6EF");
                Nome.Operator = XOperator.Like;
                Nome.ShowSpin = false;
                Nome.HotkeyChar = "";
                Nome.JustifyHeight = false;
                Nome.AllowEmpty = true;
                Nome.FontColor = "#000000";
                Nome.FontStyle = XFontStyle.Normal;
                Nome.ShowFooter = false;
                Nome.ViewSAM = new Guid("00000000-0000-0000-0000-000000000000");
                Nome.Order = 2;
                Nome.Scale = -1;
                Nome.Length = -1;
                Nome.SearchAction = XSearchAction.Default;
                Nome.TypeID = XString.CID;
                Nome.AdditionalFieldsID = new Guid[] {  };
                Nome.AdditionalDataFieldsID = new Guid[] {  };
                Nome.TargetFilterFieldID = new Guid[] {  };
                Nome.SourceFilterFieldID = new Guid[] {  };
                Nome.TargetDisplayFieldID = new Guid[] {  };
                Nome.SourceDisplayFieldID = new Guid[] {  };
                Nome.AutoLoad = false;
                Nome.FilterInative = true;
                Nome.IsAnswer = false;
                Nome.AllowMultiSelect = false;
            }
            public XFRMField PETxTipoCheckListID = new XFRMField(new Guid("26026550-4EC8-4964-9EFD-5104E95E0952"), "PETxTipoCheckListID", "Tipo do Check List", XInt16.CID, 2, 7, false, gCID, null, new Guid("170EBCEE-0409-49B2-A3CB-54C615E23621")); // Int16;
            public XFRMField Nome = new XFRMField(new Guid("491731CF-B15A-4E06-96F5-D2E45CD397F5"), "Nome", "Nome", XString.CID, 2, 25, false, gCID, null, new Guid("F07BCCED-C58E-4F68-AC45-BE284CAEAC13")); // String;
            public static class Fields
            {
                public static XFieldInfo PETxTipoCheckListID = new XFieldInfo(new Guid("26026550-4EC8-4964-9EFD-5104E95E0952"), "PETxTipoCheckListID", "Tipo do Check List", typeof(Int16), false, "");
                public static XFieldInfo Nome = new XFieldInfo(new Guid("491731CF-B15A-4E06-96F5-D2E45CD397F5"), "Nome", "Nome", typeof(String), false, "");
            }
        }

        #endregion CheckListFilterFRM

        public const String sCID = "F3D21968-C732-4180-8B03-A5B9247E570A";
        public static Guid gCID = new Guid(sCID);
        public static XSVCReference PETxCheckList_PETxTipoCheckListID_PETxTipoCheckList_PETxTipoCheckListID; // PETxCheckList.PETxTipoCheckListID --> PETxTipoCheckList.PETxTipoCheckListID

        #region xPETxTipoCheckList 
        public class xPETxTipoCheckList : XSVCTable
        {

            public static Guid gCID => new Guid("1DB6A858-FC02-4E83-8812-4026A61DBF46");

            public xPETxTipoCheckList()
            {
                Name = "PETxTipoCheckList";
                Alias = "PETxTipoCheckList";
                ID = gCID;
                ParentID =  global::Projecao.Core.PET.DB.PETx.PETxTipoCheckList.gCID;

                Items.Add(Tipo, Tipo.ID);
                Tipo.Owner = this;
                Tipo.OwnerID = ID;
                Tipo.TableName = Name;
                Tipo.Alias = "Tipo";
                Items.Add(PETxTipoCheckListID, PETxTipoCheckListID.ID);
                PETxTipoCheckListID.Owner = this;
                PETxTipoCheckListID.OwnerID = ID;
                PETxTipoCheckListID.TableName = Name;
            }

            public static XORMFaceField Tipo = new XORMFaceField(global::Projecao.Core.PET.DB.PETx.PETxTipoCheckList.Tipo, new Guid("5BDB4333-15D4-4E95-BBD3-B9A756FF5889"), "Tipo", "Tipo");
            public static XORMPKField PETxTipoCheckListID = new XORMPKField(global::Projecao.Core.PET.DB.PETx.PETxTipoCheckList.PETxTipoCheckListID, new Guid("5EBA8536-2C96-4F69-9ED5-99F009510EA7"), "PETxTipoCheckListID", "Tipo do Check List");
        }
        #endregion xPETxTipoCheckList 


        #region xPETxCheckList 
        public class xPETxCheckList : XSVCTable
        {

            public static Guid gCID => new Guid("3AFB586F-BDDB-4288-955B-09B917205697");

            public xPETxCheckList()
            {
                Name = "PETxCheckList";
                Alias = "PETxCheckList";
                ID = gCID;
                ParentID =  global::Projecao.Core.PET.DB.PETx.PETxCheckList.gCID;

                Items.Add(PETxCheckListID, PETxCheckListID.ID);
                PETxCheckListID.Owner = this;
                PETxCheckListID.OwnerID = ID;
                PETxCheckListID.TableName = Name;
                PETxCheckListID.Alias = "PETxCheckListID";
                Items.Add(Nome, Nome.ID);
                Nome.Owner = this;
                Nome.OwnerID = ID;
                Nome.TableName = Name;
                Nome.Alias = "Nome";
                Items.Add(PETxTipoCheckListID, PETxTipoCheckListID.ID);
                PETxTipoCheckListID.Owner = this;
                PETxTipoCheckListID.OwnerID = ID;
                PETxTipoCheckListID.TableName = Name;
                PETxTipoCheckListID.Alias = "PETxTipoCheckListID";
                Items.Add(SYSxEstadoID, SYSxEstadoID.ID);
                SYSxEstadoID.Owner = this;
                SYSxEstadoID.OwnerID = ID;
                SYSxEstadoID.TableName = Name;
                SYSxEstadoID.Alias = "SYSxEstadoID";
                Items.Add(Instrucoes, Instrucoes.ID);
                Instrucoes.Owner = this;
                Instrucoes.OwnerID = ID;
                Instrucoes.TableName = Name;
                Instrucoes.Alias = "Instrucoes";
            }

            public static XORMPKField PETxCheckListID = new XORMPKField(global::Projecao.Core.PET.DB.PETx.PETxCheckList.PETxCheckListID, new Guid("D7738148-51B3-4A8A-995F-7F513BF98CA9"), "PETxCheckListID", "Check List de Recepção");
            public static XORMFaceField Nome = new XORMFaceField(global::Projecao.Core.PET.DB.PETx.PETxCheckList.Nome, new Guid("F07BCCED-C58E-4F68-AC45-BE284CAEAC13"), "Nome", "Nome");
            public static XORMFKField PETxTipoCheckListID = new XORMFKField(global::Projecao.Core.PET.DB.PETx.PETxCheckList.PETxTipoCheckListID, new Guid("170EBCEE-0409-49B2-A3CB-54C615E23621"), "PETxTipoCheckListID", "Tipo do Check List");
            public static XORMStateField SYSxEstadoID = new XORMStateField(global::Projecao.Core.PET.DB.PETx.PETxCheckList.SYSxEstadoID, new Guid("2EB08FAD-4477-429C-A45D-433598F1F92B"), "SYSxEstadoID", "Estado");
            public static XORMField Instrucoes = new XORMField(global::Projecao.Core.PET.DB.PETx.PETxCheckList.Instrucoes, new Guid("7C5EC214-C60B-457C-806B-DECC7DA0F6FE"), "Instrucoes", "Instruções");
        }
        #endregion xPETxCheckList 


        public xPETxCheckList PETxCheckList;
        public xPETxTipoCheckList PETxTipoCheckList;

        public CheckListSVC()
        {
            TupleType = typeof(CheckListSVC.XTuple);
            DataSetType = typeof(CheckListSVC.XDataSet);
            ServiceRuleCID = new Guid("E520452F-9073-4022-ADE8-C52597ED688E");
            OnlyActives = false;
            Actions = XSVCAction.All;
            Type = XServiceType.Default;
            ID = new Guid("F3D21968-C732-4180-8B03-A5B9247E570A");
            Name = "CheckList";
            Title = "Check List";
            IsCacheable = false;
            CompanyControl = false;
            IsJob = false;
            AutoLoad = true;
            FreeForUsers = false;
            ServerSideNewRecord = false;
            UseDistinct = false;
            CheckTenant = true;
            JobType = XJobType.Default;
            ModuleID = new Guid("E3D05D28-7014-4B59-9CB6-C283BEEFDB82");
            Rights = new Int16[] { 1, 2, 3, 4, 5, 6, 7 }; 
            FilterFormID = new Guid("4B29B2A7-6CE4-49F1-80A8-FADF0E2BC085");
            IsReadOnly = false;
            ReferenceScripts = new String[] { "TFX.Core.Service.js", "Projecao.Core.CEP.js", "Projecao.Core.ERP.js", "Projecao.Core.IMC.js", "Projecao.Core.ISE.js", "Projecao.Core.PET.js" };
            GridFields = new Guid[] { xPETxCheckList.Nome.ID, xPETxTipoCheckList.Tipo.ID, xPETxCheckList.SYSxEstadoID.ID };
            OrderByFields = new Guid[] { xPETxCheckList.Nome.ID };
            DataSetFields = new Guid[] { xPETxCheckList.Nome.ID, xPETxTipoCheckList.Tipo.ID, xPETxCheckList.PETxTipoCheckListID.ID, xPETxCheckList.Instrucoes.ID, xPETxCheckList.PETxCheckListID.ID, xPETxCheckList.SYSxEstadoID.ID };
            PKField = xPETxCheckList.PETxCheckListID.ID;
            ConfigTableID = new Guid("3607A7AE-F943-4632-AF80-D8C2A6C28AAD");
            StateField = xPETxCheckList.SYSxEstadoID.ID;
            MasterRuleCID = new Guid("E520452F-9073-4022-ADE8-C52597ED688E");
            PETxCheckList = new xPETxCheckList();
            PETxCheckList.IsReadOnly = false;
            AddTable(PETxCheckList);
            PETxTipoCheckList = new xPETxTipoCheckList();
            PETxTipoCheckList.IsReadOnly = true;
            AddTable(PETxTipoCheckList);
            MasterTableID = PETxCheckList.ID;
            PETxCheckList_PETxTipoCheckListID_PETxTipoCheckList_PETxTipoCheckListID = AddReference(new XSVCReference(new Guid("3FE57976-41EE-437E-98E1-F0DC9B078B0A"), "FK_3FE5797641EE437E98E1F0DC9B078B0A", CheckListSVC.xPETxCheckList.gCID, xPETxCheckList.PETxTipoCheckListID.ID, CheckListSVC.xPETxTipoCheckList.gCID, xPETxTipoCheckList.PETxTipoCheckListID.ID, XJoinType.Inner)); // PETxCheckList.PETxTipoCheckListID --> PETxTipoCheckList.PETxTipoCheckListID
            xPETxCheckList.Instrucoes.IsDataField = true;
            xPETxCheckList.Instrucoes.AllowEmpty = true;
            xPETxCheckList.Nome.OrderType = XOrderType.Asc;
            xPETxCheckList.Nome.Length = 60;
            xPETxCheckList.Nome.IsDataField = true;
            xPETxCheckList.Nome.AllowEmpty = true;
            xPETxCheckList.PETxCheckListID.GeneratePK = true;
            xPETxCheckList.PETxCheckListID.IsDataField = true;
            xPETxCheckList.PETxCheckListID.AllowEmpty = true;
            xPETxCheckList.PETxTipoCheckListID.IsDataField = true;
            xPETxCheckList.PETxTipoCheckListID.AllowEmpty = true;
            xPETxCheckList.SYSxEstadoID.IsDataField = true;
            xPETxCheckList.SYSxEstadoID.AllowEmpty = true;
            xPETxTipoCheckList.Tipo.IsReadOnly = true;
            xPETxTipoCheckList.Tipo.IsDataField = true;
            xPETxTipoCheckList.Tipo.AllowEmpty = true;
            xPETxCheckList.SYSxEstadoID.DefaultValue = (Int16)1;
        }

        #region XFields

        public class XFields
        {
        public XORMField Instrucoes => xPETxCheckList.Instrucoes;
        public XORMField Nome => xPETxCheckList.Nome;
        public XORMField PETxCheckListID => xPETxCheckList.PETxCheckListID;
        public XORMField PETxTipoCheckListID => xPETxCheckList.PETxTipoCheckListID;
        public XORMField SYSxEstadoID => xPETxCheckList.SYSxEstadoID;
        public XORMField Tipo => xPETxTipoCheckList.Tipo;
        }
        #endregion XFields
        #region CheckListSVC.XTuple

        public  class XTuple : XDataTuple
        {

            public XTuple()
            {
            }

            public XTuple(Object[] pSource)
                : base(pSource)
            {
            }

            public XTuple(Int32 pColCount)
               : this(new Object[pColCount])
            {
            }

            public readonly XFields Fields = new XFields();

            #nullable enable

        public String Instrucoes
        {
            get
            {
                return (String)Value[CheckListSVC.xPETxCheckList.Instrucoes.ID];
            }
            set
            {
                Value[CheckListSVC.xPETxCheckList.Instrucoes.ID] = value;
            }
        }
        public String? oInstrucoes
        {
            get
            {
                GetOldValue(CheckListSVC.xPETxCheckList.Instrucoes, out Object ovlr);
                return (String?)ovlr;
            }
        }

        public String Nome
        {
            get
            {
                return (String)Value[CheckListSVC.xPETxCheckList.Nome.ID];
            }
            set
            {
                Value[CheckListSVC.xPETxCheckList.Nome.ID] = value;
            }
        }
        public String? oNome
        {
            get
            {
                GetOldValue(CheckListSVC.xPETxCheckList.Nome, out Object ovlr);
                return (String?)ovlr;
            }
        }

        public Guid PETxCheckListID
        {
            get
            {
                return (Guid)Value[CheckListSVC.xPETxCheckList.PETxCheckListID.ID];
            }
            set
            {
                Value[CheckListSVC.xPETxCheckList.PETxCheckListID.ID] = value;
            }
        }
        public Guid? oPETxCheckListID
        {
            get
            {
                GetOldValue(CheckListSVC.xPETxCheckList.PETxCheckListID, out Object ovlr);
                return (Guid?)ovlr;
            }
        }

        public Int16 PETxTipoCheckListID
        {
            get
            {
                return (Int16)Value[CheckListSVC.xPETxCheckList.PETxTipoCheckListID.ID];
            }
            set
            {
                Value[CheckListSVC.xPETxCheckList.PETxTipoCheckListID.ID] = value;
            }
        }
        public Int16? oPETxTipoCheckListID
        {
            get
            {
                GetOldValue(CheckListSVC.xPETxCheckList.PETxTipoCheckListID, out Object ovlr);
                return (Int16?)ovlr;
            }
        }

        public Int16 SYSxEstadoID
        {
            get
            {
                return (Int16)Value[CheckListSVC.xPETxCheckList.SYSxEstadoID.ID];
            }
            set
            {
                Value[CheckListSVC.xPETxCheckList.SYSxEstadoID.ID] = value;
            }
        }
        public Int16? oSYSxEstadoID
        {
            get
            {
                GetOldValue(CheckListSVC.xPETxCheckList.SYSxEstadoID, out Object ovlr);
                return (Int16?)ovlr;
            }
        }

        public String Tipo
        {
            get
            {
                return (String)Value[CheckListSVC.xPETxTipoCheckList.Tipo.ID];
            }
            set
            {
                Value[CheckListSVC.xPETxTipoCheckList.Tipo.ID] = value;
            }
        }
        public String? oTipo
        {
            get
            {
                GetOldValue(CheckListSVC.xPETxTipoCheckList.Tipo, out Object ovlr);
                return (String?)ovlr;
            }
        }

            #nullable disable
        }
        #endregion CheckListSVC.XTuple

        #region CheckListSVC.XDataSet

        public class XDataSet : XDataSet<CheckListSVC.XTuple>
        {
            public XDataSet()
            {
                DataSetType = typeof(CheckListSVC.XDataSet);
            }
        }

        public class XDataSet<T> : XServiceDataSet<CheckListSVC.XTuple> where T : XDataTuple
        {

            public class xFLDs{
                public Guid Instrucoes => CheckListSVC.xPETxCheckList.Instrucoes.ID;
                public Guid Nome => CheckListSVC.xPETxCheckList.Nome.ID;
                public Guid PETxCheckListID => CheckListSVC.xPETxCheckList.PETxCheckListID.ID;
                public Guid PETxTipoCheckListID => CheckListSVC.xPETxCheckList.PETxTipoCheckListID.ID;
                public Guid SYSxEstadoID => CheckListSVC.xPETxCheckList.SYSxEstadoID.ID;
                public Guid Tipo => CheckListSVC.xPETxTipoCheckList.Tipo.ID;
            }

            public xFLDs FLDs = new xFLDs();

            public XDataSet()
            {
                DataSetType = typeof(CheckListSVC.XDataSet);
            }

        }
        #endregion CheckListSVC.XDataSet
        #if !OnlyDef
        #region CheckListSVC.XRule
        public abstract class XRule : XServiceRule<CheckListSVC.XDataSet, CheckListSVC, CheckListSVC.XTuple>
        {
        }
        #endregion CheckListSVC.XRule

        [Guid(CheckListSVC.sCID)]
        public  interface XService : XIBaseService
        {
            new XDataSet DataSet
            {
                get;
            }
            new XTuple NewTuple(Object pPKValue = null);
             IEnumerable<XTuple> Tuples
            {
                get;
            }
             XTuple Current
            {
                get;
            }
            new XDataSet Get(XServiceData pData);
             XDataSet Get(params Object[] pWhere);
        }
        [XRegister(typeof(_Service), _Service.sCID, typeof(CheckListSVC))]
        protected class _Service : Service<CheckListSVC, XDataSet, XTuple>
        {
            public const String sCID = "B68CA412-74F2-47E3-A824-641714D127EB";
            public Guid gCID = new Guid(sCID);
        }

        public class Service<TModel, TDataSet, TTuple> : XBaseService<CheckListSVC, XDataSet, XTuple>, XService
             where TModel : CheckListSVC, new()
             where TDataSet : XDataSet, new()
             where TTuple : XTuple
        {
            XDataSet XService.DataSet => (XDataSet)DataSet;
            XTuple XService.NewTuple(Object pPKValue)
            {
                return (XTuple)NewTuple(pPKValue);
            }
            public new XDataTuple NewTuple(Object pPKValue = null)
            {
                return (XTuple)base.NewTuple(pPKValue);
            }
            IEnumerable<XTuple> XService.Tuples => (IEnumerable<XTuple>)Tuples;
            XTuple XService.Current => (XTuple )Current;
            XDataSet XService.Get(XServiceData pData)
            {
                return (XDataSet)Get(pData);
            }
            XDataSet XService.Get(params Object[] pWhere)
            {
                return (XDataSet)Get(pWhere);
            }
            public Service()
            {
                ID = gCID;
            }
        }
        #endif
    }

}