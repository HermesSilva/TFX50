//<auto-generated/>
using System;
using System.Linq;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using Newtonsoft.Json;
using TFX.Core.Model.Cache;
using TFX.Core.Model.Data;
using TFX.Core.Model.DIC.SVC;
using TFX.Core.Model.DIC.ORM;
using TFX.Core.Model.DIC.Types;
using TFX.Core.Model.Interfaces;
using TFX.Core.Model.Services;
using TFX.Core.Reflections;
using TFX.Core.Objects;
#if !OnlyDef
using TFX.Core.Service.Job;
using TFX.Core.Service.SVC;
#endif

namespace Projecao.Core.PET.VisaoGeral
{
    [XDASESource(@"D:\Tootega\Source\TFX20\Modules\Projecao.Core.PET\Projecao.Core.PET.csproj", @"D:\Tootega\Source\TFX20\Modules\Projecao.Core.PET\VisaoGeral\Retirada.dssvc")]
    [XRegister(typeof(RetiradaSVC), sCID)]
    public class RetiradaSVC : XSVCModel
    {
        public const String sCID = "A34C5CE4-3195-4385-B47A-C0FF11DA89FA";
        public static Guid gCID = new Guid(sCID);

        public static readonly XORMParameterField PrimaryKeyID = new XORMParameterField(new Guid("6F61C830-B700-4200-B20F-2290BE659B89"), "PrimaryKeyID", "PK", XGuid.CID, 0, 0, false, gCID, null);

        public RetiradaSVC()
        {
            TupleType = typeof(RetiradaSVC.XTuple);
            DataSetType = typeof(RetiradaSVC.XDataSet);
            ServiceRuleCID = new Guid("26843F19-6C19-4515-BB7A-BE1806E3A291");
            OnlyActives = false;
            Actions = XSVCAction.All;
            Type = XServiceType.Utility;
            ID = new Guid("A34C5CE4-3195-4385-B47A-C0FF11DA89FA");
            Name = "Retirada";
            Title = "";
            IsCacheable = false;
            CompanyControl = false;
            IsJob = false;
            AutoLoad = true;
            FreeForUsers = false;
            ServerSideNewRecord = false;
            UseDistinct = false;
            CheckTenant = true;
            JobType = XJobType.Default;
            ModuleID = new Guid("E3D05D28-7014-4B59-9CB6-C283BEEFDB82");
            Rights = new Int16[] { 1, 2, 3, 4, 5, 6, 7 }; 
            IsReadOnly = false;
            ReferenceScripts = new String[] { "TFX.Core.Service.js", "Projecao.Core.CEP.js", "Projecao.Core.ERP.js", "Projecao.Core.IMC.js", "Projecao.Core.ISE.js", "Projecao.Core.PET.js" };
            DataSetFields = new Guid[] { PrimaryKeyID.ID };
            PKField = PrimaryKeyID.ID;
            MasterRuleCID = new Guid("26843F19-6C19-4515-BB7A-BE1806E3A291");
            AddField(PrimaryKeyID);
            PrimaryKeyID.IsParam = true;
            PrimaryKeyID.GeneratePK = true;
            PrimaryKeyID.IsReadOnly = false;
            PrimaryKeyID.Length = 0;
            PrimaryKeyID.Scale = 0;
            PrimaryKeyID.IsDataField = true;
            PrimaryKeyID.AllowEmpty = true;
        }

        #region XFields

        public class XFields
        {
        public XORMField PrimaryKeyID => RetiradaSVC.PrimaryKeyID;
        }
        #endregion XFields
        #region RetiradaSVC.XTuple

        public  class XTuple : XDataTuple
        {

            public XTuple()
            {
            }

            public XTuple(Object[] pSource)
                : base(pSource)
            {
            }

            public XTuple(Int32 pColCount)
               : this(new Object[pColCount])
            {
            }

            public readonly XFields Fields = new XFields();

            #nullable enable

        public Guid PrimaryKeyID
        {
            get
            {
                return (Guid)Value[RetiradaSVC.PrimaryKeyID.ID];
            }
            set
            {
                Value[RetiradaSVC.PrimaryKeyID.ID] = value;
            }
        }
        public Guid? oPrimaryKeyID
        {
            get
            {
                GetOldValue(RetiradaSVC.PrimaryKeyID, out Object ovlr);
                return (Guid?)ovlr;
            }
        }

            #nullable disable
        }
        #endregion RetiradaSVC.XTuple

        #region RetiradaSVC.XDataSet

        public class XDataSet : XDataSet<RetiradaSVC.XTuple>
        {
            public XDataSet()
            {
                DataSetType = typeof(RetiradaSVC.XDataSet);
            }
        }

        public class XDataSet<T> : XServiceDataSet<RetiradaSVC.XTuple> where T : XDataTuple
        {

            public class xFLDs{
                public Guid PrimaryKeyID => RetiradaSVC.PrimaryKeyID.ID;
            }

            public xFLDs FLDs = new xFLDs();

            public XDataSet()
            {
                DataSetType = typeof(RetiradaSVC.XDataSet);
            }

        }
        #endregion RetiradaSVC.XDataSet
        #if !OnlyDef
        #region RetiradaSVC.XRule
        public abstract class XRule : XServiceUtilRule<RetiradaSVC.XDataSet, RetiradaSVC, RetiradaSVC.XTuple>
        {
        }
        #endregion RetiradaSVC.XRule

        [Guid(RetiradaSVC.sCID)]
        public  interface XService : XIBaseService
        {
            new XDataSet DataSet
            {
                get;
            }
            new XTuple NewTuple(Object pPKValue = null);
             IEnumerable<XTuple> Tuples
            {
                get;
            }
             XTuple Current
            {
                get;
            }
            new XDataSet Get(XServiceData pData);
             XDataSet Get(params Object[] pWhere);
        }
        [XRegister(typeof(_Service), _Service.sCID, typeof(RetiradaSVC))]
        protected class _Service : Service<RetiradaSVC, XDataSet, XTuple>
        {
            public const String sCID = "34E0E317-B657-402B-B082-330257A6BE09";
            public Guid gCID = new Guid(sCID);
        }

        public class Service<TModel, TDataSet, TTuple> : XBaseService<RetiradaSVC, XDataSet, XTuple>, XService
             where TModel : RetiradaSVC, new()
             where TDataSet : XDataSet, new()
             where TTuple : XTuple
        {
            XDataSet XService.DataSet => (XDataSet)DataSet;
            XTuple XService.NewTuple(Object pPKValue)
            {
                return (XTuple)NewTuple(pPKValue);
            }
            public new XDataTuple NewTuple(Object pPKValue = null)
            {
                return (XTuple)base.NewTuple(pPKValue);
            }
            IEnumerable<XTuple> XService.Tuples => (IEnumerable<XTuple>)Tuples;
            XTuple XService.Current => (XTuple )Current;
            XDataSet XService.Get(XServiceData pData)
            {
                return (XDataSet)Get(pData);
            }
            XDataSet XService.Get(params Object[] pWhere)
            {
                return (XDataSet)Get(pWhere);
            }
            public Service()
            {
                ID = gCID;
            }
        }
        #endif
    }

}