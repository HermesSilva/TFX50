//<auto-generated/>
using System;
using System.Linq;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using Newtonsoft.Json;
using TFX.Core.Model.Cache;
using TFX.Core.Model.Data;
using TFX.Core.Model.DIC.SVC;
using TFX.Core.Model.DIC.ORM;
using TFX.Core.Model.DIC.Types;
using TFX.Core.Model.Interfaces;
using TFX.Core.Model.Services;
using TFX.Core.Reflections;
using TFX.Core.Objects;
#if !OnlyDef
using TFX.Core.Service.Job;
using TFX.Core.Service.SVC;
#endif
using TFX.Core.Model.DIC.FRM;
using TFX.Core.Model.DIC.APP;
using TFX.Core.Model.DIC.RPT;
using Projecao.Core.PET.DB;

namespace Projecao.Core.PET.ReadOnly
{
    [XDASESource(@"D:\Tootega\Source\TFX20\Modules\Projecao.Core.PET\Projecao.Core.PET.csproj", @"D:\Tootega\Source\TFX20\Modules\Projecao.Core.PET\ReadOnly\Raca.dssvc")]
    [XRegister(typeof(RacaSVC), sCID)]
    public class RacaSVC : XSVCModel
    {
        #region RacaFilterFRM

        [XRegister(typeof(RacaFilterFRM), sCID)]
        public class RacaFilterFRM : XFRMModel
        {
            public const String sCID = "55489A79-7311-4B4F-B9B2-15B73034F611";
            public static new readonly Guid gCID = new Guid(sCID);
            static RacaFilterFRM()
            {
                gCID = new Guid(sCID);
            }
            public RacaFilterFRM()
            {
                ID = gCID;
                Name = "RacaFilter";
                Title = "";
                MinRows = 2;
                ConfigCID = new Guid("00000000-0000-0000-0000-000000000000");
                ConfigPKFilter = false;
                ReferenceScripts = new String[] { "TFX.Core.Service.js", "Projecao.Core.CEP.js", "Projecao.Core.ERP.js", "Projecao.Core.IMC.js", "Projecao.Core.ISE.js", "Projecao.Core.PET.js" };
                Rect = new XRect(20, 20, 965, 678);
                Style = XFRMStyle.Normal;
                ActionContext = XActionContext.All;
                AddItem(Raca);
                Raca.ForceRW = true;
                Raca.CanInsert = true;
                Raca.CanUpdate = true;
                Raca.RowCount = 2;
                Raca.ColCount = 32;
                Raca.RowCountSmall = 2;
                Raca.ColCountSmall = 32;
                Raca.IsHidden = false;
                Raca.IsHiddenSmall = false;
                Raca.AdditionalTitle = "";
                Raca.Icon = "";
                Raca.Location = 1;
                Raca.EditorCID = new Guid("AA2A0DB9-2C59-4833-994D-3DBF2AA0CB3C");
                Raca.Operator = XOperator.Like;
                Raca.ShowSpin = false;
                Raca.HotkeyChar = "";
                Raca.JustifyHeight = false;
                Raca.AllowEmpty = true;
                Raca.FontColor = "#000000";
                Raca.FontStyle = XFontStyle.Normal;
                Raca.ShowFooter = false;
                Raca.ViewSAM = new Guid("00000000-0000-0000-0000-000000000000");
                Raca.Order = 1;
                Raca.Scale = -1;
                Raca.Length = -1;
                Raca.SearchAction = XSearchAction.Default;
                Raca.TypeID = XString.CID;
                Raca.AdditionalFieldsID = new Guid[] { new Guid("AD8F7502-6E40-46DF-9DCB-DC7AAD18B319"), new Guid("0F2DB5B5-A7ED-49C0-A18C-D6422E79CA49") };
                Raca.AdditionalDataFieldsID = new Guid[] {  };
                Raca.TargetFilterFieldID = new Guid[] {  };
                Raca.SourceFilterFieldID = new Guid[] {  };
                Raca.TargetDisplayFieldID = new Guid[] {  };
                Raca.SourceDisplayFieldID = new Guid[] {  };
                Raca.AutoLoad = false;
                Raca.FilterInative = true;
                Raca.IsAnswer = false;
                Raca.AllowMultiSelect = false;
            }
            public XFRMField Raca = new XFRMField(new Guid("F9A10A91-3C18-4C74-96FC-F22997F33BA7"), "Raca", "Raça", XString.CID, 2, 32, false, gCID, null, new Guid("DAEF8FD8-178B-4ABA-945A-87A90C701C8F")); // String;
            public static class Fields
            {
                public static XFieldInfo Raca = new XFieldInfo(new Guid("F9A10A91-3C18-4C74-96FC-F22997F33BA7"), "Raca", "Raça", typeof(String), false, "");
            }
        }

        #endregion RacaFilterFRM

        public const String sCID = "F7FD5216-9D89-4B36-8636-C44A232FF7FB";
        public static Guid gCID = new Guid(sCID);
        public static XSVCReference PETxFamilia_PETxFamiliaID_PETxRaca_PETxFamiliaID; // PETxFamilia.PETxFamiliaID --> PETxRaca.PETxFamiliaID

        #region xPETxRaca 
        public class xPETxRaca : XSVCTable
        {

            public static Guid gCID => new Guid("C6F0BB12-2441-4E02-BA22-E1CCC4AE37AD");

            public xPETxRaca()
            {
                Name = "PETxRaca";
                Alias = "PETxRaca";
                ID = gCID;
                ParentID =  global::Projecao.Core.PET.DB.PETx.PETxRaca.gCID;

                Items.Add(PETxRacaID, PETxRacaID.ID);
                PETxRacaID.Owner = this;
                PETxRacaID.OwnerID = ID;
                PETxRacaID.TableName = Name;
                PETxRacaID.Alias = "PETxRacaID";
                Items.Add(PETxFamiliaID, PETxFamiliaID.ID);
                PETxFamiliaID.Owner = this;
                PETxFamiliaID.OwnerID = ID;
                PETxFamiliaID.TableName = Name;
                Items.Add(Raca, Raca.ID);
                Raca.Owner = this;
                Raca.OwnerID = ID;
                Raca.TableName = Name;
                Raca.Alias = "Raca";
            }

            public static XORMPKField PETxRacaID = new XORMPKField(global::Projecao.Core.PET.DB.PETx.PETxRaca.PETxRacaID, new Guid("ADF12113-A9B9-4DE9-9A3C-DC7CA976ABA2"), "PETxRacaID", "Raça");
            public static XORMFKField PETxFamiliaID = new XORMFKField(global::Projecao.Core.PET.DB.PETx.PETxRaca.PETxFamiliaID, new Guid("A7B1C552-CD88-4B8B-82F6-D5A301396901"), "PETxFamiliaID", "Família");
            public static XORMFaceField Raca = new XORMFaceField(global::Projecao.Core.PET.DB.PETx.PETxRaca.Raca, new Guid("DAEF8FD8-178B-4ABA-945A-87A90C701C8F"), "Raca", "Raça");
        }
        #endregion xPETxRaca 


        #region xPETxFamilia 
        public class xPETxFamilia : XSVCTable
        {

            public static Guid gCID => new Guid("C8809320-7BDB-4F63-A8E4-0FF85F84C093");

            public xPETxFamilia()
            {
                Name = "PETxFamilia";
                Alias = "PETxFamilia";
                ID = gCID;
                ParentID =  global::Projecao.Core.PET.DB.PETx.PETxFamilia.gCID;

                Items.Add(Familia, Familia.ID);
                Familia.Owner = this;
                Familia.OwnerID = ID;
                Familia.TableName = Name;
                Familia.Alias = "Familia";
                Items.Add(PETxFamiliaID, PETxFamiliaID.ID);
                PETxFamiliaID.Owner = this;
                PETxFamiliaID.OwnerID = ID;
                PETxFamiliaID.TableName = Name;
            }

            public static XORMFaceField Familia = new XORMFaceField(global::Projecao.Core.PET.DB.PETx.PETxFamilia.Familia, new Guid("F6E69055-0B49-4045-B755-A17455868C93"), "Familia", "Família");
            public static XORMPKField PETxFamiliaID = new XORMPKField(global::Projecao.Core.PET.DB.PETx.PETxFamilia.PETxFamiliaID, new Guid("B8EC836F-B1A2-46ED-87F4-3BC2709CFF51"), "PETxFamiliaID", "Família");
        }
        #endregion xPETxFamilia 


        public xPETxFamilia PETxFamilia;
        public xPETxRaca PETxRaca;

        public RacaSVC()
        {
            TupleType = typeof(RacaSVC.XTuple);
            DataSetType = typeof(RacaSVC.XDataSet);
            ServiceRuleCID = new Guid("D3DFD4F9-CC0D-459A-BD0B-B07427D01E00");
            OnlyActives = false;
            Actions = XSVCAction.All;
            Type = XServiceType.Default;
            ID = new Guid("F7FD5216-9D89-4B36-8636-C44A232FF7FB");
            Name = "Raca";
            Title = "Raça";
            IsCacheable = false;
            CompanyControl = false;
            IsJob = false;
            AutoLoad = true;
            FreeForUsers = false;
            ServerSideNewRecord = false;
            UseDistinct = false;
            CheckTenant = true;
            JobType = XJobType.Default;
            ModuleID = new Guid("E3D05D28-7014-4B59-9CB6-C283BEEFDB82");
            Rights = new Int16[] { 1 }; 
            FilterFormID = new Guid("55489A79-7311-4B4F-B9B2-15B73034F611");
            IsReadOnly = true;
            ReferenceScripts = new String[] { "TFX.Core.Service.js", "Projecao.Core.CEP.js", "Projecao.Core.ERP.js", "Projecao.Core.IMC.js", "Projecao.Core.ISE.js", "Projecao.Core.PET.js" };
            GridFields = new Guid[] { xPETxRaca.Raca.ID, xPETxFamilia.Familia.ID };
            OrderByFields = new Guid[] { xPETxRaca.Raca.ID, xPETxFamilia.Familia.ID };
            DataSetFields = new Guid[] { xPETxFamilia.Familia.ID, xPETxRaca.PETxRacaID.ID, xPETxRaca.Raca.ID };
            PKField = xPETxRaca.PETxRacaID.ID;
            ConfigTableID = new Guid("4A8D262A-6367-4C4B-BE21-73B00BECE132");
            MasterRuleCID = new Guid("D3DFD4F9-CC0D-459A-BD0B-B07427D01E00");
            PETxFamilia = new xPETxFamilia();
            PETxFamilia.IsReadOnly = true;
            AddTable(PETxFamilia);
            PETxRaca = new xPETxRaca();
            PETxRaca.IsReadOnly = true;
            AddTable(PETxRaca);
            MasterTableID = PETxRaca.ID;
            PETxFamilia_PETxFamiliaID_PETxRaca_PETxFamiliaID = AddReference(new XSVCReference(new Guid("1F65B3F5-7E39-4F2D-8A80-16BAC7F5B0CC"), "FK_1F65B3F57E394F2D8A8016BAC7F5B0CC", RacaSVC.xPETxFamilia.gCID, xPETxFamilia.PETxFamiliaID.ID, RacaSVC.xPETxRaca.gCID, xPETxRaca.PETxFamiliaID.ID, XJoinType.Inner)); // PETxFamilia.PETxFamiliaID --> PETxRaca.PETxFamiliaID
            xPETxFamilia.Familia.IsReadOnly = true;
            xPETxFamilia.Familia.OrderType = XOrderType.Asc;
            xPETxFamilia.Familia.Length = 25;
            xPETxFamilia.Familia.IsDataField = true;
            xPETxFamilia.Familia.FilterUse = true;
            xPETxFamilia.Familia.AllowEmpty = true;
            xPETxRaca.PETxRacaID.IsReadOnly = true;
            xPETxRaca.PETxRacaID.IsDataField = true;
            xPETxRaca.PETxRacaID.AllowEmpty = true;
            xPETxRaca.Raca.IsReadOnly = true;
            xPETxRaca.Raca.OrderType = XOrderType.Asc;
            xPETxRaca.Raca.Length = 48;
            xPETxRaca.Raca.IsDataField = true;
            xPETxRaca.Raca.FilterUse = true;
            xPETxRaca.Raca.AllowEmpty = true;
        }

        #region XFields

        public class XFields
        {
        public XORMField Familia => xPETxFamilia.Familia;
        public XORMField PETxRacaID => xPETxRaca.PETxRacaID;
        public XORMField Raca => xPETxRaca.Raca;
        }
        #endregion XFields
        #region RacaSVC.XTuple

        public  class XTuple : XDataTuple
        {

            public XTuple()
            {
            }

            public XTuple(Object[] pSource)
                : base(pSource)
            {
            }

            public XTuple(Int32 pColCount)
               : this(new Object[pColCount])
            {
            }

            public readonly XFields Fields = new XFields();

            #nullable enable

        public String Familia
        {
            get
            {
                return (String)Value[RacaSVC.xPETxFamilia.Familia.ID];
            }
            set
            {
                Value[RacaSVC.xPETxFamilia.Familia.ID] = value;
            }
        }
        public String? oFamilia
        {
            get
            {
                GetOldValue(RacaSVC.xPETxFamilia.Familia, out Object ovlr);
                return (String?)ovlr;
            }
        }

        public Int16 PETxRacaID
        {
            get
            {
                return (Int16)Value[RacaSVC.xPETxRaca.PETxRacaID.ID];
            }
            set
            {
                Value[RacaSVC.xPETxRaca.PETxRacaID.ID] = value;
            }
        }
        public Int16? oPETxRacaID
        {
            get
            {
                GetOldValue(RacaSVC.xPETxRaca.PETxRacaID, out Object ovlr);
                return (Int16?)ovlr;
            }
        }

        public String Raca
        {
            get
            {
                return (String)Value[RacaSVC.xPETxRaca.Raca.ID];
            }
            set
            {
                Value[RacaSVC.xPETxRaca.Raca.ID] = value;
            }
        }
        public String? oRaca
        {
            get
            {
                GetOldValue(RacaSVC.xPETxRaca.Raca, out Object ovlr);
                return (String?)ovlr;
            }
        }

            #nullable disable
        }
        #endregion RacaSVC.XTuple

        #region RacaSVC.XDataSet

        public class XDataSet : XDataSet<RacaSVC.XTuple>
        {
            public XDataSet()
            {
                DataSetType = typeof(RacaSVC.XDataSet);
            }
        }

        public class XDataSet<T> : XServiceDataSet<RacaSVC.XTuple> where T : XDataTuple
        {

            public class xFLDs{
                public Guid Familia => RacaSVC.xPETxFamilia.Familia.ID;
                public Guid PETxRacaID => RacaSVC.xPETxRaca.PETxRacaID.ID;
                public Guid Raca => RacaSVC.xPETxRaca.Raca.ID;
            }

            public xFLDs FLDs = new xFLDs();

            public XDataSet()
            {
                DataSetType = typeof(RacaSVC.XDataSet);
            }

        }
        #endregion RacaSVC.XDataSet
        #if !OnlyDef
        #region RacaSVC.XRule
        public abstract class XRule : XServiceRule<RacaSVC.XDataSet, RacaSVC, RacaSVC.XTuple>
        {
        }
        #endregion RacaSVC.XRule

        [Guid(RacaSVC.sCID)]
        public  interface XService : XIBaseService
        {
            new XDataSet DataSet
            {
                get;
            }
            new XTuple NewTuple(Object pPKValue = null);
             IEnumerable<XTuple> Tuples
            {
                get;
            }
             XTuple Current
            {
                get;
            }
            new XDataSet Get(XServiceData pData);
             XDataSet Get(params Object[] pWhere);
        }
        [XRegister(typeof(_Service), _Service.sCID, typeof(RacaSVC))]
        protected class _Service : Service<RacaSVC, XDataSet, XTuple>
        {
            public const String sCID = "62F5D4CD-3B98-44B8-A745-20A4EDBA5CFC";
            public Guid gCID = new Guid(sCID);
        }

        public class Service<TModel, TDataSet, TTuple> : XBaseService<RacaSVC, XDataSet, XTuple>, XService
             where TModel : RacaSVC, new()
             where TDataSet : XDataSet, new()
             where TTuple : XTuple
        {
            XDataSet XService.DataSet => (XDataSet)DataSet;
            XTuple XService.NewTuple(Object pPKValue)
            {
                return (XTuple)NewTuple(pPKValue);
            }
            public new XDataTuple NewTuple(Object pPKValue = null)
            {
                return (XTuple)base.NewTuple(pPKValue);
            }
            IEnumerable<XTuple> XService.Tuples => (IEnumerable<XTuple>)Tuples;
            XTuple XService.Current => (XTuple )Current;
            XDataSet XService.Get(XServiceData pData)
            {
                return (XDataSet)Get(pData);
            }
            XDataSet XService.Get(params Object[] pWhere)
            {
                return (XDataSet)Get(pWhere);
            }
            public Service()
            {
                ID = gCID;
            }
        }
        #endif
    }

}