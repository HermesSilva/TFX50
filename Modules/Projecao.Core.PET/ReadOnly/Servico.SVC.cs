//<auto-generated/>
using System;
using System.Linq;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using Newtonsoft.Json;
using TFX.Core.Model.Cache;
using TFX.Core.Model.Data;
using TFX.Core.Model.DIC.SVC;
using TFX.Core.Model.DIC.ORM;
using TFX.Core.Model.DIC.Types;
using TFX.Core.Model.Interfaces;
using TFX.Core.Model.Services;
using TFX.Core.Reflections;
using TFX.Core.Objects;
#if !OnlyDef
using TFX.Core.Service.Job;
using TFX.Core.Service.SVC;
#endif
using TFX.Core.Model.DIC.FRM;
using TFX.Core.Model.DIC.APP;
using TFX.Core.Model.DIC.RPT;
using Projecao.Core.ISE.DB;

namespace Projecao.Core.PET.ReadOnly
{
    [XDASESource(@"D:\Tootega\Source\TFX20\Modules\Projecao.Core.PET\Projecao.Core.PET.csproj", @"D:\Tootega\Source\TFX20\Modules\Projecao.Core.PET\ReadOnly\Servico.dssvc")]
    [XRegister(typeof(ServicoSVC), sCID)]
    public class ServicoSVC : XSVCModel
    {
        #region ServicoFilterFRM

        [XRegister(typeof(ServicoFilterFRM), sCID)]
        public class ServicoFilterFRM : XFRMModel
        {
            public const String sCID = "2D98F46A-7439-4E12-93AF-1ACEC1C1A8A1";
            public static new readonly Guid gCID = new Guid(sCID);
            static ServicoFilterFRM()
            {
                gCID = new Guid(sCID);
            }
            public ServicoFilterFRM()
            {
                ID = gCID;
                Name = "ServicoFilter";
                Title = "";
                MinRows = 2;
                ConfigCID = new Guid("00000000-0000-0000-0000-000000000000");
                ConfigPKFilter = false;
                ReferenceScripts = new String[] { "TFX.Core.Service.js", "Projecao.Core.CEP.js", "Projecao.Core.ERP.js", "Projecao.Core.IMC.js", "Projecao.Core.ISE.js", "Projecao.Core.PET.js" };
                Rect = new XRect(20, 20, 1018, 696);
                Style = XFRMStyle.Normal;
                ActionContext = XActionContext.All;
                AddItem(Nome);
                Nome.ForceRW = true;
                Nome.CanInsert = true;
                Nome.CanUpdate = true;
                Nome.RowCount = 2;
                Nome.ColCount = 32;
                Nome.RowCountSmall = 2;
                Nome.ColCountSmall = 32;
                Nome.IsHidden = false;
                Nome.IsHiddenSmall = false;
                Nome.AdditionalTitle = "";
                Nome.Icon = "";
                Nome.Location = 1;
                Nome.EditorCID = new Guid("AA2A0DB9-2C59-4833-994D-3DBF2AA0CB3C");
                Nome.Operator = XOperator.Like;
                Nome.ShowSpin = false;
                Nome.HotkeyChar = "";
                Nome.JustifyHeight = false;
                Nome.AllowEmpty = true;
                Nome.FontColor = "#000000";
                Nome.FontStyle = XFontStyle.Normal;
                Nome.ShowFooter = false;
                Nome.ViewSAM = new Guid("00000000-0000-0000-0000-000000000000");
                Nome.Order = 1;
                Nome.Scale = -1;
                Nome.Length = -1;
                Nome.SearchAction = XSearchAction.Default;
                Nome.TypeID = XString.CID;
                Nome.AdditionalFieldsID = new Guid[] {  };
                Nome.AdditionalDataFieldsID = new Guid[] {  };
                Nome.TargetFilterFieldID = new Guid[] {  };
                Nome.SourceFilterFieldID = new Guid[] {  };
                Nome.TargetDisplayFieldID = new Guid[] {  };
                Nome.SourceDisplayFieldID = new Guid[] {  };
                Nome.AutoLoad = false;
                Nome.FilterInative = true;
                Nome.IsAnswer = false;
                Nome.AllowMultiSelect = false;
            }
            public XFRMField Nome = new XFRMField(new Guid("E85E46F1-2D6D-44B1-BF40-4FE66F407FE7"), "Nome", "Pesquisar Serviço", XString.CID, 2, 32, false, gCID, null, new Guid("F30F70C4-4E1F-451E-8CC3-5481F08B80BB")); // String;
            public static class Fields
            {
                public static XFieldInfo Nome = new XFieldInfo(new Guid("E85E46F1-2D6D-44B1-BF40-4FE66F407FE7"), "Nome", "Pesquisar Serviço", typeof(String), false, "");
            }
        }

        #endregion ServicoFilterFRM

        public const String sCID = "A8562BD2-C705-45A0-83AC-7C2BD26C2491";
        public static Guid gCID = new Guid(sCID);
        public static XSVCReference ISExServico_ISExServicoID_ISExItem_ISExItemID; // ISExServico.ISExServicoID --> ISExItem.ISExItemID

        #region xISExItem 
        public class xISExItem : XSVCTable
        {

            public static Guid gCID => new Guid("04718B14-A058-425D-928C-0DE28385F6F0");

            public xISExItem()
            {
                Name = "ISExItem";
                Alias = "ISExItem";
                ID = gCID;
                ParentID =  global::Projecao.Core.ISE.DB.ISEx.ISExItem.gCID;

                Items.Add(ISExLinhaID, ISExLinhaID.ID);
                ISExLinhaID.Owner = this;
                ISExLinhaID.OwnerID = ID;
                ISExLinhaID.TableName = Name;
                Items.Add(ISExTabelaID, ISExTabelaID.ID);
                ISExTabelaID.Owner = this;
                ISExTabelaID.OwnerID = ID;
                ISExTabelaID.TableName = Name;
                Items.Add(ISExItemID, ISExItemID.ID);
                ISExItemID.Owner = this;
                ISExItemID.OwnerID = ID;
                ISExItemID.TableName = Name;
                Items.Add(ISExFabricanteID, ISExFabricanteID.ID);
                ISExFabricanteID.Owner = this;
                ISExFabricanteID.OwnerID = ID;
                ISExFabricanteID.TableName = Name;
                Items.Add(ISExMarcaID, ISExMarcaID.ID);
                ISExMarcaID.Owner = this;
                ISExMarcaID.OwnerID = ID;
                ISExMarcaID.TableName = Name;
                Items.Add(ISExGrupoID, ISExGrupoID.ID);
                ISExGrupoID.Owner = this;
                ISExGrupoID.OwnerID = ID;
                ISExGrupoID.TableName = Name;
                Items.Add(Nome, Nome.ID);
                Nome.Owner = this;
                Nome.OwnerID = ID;
                Nome.TableName = Name;
                Nome.Alias = "Nome";
                Items.Add(SYSxEstadoID, SYSxEstadoID.ID);
                SYSxEstadoID.Owner = this;
                SYSxEstadoID.OwnerID = ID;
                SYSxEstadoID.TableName = Name;
                SYSxEstadoID.Alias = "SYSxEstadoID";
                Items.Add(ProdutoID, ProdutoID.ID);
                ProdutoID.Owner = this;
                ProdutoID.OwnerID = ID;
                ProdutoID.TableName = Name;
            }

            public static XORMFKField ISExLinhaID = new XORMFKField(global::Projecao.Core.ISE.DB.ISEx.ISExItem.ISExLinhaID, new Guid("1B061811-6650-46E4-8329-B58F7E27835F"), "ISExLinhaID", "Linha");
            public static XORMFKField ISExTabelaID = new XORMFKField(global::Projecao.Core.ISE.DB.ISEx.ISExItem.ISExTabelaID, new Guid("9BF7A1D5-A8B9-42CD-AD77-5D7072C688BC"), "ISExTabelaID", "Tabela");
            public static XORMFaceField ISExItemID = new XORMFaceField(global::Projecao.Core.ISE.DB.ISEx.ISExItem.ISExItemID, new Guid("6E546833-C17B-4076-9564-054AD932C2B4"), "ISExItemID", "Item de Estoque");
            public static XORMFKField ISExFabricanteID = new XORMFKField(global::Projecao.Core.ISE.DB.ISEx.ISExItem.ISExFabricanteID, new Guid("1EE56540-9C02-4A2F-93C7-B45B1EB73C17"), "ISExFabricanteID", "Fabricante");
            public static XORMFKField ISExMarcaID = new XORMFKField(global::Projecao.Core.ISE.DB.ISEx.ISExItem.ISExMarcaID, new Guid("EBC45F1C-5D6B-4778-B55B-262BF2240E13"), "ISExMarcaID", "Marca");
            public static XORMFKField ISExGrupoID = new XORMFKField(global::Projecao.Core.ISE.DB.ISEx.ISExItem.ISExGrupoID, new Guid("03DAC773-7754-4AC4-80BD-0D6939C3262F"), "ISExGrupoID", "Grupo");
            public static XORMField Nome = new XORMField(global::Projecao.Core.ISE.DB.ISEx.ISExItem.Nome, new Guid("F30F70C4-4E1F-451E-8CC3-5481F08B80BB"), "Nome", "Nome");
            public static XORMStateField SYSxEstadoID = new XORMStateField(global::Projecao.Core.ISE.DB.ISEx.ISExItem.SYSxEstadoID, new Guid("C94BEBD2-DAE9-49A6-859A-558E14F0D2C6"), "SYSxEstadoID", "Estado");
            public static XORMField ProdutoID = new XORMField(global::Projecao.Core.ISE.DB.ISEx.ISExItem.ProdutoID, new Guid("D93E56EC-4D54-4804-B123-C96257949149"), "ProdutoID", "Código Legado");
        }
        #endregion xISExItem 


        #region xISExServico 
        public class xISExServico : XSVCTable
        {

            public static Guid gCID => new Guid("BD32B254-5EE2-427E-894C-BDA3CF452549");

            public xISExServico()
            {
                Name = "ISExServico";
                Alias = "ISExServico";
                ID = gCID;
                ParentID =  global::Projecao.Core.ISE.DB.ISEx.ISExServico.gCID;

                Items.Add(ISExServicoID, ISExServicoID.ID);
                ISExServicoID.Owner = this;
                ISExServicoID.OwnerID = ID;
                ISExServicoID.TableName = Name;
                ISExServicoID.Alias = "ISExServicoID";
            }

            public static XORMPKField ISExServicoID = new XORMPKField(global::Projecao.Core.ISE.DB.ISEx.ISExServico.ISExServicoID, new Guid("7A664933-C131-4CAE-8256-1FBD5C756A67"), "ISExServicoID", "Serviço");
        }
        #endregion xISExServico 


        public xISExItem ISExItem;
        public xISExServico ISExServico;
        public static readonly XORMParameterField AnimalTutorID = new XORMParameterField(new Guid("763CF44B-0F0D-410D-AA75-5219D017D02B"), "AnimalTutorID", "Animal", XGuid.CID, 0, 0, false, gCID, null);
        public static readonly XORMParameterField ItemPacote = new XORMParameterField(new Guid("0B59A3A6-C3F8-4253-91B5-3FEC24E9CDD8"), "ItemPacote", "User Data Field", XGuid.CID, 0, 0, false, gCID, null);
        public static readonly XORMParameterField QuantidadePacote = new XORMParameterField(new Guid("BB67E8BC-1644-4F4A-ABB2-85F239D16C2A"), "QuantidadePacote", "Qtde. Pacote", XInt32.CID, 0, 0, false, gCID, null);
        public static readonly XORMParameterField TutorID = new XORMParameterField(new Guid("C17D0409-EC77-4A21-A22C-C816554A8949"), "TutorID", "Tutor", XGuid.CID, 0, 0, false, gCID, null);
        public static readonly XORMParameterField Valor = new XORMParameterField(new Guid("3E0C362C-5F2C-4C74-BAC9-7B2471A96D7B"), "Valor", "Valor de Tabela", XDecimal.CID, 25, 2, false, gCID, null);

        public ServicoSVC()
        {
            TupleType = typeof(ServicoSVC.XTuple);
            DataSetType = typeof(ServicoSVC.XDataSet);
            ServiceRuleCID = new Guid("00611EA5-173D-4100-9DBD-060C0CD5070A");
            OnlyActives = true;
            Actions = XSVCAction.All;
            Type = XServiceType.Default;
            ID = new Guid("A8562BD2-C705-45A0-83AC-7C2BD26C2491");
            Name = "Servico";
            Title = "Vacina";
            IsCacheable = false;
            CompanyControl = false;
            IsJob = false;
            AutoLoad = true;
            FreeForUsers = false;
            ServerSideNewRecord = false;
            UseDistinct = false;
            CheckTenant = true;
            JobType = XJobType.Default;
            ModuleID = new Guid("E3D05D28-7014-4B59-9CB6-C283BEEFDB82");
            Rights = new Int16[] { 1, 2, 3, 4, 5, 6, 7 }; 
            FilterFormID = new Guid("2D98F46A-7439-4E12-93AF-1ACEC1C1A8A1");
            IsReadOnly = false;
            ReferenceScripts = new String[] { "TFX.Core.Service.js", "Projecao.Core.CEP.js", "Projecao.Core.ERP.js", "Projecao.Core.IMC.js", "Projecao.Core.ISE.js", "Projecao.Core.PET.js" };
            GridFields = new Guid[] { xISExItem.Nome.ID, QuantidadePacote.ID, Valor.ID };
            OrderByFields = new Guid[] { xISExItem.Nome.ID };
            DataSetFields = new Guid[] { Valor.ID, QuantidadePacote.ID, ItemPacote.ID, TutorID.ID, AnimalTutorID.ID, xISExServico.ISExServicoID.ID, xISExItem.Nome.ID, xISExItem.SYSxEstadoID.ID };
            PKField = xISExServico.ISExServicoID.ID;
            ConfigTableID = new Guid("C62F2947-B834-440D-9F60-D1731DF68BE8");
            StateField = xISExItem.SYSxEstadoID.ID;
            MasterRuleCID = new Guid("00611EA5-173D-4100-9DBD-060C0CD5070A");
            ISExItem = new xISExItem();
            ISExItem.IsReadOnly = true;
            AddTable(ISExItem);
            ISExServico = new xISExServico();
            ISExServico.IsReadOnly = true;
            AddTable(ISExServico);
            MasterTableID = ISExItem.ID;
            ISExServico_ISExServicoID_ISExItem_ISExItemID = AddReference(new XSVCReference(new Guid("C92F5CC1-9789-4BA8-A533-9E465E2D9DD8"), "FK_C92F5CC197894BA8A5339E465E2D9DD8", ServicoSVC.xISExServico.gCID, xISExServico.ISExServicoID.ID, ServicoSVC.xISExItem.gCID, xISExItem.ISExItemID.ID, XJoinType.Inner)); // ISExServico.ISExServicoID --> ISExItem.ISExItemID
            AddField(Valor);
            Valor.IsParam = true;
            AddField(QuantidadePacote);
            QuantidadePacote.IsParam = true;
            AddField(ItemPacote);
            ItemPacote.IsParam = true;
            AddField(TutorID);
            TutorID.IsParam = true;
            AddField(AnimalTutorID);
            AnimalTutorID.IsParam = true;
            AnimalTutorID.IsReadOnly = false;
            AnimalTutorID.Length = 0;
            AnimalTutorID.Scale = 0;
            AnimalTutorID.IsDataField = true;
            AnimalTutorID.AllowEmpty = true;
            xISExServico.ISExServicoID.IsReadOnly = true;
            xISExServico.ISExServicoID.IsDataField = true;
            xISExServico.ISExServicoID.AllowEmpty = true;
            ItemPacote.IsReadOnly = false;
            ItemPacote.Length = 0;
            ItemPacote.Scale = 0;
            ItemPacote.IsDataField = true;
            ItemPacote.AllowEmpty = true;
            xISExItem.Nome.IsReadOnly = true;
            xISExItem.Nome.OrderType = XOrderType.Asc;
            xISExItem.Nome.Length = 60;
            xISExItem.Nome.IsDataField = true;
            xISExItem.Nome.FilterUse = true;
            xISExItem.Nome.AllowEmpty = true;
            QuantidadePacote.IsReadOnly = false;
            QuantidadePacote.Length = 0;
            QuantidadePacote.Scale = 0;
            QuantidadePacote.IsDataField = true;
            QuantidadePacote.AllowEmpty = true;
            xISExItem.SYSxEstadoID.IsReadOnly = true;
            xISExItem.SYSxEstadoID.IsDataField = true;
            xISExItem.SYSxEstadoID.AllowEmpty = true;
            TutorID.IsReadOnly = false;
            TutorID.Length = 0;
            TutorID.Scale = 0;
            TutorID.IsDataField = true;
            TutorID.AllowEmpty = true;
            Valor.IsReadOnly = false;
            Valor.Length = 25;
            Valor.Scale = 2;
            Valor.IsDataField = true;
            Valor.AllowEmpty = true;
            xISExItem.SYSxEstadoID.DefaultValue = (Int16)1;
        }

        #region XFields

        public class XFields
        {
        public XORMField AnimalTutorID => ServicoSVC.AnimalTutorID;
        public XORMField ISExServicoID => xISExServico.ISExServicoID;
        public XORMField ItemPacote => ServicoSVC.ItemPacote;
        public XORMField Nome => xISExItem.Nome;
        public XORMField QuantidadePacote => ServicoSVC.QuantidadePacote;
        public XORMField SYSxEstadoID => xISExItem.SYSxEstadoID;
        public XORMField TutorID => ServicoSVC.TutorID;
        public XORMField Valor => ServicoSVC.Valor;
        }
        #endregion XFields
        #region ServicoSVC.XTuple

        public  class XTuple : XDataTuple
        {

            public XTuple()
            {
            }

            public XTuple(Object[] pSource)
                : base(pSource)
            {
            }

            public XTuple(Int32 pColCount)
               : this(new Object[pColCount])
            {
            }

            public readonly XFields Fields = new XFields();

            #nullable enable

        public Guid AnimalTutorID
        {
            get
            {
                return (Guid)Value[ServicoSVC.AnimalTutorID.ID];
            }
            set
            {
                Value[ServicoSVC.AnimalTutorID.ID] = value;
            }
        }
        public Guid? oAnimalTutorID
        {
            get
            {
                GetOldValue(ServicoSVC.AnimalTutorID, out Object ovlr);
                return (Guid?)ovlr;
            }
        }

        public Guid ISExServicoID
        {
            get
            {
                return (Guid)Value[ServicoSVC.xISExServico.ISExServicoID.ID];
            }
            set
            {
                Value[ServicoSVC.xISExServico.ISExServicoID.ID] = value;
            }
        }
        public Guid? oISExServicoID
        {
            get
            {
                GetOldValue(ServicoSVC.xISExServico.ISExServicoID, out Object ovlr);
                return (Guid?)ovlr;
            }
        }

        public Guid ItemPacote
        {
            get
            {
                return (Guid)Value[ServicoSVC.ItemPacote.ID];
            }
            set
            {
                Value[ServicoSVC.ItemPacote.ID] = value;
            }
        }
        public Guid? oItemPacote
        {
            get
            {
                GetOldValue(ServicoSVC.ItemPacote, out Object ovlr);
                return (Guid?)ovlr;
            }
        }

        public String Nome
        {
            get
            {
                return (String)Value[ServicoSVC.xISExItem.Nome.ID];
            }
            set
            {
                Value[ServicoSVC.xISExItem.Nome.ID] = value;
            }
        }
        public String? oNome
        {
            get
            {
                GetOldValue(ServicoSVC.xISExItem.Nome, out Object ovlr);
                return (String?)ovlr;
            }
        }

        public Int32 QuantidadePacote
        {
            get
            {
                return (Int32)Value[ServicoSVC.QuantidadePacote.ID];
            }
            set
            {
                Value[ServicoSVC.QuantidadePacote.ID] = value;
            }
        }
        public Int32? oQuantidadePacote
        {
            get
            {
                GetOldValue(ServicoSVC.QuantidadePacote, out Object ovlr);
                return (Int32?)ovlr;
            }
        }

        public Int16 SYSxEstadoID
        {
            get
            {
                return (Int16)Value[ServicoSVC.xISExItem.SYSxEstadoID.ID];
            }
            set
            {
                Value[ServicoSVC.xISExItem.SYSxEstadoID.ID] = value;
            }
        }
        public Int16? oSYSxEstadoID
        {
            get
            {
                GetOldValue(ServicoSVC.xISExItem.SYSxEstadoID, out Object ovlr);
                return (Int16?)ovlr;
            }
        }

        public Guid TutorID
        {
            get
            {
                return (Guid)Value[ServicoSVC.TutorID.ID];
            }
            set
            {
                Value[ServicoSVC.TutorID.ID] = value;
            }
        }
        public Guid? oTutorID
        {
            get
            {
                GetOldValue(ServicoSVC.TutorID, out Object ovlr);
                return (Guid?)ovlr;
            }
        }

        public Decimal Valor
        {
            get
            {
                return (Decimal)Value[ServicoSVC.Valor.ID];
            }
            set
            {
                Value[ServicoSVC.Valor.ID] = value;
            }
        }
        public Decimal? oValor
        {
            get
            {
                GetOldValue(ServicoSVC.Valor, out Object ovlr);
                return (Decimal?)ovlr;
            }
        }

            #nullable disable
        }
        #endregion ServicoSVC.XTuple

        #region ServicoSVC.XDataSet

        public class XDataSet : XDataSet<ServicoSVC.XTuple>
        {
            public XDataSet()
            {
                DataSetType = typeof(ServicoSVC.XDataSet);
            }
        }

        public class XDataSet<T> : XServiceDataSet<ServicoSVC.XTuple> where T : XDataTuple
        {

            public class xFLDs{
                public Guid AnimalTutorID => ServicoSVC.AnimalTutorID.ID;
                public Guid ISExServicoID => ServicoSVC.xISExServico.ISExServicoID.ID;
                public Guid ItemPacote => ServicoSVC.ItemPacote.ID;
                public Guid Nome => ServicoSVC.xISExItem.Nome.ID;
                public Guid QuantidadePacote => ServicoSVC.QuantidadePacote.ID;
                public Guid SYSxEstadoID => ServicoSVC.xISExItem.SYSxEstadoID.ID;
                public Guid TutorID => ServicoSVC.TutorID.ID;
                public Guid Valor => ServicoSVC.Valor.ID;
            }

            public xFLDs FLDs = new xFLDs();

            public XDataSet()
            {
                DataSetType = typeof(ServicoSVC.XDataSet);
            }

        }
        #endregion ServicoSVC.XDataSet
        #if !OnlyDef
        #region ServicoSVC.XRule
        public abstract class XRule : XServiceRule<ServicoSVC.XDataSet, ServicoSVC, ServicoSVC.XTuple>
        {
        }
        #endregion ServicoSVC.XRule

        [Guid(ServicoSVC.sCID)]
        public  interface XService : XIBaseService
        {
            new XDataSet DataSet
            {
                get;
            }
            new XTuple NewTuple(Object pPKValue = null);
             IEnumerable<XTuple> Tuples
            {
                get;
            }
             XTuple Current
            {
                get;
            }
            new XDataSet Get(XServiceData pData);
             XDataSet Get(params Object[] pWhere);
        }
        [XRegister(typeof(_Service), _Service.sCID, typeof(ServicoSVC))]
        protected class _Service : Service<ServicoSVC, XDataSet, XTuple>
        {
            public const String sCID = "D0986922-0782-41E3-91F9-35A40AD71A1C";
            public Guid gCID = new Guid(sCID);
        }

        public class Service<TModel, TDataSet, TTuple> : XBaseService<ServicoSVC, XDataSet, XTuple>, XService
             where TModel : ServicoSVC, new()
             where TDataSet : XDataSet, new()
             where TTuple : XTuple
        {
            XDataSet XService.DataSet => (XDataSet)DataSet;
            XTuple XService.NewTuple(Object pPKValue)
            {
                return (XTuple)NewTuple(pPKValue);
            }
            public new XDataTuple NewTuple(Object pPKValue = null)
            {
                return (XTuple)base.NewTuple(pPKValue);
            }
            IEnumerable<XTuple> XService.Tuples => (IEnumerable<XTuple>)Tuples;
            XTuple XService.Current => (XTuple )Current;
            XDataSet XService.Get(XServiceData pData)
            {
                return (XDataSet)Get(pData);
            }
            XDataSet XService.Get(params Object[] pWhere)
            {
                return (XDataSet)Get(pWhere);
            }
            public Service()
            {
                ID = gCID;
            }
        }
        #endif
    }

}