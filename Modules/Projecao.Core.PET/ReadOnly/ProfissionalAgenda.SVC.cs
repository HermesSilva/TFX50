//<auto-generated/>
using System;
using System.Linq;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using Newtonsoft.Json;
using TFX.Core.Model.Cache;
using TFX.Core.Model.Data;
using TFX.Core.Model.DIC.SVC;
using TFX.Core.Model.DIC.ORM;
using TFX.Core.Model.DIC.Types;
using TFX.Core.Model.Interfaces;
using TFX.Core.Model.Services;
using TFX.Core.Reflections;
using TFX.Core.Objects;
#if !OnlyDef
using TFX.Core.Service.Job;
using TFX.Core.Service.SVC;
#endif
using TFX.Core.Model.DIC.FRM;
using TFX.Core.Model.DIC.APP;
using TFX.Core.Model.DIC.RPT;

namespace Projecao.Core.PET.ReadOnly
{
    [XDASESource(@"D:\Tootega\Source\TFX20\Modules\Projecao.Core.PET\Projecao.Core.PET.csproj", @"D:\Tootega\Source\TFX20\Modules\Projecao.Core.PET\ReadOnly\ProfissionalAgenda.dssvc")]
    [XRegister(typeof(ProfissionalAgendaSVC), sCID)]
    public class ProfissionalAgendaSVC : XSVCModel
    {
        #region ProfissionalAgendaFilterFRM

        [XRegister(typeof(ProfissionalAgendaFilterFRM), sCID)]
        public class ProfissionalAgendaFilterFRM : XFRMModel
        {
            public const String sCID = "C4063BF9-2BE5-4EFB-88A5-F5579F7890ED";
            public static new readonly Guid gCID = new Guid(sCID);
            static ProfissionalAgendaFilterFRM()
            {
                gCID = new Guid(sCID);
            }
            public ProfissionalAgendaFilterFRM()
            {
                ID = gCID;
                Name = "ProfissionalAgendaFilter";
                Title = "";
                MinRows = 2;
                ConfigCID = new Guid("00000000-0000-0000-0000-000000000000");
                ConfigPKFilter = false;
                ReferenceScripts = new String[] { "TFX.Core.Service.js", "Projecao.Core.CEP.js", "Projecao.Core.ERP.js", "Projecao.Core.IMC.js", "Projecao.Core.ISE.js", "Projecao.Core.PET.js" };
                Rect = new XRect(0, 0, 250, 92);
                Style = XFRMStyle.Normal;
                ActionContext = XActionContext.All;
                AddItem(Compromisso);
                Compromisso.ForceRW = true;
                Compromisso.CanInsert = true;
                Compromisso.CanUpdate = true;
                Compromisso.RowCount = 2;
                Compromisso.ColCount = 32;
                Compromisso.RowCountSmall = 2;
                Compromisso.ColCountSmall = 32;
                Compromisso.IsHidden = false;
                Compromisso.IsHiddenSmall = false;
                Compromisso.AdditionalTitle = "";
                Compromisso.Icon = "";
                Compromisso.Location = 1;
                Compromisso.EditorCID = new Guid("F5982E79-BA45-40FB-85E1-9F2C8B90B6EF");
                Compromisso.Operator = XOperator.Like;
                Compromisso.ShowSpin = false;
                Compromisso.HotkeyChar = "";
                Compromisso.JustifyHeight = false;
                Compromisso.AllowEmpty = true;
                Compromisso.FontColor = "#000000";
                Compromisso.FontStyle = XFontStyle.Normal;
                Compromisso.ShowFooter = false;
                Compromisso.ViewSAM = new Guid("00000000-0000-0000-0000-000000000000");
                Compromisso.Order = 1;
                Compromisso.Scale = 0;
                Compromisso.Length = 0;
                Compromisso.SearchAction = XSearchAction.Default;
                Compromisso.TypeID = XString.CID;
                Compromisso.AdditionalFieldsID = new Guid[] {  };
                Compromisso.AdditionalDataFieldsID = new Guid[] {  };
                Compromisso.TargetFilterFieldID = new Guid[] {  };
                Compromisso.SourceFilterFieldID = new Guid[] {  };
                Compromisso.TargetDisplayFieldID = new Guid[] {  };
                Compromisso.SourceDisplayFieldID = new Guid[] {  };
                Compromisso.AutoLoad = false;
                Compromisso.FilterInative = true;
                Compromisso.IsAnswer = false;
                Compromisso.AllowMultiSelect = false;
            }
            public XFRMField Compromisso = new XFRMField(new Guid("76397BB5-CD58-448B-8FCB-44D447C7671D"), "Compromisso", "Compromisso", XString.CID, 2, 32, false, gCID, null, new Guid("3FED813E-62EA-48D0-848C-698C2C146DF8")); // String;
            public static class Fields
            {
                public static XFieldInfo Compromisso = new XFieldInfo(new Guid("76397BB5-CD58-448B-8FCB-44D447C7671D"), "Compromisso", "Compromisso", typeof(String), false, "");
            }
        }

        #endregion ProfissionalAgendaFilterFRM

        public const String sCID = "FCDC599C-2E13-41B2-9915-0F96461A5CF8";
        public static Guid gCID = new Guid(sCID);

        public static readonly XORMParameterField AtendimentoID = new XORMParameterField(new Guid("E9A8E485-7C93-4BF5-9C92-42386A4641D8"), "AtendimentoID", "AtendimentoID", XInt32.CID, 0, 0, false, gCID, null);
        public static readonly XORMParameterField Compromisso = new XORMParameterField(new Guid("3FED813E-62EA-48D0-848C-698C2C146DF8"), "Compromisso", "Compromisso", XString.CID, 0, 0, false, gCID, null);
        public static readonly XORMParameterField Estado = new XORMParameterField(new Guid("AD260290-C91E-49FE-971E-E1C7ADD87473"), "Estado", "Estado", XInt16.CID, 0, 0, false, gCID, null);
        public static readonly XORMParameterField Fim = new XORMParameterField(new Guid("78EF770F-E153-4096-9130-51B7D3F0569C"), "Fim", "Fim", XDateTime.CID, 0, 0, false, gCID, null);
        public static readonly XORMParameterField Inicio = new XORMParameterField(new Guid("3D9ADBE7-134E-4297-A8CF-D91516F267D3"), "Inicio", "InÃ­cio", XDateTime.CID, 0, 0, false, gCID, null);
        public static readonly XORMParameterField PrimaryKeyID = new XORMParameterField(new Guid("692172F3-67C2-4F42-9A5F-A0F084819555"), "PrimaryKeyID", "PrimaryKeyID", XInt32.CID, 0, 0, false, gCID, null);
        public static readonly XORMParameterField ProfissionalID = new XORMParameterField(new Guid("05CD3A0C-F43E-45FF-9443-05DB653C3BCF"), "ProfissionalID", "Profissional", XInt64.CID, 0, 0, false, gCID, null);

        public ProfissionalAgendaSVC()
        {
            TupleType = typeof(ProfissionalAgendaSVC.XTuple);
            DataSetType = typeof(ProfissionalAgendaSVC.XDataSet);
            ServiceRuleCID = new Guid("50E11690-726B-4FCB-88DB-889A124FBAB9");
            OnlyActives = false;
            Actions = XSVCAction.All;
            Type = XServiceType.Utility;
            ID = new Guid("FCDC599C-2E13-41B2-9915-0F96461A5CF8");
            Name = "ProfissionalAgenda";
            Title = "Agenda por Profissional";
            IsCacheable = false;
            CompanyControl = false;
            IsJob = false;
            AutoLoad = true;
            FreeForUsers = false;
            ServerSideNewRecord = false;
            UseDistinct = false;
            CheckTenant = true;
            JobType = XJobType.Default;
            ModuleID = new Guid("E3D05D28-7014-4B59-9CB6-C283BEEFDB82");
            Rights = new Int16[] { 1, 2, 3, 4, 5, 6, 7 }; 
            FilterFormID = new Guid("C4063BF9-2BE5-4EFB-88A5-F5579F7890ED");
            IsReadOnly = false;
            ReferenceScripts = new String[] { "TFX.Core.Service.js", "Projecao.Core.CEP.js", "Projecao.Core.ERP.js", "Projecao.Core.IMC.js", "Projecao.Core.ISE.js", "Projecao.Core.PET.js" };
            GridFields = new Guid[] { Inicio.ID, Fim.ID, Estado.ID, Compromisso.ID, AtendimentoID.ID };
            OrderByFields = new Guid[] { Inicio.ID, Fim.ID };
            DataSetFields = new Guid[] { Compromisso.ID, Estado.ID, Fim.ID, Inicio.ID, PrimaryKeyID.ID, ProfissionalID.ID, AtendimentoID.ID };
            PKField = PrimaryKeyID.ID;
            MasterRuleCID = new Guid("50E11690-726B-4FCB-88DB-889A124FBAB9");
            AddField(Inicio);
            Inicio.IsParam = true;
            AddField(PrimaryKeyID);
            PrimaryKeyID.IsParam = true;
            AddField(Fim);
            Fim.IsParam = true;
            AddField(Estado);
            Estado.IsParam = true;
            AddField(Compromisso);
            Compromisso.IsParam = true;
            AddField(ProfissionalID);
            ProfissionalID.IsParam = true;
            AddField(AtendimentoID);
            AtendimentoID.IsParam = true;
            AtendimentoID.IsReadOnly = false;
            AtendimentoID.Length = 0;
            AtendimentoID.Scale = 0;
            AtendimentoID.IsDataField = true;
            AtendimentoID.AllowEmpty = true;
            Compromisso.IsReadOnly = false;
            Compromisso.Length = 0;
            Compromisso.Scale = 0;
            Compromisso.IsDataField = true;
            Compromisso.AllowEmpty = true;
            Estado.IsReadOnly = false;
            Estado.Length = 0;
            Estado.Scale = 0;
            Estado.IsDataField = true;
            Estado.AllowEmpty = true;
            Fim.OrderType = XOrderType.Asc;
            Fim.IsReadOnly = false;
            Fim.Length = 0;
            Fim.Scale = 0;
            Fim.IsDataField = true;
            Fim.AllowEmpty = true;
            Inicio.OrderType = XOrderType.Asc;
            Inicio.IsReadOnly = false;
            Inicio.Length = 0;
            Inicio.Scale = 0;
            Inicio.IsDataField = true;
            Inicio.AllowEmpty = true;
            PrimaryKeyID.GeneratePK = true;
            PrimaryKeyID.IsReadOnly = false;
            PrimaryKeyID.Length = 0;
            PrimaryKeyID.Scale = 0;
            PrimaryKeyID.IsDataField = true;
            PrimaryKeyID.AllowEmpty = true;
            ProfissionalID.IsReadOnly = false;
            ProfissionalID.Length = 0;
            ProfissionalID.Scale = 0;
            ProfissionalID.IsDataField = true;
            ProfissionalID.AllowEmpty = true;
        }

        #region XFields

        public class XFields
        {
        public XORMField AtendimentoID => ProfissionalAgendaSVC.AtendimentoID;
        public XORMField Compromisso => ProfissionalAgendaSVC.Compromisso;
        public XORMField Estado => ProfissionalAgendaSVC.Estado;
        public XORMField Fim => ProfissionalAgendaSVC.Fim;
        public XORMField Inicio => ProfissionalAgendaSVC.Inicio;
        public XORMField PrimaryKeyID => ProfissionalAgendaSVC.PrimaryKeyID;
        public XORMField ProfissionalID => ProfissionalAgendaSVC.ProfissionalID;
        }
        #endregion XFields
        #region ProfissionalAgendaSVC.XTuple

        public  class XTuple : XDataTuple
        {

            public XTuple()
            {
            }

            public XTuple(Object[] pSource)
                : base(pSource)
            {
            }

            public XTuple(Int32 pColCount)
               : this(new Object[pColCount])
            {
            }

            public readonly XFields Fields = new XFields();

            #nullable enable

        public Int32 AtendimentoID
        {
            get
            {
                return (Int32)Value[ProfissionalAgendaSVC.AtendimentoID.ID];
            }
            set
            {
                Value[ProfissionalAgendaSVC.AtendimentoID.ID] = value;
            }
        }
        public Int32? oAtendimentoID
        {
            get
            {
                GetOldValue(ProfissionalAgendaSVC.AtendimentoID, out Object ovlr);
                return (Int32?)ovlr;
            }
        }

        public String Compromisso
        {
            get
            {
                return (String)Value[ProfissionalAgendaSVC.Compromisso.ID];
            }
            set
            {
                Value[ProfissionalAgendaSVC.Compromisso.ID] = value;
            }
        }
        public String? oCompromisso
        {
            get
            {
                GetOldValue(ProfissionalAgendaSVC.Compromisso, out Object ovlr);
                return (String?)ovlr;
            }
        }

        public Int16 Estado
        {
            get
            {
                return (Int16)Value[ProfissionalAgendaSVC.Estado.ID];
            }
            set
            {
                Value[ProfissionalAgendaSVC.Estado.ID] = value;
            }
        }
        public Int16? oEstado
        {
            get
            {
                GetOldValue(ProfissionalAgendaSVC.Estado, out Object ovlr);
                return (Int16?)ovlr;
            }
        }

        public DateTime Fim
        {
            get
            {
                return (DateTime)Value[ProfissionalAgendaSVC.Fim.ID];
            }
            set
            {
                Value[ProfissionalAgendaSVC.Fim.ID] = value;
            }
        }
        public DateTime? oFim
        {
            get
            {
                GetOldValue(ProfissionalAgendaSVC.Fim, out Object ovlr);
                return (DateTime?)ovlr;
            }
        }

        public DateTime Inicio
        {
            get
            {
                return (DateTime)Value[ProfissionalAgendaSVC.Inicio.ID];
            }
            set
            {
                Value[ProfissionalAgendaSVC.Inicio.ID] = value;
            }
        }
        public DateTime? oInicio
        {
            get
            {
                GetOldValue(ProfissionalAgendaSVC.Inicio, out Object ovlr);
                return (DateTime?)ovlr;
            }
        }

        public Int32 PrimaryKeyID
        {
            get
            {
                return (Int32)Value[ProfissionalAgendaSVC.PrimaryKeyID.ID];
            }
            set
            {
                Value[ProfissionalAgendaSVC.PrimaryKeyID.ID] = value;
            }
        }
        public Int32? oPrimaryKeyID
        {
            get
            {
                GetOldValue(ProfissionalAgendaSVC.PrimaryKeyID, out Object ovlr);
                return (Int32?)ovlr;
            }
        }

        public Int64 ProfissionalID
        {
            get
            {
                return (Int64)Value[ProfissionalAgendaSVC.ProfissionalID.ID];
            }
            set
            {
                Value[ProfissionalAgendaSVC.ProfissionalID.ID] = value;
            }
        }
        public Int64? oProfissionalID
        {
            get
            {
                GetOldValue(ProfissionalAgendaSVC.ProfissionalID, out Object ovlr);
                return (Int64?)ovlr;
            }
        }

            #nullable disable
        }
        #endregion ProfissionalAgendaSVC.XTuple

        #region ProfissionalAgendaSVC.XDataSet

        public class XDataSet : XDataSet<ProfissionalAgendaSVC.XTuple>
        {
            public XDataSet()
            {
                DataSetType = typeof(ProfissionalAgendaSVC.XDataSet);
            }
        }

        public class XDataSet<T> : XServiceDataSet<ProfissionalAgendaSVC.XTuple> where T : XDataTuple
        {

            public class xFLDs{
                public Guid AtendimentoID => ProfissionalAgendaSVC.AtendimentoID.ID;
                public Guid Compromisso => ProfissionalAgendaSVC.Compromisso.ID;
                public Guid Estado => ProfissionalAgendaSVC.Estado.ID;
                public Guid Fim => ProfissionalAgendaSVC.Fim.ID;
                public Guid Inicio => ProfissionalAgendaSVC.Inicio.ID;
                public Guid PrimaryKeyID => ProfissionalAgendaSVC.PrimaryKeyID.ID;
                public Guid ProfissionalID => ProfissionalAgendaSVC.ProfissionalID.ID;
            }

            public xFLDs FLDs = new xFLDs();

            public XDataSet()
            {
                DataSetType = typeof(ProfissionalAgendaSVC.XDataSet);
            }

        }
        #endregion ProfissionalAgendaSVC.XDataSet
        #if !OnlyDef
        #region ProfissionalAgendaSVC.XRule
        public abstract class XRule : XServiceUtilRule<ProfissionalAgendaSVC.XDataSet, ProfissionalAgendaSVC, ProfissionalAgendaSVC.XTuple>
        {
        }
        #endregion ProfissionalAgendaSVC.XRule

        [Guid(ProfissionalAgendaSVC.sCID)]
        public  interface XService : XIBaseService
        {
            new XDataSet DataSet
            {
                get;
            }
            new XTuple NewTuple(Object pPKValue = null);
             IEnumerable<XTuple> Tuples
            {
                get;
            }
             XTuple Current
            {
                get;
            }
            new XDataSet Get(XServiceData pData);
             XDataSet Get(params Object[] pWhere);
        }
        [XRegister(typeof(_Service), _Service.sCID, typeof(ProfissionalAgendaSVC))]
        protected class _Service : Service<ProfissionalAgendaSVC, XDataSet, XTuple>
        {
            public const String sCID = "64436F23-8AA1-457C-9596-8942BBBC7C29";
            public Guid gCID = new Guid(sCID);
        }

        public class Service<TModel, TDataSet, TTuple> : XBaseService<ProfissionalAgendaSVC, XDataSet, XTuple>, XService
             where TModel : ProfissionalAgendaSVC, new()
             where TDataSet : XDataSet, new()
             where TTuple : XTuple
        {
            XDataSet XService.DataSet => (XDataSet)DataSet;
            XTuple XService.NewTuple(Object pPKValue)
            {
                return (XTuple)NewTuple(pPKValue);
            }
            public new XDataTuple NewTuple(Object pPKValue = null)
            {
                return (XTuple)base.NewTuple(pPKValue);
            }
            IEnumerable<XTuple> XService.Tuples => (IEnumerable<XTuple>)Tuples;
            XTuple XService.Current => (XTuple )Current;
            XDataSet XService.Get(XServiceData pData)
            {
                return (XDataSet)Get(pData);
            }
            XDataSet XService.Get(params Object[] pWhere)
            {
                return (XDataSet)Get(pWhere);
            }
            public Service()
            {
                ID = gCID;
            }
        }
        #endif
    }

}