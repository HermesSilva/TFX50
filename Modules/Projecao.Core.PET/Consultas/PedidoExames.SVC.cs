//<auto-generated/>
using System;
using System.Linq;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using Newtonsoft.Json;
using TFX.Core.Model.Cache;
using TFX.Core.Model.Data;
using TFX.Core.Model.DIC.SVC;
using TFX.Core.Model.DIC.ORM;
using TFX.Core.Model.DIC.Types;
using TFX.Core.Model.Interfaces;
using TFX.Core.Model.Services;
using TFX.Core.Reflections;
using TFX.Core.Objects;
#if !OnlyDef
using TFX.Core.Service.Job;
using TFX.Core.Service.SVC;
#endif
using Projecao.Core.PET.DB;

namespace Projecao.Core.PET.Consultas
{
    [XDASESource(@"D:\Tootega\Source\TFX20\Modules\Projecao.Core.PET\Projecao.Core.PET.csproj", @"D:\Tootega\Source\TFX20\Modules\Projecao.Core.PET\Consultas\PedidoExames.dssvc")]
    [XRegister(typeof(PedidoExamesSVC), sCID)]
    public class PedidoExamesSVC : XSVCModel
    {
        public const String sCID = "E15806F6-35DA-49BE-A4EB-D03A63C30E32";
        public static Guid gCID = new Guid(sCID);

        #region xPETxPedidoExame 
        public class xPETxPedidoExame : XSVCTable
        {

            public static Guid gCID => new Guid("63BF0461-FA19-4627-9E7B-BD23DC2EB9CF");

            public xPETxPedidoExame()
            {
                Name = "PETxPedidoExame";
                Alias = "PETxPedidoExame";
                ID = gCID;
                ParentID =  global::Projecao.Core.PET.DB.PETx.PETxPedidoExame.gCID;

                Items.Add(PETxPedidoExameID, PETxPedidoExameID.ID);
                PETxPedidoExameID.Owner = this;
                PETxPedidoExameID.OwnerID = ID;
                PETxPedidoExameID.TableName = Name;
                PETxPedidoExameID.Alias = "PETxPedidoExameID";
                Items.Add(Descritivo, Descritivo.ID);
                Descritivo.Owner = this;
                Descritivo.OwnerID = ID;
                Descritivo.TableName = Name;
                Descritivo.Alias = "Descritivo";
                Items.Add(ERPxProfissionalID, ERPxProfissionalID.ID);
                ERPxProfissionalID.Owner = this;
                ERPxProfissionalID.OwnerID = ID;
                ERPxProfissionalID.TableName = Name;
                ERPxProfissionalID.Alias = "ERPxProfissionalID";
                Items.Add(Data, Data.ID);
                Data.Owner = this;
                Data.OwnerID = ID;
                Data.TableName = Name;
                Data.Alias = "Data";
                Items.Add(PETxAnamnesiaID, PETxAnamnesiaID.ID);
                PETxAnamnesiaID.Owner = this;
                PETxAnamnesiaID.OwnerID = ID;
                PETxAnamnesiaID.TableName = Name;
                PETxAnamnesiaID.Alias = "PETxAnamnesiaID";
            }

            public static XORMPKField PETxPedidoExameID = new XORMPKField(global::Projecao.Core.PET.DB.PETx.PETxPedidoExame.PETxPedidoExameID, new Guid("B5053276-892F-410E-8D54-A87A0ED37AD9"), "PETxPedidoExameID", "Pedidos de Exames");
            public static XORMField Descritivo = new XORMField(global::Projecao.Core.PET.DB.PETx.PETxPedidoExame.Descritivo, new Guid("CB0A3234-90C2-4DD5-8777-B2CF0A26E3CC"), "Descritivo", "Descritivo");
            public static XORMFKField ERPxProfissionalID = new XORMFKField(global::Projecao.Core.PET.DB.PETx.PETxPedidoExame.ERPxProfissionalID, new Guid("7C43CEEE-FBE6-4002-902A-3039B8CEEA8E"), "ERPxProfissionalID", "Profissionais");
            public static XORMDateTimeField Data = new XORMDateTimeField(global::Projecao.Core.PET.DB.PETx.PETxPedidoExame.Data, new Guid("E5FEB8DB-5DC6-4A69-BEAC-E371F9A5EA7A"), "Data", "Data");
            public static XORMFKField PETxAnamnesiaID = new XORMFKField(global::Projecao.Core.PET.DB.PETx.PETxPedidoExame.PETxAnamnesiaID, new Guid("4528638A-A922-4164-BDA6-95A60686DC5B"), "PETxAnamnesiaID", "AnamnÃ©sia");
        }
        #endregion xPETxPedidoExame 


        public xPETxPedidoExame PETxPedidoExame;

        public PedidoExamesSVC()
        {
            TupleType = typeof(PedidoExamesSVC.XTuple);
            DataSetType = typeof(PedidoExamesSVC.XDataSet);
            ServiceRuleCID = new Guid("19D64F6D-2765-4DF4-AACC-CCB4DDAD2611");
            OnlyActives = false;
            Actions = XSVCAction.All;
            Type = XServiceType.Default;
            ID = new Guid("E15806F6-35DA-49BE-A4EB-D03A63C30E32");
            Name = "PedidoExames";
            Title = "";
            IsCacheable = false;
            CompanyControl = false;
            IsJob = false;
            AutoLoad = true;
            FreeForUsers = false;
            ServerSideNewRecord = false;
            UseDistinct = false;
            CheckTenant = true;
            JobType = XJobType.Default;
            ModuleID = new Guid("E3D05D28-7014-4B59-9CB6-C283BEEFDB82");
            Rights = new Int16[] { 1, 2, 3, 4, 5, 6, 7 }; 
            IsReadOnly = false;
            ReferenceScripts = new String[] { "TFX.Core.Service.js", "Projecao.Core.CEP.js", "Projecao.Core.ERP.js", "Projecao.Core.IMC.js", "Projecao.Core.ISE.js", "Projecao.Core.PET.js" };
            GridFields = new Guid[] { xPETxPedidoExame.Data.ID };
            OrderByFields = new Guid[] { xPETxPedidoExame.Data.ID };
            DataSetFields = new Guid[] { xPETxPedidoExame.PETxPedidoExameID.ID, xPETxPedidoExame.Descritivo.ID, xPETxPedidoExame.ERPxProfissionalID.ID, xPETxPedidoExame.Data.ID, xPETxPedidoExame.PETxAnamnesiaID.ID };
            PKField = xPETxPedidoExame.PETxPedidoExameID.ID;
            ConfigTableID = new Guid("CCD0A373-6669-459D-9EDD-1CE31C6D897C");
            MasterRuleCID = new Guid("19D64F6D-2765-4DF4-AACC-CCB4DDAD2611");
            PETxPedidoExame = new xPETxPedidoExame();
            PETxPedidoExame.IsReadOnly = false;
            AddTable(PETxPedidoExame);
            MasterTableID = PETxPedidoExame.ID;
            xPETxPedidoExame.Data.OrderType = XOrderType.Asc;
            xPETxPedidoExame.Data.IsDataField = true;
            xPETxPedidoExame.Data.AllowEmpty = true;
            xPETxPedidoExame.Descritivo.IsDataField = true;
            xPETxPedidoExame.Descritivo.AllowEmpty = true;
            xPETxPedidoExame.ERPxProfissionalID.IsDataField = true;
            xPETxPedidoExame.ERPxProfissionalID.AllowEmpty = true;
            xPETxPedidoExame.PETxAnamnesiaID.IsDataField = true;
            xPETxPedidoExame.PETxAnamnesiaID.AllowEmpty = true;
            xPETxPedidoExame.PETxPedidoExameID.GeneratePK = true;
            xPETxPedidoExame.PETxPedidoExameID.IsDataField = true;
            xPETxPedidoExame.PETxPedidoExameID.AllowEmpty = true;
        }

        #region XFields

        public class XFields
        {
        public XORMField Data => xPETxPedidoExame.Data;
        public XORMField Descritivo => xPETxPedidoExame.Descritivo;
        public XORMField ERPxProfissionalID => xPETxPedidoExame.ERPxProfissionalID;
        public XORMField PETxAnamnesiaID => xPETxPedidoExame.PETxAnamnesiaID;
        public XORMField PETxPedidoExameID => xPETxPedidoExame.PETxPedidoExameID;
        }
        #endregion XFields
        #region PedidoExamesSVC.XTuple

        public  class XTuple : XDataTuple
        {

            public XTuple()
            {
            }

            public XTuple(Object[] pSource)
                : base(pSource)
            {
            }

            public XTuple(Int32 pColCount)
               : this(new Object[pColCount])
            {
            }

            public readonly XFields Fields = new XFields();

            #nullable enable

        public DateTime Data
        {
            get
            {
                return (DateTime)Value[PedidoExamesSVC.xPETxPedidoExame.Data.ID];
            }
            set
            {
                Value[PedidoExamesSVC.xPETxPedidoExame.Data.ID] = value;
            }
        }
        public DateTime? oData
        {
            get
            {
                GetOldValue(PedidoExamesSVC.xPETxPedidoExame.Data, out Object ovlr);
                return (DateTime?)ovlr;
            }
        }

        public String Descritivo
        {
            get
            {
                return (String)Value[PedidoExamesSVC.xPETxPedidoExame.Descritivo.ID];
            }
            set
            {
                Value[PedidoExamesSVC.xPETxPedidoExame.Descritivo.ID] = value;
            }
        }
        public String? oDescritivo
        {
            get
            {
                GetOldValue(PedidoExamesSVC.xPETxPedidoExame.Descritivo, out Object ovlr);
                return (String?)ovlr;
            }
        }

        public Guid ERPxProfissionalID
        {
            get
            {
                return (Guid)Value[PedidoExamesSVC.xPETxPedidoExame.ERPxProfissionalID.ID];
            }
            set
            {
                Value[PedidoExamesSVC.xPETxPedidoExame.ERPxProfissionalID.ID] = value;
            }
        }
        public Guid? oERPxProfissionalID
        {
            get
            {
                GetOldValue(PedidoExamesSVC.xPETxPedidoExame.ERPxProfissionalID, out Object ovlr);
                return (Guid?)ovlr;
            }
        }

        public Guid PETxAnamnesiaID
        {
            get
            {
                return (Guid)Value[PedidoExamesSVC.xPETxPedidoExame.PETxAnamnesiaID.ID];
            }
            set
            {
                Value[PedidoExamesSVC.xPETxPedidoExame.PETxAnamnesiaID.ID] = value;
            }
        }
        public Guid? oPETxAnamnesiaID
        {
            get
            {
                GetOldValue(PedidoExamesSVC.xPETxPedidoExame.PETxAnamnesiaID, out Object ovlr);
                return (Guid?)ovlr;
            }
        }

        public Guid PETxPedidoExameID
        {
            get
            {
                return (Guid)Value[PedidoExamesSVC.xPETxPedidoExame.PETxPedidoExameID.ID];
            }
            set
            {
                Value[PedidoExamesSVC.xPETxPedidoExame.PETxPedidoExameID.ID] = value;
            }
        }
        public Guid? oPETxPedidoExameID
        {
            get
            {
                GetOldValue(PedidoExamesSVC.xPETxPedidoExame.PETxPedidoExameID, out Object ovlr);
                return (Guid?)ovlr;
            }
        }

            #nullable disable
        }
        #endregion PedidoExamesSVC.XTuple

        #region PedidoExamesSVC.XDataSet

        public class XDataSet : XDataSet<PedidoExamesSVC.XTuple>
        {
            public XDataSet()
            {
                DataSetType = typeof(PedidoExamesSVC.XDataSet);
            }
        }

        public class XDataSet<T> : XServiceDataSet<PedidoExamesSVC.XTuple> where T : XDataTuple
        {

            public class xFLDs{
                public Guid Data => PedidoExamesSVC.xPETxPedidoExame.Data.ID;
                public Guid Descritivo => PedidoExamesSVC.xPETxPedidoExame.Descritivo.ID;
                public Guid ERPxProfissionalID => PedidoExamesSVC.xPETxPedidoExame.ERPxProfissionalID.ID;
                public Guid PETxAnamnesiaID => PedidoExamesSVC.xPETxPedidoExame.PETxAnamnesiaID.ID;
                public Guid PETxPedidoExameID => PedidoExamesSVC.xPETxPedidoExame.PETxPedidoExameID.ID;
            }

            public xFLDs FLDs = new xFLDs();

            public XDataSet()
            {
                DataSetType = typeof(PedidoExamesSVC.XDataSet);
            }

        }
        #endregion PedidoExamesSVC.XDataSet
        #if !OnlyDef
        #region PedidoExamesSVC.XRule
        public abstract class XRule : XServiceRule<PedidoExamesSVC.XDataSet, PedidoExamesSVC, PedidoExamesSVC.XTuple>
        {
        }
        #endregion PedidoExamesSVC.XRule

        [Guid(PedidoExamesSVC.sCID)]
        public  interface XService : XIBaseService
        {
            new XDataSet DataSet
            {
                get;
            }
            new XTuple NewTuple(Object pPKValue = null);
             IEnumerable<XTuple> Tuples
            {
                get;
            }
             XTuple Current
            {
                get;
            }
            new XDataSet Get(XServiceData pData);
             XDataSet Get(params Object[] pWhere);
        }
        [XRegister(typeof(_Service), _Service.sCID, typeof(PedidoExamesSVC))]
        protected class _Service : Service<PedidoExamesSVC, XDataSet, XTuple>
        {
            public const String sCID = "76BFAB8D-26B1-4BCC-B607-CDB8A0A0C033";
            public Guid gCID = new Guid(sCID);
        }

        public class Service<TModel, TDataSet, TTuple> : XBaseService<PedidoExamesSVC, XDataSet, XTuple>, XService
             where TModel : PedidoExamesSVC, new()
             where TDataSet : XDataSet, new()
             where TTuple : XTuple
        {
            XDataSet XService.DataSet => (XDataSet)DataSet;
            XTuple XService.NewTuple(Object pPKValue)
            {
                return (XTuple)NewTuple(pPKValue);
            }
            public new XDataTuple NewTuple(Object pPKValue = null)
            {
                return (XTuple)base.NewTuple(pPKValue);
            }
            IEnumerable<XTuple> XService.Tuples => (IEnumerable<XTuple>)Tuples;
            XTuple XService.Current => (XTuple )Current;
            XDataSet XService.Get(XServiceData pData)
            {
                return (XDataSet)Get(pData);
            }
            XDataSet XService.Get(params Object[] pWhere)
            {
                return (XDataSet)Get(pWhere);
            }
            public Service()
            {
                ID = gCID;
            }
        }
        #endif
    }

}