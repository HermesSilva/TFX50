//<auto-generated/>
using System;
using System.Linq;
using Newtonsoft.Json;
using TFX.Core.Objects;
using TFX.Core.Model.Data;
using TFX.Core.Model.Cache;
using TFX.Core.Reflections;
using TFX.Core.Service.Job;
using TFX.Core.Service.SVC;
using TFX.Core.Model.DIC.SVC;
using TFX.Core.Model.DIC.ORM;
using TFX.Core.Model.DIC.FRM;
using TFX.Core.Model.DIC.APP;
using TFX.Core.Model.DIC.RPT;
using TFX.Core.Model.Services;
using TFX.Core.Model.DIC.Types;
using TFX.Core.Model.Interfaces;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Projecao.Core.CRD.FechaFaturaFraqueado
{
    [XRegister(typeof(FechaFaturaFranqueadoSVC), sCID)]
    [XDASESource(@"D:\Tootega\Source\TFX20\Modules\Projecao.Core.CRD\Projecao.Core.CRD.csproj", @"D:\Tootega\Source\TFX20\Modules\Projecao.Core.CRD\FechaFaturaFraqueado\FechaFaturaFranqueado.dssvc")]
    public class FechaFaturaFranqueadoSVC : XSVCModel
    {
        #region FechaFaturaFranqueadoFilterFRM

        [XRegister(typeof(FechaFaturaFranqueadoFilterFRM), sCID)]
        public class FechaFaturaFranqueadoFilterFRM : XFRMModel
        {
            public const String sCID = "94B7B422-51A1-4965-B147-9B22FF2B22F8";
            static FechaFaturaFranqueadoFilterFRM()
            {
                gCID = new Guid(sCID);
            }
            public FechaFaturaFranqueadoFilterFRM()
            {
                ID = gCID;
                Name = "FechaFaturaFranqueadoFilter";
                Title = "";
                MinRows = 1;
                ConfigCID = new Guid("00000000-0000-0000-0000-000000000000");
                ConfigPKFilter = false;
                Rect = new XRect(0, 0, 1019, 92);
                Style = XFRMStyle.Normal;
                ActionContext = XActionContext.All;
                AddItem(FranqueadoID);
                FranqueadoID.ForceRW = true;
                FranqueadoID.CanInsert = true;
                FranqueadoID.CanUpdate = true;
                FranqueadoID.RowCount = 1;
                FranqueadoID.ColCount = 32;
                FranqueadoID.RowCountSmall = 1;
                FranqueadoID.ColCountSmall = 32;
                FranqueadoID.IsHidden = false;
                FranqueadoID.IsHiddenSmall = false;
                FranqueadoID.AdditionalTitle = "";
                FranqueadoID.Location = 1;
                FranqueadoID.EditorCID = new Guid("66290387-F0AD-4746-A1F7-B0D8D4C5C2EE");
                FranqueadoID.FormImplace = true;
                FranqueadoID.Operator = XOperator.EqualTo;
                FranqueadoID.JustifyHeight = false;
                FranqueadoID.AllowEmpty = true;
                FranqueadoID.FontColor = "#000000";
                FranqueadoID.FontStyle = XFontStyle.Normal;
                FranqueadoID.ShowFooter = false;
                FranqueadoID.ViewSAM = new Guid("00000000-0000-0000-0000-000000000000");
                FranqueadoID.Scale = 0;
                FranqueadoID.Length = 0;
                FranqueadoID.SearchAction = XSearchAction.Default;
                FranqueadoID.TypeID = XInt64.CID;
                FranqueadoID.AdditionalFieldsID = new Guid[] {  };
                FranqueadoID.AdditionalDataFieldsID = new Guid[] {  };
                FranqueadoID.TargetFilterFieldID = new Guid[] {  };
                FranqueadoID.SourceFilterFieldID = new Guid[] {  };
                FranqueadoID.TargetDisplayFieldID = new Guid[] { new Guid("D004676A-6BDE-4A71-96F6-FD600FA9533F") };
                FranqueadoID.SourceDisplayFieldID = new Guid[] { new Guid("C972E047-4809-488B-9F2A-F2EA8ED46235") };
                FranqueadoID.DataSourceID = global::Projecao.Core.CRD.ReadOnly.ConvenioSVC.gCID;
                FranqueadoID.AutoLoad = false;
                FranqueadoID.FilterInative = true;
                FranqueadoID.IsAnswer = false;
                FranqueadoID.AllowMultiSelect = false;
            }
            public XFRMField FranqueadoID = new XFRMField(new Guid("0E4C9111-B5A7-4577-904A-20830A157D4D"), "FranqueadoID", "Franqueado", XInt64.CID, 1, 32, false, gCID, null, new Guid("6CE0A484-1AAD-4C8B-8C01-A3FCFE98064F")); // Int64;
            public static class Fields
            {
                public static XFieldInfo FranqueadoID = new XFieldInfo(new Guid("0E4C9111-B5A7-4577-904A-20830A157D4D"), "FranqueadoID", "Franqueado", typeof(Int64));
            }
        }

        #endregion FechaFaturaFranqueadoFilterFRM

        public const String sCID = "14AA3B33-E49A-461B-B398-E6ED50A08A33";
        public static Guid gCID = new Guid(sCID);

        public static readonly XORMParameterField Dia = new XORMParameterField(new Guid("5815A1AD-69FA-48A7-A626-9248B3628F9C"), "Dia", "Dia", XInt32.CID, 0, 0, false, gCID, null);
        public static readonly XORMParameterField EstadoID = new XORMParameterField(new Guid("BC91C23D-5E35-4581-9C47-335EE7F53131"), "EstadoID", "Fechar", XBoolean.CID, 0, 0, false, gCID, null);
        public static readonly XORMParameterField Fim = new XORMParameterField(new Guid("197E16DF-CF92-44D8-A970-31033C2E6CCA"), "Fim", "Fim", XDate.CID, 0, 0, false, gCID, null);
        public static readonly XORMParameterField Franqueado = new XORMParameterField(new Guid("D004676A-6BDE-4A71-96F6-FD600FA9533F"), "Franqueado", "Nome do Franqueado", XString.CID, 0, 0, false, gCID, null);
        public static readonly XORMParameterField FranqueadoID = new XORMParameterField(new Guid("6CE0A484-1AAD-4C8B-8C01-A3FCFE98064F"), "FranqueadoID", "Franqueado", XInt64.CID, 0, 0, false, gCID, null);
        public static readonly XORMParameterField Inicio = new XORMParameterField(new Guid("A89E0DF4-0BB5-4448-BEE0-90C715F792E6"), "Inicio", "InÃ­cio", XDate.CID, 0, 0, false, gCID, null);
        public static readonly XORMParameterField Valor = new XORMParameterField(new Guid("14A72C24-A503-4155-840E-3B14185306C4"), "Valor", "Valor", XDecimal.CID, 0, 0, false, gCID, null);

        public FechaFaturaFranqueadoSVC()
        {
            TupleType = typeof(FechaFaturaFranqueadoSVC.XTuple);
            DataSetType = typeof(FechaFaturaFranqueadoSVC.XDataSet);
            ServiceRuleCID = new Guid("318F2FD9-6613-4BFF-A250-7CE3990CF29B");
            OnlyActives = false;
            Actions = XSVCAction.All;
            Type = XServiceType.Utility;
            ID = new Guid("14AA3B33-E49A-461B-B398-E6ED50A08A33");
            Name = "FechaFaturaFranqueado";
            Title = "Fecha Fatura Franqueado";
            IsCacheable = false;
            CompanyControl = false;
            IsJob = false;
            AutoLoad = true;
            FreeForUsers = false;
            ServerSideNewRecord = false;
            UseDistinct = false;
            JobType = XJobType.Default;
            CanExport = false;
            ModuleID = new Guid("EBB5930C-9A21-4AB6-993E-B86F40039784");
            Rights = new Int16[] { 1 }; 
            FilterFormID = new Guid("94B7B422-51A1-4965-B147-9B22FF2B22F8");
            IsReadOnly = true;
            ClientScript = "Projecao.Core.CRD.js";
            GridFields = new Guid[] { Franqueado.ID, EstadoID.ID, Valor.ID, Fim.ID, Dia.ID, Inicio.ID };
            DataSetFields = new Guid[] { FranqueadoID.ID, Dia.ID, EstadoID.ID, Franqueado.ID, Inicio.ID, Fim.ID, Valor.ID };
            PKField = FranqueadoID.ID;
            MasterRuleCID = new Guid("318F2FD9-6613-4BFF-A250-7CE3990CF29B");
            AddField(FranqueadoID);
            FranqueadoID.IsParam = true;
            AddField(EstadoID);
            EstadoID.IsParam = true;
            AddField(Franqueado);
            Franqueado.IsParam = true;
            AddField(Dia);
            Dia.IsParam = true;
            AddField(Inicio);
            Inicio.IsParam = true;
            AddField(Fim);
            Fim.IsParam = true;
            AddField(Valor);
            Valor.IsParam = true;
            Dia.IsReadOnly = false;
            Dia.Length = 0;
            Dia.Scale = 0;
            Dia.IsDataField = true;
            Dia.AllowEmpty = true;
            EstadoID.IsReadOnly = false;
            EstadoID.Length = 0;
            EstadoID.Scale = 0;
            EstadoID.IsDataField = true;
            EstadoID.AllowEmpty = true;
            Fim.IsReadOnly = false;
            Fim.Length = 0;
            Fim.Scale = 0;
            Fim.IsDataField = true;
            Fim.AllowEmpty = true;
            Franqueado.IsReadOnly = false;
            Franqueado.Length = 0;
            Franqueado.Scale = 0;
            Franqueado.IsDataField = true;
            Franqueado.AllowEmpty = true;
            FranqueadoID.GeneratePK = true;
            FranqueadoID.IsReadOnly = false;
            FranqueadoID.Length = 0;
            FranqueadoID.Scale = 0;
            FranqueadoID.IsDataField = true;
            FranqueadoID.AllowEmpty = true;
            Inicio.IsReadOnly = false;
            Inicio.Length = 0;
            Inicio.Scale = 0;
            Inicio.IsDataField = true;
            Inicio.AllowEmpty = true;
            Valor.IsReadOnly = false;
            Valor.Length = 0;
            Valor.Scale = 0;
            Valor.IsDataField = true;
            Valor.AllowEmpty = true;
        }

        #region XFields

        public class XFields
        {
        public XORMField Dia => FechaFaturaFranqueadoSVC.Dia;
        public XORMField EstadoID => FechaFaturaFranqueadoSVC.EstadoID;
        public XORMField Fim => FechaFaturaFranqueadoSVC.Fim;
        public XORMField Franqueado => FechaFaturaFranqueadoSVC.Franqueado;
        public XORMField FranqueadoID => FechaFaturaFranqueadoSVC.FranqueadoID;
        public XORMField Inicio => FechaFaturaFranqueadoSVC.Inicio;
        public XORMField Valor => FechaFaturaFranqueadoSVC.Valor;
        }
        #endregion XFields
        #region FechaFaturaFranqueadoSVC.XTuple

        public  class XTuple : XDataTuple
        {

            public XTuple()
            {
            }

            public XTuple(Object[] pSource)
                : base(pSource)
            {
            }

            public XTuple(Int32 pColCount)
               : this(new Object[pColCount])
            {
            }

            public readonly XFields Fields = new XFields();

            #nullable enable

        public Int32 Dia
        {
            get
            {
                return (Int32)Value[FechaFaturaFranqueadoSVC.Dia.ID];
            }
            set
            {
                Value[FechaFaturaFranqueadoSVC.Dia.ID] = value;
            }
        }
        public Int32? oDia
        {
            get
            {
                GetOldValue(FechaFaturaFranqueadoSVC.Dia, out Object ovlr);
                return (Int32?)ovlr;
            }
        }

        public Boolean EstadoID
        {
            get
            {
                return (Boolean)Value[FechaFaturaFranqueadoSVC.EstadoID.ID];
            }
            set
            {
                Value[FechaFaturaFranqueadoSVC.EstadoID.ID] = value;
            }
        }
        public Boolean? oEstadoID
        {
            get
            {
                GetOldValue(FechaFaturaFranqueadoSVC.EstadoID, out Object ovlr);
                return (Boolean?)ovlr;
            }
        }

        public DateTime Fim
        {
            get
            {
                return (DateTime)Value[FechaFaturaFranqueadoSVC.Fim.ID];
            }
            set
            {
                Value[FechaFaturaFranqueadoSVC.Fim.ID] = value;
            }
        }
        public DateTime? oFim
        {
            get
            {
                GetOldValue(FechaFaturaFranqueadoSVC.Fim, out Object ovlr);
                return (DateTime?)ovlr;
            }
        }

        public String Franqueado
        {
            get
            {
                return (String)Value[FechaFaturaFranqueadoSVC.Franqueado.ID];
            }
            set
            {
                Value[FechaFaturaFranqueadoSVC.Franqueado.ID] = value;
            }
        }
        public String? oFranqueado
        {
            get
            {
                GetOldValue(FechaFaturaFranqueadoSVC.Franqueado, out Object ovlr);
                return (String?)ovlr;
            }
        }

        public Int64 FranqueadoID
        {
            get
            {
                return (Int64)Value[FechaFaturaFranqueadoSVC.FranqueadoID.ID];
            }
            set
            {
                Value[FechaFaturaFranqueadoSVC.FranqueadoID.ID] = value;
            }
        }
        public Int64? oFranqueadoID
        {
            get
            {
                GetOldValue(FechaFaturaFranqueadoSVC.FranqueadoID, out Object ovlr);
                return (Int64?)ovlr;
            }
        }

        public DateTime Inicio
        {
            get
            {
                return (DateTime)Value[FechaFaturaFranqueadoSVC.Inicio.ID];
            }
            set
            {
                Value[FechaFaturaFranqueadoSVC.Inicio.ID] = value;
            }
        }
        public DateTime? oInicio
        {
            get
            {
                GetOldValue(FechaFaturaFranqueadoSVC.Inicio, out Object ovlr);
                return (DateTime?)ovlr;
            }
        }

        public Decimal Valor
        {
            get
            {
                return (Decimal)Value[FechaFaturaFranqueadoSVC.Valor.ID];
            }
            set
            {
                Value[FechaFaturaFranqueadoSVC.Valor.ID] = value;
            }
        }
        public Decimal? oValor
        {
            get
            {
                GetOldValue(FechaFaturaFranqueadoSVC.Valor, out Object ovlr);
                return (Decimal?)ovlr;
            }
        }

            #nullable disable
        }
        #endregion FechaFaturaFranqueadoSVC.XTuple

        #region FechaFaturaFranqueadoSVC.XRule
        public abstract class XRule : XServiceUtilRule<FechaFaturaFranqueadoSVC.XDataSet, FechaFaturaFranqueadoSVC, FechaFaturaFranqueadoSVC.XTuple>
        {
        }
        #endregion FechaFaturaFranqueadoSVC.XRule

        #region FechaFaturaFranqueadoSVC.XDataSet

        public class XDataSet : XDataSet<FechaFaturaFranqueadoSVC.XTuple>
        {
            public XDataSet()
            {
                DataSetType = typeof(FechaFaturaFranqueadoSVC.XDataSet);
            }
        }

        public class XDataSet<T> : XServiceDataSet<FechaFaturaFranqueadoSVC.XTuple> where T : XDataTuple
        {

            public Guid Dia => FechaFaturaFranqueadoSVC.Dia.ID;
            public Guid EstadoID => FechaFaturaFranqueadoSVC.EstadoID.ID;
            public Guid Fim => FechaFaturaFranqueadoSVC.Fim.ID;
            public Guid Franqueado => FechaFaturaFranqueadoSVC.Franqueado.ID;
            public Guid FranqueadoID => FechaFaturaFranqueadoSVC.FranqueadoID.ID;
            public Guid Inicio => FechaFaturaFranqueadoSVC.Inicio.ID;
            public Guid Valor => FechaFaturaFranqueadoSVC.Valor.ID;

            public XDataSet()
            {
                DataSetType = typeof(FechaFaturaFranqueadoSVC.XDataSet);
            }

        }
        #endregion FechaFaturaFranqueadoSVC.XDataSet

        [Guid(FechaFaturaFranqueadoSVC.sCID)]
        public  interface XService : XIBaseService
        {
            new XDataSet DataSet
            {
                get;
            }
            new XTuple NewTuple(Object pPKValue = null);
             IEnumerable<XTuple> Tuples
            {
                get;
            }
             XTuple Current
            {
                get;
            }
            new XDataSet Get(XServiceData pData);
             XDataSet Get(params Object[] pWhere);
        }
        [XRegister(typeof(_Service), _Service.sCID, typeof(FechaFaturaFranqueadoSVC))]
        protected class _Service : Service<FechaFaturaFranqueadoSVC, XDataSet, XTuple>
        {
            public const String sCID = "075F38BC-BE27-43E4-87E4-AFF6EFD64D4B";
            public Guid gCID = new Guid(sCID);
        }

        public class Service<TModel, TDataSet, TTuple> : XBaseService<FechaFaturaFranqueadoSVC, XDataSet, XTuple>, XService
             where TModel : FechaFaturaFranqueadoSVC, new()
             where TDataSet : XDataSet, new()
             where TTuple : XTuple
        {
            XDataSet XService.DataSet => (XDataSet)DataSet;
            XTuple XService.NewTuple(Object pPKValue)
            {
                return (XTuple)NewTuple(pPKValue);
            }
            public new XDataTuple NewTuple(Object pPKValue = null)
            {
                return (XTuple)base.NewTuple(pPKValue);
            }
            IEnumerable<XTuple> XService.Tuples => (IEnumerable<XTuple>)Tuples;
            XTuple XService.Current => (XTuple )Current;
            XDataSet XService.Get(XServiceData pData)
            {
                return (XDataSet)Get(pData);
            }
            XDataSet XService.Get(params Object[] pWhere)
            {
                return (XDataSet)Get(pWhere);
            }
            public Service()
            {
                ID = gCID;
            }
        }
    }

}