//<auto-generated/>
using System;
using System.Linq;
using Newtonsoft.Json;
using TFX.Core.Objects;
using TFX.Core.Model.Data;
using TFX.Core.Model.Cache;
using TFX.Core.Reflections;
using TFX.Core.Service.Job;
using TFX.Core.Service.SVC;
using Projecao.Core.CRD.DB;
using TFX.Core.Service.Apps;
using TFX.Core.Model.DIC.SVC;
using TFX.Core.Model.DIC.ORM;
using TFX.Core.Model.DIC.FRM;
using TFX.Core.Model.DIC.APP;
using TFX.Core.Model.DIC.RPT;
using TFX.Core.Model.Services;
using TFX.Core.Model.DIC.Types;
using TFX.Core.Model.Interfaces;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Projecao.Core.CRD.FaturaCartao
{
    [XRegister(typeof(FaturaCartaoSVC), sCID)]
    [XDASESource(@"D:\Tootega\Source\TFX20\Modules\Projecao.Core.CRD\Projecao.Core.CRD.csproj", @"D:\Tootega\Source\TFX20\Modules\Projecao.Core.CRD\FaturaCartao\FaturaCartao.dssvc")]
    public class FaturaCartaoSVC : XSVCModel
    {
        #region FaturaCartaoFilterFRM

        [XRegister(typeof(FaturaCartaoFilterFRM), sCID)]
        public class FaturaCartaoFilterFRM : XFRMModel
        {
            public const String sCID = "A6D41C9B-E10F-4AAC-9302-6369AE89CDEC";
            static FaturaCartaoFilterFRM()
            {
                gCID = new Guid(sCID);
            }
            public FaturaCartaoFilterFRM()
            {
                ID = gCID;
                Name = "FaturaCartaoFilter";
                Title = "";
                MinRows = 1;
                ConfigCID = new Guid("00000000-0000-0000-0000-000000000000");
                ConfigPKFilter = false;
                Rect = new XRect(0, 0, 889, 50);
                Style = XFRMStyle.Normal;
                ActionContext = XActionContext.All;
                AddItem(CRDxConvenioID);
                CRDxConvenioID.ForceRW = true;
                CRDxConvenioID.CanInsert = true;
                CRDxConvenioID.CanUpdate = true;
                CRDxConvenioID.RowCount = 1;
                CRDxConvenioID.ColCount = 18;
                CRDxConvenioID.RowCountSmall = 1;
                CRDxConvenioID.ColCountSmall = 18;
                CRDxConvenioID.IsHidden = false;
                CRDxConvenioID.IsHiddenSmall = false;
                CRDxConvenioID.AdditionalTitle = "";
                CRDxConvenioID.Location = 1;
                CRDxConvenioID.EditorCID = new Guid("66290387-F0AD-4746-A1F7-B0D8D4C5C2EE");
                CRDxConvenioID.FormImplace = true;
                CRDxConvenioID.Operator = XOperator.EqualTo;
                CRDxConvenioID.JustifyHeight = false;
                CRDxConvenioID.AllowEmpty = true;
                CRDxConvenioID.FontColor = "#000000";
                CRDxConvenioID.FontStyle = XFontStyle.Normal;
                CRDxConvenioID.ShowFooter = false;
                CRDxConvenioID.ViewSAM = new Guid("00000000-0000-0000-0000-000000000000");
                CRDxConvenioID.Scale = 0;
                CRDxConvenioID.Length = 0;
                CRDxConvenioID.SearchAction = XSearchAction.Default;
                CRDxConvenioID.TypeID = XInt64.CID;
                CRDxConvenioID.AdditionalFieldsID = new Guid[] {  };
                CRDxConvenioID.AdditionalDataFieldsID = new Guid[] {  };
                CRDxConvenioID.TargetFilterFieldID = new Guid[] {  };
                CRDxConvenioID.SourceFilterFieldID = new Guid[] {  };
                CRDxConvenioID.TargetDisplayFieldID = new Guid[] { new Guid("544C2953-B1DE-4D53-914F-5C32EE758908") };
                CRDxConvenioID.SourceDisplayFieldID = new Guid[] { new Guid("C972E047-4809-488B-9F2A-F2EA8ED46235") };
                CRDxConvenioID.DataSourceID = global::Projecao.Core.CRD.ReadOnly.ConvenioSVC.gCID;
                CRDxConvenioID.AutoLoad = false;
                CRDxConvenioID.FilterInative = true;
                CRDxConvenioID.IsAnswer = false;
                CRDxConvenioID.AllowMultiSelect = false;
                AddItem(Inicio);
                Inicio.ForceRW = true;
                Inicio.CanInsert = true;
                Inicio.CanUpdate = true;
                Inicio.RowCount = 1;
                Inicio.ColCount = 7;
                Inicio.RowCountSmall = 1;
                Inicio.ColCountSmall = 7;
                Inicio.IsHidden = false;
                Inicio.IsHiddenSmall = false;
                Inicio.AdditionalTitle = "";
                Inicio.Location = 2;
                Inicio.EditorCID = new Guid("D56E8E17-9D09-4FE9-9A30-A6AA5865ABC6");
                Inicio.FormImplace = true;
                Inicio.Operator = XOperator.EqualTo;
                Inicio.JustifyHeight = false;
                Inicio.AllowEmpty = true;
                Inicio.FontColor = "#000000";
                Inicio.FontStyle = XFontStyle.Normal;
                Inicio.ShowFooter = false;
                Inicio.ViewSAM = new Guid("00000000-0000-0000-0000-000000000000");
                Inicio.Scale = 0;
                Inicio.Length = 0;
                Inicio.SearchAction = XSearchAction.Default;
                Inicio.TypeID = XDateTime.CID;
                Inicio.AdditionalFieldsID = new Guid[] {  };
                Inicio.AdditionalDataFieldsID = new Guid[] {  };
                Inicio.TargetFilterFieldID = new Guid[] {  };
                Inicio.SourceFilterFieldID = new Guid[] {  };
                Inicio.TargetDisplayFieldID = new Guid[] {  };
                Inicio.SourceDisplayFieldID = new Guid[] {  };
                Inicio.AutoLoad = false;
                Inicio.FilterInative = true;
                Inicio.IsAnswer = false;
                Inicio.AllowMultiSelect = false;
                AddItem(Fim);
                Fim.ForceRW = true;
                Fim.CanInsert = true;
                Fim.CanUpdate = true;
                Fim.RowCount = 1;
                Fim.ColCount = 7;
                Fim.RowCountSmall = 1;
                Fim.ColCountSmall = 7;
                Fim.IsHidden = false;
                Fim.IsHiddenSmall = false;
                Fim.AdditionalTitle = "";
                Fim.Location = 3;
                Fim.EditorCID = new Guid("D56E8E17-9D09-4FE9-9A30-A6AA5865ABC6");
                Fim.FormImplace = true;
                Fim.Operator = XOperator.EqualTo;
                Fim.JustifyHeight = false;
                Fim.AllowEmpty = true;
                Fim.FontColor = "#000000";
                Fim.FontStyle = XFontStyle.Normal;
                Fim.ShowFooter = false;
                Fim.ViewSAM = new Guid("00000000-0000-0000-0000-000000000000");
                Fim.Scale = 0;
                Fim.Length = 0;
                Fim.SearchAction = XSearchAction.Default;
                Fim.TypeID = XDateTime.CID;
                Fim.AdditionalFieldsID = new Guid[] {  };
                Fim.AdditionalDataFieldsID = new Guid[] {  };
                Fim.TargetFilterFieldID = new Guid[] {  };
                Fim.SourceFilterFieldID = new Guid[] {  };
                Fim.TargetDisplayFieldID = new Guid[] {  };
                Fim.SourceDisplayFieldID = new Guid[] {  };
                Fim.AutoLoad = false;
                Fim.FilterInative = true;
                Fim.IsAnswer = false;
                Fim.AllowMultiSelect = false;
            }
            public XFRMField CRDxConvenioID = new XFRMField(new Guid("D4892729-EBD1-4954-85FD-EDE7B7161D96"), "CRDxConvenioID", "Convênio", XInt64.CID, 1, 18, false, gCID, null, new Guid("2F6502A0-4004-4BB3-9179-C6C6F46A6488")); // Int64;
            public XFRMField Inicio = new XFRMField(new Guid("F6B584AD-51BC-4213-99BC-C5A1EBB0391A"), "Inicio", "Início", XDateTime.CID, 1, 7, false, gCID, null, new Guid("3B2F148A-69BA-4196-9F66-025A500CC413")); // DateTime;
            public XFRMField Fim = new XFRMField(new Guid("0217042F-2CB6-48AC-B6E6-6C321BB537D2"), "Fim", "Fim", XDateTime.CID, 1, 7, false, gCID, null, new Guid("ECEC9DAD-17C4-449C-9959-A97FC27EFD7F")); // DateTime;
            public static class Fields
            {
                public static XFieldInfo CRDxConvenioID = new XFieldInfo(new Guid("D4892729-EBD1-4954-85FD-EDE7B7161D96"), "CRDxConvenioID", "Convênio", typeof(Int64));
                public static XFieldInfo Inicio = new XFieldInfo(new Guid("F6B584AD-51BC-4213-99BC-C5A1EBB0391A"), "Inicio", "Início", typeof(DateTime));
                public static XFieldInfo Fim = new XFieldInfo(new Guid("0217042F-2CB6-48AC-B6E6-6C321BB537D2"), "Fim", "Fim", typeof(DateTime));
            }
        }

        #endregion FaturaCartaoFilterFRM

        public const String sCID = "03FF9EC7-290C-40CA-95B9-102C58A2A131";
        public static Guid gCID = new Guid(sCID);
        public static XSVCReference CRDxConvenio_CRDxConvenioID_SYSxPessoa_SYSxPessoaID; // CRDxConvenio.CRDxConvenioID --> SYSxPessoa.SYSxPessoaID
        public static XSVCReference CRDxFaturaCartao_CRDxConvenioID_CRDxConvenio_CRDxConvenioID; // CRDxFaturaCartao.CRDxConvenioID --> CRDxConvenio.CRDxConvenioID

        #region xSYSxPessoa 
        public class xSYSxPessoa : XSVCTable
        {

            public static Guid gCID => new Guid("4934BAC7-9891-4163-AF6C-5DF6C1FD60A4");

            public xSYSxPessoa()
            {
                Name = "SYSxPessoa";
                Alias = "SYSxPessoa";
                ID = gCID;
                ParentID =  global::TFX.Core.Service.Apps.SYSx.SYSxPessoa.gCID;

                Items.Add(Nome, Nome.ID);
                Nome.Owner = this;
                Nome.OwnerID = ID;
                Nome.TableName = Name;
                Nome.Alias = "Nome";
                Items.Add(SYSxPessoaID, SYSxPessoaID.ID);
                SYSxPessoaID.Owner = this;
                SYSxPessoaID.OwnerID = ID;
                SYSxPessoaID.TableName = Name;
            }

            public static XORMFaceField Nome = new XORMFaceField(global::TFX.Core.Service.Apps.SYSx.SYSxPessoa.Nome, new Guid("544C2953-B1DE-4D53-914F-5C32EE758908"), "Nome", "Nome");
            public static XORMPKField SYSxPessoaID = new XORMPKField(global::TFX.Core.Service.Apps.SYSx.SYSxPessoa.SYSxPessoaID, new Guid("9AD204D1-ABE8-4067-A417-06130097A140"), "SYSxPessoaID", "Pessoas");
        }
        #endregion xSYSxPessoa 


        #region xCRDxFaturaCartao 
        public class xCRDxFaturaCartao : XSVCTable
        {

            public static Guid gCID => new Guid("900F8EEE-BAFC-4D8E-B659-F87B65479163");

            public xCRDxFaturaCartao()
            {
                Name = "CRDxFaturaCartao";
                Alias = "CRDxFaturaCartao";
                ID = gCID;
                ParentID =  global::Projecao.Core.CRD.DB.CRDx.CRDxFaturaCartao.gCID;

                Items.Add(CRDxFaturaCartaoID, CRDxFaturaCartaoID.ID);
                CRDxFaturaCartaoID.Owner = this;
                CRDxFaturaCartaoID.OwnerID = ID;
                CRDxFaturaCartaoID.TableName = Name;
                CRDxFaturaCartaoID.Alias = "CRDxFaturaCartaoID";
                Items.Add(Inicio, Inicio.ID);
                Inicio.Owner = this;
                Inicio.OwnerID = ID;
                Inicio.TableName = Name;
                Inicio.Alias = "Inicio";
                Items.Add(SYSxEstadoID, SYSxEstadoID.ID);
                SYSxEstadoID.Owner = this;
                SYSxEstadoID.OwnerID = ID;
                SYSxEstadoID.TableName = Name;
                Items.Add(Valor, Valor.ID);
                Valor.Owner = this;
                Valor.OwnerID = ID;
                Valor.TableName = Name;
                Valor.Alias = "Valor";
                Items.Add(Fim, Fim.ID);
                Fim.Owner = this;
                Fim.OwnerID = ID;
                Fim.TableName = Name;
                Fim.Alias = "Fim";
                Items.Add(QuantidadeVenda, QuantidadeVenda.ID);
                QuantidadeVenda.Owner = this;
                QuantidadeVenda.OwnerID = ID;
                QuantidadeVenda.TableName = Name;
                Items.Add(CRDxConvenioID, CRDxConvenioID.ID);
                CRDxConvenioID.Owner = this;
                CRDxConvenioID.OwnerID = ID;
                CRDxConvenioID.TableName = Name;
                Items.Add(CRDxFaturaEstadoID, CRDxFaturaEstadoID.ID);
                CRDxFaturaEstadoID.Owner = this;
                CRDxFaturaEstadoID.OwnerID = ID;
                CRDxFaturaEstadoID.TableName = Name;
            }

            public static XORMPKField CRDxFaturaCartaoID = new XORMPKField(global::Projecao.Core.CRD.DB.CRDx.CRDxFaturaCartao.CRDxFaturaCartaoID, new Guid("BACF0AC8-7B61-4549-923E-18E9A0BF53BC"), "CRDxFaturaCartaoID", "Faturas por Cartão");
            public static XORMDateTimeField Inicio = new XORMDateTimeField(global::Projecao.Core.CRD.DB.CRDx.CRDxFaturaCartao.Inicio, new Guid("3B2F148A-69BA-4196-9F66-025A500CC413"), "Inicio", "Início");
            public static XORMStateField SYSxEstadoID = new XORMStateField(global::Projecao.Core.CRD.DB.CRDx.CRDxFaturaCartao.SYSxEstadoID, new Guid("8146C2C3-DFAC-428C-B86A-5246E61143E7"), "SYSxEstadoID", "Estado");
            public static XORMDecimalField Valor = new XORMDecimalField(global::Projecao.Core.CRD.DB.CRDx.CRDxFaturaCartao.Valor, new Guid("8BF81436-E4A8-42BC-BB21-722ACA767355"), "Valor", "Valor");
            public static XORMDateTimeField Fim = new XORMDateTimeField(global::Projecao.Core.CRD.DB.CRDx.CRDxFaturaCartao.Fim, new Guid("ECEC9DAD-17C4-449C-9959-A97FC27EFD7F"), "Fim", "Fim");
            public static XORMField QuantidadeVenda = new XORMField(global::Projecao.Core.CRD.DB.CRDx.CRDxFaturaCartao.QuantidadeVenda, new Guid("9B410F15-1AB1-4F6D-AAC0-8276933C3C01"), "QuantidadeVenda", "Quantidade de Vendas");
            public static XORMFKField CRDxConvenioID = new XORMFKField(global::Projecao.Core.CRD.DB.CRDx.CRDxFaturaCartao.CRDxConvenioID, new Guid("08A4CAB5-EB64-40FA-850B-0E022638858E"), "CRDxConvenioID", "Convênio");
            public static XORMFKField CRDxFaturaEstadoID = new XORMFKField(global::Projecao.Core.CRD.DB.CRDx.CRDxFaturaCartao.CRDxFaturaEstadoID, new Guid("E53C4F88-ED8E-4DF8-A894-4AD625714708"), "CRDxFaturaEstadoID", "Estado da Fatura");
        }
        #endregion xCRDxFaturaCartao 


        #region xCRDxConvenio 
        public class xCRDxConvenio : XSVCTable
        {

            public static Guid gCID => new Guid("B5D6915B-479F-42DC-9E7C-86BC35A0AA54");

            public xCRDxConvenio()
            {
                Name = "CRDxConvenio";
                Alias = "CRDxConvenio";
                ID = gCID;
                ParentID =  global::Projecao.Core.CRD.DB.CRDx.CRDxConvenio.gCID;

                Items.Add(CRDxConvenioID, CRDxConvenioID.ID);
                CRDxConvenioID.Owner = this;
                CRDxConvenioID.OwnerID = ID;
                CRDxConvenioID.TableName = Name;
                Items.Add(Inicio, Inicio.ID);
                Inicio.Owner = this;
                Inicio.OwnerID = ID;
                Inicio.TableName = Name;
                Items.Add(Pagamento, Pagamento.ID);
                Pagamento.Owner = this;
                Pagamento.OwnerID = ID;
                Pagamento.TableName = Name;
                Items.Add(Fechamento, Fechamento.ID);
                Fechamento.Owner = this;
                Fechamento.OwnerID = ID;
                Fechamento.TableName = Name;
                Items.Add(SYSxEstadoID, SYSxEstadoID.ID);
                SYSxEstadoID.Owner = this;
                SYSxEstadoID.OwnerID = ID;
                SYSxEstadoID.TableName = Name;
                Items.Add(CRDxConvenioTipoID, CRDxConvenioTipoID.ID);
                CRDxConvenioTipoID.Owner = this;
                CRDxConvenioTipoID.OwnerID = ID;
                CRDxConvenioTipoID.TableName = Name;
            }

            public static XORMFaceField CRDxConvenioID = new XORMFaceField(global::Projecao.Core.CRD.DB.CRDx.CRDxConvenio.CRDxConvenioID, new Guid("2F6502A0-4004-4BB3-9179-C6C6F46A6488"), "CRDxConvenioID", "Convênio");
            public static XORMDateTimeField Inicio = new XORMDateTimeField(global::Projecao.Core.CRD.DB.CRDx.CRDxConvenio.Inicio, new Guid("56127CA1-9B97-4F43-BED9-2600CDC9F61C"), "Inicio", "Início");
            public static XORMField Pagamento = new XORMField(global::Projecao.Core.CRD.DB.CRDx.CRDxConvenio.Pagamento, new Guid("556CA15E-9E2B-4B34-9912-C05F7DB4D6BB"), "Pagamento", "Dia de Pagamento");
            public static XORMField Fechamento = new XORMField(global::Projecao.Core.CRD.DB.CRDx.CRDxConvenio.Fechamento, new Guid("5530170E-A70E-459C-8683-40757233B47F"), "Fechamento", "Dia de Fechamento");
            public static XORMStateField SYSxEstadoID = new XORMStateField(global::Projecao.Core.CRD.DB.CRDx.CRDxConvenio.SYSxEstadoID, new Guid("F9DB67B0-ECD8-4BBB-904F-9A2451468C9A"), "SYSxEstadoID", "Estado");
            public static XORMFKField CRDxConvenioTipoID = new XORMFKField(global::Projecao.Core.CRD.DB.CRDx.CRDxConvenio.CRDxConvenioTipoID, new Guid("5F815559-6F94-4B0D-BA7E-48DA54851EE3"), "CRDxConvenioTipoID", "Tipo de Convênio");
        }
        #endregion xCRDxConvenio 


        public xCRDxConvenio CRDxConvenio;
        public xCRDxFaturaCartao CRDxFaturaCartao;
        public xSYSxPessoa SYSxPessoa;

        public FaturaCartaoSVC()
        {
            TupleType = typeof(FaturaCartaoSVC.XTuple);
            DataSetType = typeof(FaturaCartaoSVC.XDataSet);
            ServiceRuleCID = new Guid("E6255E24-A959-437B-9378-4C295A0A635C");
            OnlyActives = false;
            Actions = XSVCAction.All;
            Type = XServiceType.Default;
            ID = new Guid("03FF9EC7-290C-40CA-95B9-102C58A2A131");
            Name = "FaturaCartao";
            Title = "Faturas por Cartão";
            IsCacheable = false;
            CompanyControl = false;
            IsJob = false;
            AutoLoad = true;
            FreeForUsers = false;
            ServerSideNewRecord = false;
            UseDistinct = false;
            JobType = XJobType.Default;
            CanExport = false;
            ModuleID = new Guid("EBB5930C-9A21-4AB6-993E-B86F40039784");
            Rights = new Int16[] { 1 }; 
            FilterFormID = new Guid("A6D41C9B-E10F-4AAC-9302-6369AE89CDEC");
            IsReadOnly = true;
            ClientScript = "Projecao.Core.CRD.js";
            GridFields = new Guid[] { xSYSxPessoa.Nome.ID, xCRDxFaturaCartao.Inicio.ID, xCRDxFaturaCartao.Fim.ID, xCRDxFaturaCartao.Valor.ID };
            DataSetFields = new Guid[] { xCRDxFaturaCartao.Fim.ID, xSYSxPessoa.Nome.ID, xCRDxFaturaCartao.Inicio.ID, xCRDxFaturaCartao.Valor.ID, xCRDxFaturaCartao.CRDxFaturaCartaoID.ID };
            PKField = xCRDxFaturaCartao.CRDxFaturaCartaoID.ID;
            ConfigTableID = new Guid("F11F4171-D96C-4794-B3D7-0D9772272B0E");
            MasterRuleCID = new Guid("E6255E24-A959-437B-9378-4C295A0A635C");
            CRDxConvenio = new xCRDxConvenio();
            CRDxConvenio.IsReadOnly = true;
            AddTable(CRDxConvenio);
            CRDxFaturaCartao = new xCRDxFaturaCartao();
            CRDxFaturaCartao.IsReadOnly = true;
            AddTable(CRDxFaturaCartao);
            SYSxPessoa = new xSYSxPessoa();
            SYSxPessoa.IsReadOnly = true;
            AddTable(SYSxPessoa);
            MasterTableID = CRDxFaturaCartao.ID;
            CRDxConvenio_CRDxConvenioID_SYSxPessoa_SYSxPessoaID = AddReference(new XSVCReference(new Guid("3D534DFB-3206-4E91-A057-A6B19FA747E3"), "FK_3D534DFB32064E91A057A6B19FA747E3", FaturaCartaoSVC.xCRDxConvenio.gCID, xCRDxConvenio.CRDxConvenioID.ID, FaturaCartaoSVC.xSYSxPessoa.gCID, xSYSxPessoa.SYSxPessoaID.ID, XJoinType.Inner)); // CRDxConvenio.CRDxConvenioID --> SYSxPessoa.SYSxPessoaID
            CRDxFaturaCartao_CRDxConvenioID_CRDxConvenio_CRDxConvenioID = AddReference(new XSVCReference(new Guid("618B9A9F-9F99-45EE-A99B-C639177831A7"), "FK_618B9A9F9F9945EEA99BC639177831A7", FaturaCartaoSVC.xCRDxFaturaCartao.gCID, xCRDxFaturaCartao.CRDxConvenioID.ID, FaturaCartaoSVC.xCRDxConvenio.gCID, xCRDxConvenio.CRDxConvenioID.ID, XJoinType.Inner)); // CRDxFaturaCartao.CRDxConvenioID --> CRDxConvenio.CRDxConvenioID
            xCRDxFaturaCartao.CRDxFaturaCartaoID.IsReadOnly = true;
            xCRDxFaturaCartao.CRDxFaturaCartaoID.IsDataField = true;
            xCRDxFaturaCartao.CRDxFaturaCartaoID.AllowEmpty = true;
            xCRDxFaturaCartao.Fim.IsReadOnly = true;
            xCRDxFaturaCartao.Fim.IsDataField = true;
            xCRDxFaturaCartao.Fim.AllowEmpty = true;
            xCRDxFaturaCartao.Inicio.IsReadOnly = true;
            xCRDxFaturaCartao.Inicio.IsDataField = true;
            xCRDxFaturaCartao.Inicio.AllowEmpty = true;
            xSYSxPessoa.Nome.IsReadOnly = true;
            xSYSxPessoa.Nome.Length = 256;
            xSYSxPessoa.Nome.IsDataField = true;
            xSYSxPessoa.Nome.AllowEmpty = true;
            xCRDxFaturaCartao.Valor.IsReadOnly = true;
            xCRDxFaturaCartao.Valor.Length = 20;
            xCRDxFaturaCartao.Valor.Scale = 2;
            xCRDxFaturaCartao.Valor.IsDataField = true;
            xCRDxFaturaCartao.Valor.AllowEmpty = true;
        }

        #region XFields

        public class XFields
        {
        public XORMField CRDxFaturaCartaoID => xCRDxFaturaCartao.CRDxFaturaCartaoID;
        public XORMField Fim => xCRDxFaturaCartao.Fim;
        public XORMField Inicio => xCRDxFaturaCartao.Inicio;
        public XORMField Nome => xSYSxPessoa.Nome;
        public XORMField Valor => xCRDxFaturaCartao.Valor;
        }
        #endregion XFields
        #region FaturaCartaoSVC.XTuple

        public  class XTuple : XDataTuple
        {

            public XTuple()
            {
            }

            public XTuple(Object[] pSource)
                : base(pSource)
            {
            }

            public XTuple(Int32 pColCount)
               : this(new Object[pColCount])
            {
            }

            public readonly XFields Fields = new XFields();

            #nullable enable

        public Int32 CRDxFaturaCartaoID
        {
            get
            {
                return (Int32)Value[FaturaCartaoSVC.xCRDxFaturaCartao.CRDxFaturaCartaoID.ID];
            }
            set
            {
                Value[FaturaCartaoSVC.xCRDxFaturaCartao.CRDxFaturaCartaoID.ID] = value;
            }
        }
        public Int32? oCRDxFaturaCartaoID
        {
            get
            {
                GetOldValue(FaturaCartaoSVC.xCRDxFaturaCartao.CRDxFaturaCartaoID, out Object ovlr);
                return (Int32?)ovlr;
            }
        }

        public DateTime Fim
        {
            get
            {
                return (DateTime)Value[FaturaCartaoSVC.xCRDxFaturaCartao.Fim.ID];
            }
            set
            {
                Value[FaturaCartaoSVC.xCRDxFaturaCartao.Fim.ID] = value;
            }
        }
        public DateTime? oFim
        {
            get
            {
                GetOldValue(FaturaCartaoSVC.xCRDxFaturaCartao.Fim, out Object ovlr);
                return (DateTime?)ovlr;
            }
        }

        public DateTime Inicio
        {
            get
            {
                return (DateTime)Value[FaturaCartaoSVC.xCRDxFaturaCartao.Inicio.ID];
            }
            set
            {
                Value[FaturaCartaoSVC.xCRDxFaturaCartao.Inicio.ID] = value;
            }
        }
        public DateTime? oInicio
        {
            get
            {
                GetOldValue(FaturaCartaoSVC.xCRDxFaturaCartao.Inicio, out Object ovlr);
                return (DateTime?)ovlr;
            }
        }

        public String Nome
        {
            get
            {
                return (String)Value[FaturaCartaoSVC.xSYSxPessoa.Nome.ID];
            }
            set
            {
                Value[FaturaCartaoSVC.xSYSxPessoa.Nome.ID] = value;
            }
        }
        public String? oNome
        {
            get
            {
                GetOldValue(FaturaCartaoSVC.xSYSxPessoa.Nome, out Object ovlr);
                return (String?)ovlr;
            }
        }

        public Decimal Valor
        {
            get
            {
                return (Decimal)Value[FaturaCartaoSVC.xCRDxFaturaCartao.Valor.ID];
            }
            set
            {
                Value[FaturaCartaoSVC.xCRDxFaturaCartao.Valor.ID] = value;
            }
        }
        public Decimal? oValor
        {
            get
            {
                GetOldValue(FaturaCartaoSVC.xCRDxFaturaCartao.Valor, out Object ovlr);
                return (Decimal?)ovlr;
            }
        }

            #nullable disable
        }
        #endregion FaturaCartaoSVC.XTuple

        #region FaturaCartaoSVC.XRule
        public abstract class XRule : XServiceRule<FaturaCartaoSVC.XDataSet, FaturaCartaoSVC, FaturaCartaoSVC.XTuple>
        {
        }
        #endregion FaturaCartaoSVC.XRule

        #region FaturaCartaoSVC.XDataSet

        public class XDataSet : XDataSet<FaturaCartaoSVC.XTuple>
        {
            public XDataSet()
            {
                DataSetType = typeof(FaturaCartaoSVC.XDataSet);
            }
        }

        public class XDataSet<T> : XServiceDataSet<FaturaCartaoSVC.XTuple> where T : XDataTuple
        {

            public Guid CRDxFaturaCartaoID => FaturaCartaoSVC.xCRDxFaturaCartao.CRDxFaturaCartaoID.ID;
            public Guid Fim => FaturaCartaoSVC.xCRDxFaturaCartao.Fim.ID;
            public Guid Inicio => FaturaCartaoSVC.xCRDxFaturaCartao.Inicio.ID;
            public Guid Nome => FaturaCartaoSVC.xSYSxPessoa.Nome.ID;
            public Guid Valor => FaturaCartaoSVC.xCRDxFaturaCartao.Valor.ID;

            public XDataSet()
            {
                DataSetType = typeof(FaturaCartaoSVC.XDataSet);
            }

        }
        #endregion FaturaCartaoSVC.XDataSet

        [Guid(FaturaCartaoSVC.sCID)]
        public  interface XService : XIBaseService
        {
            new XDataSet DataSet
            {
                get;
            }
            new XTuple NewTuple(Object pPKValue = null);
             IEnumerable<XTuple> Tuples
            {
                get;
            }
             XTuple Current
            {
                get;
            }
            new XDataSet Get(XServiceData pData);
             XDataSet Get(params Object[] pWhere);
        }
        [XRegister(typeof(_Service), _Service.sCID, typeof(FaturaCartaoSVC))]
        protected class _Service : Service<FaturaCartaoSVC, XDataSet, XTuple>
        {
            public const String sCID = "16FE056D-ED46-43FA-B1B5-074C9A4FDF91";
            public Guid gCID = new Guid(sCID);
        }

        public class Service<TModel, TDataSet, TTuple> : XBaseService<FaturaCartaoSVC, XDataSet, XTuple>, XService
             where TModel : FaturaCartaoSVC, new()
             where TDataSet : XDataSet, new()
             where TTuple : XTuple
        {
            XDataSet XService.DataSet => (XDataSet)DataSet;
            XTuple XService.NewTuple(Object pPKValue)
            {
                return (XTuple)NewTuple(pPKValue);
            }
            public new XDataTuple NewTuple(Object pPKValue = null)
            {
                return (XTuple)base.NewTuple(pPKValue);
            }
            IEnumerable<XTuple> XService.Tuples => (IEnumerable<XTuple>)Tuples;
            XTuple XService.Current => (XTuple )Current;
            XDataSet XService.Get(XServiceData pData)
            {
                return (XDataSet)Get(pData);
            }
            XDataSet XService.Get(params Object[] pWhere)
            {
                return (XDataSet)Get(pWhere);
            }
            public Service()
            {
                ID = gCID;
            }
        }
    }

}