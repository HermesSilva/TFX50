//<auto-generated/>
using System;
using System.Linq;
using Newtonsoft.Json;
using TFX.Core.Objects;
using TFX.Core.Model.Data;
using TFX.Core.Model.Cache;
using TFX.Core.Reflections;
using TFX.Core.Service.Job;
using TFX.Core.Service.SVC;
using Projecao.Core.CRD.DB;
using TFX.Core.Model.DIC.SVC;
using TFX.Core.Model.DIC.ORM;
using TFX.Core.Model.DIC.FRM;
using TFX.Core.Model.DIC.APP;
using TFX.Core.Model.DIC.RPT;
using TFX.Core.Model.Services;
using TFX.Core.Model.DIC.Types;
using TFX.Core.Model.Interfaces;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Projecao.Core.CRD.FaturaCartao
{
    [XRegister(typeof(FaturaConvenioSVC), sCID)]
    [XDASESource(@"D:\Tootega\Source\TFX20\Modules\Projecao.Core.CRD\Projecao.Core.CRD.csproj", @"D:\Tootega\Source\TFX20\Modules\Projecao.Core.CRD\FaturaCartao\FaturaConvenio.dssvc")]
    public class FaturaConvenioSVC : XSVCModel
    {
        #region FaturaConvenioFilterFRM

        [XRegister(typeof(FaturaConvenioFilterFRM), sCID)]
        public class FaturaConvenioFilterFRM : XFRMModel
        {
            public const String sCID = "E90A761B-1CB8-4FE2-8C57-02763AD528C1";
            static FaturaConvenioFilterFRM()
            {
                gCID = new Guid(sCID);
            }
            public FaturaConvenioFilterFRM()
            {
                ID = gCID;
                Name = "FaturaConvenioFilter";
                Title = "";
                MinRows = 0;
                ConfigCID = new Guid("00000000-0000-0000-0000-000000000000");
                ConfigPKFilter = false;
                Rect = new XRect(0, 0, 250, 50);
                Style = XFRMStyle.Normal;
                ActionContext = XActionContext.All;
            }
            public static class Fields
            {
            }
        }

        #endregion FaturaConvenioFilterFRM

        public const String sCID = "4422C3B9-A8B6-46D8-B05C-F2DA86E598FC";
        public static Guid gCID = new Guid(sCID);
        public static XSVCReference CRDxFaturaCartao_CRDxConvenioID_CRDxConvenio_CRDxConvenioID; // CRDxFaturaCartao.CRDxConvenioID --> CRDxConvenio.CRDxConvenioID

        #region xCRDxFaturaCartao 
        public class xCRDxFaturaCartao : XSVCTable
        {

            public static Guid gCID => new Guid("1CB1ADAF-916F-4BEC-9076-4FF40ACCF6D3");

            public xCRDxFaturaCartao()
            {
                Name = "CRDxFaturaCartao";
                Alias = "CRDxFaturaCartao";
                ID = gCID;
                ParentID =  global::Projecao.Core.CRD.DB.CRDx.CRDxFaturaCartao.gCID;

                Items.Add(CRDxFaturaCartaoID, CRDxFaturaCartaoID.ID);
                CRDxFaturaCartaoID.Owner = this;
                CRDxFaturaCartaoID.OwnerID = ID;
                CRDxFaturaCartaoID.TableName = Name;
                Items.Add(Inicio, Inicio.ID);
                Inicio.Owner = this;
                Inicio.OwnerID = ID;
                Inicio.TableName = Name;
                Items.Add(SYSxEstadoID, SYSxEstadoID.ID);
                SYSxEstadoID.Owner = this;
                SYSxEstadoID.OwnerID = ID;
                SYSxEstadoID.TableName = Name;
                Items.Add(Valor, Valor.ID);
                Valor.Owner = this;
                Valor.OwnerID = ID;
                Valor.TableName = Name;
                Items.Add(Fim, Fim.ID);
                Fim.Owner = this;
                Fim.OwnerID = ID;
                Fim.TableName = Name;
                Fim.Alias = "Fim";
                Items.Add(QuantidadeVenda, QuantidadeVenda.ID);
                QuantidadeVenda.Owner = this;
                QuantidadeVenda.OwnerID = ID;
                QuantidadeVenda.TableName = Name;
                Items.Add(CRDxConvenioID, CRDxConvenioID.ID);
                CRDxConvenioID.Owner = this;
                CRDxConvenioID.OwnerID = ID;
                CRDxConvenioID.TableName = Name;
                Items.Add(CRDxFaturaEstadoID, CRDxFaturaEstadoID.ID);
                CRDxFaturaEstadoID.Owner = this;
                CRDxFaturaEstadoID.OwnerID = ID;
                CRDxFaturaEstadoID.TableName = Name;
            }

            public static XORMPKField CRDxFaturaCartaoID = new XORMPKField(global::Projecao.Core.CRD.DB.CRDx.CRDxFaturaCartao.CRDxFaturaCartaoID, new Guid("9008A2F6-94AE-45D2-B776-2BB313BCBB97"), "CRDxFaturaCartaoID", "Faturas por Cartão");
            public static XORMDateTimeField Inicio = new XORMDateTimeField(global::Projecao.Core.CRD.DB.CRDx.CRDxFaturaCartao.Inicio, new Guid("0F2DAEA4-F8F0-40E7-A14F-09589B56DB05"), "Inicio", "Início");
            public static XORMStateField SYSxEstadoID = new XORMStateField(global::Projecao.Core.CRD.DB.CRDx.CRDxFaturaCartao.SYSxEstadoID, new Guid("03A51255-C0DB-4B10-B7BF-6874A4F6EF5A"), "SYSxEstadoID", "Estado");
            public static XORMDecimalField Valor = new XORMDecimalField(global::Projecao.Core.CRD.DB.CRDx.CRDxFaturaCartao.Valor, new Guid("2E5DD865-8A05-49E8-B31F-0C4FFB5040D2"), "Valor", "Valor");
            public static XORMDateTimeField Fim = new XORMDateTimeField(global::Projecao.Core.CRD.DB.CRDx.CRDxFaturaCartao.Fim, new Guid("0AD90B28-2133-47D2-8A61-0551BB67AD54"), "Fim", "Fim");
            public static XORMField QuantidadeVenda = new XORMField(global::Projecao.Core.CRD.DB.CRDx.CRDxFaturaCartao.QuantidadeVenda, new Guid("039254DA-FB47-453F-832C-B1A1B40AD888"), "QuantidadeVenda", "Quantidade de Vendas");
            public static XORMFKField CRDxConvenioID = new XORMFKField(global::Projecao.Core.CRD.DB.CRDx.CRDxFaturaCartao.CRDxConvenioID, new Guid("338A36CD-E2A8-4831-B933-04C2D124F947"), "CRDxConvenioID", "Convênio");
            public static XORMFKField CRDxFaturaEstadoID = new XORMFKField(global::Projecao.Core.CRD.DB.CRDx.CRDxFaturaCartao.CRDxFaturaEstadoID, new Guid("BD84896C-9D38-4610-A1A0-1E6E030326C2"), "CRDxFaturaEstadoID", "Estado da Fatura");
        }
        #endregion xCRDxFaturaCartao 


        #region xCRDxConvenio 
        public class xCRDxConvenio : XSVCTable
        {

            public static Guid gCID => new Guid("2E53C295-5632-4671-839B-8E28813D53E9");

            public xCRDxConvenio()
            {
                Name = "CRDxConvenio";
                Alias = "CRDxConvenio";
                ID = gCID;
                ParentID =  global::Projecao.Core.CRD.DB.CRDx.CRDxConvenio.gCID;

                Items.Add(CRDxConvenioID, CRDxConvenioID.ID);
                CRDxConvenioID.Owner = this;
                CRDxConvenioID.OwnerID = ID;
                CRDxConvenioID.TableName = Name;
                CRDxConvenioID.Alias = "CRDxConvenioID";
                Items.Add(Inicio, Inicio.ID);
                Inicio.Owner = this;
                Inicio.OwnerID = ID;
                Inicio.TableName = Name;
                Items.Add(Pagamento, Pagamento.ID);
                Pagamento.Owner = this;
                Pagamento.OwnerID = ID;
                Pagamento.TableName = Name;
                Items.Add(Fechamento, Fechamento.ID);
                Fechamento.Owner = this;
                Fechamento.OwnerID = ID;
                Fechamento.TableName = Name;
                Fechamento.Alias = "Fechamento";
                Items.Add(SYSxEstadoID, SYSxEstadoID.ID);
                SYSxEstadoID.Owner = this;
                SYSxEstadoID.OwnerID = ID;
                SYSxEstadoID.TableName = Name;
                Items.Add(CRDxConvenioTipoID, CRDxConvenioTipoID.ID);
                CRDxConvenioTipoID.Owner = this;
                CRDxConvenioTipoID.OwnerID = ID;
                CRDxConvenioTipoID.TableName = Name;
            }

            public static XORMFaceField CRDxConvenioID = new XORMFaceField(global::Projecao.Core.CRD.DB.CRDx.CRDxConvenio.CRDxConvenioID, new Guid("227D7D0B-A2F7-4329-85E9-B72BA4491C52"), "CRDxConvenioID", "Convênio");
            public static XORMDateTimeField Inicio = new XORMDateTimeField(global::Projecao.Core.CRD.DB.CRDx.CRDxConvenio.Inicio, new Guid("27D30E62-4B4A-4691-B94F-C3DE26582990"), "Inicio", "Início");
            public static XORMField Pagamento = new XORMField(global::Projecao.Core.CRD.DB.CRDx.CRDxConvenio.Pagamento, new Guid("35F845BB-95CE-4EE6-A085-188942B55994"), "Pagamento", "Dia de Pagamento");
            public static XORMField Fechamento = new XORMField(global::Projecao.Core.CRD.DB.CRDx.CRDxConvenio.Fechamento, new Guid("59E56FBB-E5A6-4FE8-ADE7-CD50FEB73CED"), "Fechamento", "Dia de Fechamento");
            public static XORMStateField SYSxEstadoID = new XORMStateField(global::Projecao.Core.CRD.DB.CRDx.CRDxConvenio.SYSxEstadoID, new Guid("5EA3D504-B679-41AD-A063-E69E48430F20"), "SYSxEstadoID", "Estado");
            public static XORMFKField CRDxConvenioTipoID = new XORMFKField(global::Projecao.Core.CRD.DB.CRDx.CRDxConvenio.CRDxConvenioTipoID, new Guid("40FC9786-E7AF-4D34-A536-B6E1A9493B2F"), "CRDxConvenioTipoID", "Tipo de Convênio");
        }
        #endregion xCRDxConvenio 


        public xCRDxConvenio CRDxConvenio;
        public xCRDxFaturaCartao CRDxFaturaCartao;

        public FaturaConvenioSVC()
        {
            TupleType = typeof(FaturaConvenioSVC.XTuple);
            DataSetType = typeof(FaturaConvenioSVC.XDataSet);
            ServiceRuleCID = new Guid("314E93EC-B057-4FFB-A3A6-75867F6FFF71");
            OnlyActives = false;
            Actions = XSVCAction.All;
            Type = XServiceType.Default;
            ID = new Guid("4422C3B9-A8B6-46D8-B05C-F2DA86E598FC");
            Name = "FaturaConvenio";
            Title = "Fatura por Convênio";
            IsCacheable = false;
            CompanyControl = false;
            IsJob = false;
            AutoLoad = true;
            FreeForUsers = false;
            ServerSideNewRecord = false;
            UseDistinct = false;
            JobType = XJobType.Default;
            CanExport = false;
            ModuleID = new Guid("EBB5930C-9A21-4AB6-993E-B86F40039784");
            Rights = new Int16[] { 1 }; 
            IsReadOnly = true;
            ClientScript = "Projecao.Core.CRD.js";
            DataSetFields = new Guid[] { xCRDxConvenio.Fechamento.ID, xCRDxFaturaCartao.Fim.ID, xCRDxConvenio.CRDxConvenioID.ID };
            PKField = xCRDxConvenio.CRDxConvenioID.ID;
            ConfigTableID = new Guid("8CCD762D-565E-47F0-B57A-05C1A22D5627");
            MasterRuleCID = new Guid("314E93EC-B057-4FFB-A3A6-75867F6FFF71");
            CRDxConvenio = new xCRDxConvenio();
            CRDxConvenio.IsReadOnly = true;
            AddTable(CRDxConvenio);
            CRDxFaturaCartao = new xCRDxFaturaCartao();
            CRDxFaturaCartao.IsReadOnly = true;
            AddTable(CRDxFaturaCartao);
            MasterTableID = CRDxConvenio.ID;
            CRDxFaturaCartao_CRDxConvenioID_CRDxConvenio_CRDxConvenioID = AddReference(new XSVCReference(new Guid("7195818F-9C1A-481E-AD50-968BBE62281B"), "FK_7195818F9C1A481EAD50968BBE62281B", FaturaConvenioSVC.xCRDxFaturaCartao.gCID, xCRDxFaturaCartao.CRDxConvenioID.ID, FaturaConvenioSVC.xCRDxConvenio.gCID, xCRDxConvenio.CRDxConvenioID.ID, XJoinType.Left)); // CRDxFaturaCartao.CRDxConvenioID --> CRDxConvenio.CRDxConvenioID
            xCRDxConvenio.CRDxConvenioID.IsReadOnly = true;
            xCRDxConvenio.CRDxConvenioID.IsDataField = true;
            xCRDxConvenio.CRDxConvenioID.AllowEmpty = true;
            xCRDxConvenio.Fechamento.IsReadOnly = true;
            xCRDxConvenio.Fechamento.IsDataField = true;
            xCRDxConvenio.Fechamento.AllowEmpty = true;
            xCRDxFaturaCartao.Fim.IsReadOnly = true;
            xCRDxFaturaCartao.Fim.IsDataField = true;
            xCRDxFaturaCartao.Fim.AllowEmpty = true;
        }

        #region XFields

        public class XFields
        {
        public XORMField CRDxConvenioID => xCRDxConvenio.CRDxConvenioID;
        public XORMField Fechamento => xCRDxConvenio.Fechamento;
        public XORMField Fim => xCRDxFaturaCartao.Fim;
        }
        #endregion XFields
        #region FaturaConvenioSVC.XTuple

        public  class XTuple : XDataTuple
        {

            public XTuple()
            {
            }

            public XTuple(Object[] pSource)
                : base(pSource)
            {
            }

            public XTuple(Int32 pColCount)
               : this(new Object[pColCount])
            {
            }

            public readonly XFields Fields = new XFields();

            #nullable enable

        public Guid CRDxConvenioID
        {
            get
            {
                return (Guid)Value[FaturaConvenioSVC.xCRDxConvenio.CRDxConvenioID.ID];
            }
            set
            {
                Value[FaturaConvenioSVC.xCRDxConvenio.CRDxConvenioID.ID] = value;
            }
        }
        public Guid? oCRDxConvenioID
        {
            get
            {
                GetOldValue(FaturaConvenioSVC.xCRDxConvenio.CRDxConvenioID, out Object ovlr);
                return (Guid?)ovlr;
            }
        }

        public Int16 Fechamento
        {
            get
            {
                return (Int16)Value[FaturaConvenioSVC.xCRDxConvenio.Fechamento.ID];
            }
            set
            {
                Value[FaturaConvenioSVC.xCRDxConvenio.Fechamento.ID] = value;
            }
        }
        public Int16? oFechamento
        {
            get
            {
                GetOldValue(FaturaConvenioSVC.xCRDxConvenio.Fechamento, out Object ovlr);
                return (Int16?)ovlr;
            }
        }

        public DateTime Fim
        {
            get
            {
                return (DateTime)Value[FaturaConvenioSVC.xCRDxFaturaCartao.Fim.ID];
            }
            set
            {
                Value[FaturaConvenioSVC.xCRDxFaturaCartao.Fim.ID] = value;
            }
        }
        public DateTime? oFim
        {
            get
            {
                GetOldValue(FaturaConvenioSVC.xCRDxFaturaCartao.Fim, out Object ovlr);
                return (DateTime?)ovlr;
            }
        }

            #nullable disable
        }
        #endregion FaturaConvenioSVC.XTuple

        #region FaturaConvenioSVC.XRule
        public abstract class XRule : XServiceRule<FaturaConvenioSVC.XDataSet, FaturaConvenioSVC, FaturaConvenioSVC.XTuple>
        {
        }
        #endregion FaturaConvenioSVC.XRule

        #region FaturaConvenioSVC.XDataSet

        public class XDataSet : XDataSet<FaturaConvenioSVC.XTuple>
        {
            public XDataSet()
            {
                DataSetType = typeof(FaturaConvenioSVC.XDataSet);
            }
        }

        public class XDataSet<T> : XServiceDataSet<FaturaConvenioSVC.XTuple> where T : XDataTuple
        {

            public Guid CRDxConvenioID => FaturaConvenioSVC.xCRDxConvenio.CRDxConvenioID.ID;
            public Guid Fechamento => FaturaConvenioSVC.xCRDxConvenio.Fechamento.ID;
            public Guid Fim => FaturaConvenioSVC.xCRDxFaturaCartao.Fim.ID;

            public XDataSet()
            {
                DataSetType = typeof(FaturaConvenioSVC.XDataSet);
            }

        }
        #endregion FaturaConvenioSVC.XDataSet

        [Guid(FaturaConvenioSVC.sCID)]
        public  interface XService : XIBaseService
        {
            new XDataSet DataSet
            {
                get;
            }
            new XTuple NewTuple(Object pPKValue = null);
             IEnumerable<XTuple> Tuples
            {
                get;
            }
             XTuple Current
            {
                get;
            }
            new XDataSet Get(XServiceData pData);
             XDataSet Get(params Object[] pWhere);
        }
        [XRegister(typeof(_Service), _Service.sCID, typeof(FaturaConvenioSVC))]
        protected class _Service : Service<FaturaConvenioSVC, XDataSet, XTuple>
        {
            public const String sCID = "ADE67834-46F1-4312-925A-F091BEDFC118";
            public Guid gCID = new Guid(sCID);
        }

        public class Service<TModel, TDataSet, TTuple> : XBaseService<FaturaConvenioSVC, XDataSet, XTuple>, XService
             where TModel : FaturaConvenioSVC, new()
             where TDataSet : XDataSet, new()
             where TTuple : XTuple
        {
            XDataSet XService.DataSet => (XDataSet)DataSet;
            XTuple XService.NewTuple(Object pPKValue)
            {
                return (XTuple)NewTuple(pPKValue);
            }
            public new XDataTuple NewTuple(Object pPKValue = null)
            {
                return (XTuple)base.NewTuple(pPKValue);
            }
            IEnumerable<XTuple> XService.Tuples => (IEnumerable<XTuple>)Tuples;
            XTuple XService.Current => (XTuple )Current;
            XDataSet XService.Get(XServiceData pData)
            {
                return (XDataSet)Get(pData);
            }
            XDataSet XService.Get(params Object[] pWhere)
            {
                return (XDataSet)Get(pWhere);
            }
            public Service()
            {
                ID = gCID;
            }
        }
    }

}