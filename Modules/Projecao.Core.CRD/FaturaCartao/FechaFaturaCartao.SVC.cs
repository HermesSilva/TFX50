//<auto-generated/>
using System;
using System.Linq;
using Newtonsoft.Json;
using TFX.Core.Objects;
using TFX.Core.Model.Data;
using TFX.Core.Model.Cache;
using TFX.Core.Reflections;
using TFX.Core.Service.Job;
using TFX.Core.Service.SVC;
using TFX.Core.Model.DIC.SVC;
using TFX.Core.Model.DIC.ORM;
using TFX.Core.Model.DIC.FRM;
using TFX.Core.Model.DIC.APP;
using TFX.Core.Model.DIC.RPT;
using TFX.Core.Model.Services;
using TFX.Core.Model.DIC.Types;
using TFX.Core.Model.Interfaces;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Projecao.Core.CRD.FaturaCartao
{
    [XRegister(typeof(FechaFaturaCartaoSVC), sCID)]
    [XDASESource(@"D:\Tootega\Source\TFX20\Modules\Projecao.Core.CRD\Projecao.Core.CRD.csproj", @"D:\Tootega\Source\TFX20\Modules\Projecao.Core.CRD\FaturaCartao\FechaFaturaCartao.dssvc")]
    public class FechaFaturaCartaoSVC : XSVCModel
    {
        #region FechaFaturaCartaoFilterFRM

        [XRegister(typeof(FechaFaturaCartaoFilterFRM), sCID)]
        public class FechaFaturaCartaoFilterFRM : XFRMModel
        {
            public const String sCID = "F2EE913E-5535-4868-9A77-286425DDE646";
            static FechaFaturaCartaoFilterFRM()
            {
                gCID = new Guid(sCID);
            }
            public FechaFaturaCartaoFilterFRM()
            {
                ID = gCID;
                Name = "FechaFaturaCartaoFilter";
                Title = "";
                MinRows = 0;
                ConfigCID = new Guid("00000000-0000-0000-0000-000000000000");
                ConfigPKFilter = false;
                Rect = new XRect(0, 0, 250, 92);
                Style = XFRMStyle.Normal;
                ActionContext = XActionContext.All;
            }
            public static class Fields
            {
            }
        }

        #endregion FechaFaturaCartaoFilterFRM

        public const String sCID = "0BEFAEE3-CB6A-4070-80D9-668D5751516D";
        public static Guid gCID = new Guid(sCID);

        public static readonly XORMParameterField ConvenioID = new XORMParameterField(new Guid("28FF86A2-3C95-4072-ACBF-31A9371CBB04"), "ConvenioID", "Convênio", XInt64.CID, 0, 0, false, gCID, null);
        public static readonly XORMParameterField Fim = new XORMParameterField(new Guid("69F2A19B-7333-42B8-B4D0-FDCC59E7CF60"), "Fim", "Fim", XDateTime.CID, 0, 0, false, gCID, null);
        public static readonly XORMParameterField Inicio = new XORMParameterField(new Guid("9219C8F7-7BED-4B85-AF6F-42F9B6421B59"), "Inicio", "Início", XDateTime.CID, 0, 0, false, gCID, null);

        public FechaFaturaCartaoSVC()
        {
            TupleType = typeof(FechaFaturaCartaoSVC.XTuple);
            DataSetType = typeof(FechaFaturaCartaoSVC.XDataSet);
            ServiceRuleCID = new Guid("A2F9A27E-A463-43DB-BA07-EB79DAB8F520");
            OnlyActives = false;
            Actions = XSVCAction.All;
            Type = XServiceType.Utility;
            ID = new Guid("0BEFAEE3-CB6A-4070-80D9-668D5751516D");
            Name = "FechaFaturaCartao";
            Title = "Fecha Fatura de Cartões";
            IsCacheable = false;
            CompanyControl = false;
            IsJob = false;
            AutoLoad = true;
            FreeForUsers = false;
            ServerSideNewRecord = false;
            UseDistinct = false;
            JobType = XJobType.Default;
            CanExport = false;
            ModuleID = new Guid("EBB5930C-9A21-4AB6-993E-B86F40039784");
            Rights = new Int16[] { 1 }; 
            IsReadOnly = true;
            ClientScript = "Projecao.Core.CRD.js";
            DataSetFields = new Guid[] { ConvenioID.ID, Inicio.ID, Fim.ID };
            PKField = ConvenioID.ID;
            MasterRuleCID = new Guid("A2F9A27E-A463-43DB-BA07-EB79DAB8F520");
            AddField(ConvenioID);
            ConvenioID.IsParam = true;
            AddField(Inicio);
            Inicio.IsParam = true;
            AddField(Fim);
            Fim.IsParam = true;
            ConvenioID.GeneratePK = true;
            ConvenioID.IsReadOnly = false;
            ConvenioID.Length = 0;
            ConvenioID.Scale = 0;
            ConvenioID.IsDataField = true;
            ConvenioID.AllowEmpty = true;
            Fim.IsReadOnly = false;
            Fim.Length = 0;
            Fim.Scale = 0;
            Fim.IsDataField = true;
            Fim.AllowEmpty = true;
            Inicio.IsReadOnly = false;
            Inicio.Length = 0;
            Inicio.Scale = 0;
            Inicio.IsDataField = true;
            Inicio.AllowEmpty = true;
        }

        #region XFields

        public class XFields
        {
        public XORMField ConvenioID => FechaFaturaCartaoSVC.ConvenioID;
        public XORMField Fim => FechaFaturaCartaoSVC.Fim;
        public XORMField Inicio => FechaFaturaCartaoSVC.Inicio;
        }
        #endregion XFields
        #region FechaFaturaCartaoSVC.XTuple

        public  class XTuple : XDataTuple
        {

            public XTuple()
            {
            }

            public XTuple(Object[] pSource)
                : base(pSource)
            {
            }

            public XTuple(Int32 pColCount)
               : this(new Object[pColCount])
            {
            }

            public readonly XFields Fields = new XFields();

            #nullable enable

        public Int64 ConvenioID
        {
            get
            {
                return (Int64)Value[FechaFaturaCartaoSVC.ConvenioID.ID];
            }
            set
            {
                Value[FechaFaturaCartaoSVC.ConvenioID.ID] = value;
            }
        }
        public Int64? oConvenioID
        {
            get
            {
                GetOldValue(FechaFaturaCartaoSVC.ConvenioID, out Object ovlr);
                return (Int64?)ovlr;
            }
        }

        public DateTime Fim
        {
            get
            {
                return (DateTime)Value[FechaFaturaCartaoSVC.Fim.ID];
            }
            set
            {
                Value[FechaFaturaCartaoSVC.Fim.ID] = value;
            }
        }
        public DateTime? oFim
        {
            get
            {
                GetOldValue(FechaFaturaCartaoSVC.Fim, out Object ovlr);
                return (DateTime?)ovlr;
            }
        }

        public DateTime Inicio
        {
            get
            {
                return (DateTime)Value[FechaFaturaCartaoSVC.Inicio.ID];
            }
            set
            {
                Value[FechaFaturaCartaoSVC.Inicio.ID] = value;
            }
        }
        public DateTime? oInicio
        {
            get
            {
                GetOldValue(FechaFaturaCartaoSVC.Inicio, out Object ovlr);
                return (DateTime?)ovlr;
            }
        }

            #nullable disable
        }
        #endregion FechaFaturaCartaoSVC.XTuple

        #region FechaFaturaCartaoSVC.XRule
        public abstract class XRule : XServiceUtilRule<FechaFaturaCartaoSVC.XDataSet, FechaFaturaCartaoSVC, FechaFaturaCartaoSVC.XTuple>
        {
        }
        #endregion FechaFaturaCartaoSVC.XRule

        #region FechaFaturaCartaoSVC.XDataSet

        public class XDataSet : XDataSet<FechaFaturaCartaoSVC.XTuple>
        {
            public XDataSet()
            {
                DataSetType = typeof(FechaFaturaCartaoSVC.XDataSet);
            }
        }

        public class XDataSet<T> : XServiceDataSet<FechaFaturaCartaoSVC.XTuple> where T : XDataTuple
        {

            public Guid ConvenioID => FechaFaturaCartaoSVC.ConvenioID.ID;
            public Guid Fim => FechaFaturaCartaoSVC.Fim.ID;
            public Guid Inicio => FechaFaturaCartaoSVC.Inicio.ID;

            public XDataSet()
            {
                DataSetType = typeof(FechaFaturaCartaoSVC.XDataSet);
            }

        }
        #endregion FechaFaturaCartaoSVC.XDataSet

        [Guid(FechaFaturaCartaoSVC.sCID)]
        public  interface XService : XIBaseService
        {
            new XDataSet DataSet
            {
                get;
            }
            new XTuple NewTuple(Object pPKValue = null);
             IEnumerable<XTuple> Tuples
            {
                get;
            }
             XTuple Current
            {
                get;
            }
            new XDataSet Get(XServiceData pData);
             XDataSet Get(params Object[] pWhere);
        }
        [XRegister(typeof(_Service), _Service.sCID, typeof(FechaFaturaCartaoSVC))]
        protected class _Service : Service<FechaFaturaCartaoSVC, XDataSet, XTuple>
        {
            public const String sCID = "956AF27A-B4FC-4A15-835B-BD484E292D9C";
            public Guid gCID = new Guid(sCID);
        }

        public class Service<TModel, TDataSet, TTuple> : XBaseService<FechaFaturaCartaoSVC, XDataSet, XTuple>, XService
             where TModel : FechaFaturaCartaoSVC, new()
             where TDataSet : XDataSet, new()
             where TTuple : XTuple
        {
            XDataSet XService.DataSet => (XDataSet)DataSet;
            XTuple XService.NewTuple(Object pPKValue)
            {
                return (XTuple)NewTuple(pPKValue);
            }
            public new XDataTuple NewTuple(Object pPKValue = null)
            {
                return (XTuple)base.NewTuple(pPKValue);
            }
            IEnumerable<XTuple> XService.Tuples => (IEnumerable<XTuple>)Tuples;
            XTuple XService.Current => (XTuple )Current;
            XDataSet XService.Get(XServiceData pData)
            {
                return (XDataSet)Get(pData);
            }
            XDataSet XService.Get(params Object[] pWhere)
            {
                return (XDataSet)Get(pWhere);
            }
            public Service()
            {
                ID = gCID;
            }
        }
    }

}