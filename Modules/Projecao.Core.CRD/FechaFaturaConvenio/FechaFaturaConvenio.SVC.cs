//<auto-generated/>
using System;
using System.Linq;
using Newtonsoft.Json;
using TFX.Core.Objects;
using TFX.Core.Model.Data;
using TFX.Core.Model.Cache;
using TFX.Core.Reflections;
using TFX.Core.Service.Job;
using TFX.Core.Service.SVC;
using TFX.Core.Model.DIC.SVC;
using TFX.Core.Model.DIC.ORM;
using TFX.Core.Model.DIC.FRM;
using TFX.Core.Model.DIC.APP;
using TFX.Core.Model.DIC.RPT;
using TFX.Core.Model.Services;
using TFX.Core.Model.DIC.Types;
using TFX.Core.Model.Interfaces;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Projecao.Core.CRD.FechaFaturaConvenio
{
    [XRegister(typeof(FechaFaturaConvenioSVC), sCID)]
    [XDASESource(@"D:\Tootega\Source\TFX20\Modules\Projecao.Core.CRD\Projecao.Core.CRD.csproj", @"D:\Tootega\Source\TFX20\Modules\Projecao.Core.CRD\FechaFaturaConvenio\FechaFaturaConvenio.dssvc")]
    public class FechaFaturaConvenioSVC : XSVCModel
    {
        #region FechaFaturaConvenioFilterFRM

        [XRegister(typeof(FechaFaturaConvenioFilterFRM), sCID)]
        public class FechaFaturaConvenioFilterFRM : XFRMModel
        {
            public const String sCID = "B352E0A4-00FF-45DC-B14A-ED0482BA1F78";
            static FechaFaturaConvenioFilterFRM()
            {
                gCID = new Guid(sCID);
            }
            public FechaFaturaConvenioFilterFRM()
            {
                ID = gCID;
                Name = "FechaFaturaConvenioFilter";
                Title = "";
                MinRows = 1;
                ConfigCID = new Guid("00000000-0000-0000-0000-000000000000");
                ConfigPKFilter = false;
                Rect = new XRect(0, 0, 1019, 92);
                Style = XFRMStyle.Normal;
                ActionContext = XActionContext.All;
                AddItem(ConvenioID);
                ConvenioID.ForceRW = true;
                ConvenioID.CanInsert = true;
                ConvenioID.CanUpdate = true;
                ConvenioID.RowCount = 1;
                ConvenioID.ColCount = 32;
                ConvenioID.RowCountSmall = 1;
                ConvenioID.ColCountSmall = 32;
                ConvenioID.IsHidden = false;
                ConvenioID.IsHiddenSmall = false;
                ConvenioID.AdditionalTitle = "";
                ConvenioID.Location = 1;
                ConvenioID.EditorCID = new Guid("66290387-F0AD-4746-A1F7-B0D8D4C5C2EE");
                ConvenioID.FormImplace = true;
                ConvenioID.Operator = XOperator.EqualTo;
                ConvenioID.JustifyHeight = false;
                ConvenioID.AllowEmpty = true;
                ConvenioID.FontColor = "#000000";
                ConvenioID.FontStyle = XFontStyle.Normal;
                ConvenioID.ShowFooter = false;
                ConvenioID.ViewSAM = new Guid("00000000-0000-0000-0000-000000000000");
                ConvenioID.Scale = 0;
                ConvenioID.Length = 0;
                ConvenioID.SearchAction = XSearchAction.Default;
                ConvenioID.TypeID = XInt64.CID;
                ConvenioID.AdditionalFieldsID = new Guid[] {  };
                ConvenioID.AdditionalDataFieldsID = new Guid[] {  };
                ConvenioID.TargetFilterFieldID = new Guid[] {  };
                ConvenioID.SourceFilterFieldID = new Guid[] {  };
                ConvenioID.TargetDisplayFieldID = new Guid[] { new Guid("238ABF5E-864F-482B-883D-BC407D933F8B") };
                ConvenioID.SourceDisplayFieldID = new Guid[] { new Guid("C972E047-4809-488B-9F2A-F2EA8ED46235") };
                ConvenioID.DataSourceID = global::Projecao.Core.CRD.ReadOnly.ConvenioSVC.gCID;
                ConvenioID.AutoLoad = false;
                ConvenioID.FilterInative = true;
                ConvenioID.IsAnswer = false;
                ConvenioID.AllowMultiSelect = false;
            }
            public XFRMField ConvenioID = new XFRMField(new Guid("17ABA0D7-D168-462C-8D8B-F71E76A2F085"), "ConvenioID", "Convênio", XInt64.CID, 1, 32, false, gCID, null, new Guid("3547081B-2FCE-4341-9442-416B7CF5C078")); // Int64;
            public static class Fields
            {
                public static XFieldInfo ConvenioID = new XFieldInfo(new Guid("17ABA0D7-D168-462C-8D8B-F71E76A2F085"), "ConvenioID", "Convênio", typeof(Int64));
            }
        }

        #endregion FechaFaturaConvenioFilterFRM

        public const String sCID = "1677FF84-9C19-4657-A356-1AF4E5338D27";
        public static Guid gCID = new Guid(sCID);

        public static readonly XORMParameterField Convenio = new XORMParameterField(new Guid("238ABF5E-864F-482B-883D-BC407D933F8B"), "Convenio", "Nome do Convênio", XString.CID, 0, 0, false, gCID, null);
        public static readonly XORMParameterField ConvenioID = new XORMParameterField(new Guid("3547081B-2FCE-4341-9442-416B7CF5C078"), "ConvenioID", "Convênio", XInt64.CID, 0, 0, false, gCID, null);
        public static readonly XORMParameterField Dia = new XORMParameterField(new Guid("CCEECFCE-536B-4D38-97DD-D716F9503B96"), "Dia", "Dia", XInt32.CID, 0, 0, false, gCID, null);
        public static readonly XORMParameterField EstadoID = new XORMParameterField(new Guid("488C5C33-05BE-465D-8D2D-056E538D9D79"), "EstadoID", "Fechar", XBoolean.CID, 0, 0, false, gCID, null);
        public static readonly XORMParameterField Fim = new XORMParameterField(new Guid("42538BEC-4EFD-424D-9286-3DC6548FFAAF"), "Fim", "Fim", XDate.CID, 0, 0, false, gCID, null);
        public static readonly XORMParameterField Inicio = new XORMParameterField(new Guid("CD2BC63D-9A04-43AD-815B-D27CC79C4199"), "Inicio", "Início", XDate.CID, 0, 0, false, gCID, null);
        public static readonly XORMParameterField Valor = new XORMParameterField(new Guid("45921EBB-FF8A-4F78-9806-FC791672D581"), "Valor", "Valor", XDecimal.CID, 0, 0, false, gCID, null);

        public FechaFaturaConvenioSVC()
        {
            TupleType = typeof(FechaFaturaConvenioSVC.XTuple);
            DataSetType = typeof(FechaFaturaConvenioSVC.XDataSet);
            ServiceRuleCID = new Guid("AFEAFFAC-FFD3-4511-9DFA-5AC6A2595978");
            OnlyActives = false;
            Actions = XSVCAction.All;
            Type = XServiceType.Utility;
            ID = new Guid("1677FF84-9C19-4657-A356-1AF4E5338D27");
            Name = "FechaFaturaConvenio";
            Title = "Fecha Fatura Convênio";
            IsCacheable = false;
            CompanyControl = false;
            IsJob = false;
            AutoLoad = true;
            FreeForUsers = false;
            ServerSideNewRecord = false;
            UseDistinct = false;
            JobType = XJobType.Default;
            CanExport = false;
            ModuleID = new Guid("EBB5930C-9A21-4AB6-993E-B86F40039784");
            Rights = new Int16[] { 1 }; 
            FilterFormID = new Guid("B352E0A4-00FF-45DC-B14A-ED0482BA1F78");
            IsReadOnly = true;
            ClientScript = "Projecao.Core.CRD.js";
            GridFields = new Guid[] { Convenio.ID, EstadoID.ID, Valor.ID, Fim.ID, Dia.ID, Inicio.ID };
            DataSetFields = new Guid[] { ConvenioID.ID, Dia.ID, EstadoID.ID, Convenio.ID, Inicio.ID, Fim.ID, Valor.ID };
            PKField = ConvenioID.ID;
            MasterRuleCID = new Guid("AFEAFFAC-FFD3-4511-9DFA-5AC6A2595978");
            AddField(ConvenioID);
            ConvenioID.IsParam = true;
            AddField(EstadoID);
            EstadoID.IsParam = true;
            AddField(Convenio);
            Convenio.IsParam = true;
            AddField(Dia);
            Dia.IsParam = true;
            AddField(Inicio);
            Inicio.IsParam = true;
            AddField(Fim);
            Fim.IsParam = true;
            AddField(Valor);
            Valor.IsParam = true;
            Convenio.IsReadOnly = false;
            Convenio.Length = 0;
            Convenio.Scale = 0;
            Convenio.IsDataField = true;
            Convenio.AllowEmpty = true;
            ConvenioID.GeneratePK = true;
            ConvenioID.IsReadOnly = false;
            ConvenioID.Length = 0;
            ConvenioID.Scale = 0;
            ConvenioID.IsDataField = true;
            ConvenioID.AllowEmpty = true;
            Dia.IsReadOnly = false;
            Dia.Length = 0;
            Dia.Scale = 0;
            Dia.IsDataField = true;
            Dia.AllowEmpty = true;
            EstadoID.IsReadOnly = false;
            EstadoID.Length = 0;
            EstadoID.Scale = 0;
            EstadoID.IsDataField = true;
            EstadoID.AllowEmpty = true;
            Fim.IsReadOnly = false;
            Fim.Length = 0;
            Fim.Scale = 0;
            Fim.IsDataField = true;
            Fim.AllowEmpty = true;
            Inicio.IsReadOnly = false;
            Inicio.Length = 0;
            Inicio.Scale = 0;
            Inicio.IsDataField = true;
            Inicio.AllowEmpty = true;
            Valor.IsReadOnly = false;
            Valor.Length = 0;
            Valor.Scale = 0;
            Valor.IsDataField = true;
            Valor.AllowEmpty = true;
        }

        #region XFields

        public class XFields
        {
        public XORMField Convenio => FechaFaturaConvenioSVC.Convenio;
        public XORMField ConvenioID => FechaFaturaConvenioSVC.ConvenioID;
        public XORMField Dia => FechaFaturaConvenioSVC.Dia;
        public XORMField EstadoID => FechaFaturaConvenioSVC.EstadoID;
        public XORMField Fim => FechaFaturaConvenioSVC.Fim;
        public XORMField Inicio => FechaFaturaConvenioSVC.Inicio;
        public XORMField Valor => FechaFaturaConvenioSVC.Valor;
        }
        #endregion XFields
        #region FechaFaturaConvenioSVC.XTuple

        public  class XTuple : XDataTuple
        {

            public XTuple()
            {
            }

            public XTuple(Object[] pSource)
                : base(pSource)
            {
            }

            public XTuple(Int32 pColCount)
               : this(new Object[pColCount])
            {
            }

            public readonly XFields Fields = new XFields();

            #nullable enable

        public String Convenio
        {
            get
            {
                return (String)Value[FechaFaturaConvenioSVC.Convenio.ID];
            }
            set
            {
                Value[FechaFaturaConvenioSVC.Convenio.ID] = value;
            }
        }
        public String? oConvenio
        {
            get
            {
                GetOldValue(FechaFaturaConvenioSVC.Convenio, out Object ovlr);
                return (String?)ovlr;
            }
        }

        public Int64 ConvenioID
        {
            get
            {
                return (Int64)Value[FechaFaturaConvenioSVC.ConvenioID.ID];
            }
            set
            {
                Value[FechaFaturaConvenioSVC.ConvenioID.ID] = value;
            }
        }
        public Int64? oConvenioID
        {
            get
            {
                GetOldValue(FechaFaturaConvenioSVC.ConvenioID, out Object ovlr);
                return (Int64?)ovlr;
            }
        }

        public Int32 Dia
        {
            get
            {
                return (Int32)Value[FechaFaturaConvenioSVC.Dia.ID];
            }
            set
            {
                Value[FechaFaturaConvenioSVC.Dia.ID] = value;
            }
        }
        public Int32? oDia
        {
            get
            {
                GetOldValue(FechaFaturaConvenioSVC.Dia, out Object ovlr);
                return (Int32?)ovlr;
            }
        }

        public Boolean EstadoID
        {
            get
            {
                return (Boolean)Value[FechaFaturaConvenioSVC.EstadoID.ID];
            }
            set
            {
                Value[FechaFaturaConvenioSVC.EstadoID.ID] = value;
            }
        }
        public Boolean? oEstadoID
        {
            get
            {
                GetOldValue(FechaFaturaConvenioSVC.EstadoID, out Object ovlr);
                return (Boolean?)ovlr;
            }
        }

        public DateTime Fim
        {
            get
            {
                return (DateTime)Value[FechaFaturaConvenioSVC.Fim.ID];
            }
            set
            {
                Value[FechaFaturaConvenioSVC.Fim.ID] = value;
            }
        }
        public DateTime? oFim
        {
            get
            {
                GetOldValue(FechaFaturaConvenioSVC.Fim, out Object ovlr);
                return (DateTime?)ovlr;
            }
        }

        public DateTime Inicio
        {
            get
            {
                return (DateTime)Value[FechaFaturaConvenioSVC.Inicio.ID];
            }
            set
            {
                Value[FechaFaturaConvenioSVC.Inicio.ID] = value;
            }
        }
        public DateTime? oInicio
        {
            get
            {
                GetOldValue(FechaFaturaConvenioSVC.Inicio, out Object ovlr);
                return (DateTime?)ovlr;
            }
        }

        public Decimal Valor
        {
            get
            {
                return (Decimal)Value[FechaFaturaConvenioSVC.Valor.ID];
            }
            set
            {
                Value[FechaFaturaConvenioSVC.Valor.ID] = value;
            }
        }
        public Decimal? oValor
        {
            get
            {
                GetOldValue(FechaFaturaConvenioSVC.Valor, out Object ovlr);
                return (Decimal?)ovlr;
            }
        }

            #nullable disable
        }
        #endregion FechaFaturaConvenioSVC.XTuple

        #region FechaFaturaConvenioSVC.XRule
        public abstract class XRule : XServiceUtilRule<FechaFaturaConvenioSVC.XDataSet, FechaFaturaConvenioSVC, FechaFaturaConvenioSVC.XTuple>
        {
        }
        #endregion FechaFaturaConvenioSVC.XRule

        #region FechaFaturaConvenioSVC.XDataSet

        public class XDataSet : XDataSet<FechaFaturaConvenioSVC.XTuple>
        {
            public XDataSet()
            {
                DataSetType = typeof(FechaFaturaConvenioSVC.XDataSet);
            }
        }

        public class XDataSet<T> : XServiceDataSet<FechaFaturaConvenioSVC.XTuple> where T : XDataTuple
        {

            public Guid Convenio => FechaFaturaConvenioSVC.Convenio.ID;
            public Guid ConvenioID => FechaFaturaConvenioSVC.ConvenioID.ID;
            public Guid Dia => FechaFaturaConvenioSVC.Dia.ID;
            public Guid EstadoID => FechaFaturaConvenioSVC.EstadoID.ID;
            public Guid Fim => FechaFaturaConvenioSVC.Fim.ID;
            public Guid Inicio => FechaFaturaConvenioSVC.Inicio.ID;
            public Guid Valor => FechaFaturaConvenioSVC.Valor.ID;

            public XDataSet()
            {
                DataSetType = typeof(FechaFaturaConvenioSVC.XDataSet);
            }

        }
        #endregion FechaFaturaConvenioSVC.XDataSet

        [Guid(FechaFaturaConvenioSVC.sCID)]
        public  interface XService : XIBaseService
        {
            new XDataSet DataSet
            {
                get;
            }
            new XTuple NewTuple(Object pPKValue = null);
             IEnumerable<XTuple> Tuples
            {
                get;
            }
             XTuple Current
            {
                get;
            }
            new XDataSet Get(XServiceData pData);
             XDataSet Get(params Object[] pWhere);
        }
        [XRegister(typeof(_Service), _Service.sCID, typeof(FechaFaturaConvenioSVC))]
        protected class _Service : Service<FechaFaturaConvenioSVC, XDataSet, XTuple>
        {
            public const String sCID = "32FA178E-B711-48F1-9A43-0FF0C21C9538";
            public Guid gCID = new Guid(sCID);
        }

        public class Service<TModel, TDataSet, TTuple> : XBaseService<FechaFaturaConvenioSVC, XDataSet, XTuple>, XService
             where TModel : FechaFaturaConvenioSVC, new()
             where TDataSet : XDataSet, new()
             where TTuple : XTuple
        {
            XDataSet XService.DataSet => (XDataSet)DataSet;
            XTuple XService.NewTuple(Object pPKValue)
            {
                return (XTuple)NewTuple(pPKValue);
            }
            public new XDataTuple NewTuple(Object pPKValue = null)
            {
                return (XTuple)base.NewTuple(pPKValue);
            }
            IEnumerable<XTuple> XService.Tuples => (IEnumerable<XTuple>)Tuples;
            XTuple XService.Current => (XTuple )Current;
            XDataSet XService.Get(XServiceData pData)
            {
                return (XDataSet)Get(pData);
            }
            XDataSet XService.Get(params Object[] pWhere)
            {
                return (XDataSet)Get(pWhere);
            }
            public Service()
            {
                ID = gCID;
            }
        }
    }

}