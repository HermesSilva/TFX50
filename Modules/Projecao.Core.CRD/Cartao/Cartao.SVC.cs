//<auto-generated/>
using System;
using System.Linq;
using Newtonsoft.Json;
using TFX.Core.Objects;
using TFX.Core.Model.Data;
using TFX.Core.Model.Cache;
using TFX.Core.Reflections;
using TFX.Core.Service.Job;
using TFX.Core.Service.SVC;
using Projecao.Core.CRD.DB;
using TFX.Core.Service.Apps;
using TFX.Core.Model.DIC.SVC;
using TFX.Core.Model.DIC.ORM;
using TFX.Core.Model.DIC.FRM;
using TFX.Core.Model.DIC.APP;
using TFX.Core.Model.DIC.RPT;
using TFX.Core.Model.Services;
using TFX.Core.Model.DIC.Types;
using TFX.Core.Model.Interfaces;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Projecao.Core.CRD.Cartao
{
    [XRegister(typeof(CartaoSVC), sCID)]
    [XDASESource(@"D:\Tootega\Source\TFX20\Modules\Projecao.Core.CRD\Projecao.Core.CRD.csproj", @"D:\Tootega\Source\TFX20\Modules\Projecao.Core.CRD\Cartao\Cartao.dssvc")]
    public class CartaoSVC : XSVCModel
    {
        #region CartaoFilterFRM

        [XRegister(typeof(CartaoFilterFRM), sCID)]
        public class CartaoFilterFRM : XFRMModel
        {
            public const String sCID = "814BDEEA-92F8-4430-957D-7CECBF3BD63A";
            static CartaoFilterFRM()
            {
                gCID = new Guid(sCID);
            }
            public CartaoFilterFRM()
            {
                ID = gCID;
                Name = "CartaoFilter";
                Title = "";
                MinRows = 1;
                ConfigCID = new Guid("00000000-0000-0000-0000-000000000000");
                ConfigPKFilter = false;
                Rect = new XRect(0, 0, 929, 92);
                Style = XFRMStyle.Normal;
                ActionContext = XActionContext.All;
                AddItem(CRDxConvenioID);
                CRDxConvenioID.ForceRW = true;
                CRDxConvenioID.CanInsert = true;
                CRDxConvenioID.CanUpdate = true;
                CRDxConvenioID.RowCount = 1;
                CRDxConvenioID.ColCount = 9;
                CRDxConvenioID.RowCountSmall = 1;
                CRDxConvenioID.ColCountSmall = 9;
                CRDxConvenioID.IsHidden = false;
                CRDxConvenioID.IsHiddenSmall = false;
                CRDxConvenioID.AdditionalTitle = "";
                CRDxConvenioID.Location = 1;
                CRDxConvenioID.EditorCID = new Guid("66290387-F0AD-4746-A1F7-B0D8D4C5C2EE");
                CRDxConvenioID.FormImplace = true;
                CRDxConvenioID.Operator = XOperator.EqualTo;
                CRDxConvenioID.JustifyHeight = false;
                CRDxConvenioID.AllowEmpty = true;
                CRDxConvenioID.FontColor = "#000000";
                CRDxConvenioID.FontStyle = XFontStyle.Normal;
                CRDxConvenioID.ShowFooter = false;
                CRDxConvenioID.ViewSAM = new Guid("00000000-0000-0000-0000-000000000000");
                CRDxConvenioID.Scale = 0;
                CRDxConvenioID.Length = 0;
                CRDxConvenioID.SearchAction = XSearchAction.Default;
                CRDxConvenioID.TypeID = XInt64.CID;
                CRDxConvenioID.AdditionalFieldsID = new Guid[] {  };
                CRDxConvenioID.AdditionalDataFieldsID = new Guid[] {  };
                CRDxConvenioID.TargetFilterFieldID = new Guid[] {  };
                CRDxConvenioID.SourceFilterFieldID = new Guid[] {  };
                CRDxConvenioID.TargetDisplayFieldID = new Guid[] { new Guid("D6CAE367-09AE-4E5B-82B0-7E0CCE7A3FBF") };
                CRDxConvenioID.SourceDisplayFieldID = new Guid[] { new Guid("C972E047-4809-488B-9F2A-F2EA8ED46235") };
                CRDxConvenioID.DataSourceID = global::Projecao.Core.CRD.ReadOnly.ConvenioSVC.gCID;
                CRDxConvenioID.AutoLoad = false;
                CRDxConvenioID.FilterInative = true;
                CRDxConvenioID.IsAnswer = false;
                CRDxConvenioID.AllowMultiSelect = false;
                AddItem(Nome);
                Nome.ForceRW = true;
                Nome.CanInsert = true;
                Nome.CanUpdate = true;
                Nome.RowCount = 1;
                Nome.ColCount = 23;
                Nome.RowCountSmall = 1;
                Nome.ColCountSmall = 23;
                Nome.IsHidden = false;
                Nome.IsHiddenSmall = false;
                Nome.AdditionalTitle = "";
                Nome.Location = 2;
                Nome.EditorCID = new Guid("F5982E79-BA45-40FB-85E1-9F2C8B90B6EF");
                Nome.FormImplace = true;
                Nome.Operator = XOperator.Like;
                Nome.JustifyHeight = false;
                Nome.AllowEmpty = true;
                Nome.FontColor = "#000000";
                Nome.FontStyle = XFontStyle.Normal;
                Nome.ShowFooter = false;
                Nome.ViewSAM = new Guid("00000000-0000-0000-0000-000000000000");
                Nome.Scale = 0;
                Nome.Length = 256;
                Nome.SearchAction = XSearchAction.Default;
                Nome.TypeID = XString.CID;
                Nome.AdditionalFieldsID = new Guid[] { new Guid("CFEA7705-106B-4EBE-A5B4-24B7F3F26A71") };
                Nome.AdditionalDataFieldsID = new Guid[] {  };
                Nome.TargetFilterFieldID = new Guid[] {  };
                Nome.SourceFilterFieldID = new Guid[] {  };
                Nome.TargetDisplayFieldID = new Guid[] {  };
                Nome.SourceDisplayFieldID = new Guid[] {  };
                Nome.AutoLoad = false;
                Nome.FilterInative = true;
                Nome.IsAnswer = false;
                Nome.AllowMultiSelect = false;
            }
            public XFRMField CRDxConvenioID = new XFRMField(new Guid("9FB852A4-6F45-4910-8161-306D3B5B171F"), "CRDxConvenioID", "Convênio", XInt64.CID, 1, 9, false, gCID, null, new Guid("6036B51D-DAF8-4B71-A679-CA621A1D75FF")); // Int64;
            public XFRMField Nome = new XFRMField(new Guid("D0C2A8A0-CD4C-40D2-87D5-E086C9BB8C0B"), "Nome", "Conveniado\\Numero do Cartão", XString.CID, 1, 23, false, gCID, null, new Guid("D6CAE367-09AE-4E5B-82B0-7E0CCE7A3FBF")); // String;
            public static class Fields
            {
                public static XFieldInfo CRDxConvenioID = new XFieldInfo(new Guid("9FB852A4-6F45-4910-8161-306D3B5B171F"), "CRDxConvenioID", "Convênio", typeof(Int64));
                public static XFieldInfo Nome = new XFieldInfo(new Guid("D0C2A8A0-CD4C-40D2-87D5-E086C9BB8C0B"), "Nome", @"Conveniado\Numero do Cartão", typeof(String));
            }
        }

        #endregion CartaoFilterFRM

        public const String sCID = "C6ACC4A4-82F9-4AC3-B25D-E077BE469DB2";
        public static Guid gCID = new Guid(sCID);
        public static XSVCReference CRDxConveniado_ERPxPessoaFisicaID_SYSxPessoa_SYSxPessoaID; // CRDxConveniado.ERPxPessoaFisicaID --> SYSxPessoa.SYSxPessoaID
        public static XSVCReference CRDxCartaoEstado_CRDxCartaoEstadoID_CRDxCartao_CRDxCartaoEstadoID; // CRDxCartaoEstado.CRDxCartaoEstadoID --> CRDxCartao.CRDxCartaoEstadoID
        public static XSVCReference CRDxConveniado_CRDxConveniadoID_CRDxCartao_CRDxConveniadoID; // CRDxConveniado.CRDxConveniadoID --> CRDxCartao.CRDxConveniadoID

        #region xCRDxConveniado 
        public class xCRDxConveniado : XSVCTable
        {

            public static Guid gCID => new Guid("48B3135B-E398-4DA3-96F8-4A516A0BF99A");

            public xCRDxConveniado()
            {
                Name = "CRDxConveniado";
                Alias = "CRDxConveniado";
                ID = gCID;
                ParentID =  global::Projecao.Core.CRD.DB.CRDx.CRDxConveniado.gCID;

                Items.Add(CRDxConveniadoID, CRDxConveniadoID.ID);
                CRDxConveniadoID.Owner = this;
                CRDxConveniadoID.OwnerID = ID;
                CRDxConveniadoID.TableName = Name;
                Items.Add(Limite, Limite.ID);
                Limite.Owner = this;
                Limite.OwnerID = ID;
                Limite.TableName = Name;
                Limite.Alias = "Limite";
                Items.Add(Inicio, Inicio.ID);
                Inicio.Owner = this;
                Inicio.OwnerID = ID;
                Inicio.TableName = Name;
                Items.Add(CRDxConvenioID, CRDxConvenioID.ID);
                CRDxConvenioID.Owner = this;
                CRDxConvenioID.OwnerID = ID;
                CRDxConvenioID.TableName = Name;
                Items.Add(Matricula, Matricula.ID);
                Matricula.Owner = this;
                Matricula.OwnerID = ID;
                Matricula.TableName = Name;
                Items.Add(SYSxEstadoID, SYSxEstadoID.ID);
                SYSxEstadoID.Owner = this;
                SYSxEstadoID.OwnerID = ID;
                SYSxEstadoID.TableName = Name;
                Items.Add(ERPxPessoaFisicaID, ERPxPessoaFisicaID.ID);
                ERPxPessoaFisicaID.Owner = this;
                ERPxPessoaFisicaID.OwnerID = ID;
                ERPxPessoaFisicaID.TableName = Name;
                ERPxPessoaFisicaID.Alias = "ERPxPessoaFisicaID";
            }

            public static XORMFaceField CRDxConveniadoID = new XORMFaceField(global::Projecao.Core.CRD.DB.CRDx.CRDxConveniado.CRDxConveniadoID, new Guid("56270F71-CD5D-47D7-8AE3-82FBEE7BDE90"), "CRDxConveniadoID", "Conveniado");
            public static XORMDecimalField Limite = new XORMDecimalField(global::Projecao.Core.CRD.DB.CRDx.CRDxConveniado.Limite, new Guid("2011F160-6C0C-413C-B86A-A84C934A0578"), "Limite", "Limite");
            public static XORMDateTimeField Inicio = new XORMDateTimeField(global::Projecao.Core.CRD.DB.CRDx.CRDxConveniado.Inicio, new Guid("63224415-6BB7-403C-A084-8026A08D43F6"), "Inicio", "Início");
            public static XORMFKField CRDxConvenioID = new XORMFKField(global::Projecao.Core.CRD.DB.CRDx.CRDxConveniado.CRDxConvenioID, new Guid("6036B51D-DAF8-4B71-A679-CA621A1D75FF"), "CRDxConvenioID", "Convênio");
            public static XORMField Matricula = new XORMField(global::Projecao.Core.CRD.DB.CRDx.CRDxConveniado.Matricula, new Guid("1A6F35C8-80DC-42C3-BCAD-3E595E5AF730"), "Matricula", "Matrícula no RH");
            public static XORMStateField SYSxEstadoID = new XORMStateField(global::Projecao.Core.CRD.DB.CRDx.CRDxConveniado.SYSxEstadoID, new Guid("815ED785-4101-4B8C-BBD4-BF4BC1AB8307"), "SYSxEstadoID", "Estado");
            public static XORMFKField ERPxPessoaFisicaID = new XORMFKField(global::Projecao.Core.CRD.DB.CRDx.CRDxConveniado.ERPxPessoaFisicaID, new Guid("92EA63CF-35AA-424F-9EEA-D14B59FED349"), "ERPxPessoaFisicaID", "Pessoa Física");
        }
        #endregion xCRDxConveniado 


        #region xCRDxCartao 
        public class xCRDxCartao : XSVCTable
        {

            public static Guid gCID => new Guid("57B2902A-CA68-40FF-A44D-3813849ACF81");

            public xCRDxCartao()
            {
                Name = "CRDxCartao";
                Alias = "CRDxCartao";
                ID = gCID;
                ParentID =  global::Projecao.Core.CRD.DB.CRDx.CRDxCartao.gCID;

                Items.Add(CRDxConveniadoID, CRDxConveniadoID.ID);
                CRDxConveniadoID.Owner = this;
                CRDxConveniadoID.OwnerID = ID;
                CRDxConveniadoID.TableName = Name;
                CRDxConveniadoID.Alias = "CRDxConveniadoID";
                Items.Add(CRDxCartaoID, CRDxCartaoID.ID);
                CRDxCartaoID.Owner = this;
                CRDxCartaoID.OwnerID = ID;
                CRDxCartaoID.TableName = Name;
                CRDxCartaoID.Alias = "CRDxCartaoID";
                Items.Add(Vencimento, Vencimento.ID);
                Vencimento.Owner = this;
                Vencimento.OwnerID = ID;
                Vencimento.TableName = Name;
                Vencimento.Alias = "Vencimento";
                Items.Add(Emissao, Emissao.ID);
                Emissao.Owner = this;
                Emissao.OwnerID = ID;
                Emissao.TableName = Name;
                Emissao.Alias = "Emissao";
                Items.Add(Numero, Numero.ID);
                Numero.Owner = this;
                Numero.OwnerID = ID;
                Numero.TableName = Name;
                Numero.Alias = "Numero";
                Items.Add(CRDxCartaoEstadoID, CRDxCartaoEstadoID.ID);
                CRDxCartaoEstadoID.Owner = this;
                CRDxCartaoEstadoID.OwnerID = ID;
                CRDxCartaoEstadoID.TableName = Name;
                CRDxCartaoEstadoID.Alias = "CRDxCartaoEstadoID";
            }

            public static XORMFKField CRDxConveniadoID = new XORMFKField(global::Projecao.Core.CRD.DB.CRDx.CRDxCartao.CRDxConveniadoID, new Guid("E5CC1739-1668-4A06-97CF-E9D2A3A009F7"), "CRDxConveniadoID", "Conveniado");
            public static XORMFaceField CRDxCartaoID = new XORMFaceField(global::Projecao.Core.CRD.DB.CRDx.CRDxCartao.CRDxCartaoID, new Guid("E25CFB9E-27D7-461E-91B2-F255FBEA0B8F"), "CRDxCartaoID", "Cartão");
            public static XORMDateField Vencimento = new XORMDateField(global::Projecao.Core.CRD.DB.CRDx.CRDxCartao.Vencimento, new Guid("58432717-3F57-4684-BEBC-E527F04B062B"), "Vencimento", "Vencimento");
            public static XORMDateField Emissao = new XORMDateField(global::Projecao.Core.CRD.DB.CRDx.CRDxCartao.Emissao, new Guid("85B1F7B3-2199-4A89-913A-5111F73EB0ED"), "Emissao", "Emissão");
            public static XORMField Numero = new XORMField(global::Projecao.Core.CRD.DB.CRDx.CRDxCartao.Numero, new Guid("74399AA2-9203-4C3E-A24C-C6076A87F342"), "Numero", "Número");
            public static XORMFKField CRDxCartaoEstadoID = new XORMFKField(global::Projecao.Core.CRD.DB.CRDx.CRDxCartao.CRDxCartaoEstadoID, new Guid("982BB74B-8718-4DD4-9D95-EC2024D787FF"), "CRDxCartaoEstadoID", "Estado do cartão");
        }
        #endregion xCRDxCartao 


        #region xCRDxCartaoEstado 
        public class xCRDxCartaoEstado : XSVCTable
        {

            public static Guid gCID => new Guid("927A38A8-745A-4BD7-BCFA-337CA24D6CA7");

            public xCRDxCartaoEstado()
            {
                Name = "CRDxCartaoEstado";
                Alias = "CRDxCartaoEstado";
                ID = gCID;
                ParentID =  global::Projecao.Core.CRD.DB.CRDx.CRDxCartaoEstado.gCID;

                Items.Add(Estado, Estado.ID);
                Estado.Owner = this;
                Estado.OwnerID = ID;
                Estado.TableName = Name;
                Estado.Alias = "Estado";
                Items.Add(CRDxCartaoEstadoID, CRDxCartaoEstadoID.ID);
                CRDxCartaoEstadoID.Owner = this;
                CRDxCartaoEstadoID.OwnerID = ID;
                CRDxCartaoEstadoID.TableName = Name;
            }

            public static XORMFaceField Estado = new XORMFaceField(global::Projecao.Core.CRD.DB.CRDx.CRDxCartaoEstado.Estado, new Guid("500CDE26-ED2D-46E5-9677-4E9AB9E9FC01"), "Estado", "Estado");
            public static XORMPKField CRDxCartaoEstadoID = new XORMPKField(global::Projecao.Core.CRD.DB.CRDx.CRDxCartaoEstado.CRDxCartaoEstadoID, new Guid("C428ED79-554C-4939-AA96-F4BE1799BD8E"), "CRDxCartaoEstadoID", "Estado do cartão");
        }
        #endregion xCRDxCartaoEstado 


        #region xSYSxPessoa 
        public class xSYSxPessoa : XSVCTable
        {

            public static Guid gCID => new Guid("9CB3329D-B520-4EC0-B28B-114198F925D5");

            public xSYSxPessoa()
            {
                Name = "SYSxPessoa";
                Alias = "SYSxPessoa";
                ID = gCID;
                ParentID =  global::TFX.Core.Service.Apps.SYSx.SYSxPessoa.gCID;

                Items.Add(Nome, Nome.ID);
                Nome.Owner = this;
                Nome.OwnerID = ID;
                Nome.TableName = Name;
                Nome.Alias = "Nome";
                Items.Add(SYSxPessoaID, SYSxPessoaID.ID);
                SYSxPessoaID.Owner = this;
                SYSxPessoaID.OwnerID = ID;
                SYSxPessoaID.TableName = Name;
            }

            public static XORMFaceField Nome = new XORMFaceField(global::TFX.Core.Service.Apps.SYSx.SYSxPessoa.Nome, new Guid("D6CAE367-09AE-4E5B-82B0-7E0CCE7A3FBF"), "Nome", "Nome");
            public static XORMPKField SYSxPessoaID = new XORMPKField(global::TFX.Core.Service.Apps.SYSx.SYSxPessoa.SYSxPessoaID, new Guid("805E4ACF-97D9-439A-BE5B-D234C2F825C6"), "SYSxPessoaID", "Pessoas");
        }
        #endregion xSYSxPessoa 


        public xCRDxCartao CRDxCartao;
        public xCRDxCartaoEstado CRDxCartaoEstado;
        public xCRDxConveniado CRDxConveniado;
        public xSYSxPessoa SYSxPessoa;

        public CartaoSVC()
        {
            TupleType = typeof(CartaoSVC.XTuple);
            DataSetType = typeof(CartaoSVC.XDataSet);
            ServiceRuleCID = new Guid("1B8C3CF7-B84D-47A4-B3B5-BDE5F9567349");
            OnlyActives = false;
            Actions = XSVCAction.All;
            Type = XServiceType.Default;
            ID = new Guid("C6ACC4A4-82F9-4AC3-B25D-E077BE469DB2");
            Name = "Cartao";
            Title = "Cartão";
            IsCacheable = false;
            CompanyControl = false;
            IsJob = false;
            AutoLoad = true;
            FreeForUsers = false;
            ServerSideNewRecord = false;
            UseDistinct = false;
            JobType = XJobType.Default;
            CanExport = false;
            ModuleID = new Guid("EBB5930C-9A21-4AB6-993E-B86F40039784");
            Rights = new Int16[] { 1, 2, 3, 4, 5, 6, 7 }; 
            FilterFormID = new Guid("814BDEEA-92F8-4430-957D-7CECBF3BD63A");
            IsReadOnly = false;
            ClientScript = "Projecao.Core.CRD.js";
            GridFields = new Guid[] { xCRDxCartao.Numero.ID, xCRDxCartaoEstado.Estado.ID, xCRDxCartao.Vencimento.ID, xCRDxCartao.Emissao.ID, xCRDxConveniado.Limite.ID, xSYSxPessoa.Nome.ID };
            OrderByFields = new Guid[] { xCRDxCartao.Numero.ID };
            DataSetFields = new Guid[] { xCRDxCartao.CRDxCartaoID.ID, xCRDxCartao.CRDxCartaoEstadoID.ID, xCRDxConveniado.ERPxPessoaFisicaID.ID, xCRDxCartao.CRDxConveniadoID.ID, xCRDxCartao.Emissao.ID, xCRDxCartao.Numero.ID, xCRDxCartao.Vencimento.ID, xCRDxCartaoEstado.Estado.ID, xCRDxConveniado.Limite.ID, xSYSxPessoa.Nome.ID };
            PKField = xCRDxCartao.CRDxCartaoID.ID;
            ConfigTableID = new Guid("12853B5C-BA3A-461D-A3CC-7D42FFEF7018");
            MasterRuleCID = new Guid("1B8C3CF7-B84D-47A4-B3B5-BDE5F9567349");
            CRDxCartao = new xCRDxCartao();
            CRDxCartao.IsReadOnly = false;
            AddTable(CRDxCartao);
            CRDxCartaoEstado = new xCRDxCartaoEstado();
            CRDxCartaoEstado.IsReadOnly = true;
            AddTable(CRDxCartaoEstado);
            CRDxConveniado = new xCRDxConveniado();
            CRDxConveniado.IsReadOnly = true;
            AddTable(CRDxConveniado);
            SYSxPessoa = new xSYSxPessoa();
            SYSxPessoa.IsReadOnly = true;
            AddTable(SYSxPessoa);
            MasterTableID = CRDxCartao.ID;
            CRDxConveniado_ERPxPessoaFisicaID_SYSxPessoa_SYSxPessoaID = AddReference(new XSVCReference(new Guid("51F30318-072B-4AF3-BA78-66FD3D2E003B"), "FK_51F30318072B4AF3BA7866FD3D2E003B", CartaoSVC.xCRDxConveniado.gCID, xCRDxConveniado.ERPxPessoaFisicaID.ID, CartaoSVC.xSYSxPessoa.gCID, xSYSxPessoa.SYSxPessoaID.ID, XJoinType.Inner)); // CRDxConveniado.ERPxPessoaFisicaID --> SYSxPessoa.SYSxPessoaID
            CRDxCartaoEstado_CRDxCartaoEstadoID_CRDxCartao_CRDxCartaoEstadoID = AddReference(new XSVCReference(new Guid("557722FC-F9D0-41EA-AE42-876BA713E5A6"), "FK_557722FCF9D041EAAE42876BA713E5A6", CartaoSVC.xCRDxCartaoEstado.gCID, xCRDxCartaoEstado.CRDxCartaoEstadoID.ID, CartaoSVC.xCRDxCartao.gCID, xCRDxCartao.CRDxCartaoEstadoID.ID, XJoinType.Inner)); // CRDxCartaoEstado.CRDxCartaoEstadoID --> CRDxCartao.CRDxCartaoEstadoID
            CRDxConveniado_CRDxConveniadoID_CRDxCartao_CRDxConveniadoID = AddReference(new XSVCReference(new Guid("6F3E0ACF-95E4-48FC-8AED-03B965AF143C"), "FK_6F3E0ACF95E448FC8AED03B965AF143C", CartaoSVC.xCRDxConveniado.gCID, xCRDxConveniado.CRDxConveniadoID.ID, CartaoSVC.xCRDxCartao.gCID, xCRDxCartao.CRDxConveniadoID.ID, XJoinType.Inner)); // CRDxConveniado.CRDxConveniadoID --> CRDxCartao.CRDxConveniadoID
            xCRDxCartao.CRDxCartaoEstadoID.IsDataField = true;
            xCRDxCartao.CRDxCartaoEstadoID.AllowEmpty = true;
            xCRDxCartao.CRDxCartaoID.GeneratePK = true;
            xCRDxCartao.CRDxCartaoID.IsDataField = true;
            xCRDxCartao.CRDxCartaoID.AllowEmpty = true;
            xCRDxCartao.CRDxConveniadoID.IsDataField = true;
            xCRDxCartao.CRDxConveniadoID.AllowEmpty = true;
            xCRDxCartao.Emissao.IsDataField = true;
            xCRDxCartao.Emissao.AllowEmpty = true;
            xCRDxConveniado.ERPxPessoaFisicaID.IsReadOnly = true;
            xCRDxConveniado.ERPxPessoaFisicaID.IsDataField = true;
            xCRDxConveniado.ERPxPessoaFisicaID.AllowEmpty = true;
            xCRDxCartaoEstado.Estado.IsReadOnly = true;
            xCRDxCartaoEstado.Estado.Length = 20;
            xCRDxCartaoEstado.Estado.IsDataField = true;
            xCRDxCartaoEstado.Estado.AllowEmpty = true;
            xCRDxConveniado.Limite.IsReadOnly = true;
            xCRDxConveniado.Limite.Length = 25;
            xCRDxConveniado.Limite.Scale = 2;
            xCRDxConveniado.Limite.IsDataField = true;
            xCRDxConveniado.Limite.AllowEmpty = true;
            xSYSxPessoa.Nome.IsReadOnly = true;
            xSYSxPessoa.Nome.Length = 256;
            xSYSxPessoa.Nome.IsDataField = true;
            xSYSxPessoa.Nome.AllowEmpty = true;
            xCRDxCartao.Numero.OrderType = XOrderType.Asc;
            xCRDxCartao.Numero.Length = 16;
            xCRDxCartao.Numero.IsDataField = true;
            xCRDxCartao.Numero.AllowEmpty = true;
            xCRDxCartao.Vencimento.IsDataField = true;
            xCRDxCartao.Vencimento.AllowEmpty = true;
        }

        #region XFields

        public class XFields
        {
        public XORMField CRDxCartaoEstadoID => xCRDxCartao.CRDxCartaoEstadoID;
        public XORMField CRDxCartaoID => xCRDxCartao.CRDxCartaoID;
        public XORMField CRDxConveniadoID => xCRDxCartao.CRDxConveniadoID;
        public XORMField Emissao => xCRDxCartao.Emissao;
        public XORMField ERPxPessoaFisicaID => xCRDxConveniado.ERPxPessoaFisicaID;
        public XORMField Estado => xCRDxCartaoEstado.Estado;
        public XORMField Limite => xCRDxConveniado.Limite;
        public XORMField Nome => xSYSxPessoa.Nome;
        public XORMField Numero => xCRDxCartao.Numero;
        public XORMField Vencimento => xCRDxCartao.Vencimento;
        }
        #endregion XFields
        #region CartaoSVC.XTuple

        public  class XTuple : XDataTuple
        {

            public XTuple()
            {
            }

            public XTuple(Object[] pSource)
                : base(pSource)
            {
            }

            public XTuple(Int32 pColCount)
               : this(new Object[pColCount])
            {
            }

            public readonly XFields Fields = new XFields();

            #nullable enable

        public Int16 CRDxCartaoEstadoID
        {
            get
            {
                return (Int16)Value[CartaoSVC.xCRDxCartao.CRDxCartaoEstadoID.ID];
            }
            set
            {
                Value[CartaoSVC.xCRDxCartao.CRDxCartaoEstadoID.ID] = value;
            }
        }
        public Int16? oCRDxCartaoEstadoID
        {
            get
            {
                GetOldValue(CartaoSVC.xCRDxCartao.CRDxCartaoEstadoID, out Object ovlr);
                return (Int16?)ovlr;
            }
        }

        public Int32 CRDxCartaoID
        {
            get
            {
                return (Int32)Value[CartaoSVC.xCRDxCartao.CRDxCartaoID.ID];
            }
            set
            {
                Value[CartaoSVC.xCRDxCartao.CRDxCartaoID.ID] = value;
            }
        }
        public Int32? oCRDxCartaoID
        {
            get
            {
                GetOldValue(CartaoSVC.xCRDxCartao.CRDxCartaoID, out Object ovlr);
                return (Int32?)ovlr;
            }
        }

        public Int32 CRDxConveniadoID
        {
            get
            {
                return (Int32)Value[CartaoSVC.xCRDxCartao.CRDxConveniadoID.ID];
            }
            set
            {
                Value[CartaoSVC.xCRDxCartao.CRDxConveniadoID.ID] = value;
            }
        }
        public Int32? oCRDxConveniadoID
        {
            get
            {
                GetOldValue(CartaoSVC.xCRDxCartao.CRDxConveniadoID, out Object ovlr);
                return (Int32?)ovlr;
            }
        }

        public DateTime Emissao
        {
            get
            {
                return (DateTime)Value[CartaoSVC.xCRDxCartao.Emissao.ID];
            }
            set
            {
                Value[CartaoSVC.xCRDxCartao.Emissao.ID] = value;
            }
        }
        public DateTime? oEmissao
        {
            get
            {
                GetOldValue(CartaoSVC.xCRDxCartao.Emissao, out Object ovlr);
                return (DateTime?)ovlr;
            }
        }

        public Guid ERPxPessoaFisicaID
        {
            get
            {
                return (Guid)Value[CartaoSVC.xCRDxConveniado.ERPxPessoaFisicaID.ID];
            }
            set
            {
                Value[CartaoSVC.xCRDxConveniado.ERPxPessoaFisicaID.ID] = value;
            }
        }
        public Guid? oERPxPessoaFisicaID
        {
            get
            {
                GetOldValue(CartaoSVC.xCRDxConveniado.ERPxPessoaFisicaID, out Object ovlr);
                return (Guid?)ovlr;
            }
        }

        public String Estado
        {
            get
            {
                return (String)Value[CartaoSVC.xCRDxCartaoEstado.Estado.ID];
            }
            set
            {
                Value[CartaoSVC.xCRDxCartaoEstado.Estado.ID] = value;
            }
        }
        public String? oEstado
        {
            get
            {
                GetOldValue(CartaoSVC.xCRDxCartaoEstado.Estado, out Object ovlr);
                return (String?)ovlr;
            }
        }

        public Decimal Limite
        {
            get
            {
                return (Decimal)Value[CartaoSVC.xCRDxConveniado.Limite.ID];
            }
            set
            {
                Value[CartaoSVC.xCRDxConveniado.Limite.ID] = value;
            }
        }
        public Decimal? oLimite
        {
            get
            {
                GetOldValue(CartaoSVC.xCRDxConveniado.Limite, out Object ovlr);
                return (Decimal?)ovlr;
            }
        }

        public String Nome
        {
            get
            {
                return (String)Value[CartaoSVC.xSYSxPessoa.Nome.ID];
            }
            set
            {
                Value[CartaoSVC.xSYSxPessoa.Nome.ID] = value;
            }
        }
        public String? oNome
        {
            get
            {
                GetOldValue(CartaoSVC.xSYSxPessoa.Nome, out Object ovlr);
                return (String?)ovlr;
            }
        }

        public String Numero
        {
            get
            {
                return (String)Value[CartaoSVC.xCRDxCartao.Numero.ID];
            }
            set
            {
                Value[CartaoSVC.xCRDxCartao.Numero.ID] = value;
            }
        }
        public String? oNumero
        {
            get
            {
                GetOldValue(CartaoSVC.xCRDxCartao.Numero, out Object ovlr);
                return (String?)ovlr;
            }
        }

        public DateTime Vencimento
        {
            get
            {
                return (DateTime)Value[CartaoSVC.xCRDxCartao.Vencimento.ID];
            }
            set
            {
                Value[CartaoSVC.xCRDxCartao.Vencimento.ID] = value;
            }
        }
        public DateTime? oVencimento
        {
            get
            {
                GetOldValue(CartaoSVC.xCRDxCartao.Vencimento, out Object ovlr);
                return (DateTime?)ovlr;
            }
        }

            #nullable disable
        }
        #endregion CartaoSVC.XTuple

        #region CartaoSVC.XRule
        public abstract class XRule : XServiceRule<CartaoSVC.XDataSet, CartaoSVC, CartaoSVC.XTuple>
        {
        }
        #endregion CartaoSVC.XRule

        #region CartaoSVC.XDataSet

        public class XDataSet : XDataSet<CartaoSVC.XTuple>
        {
            public XDataSet()
            {
                DataSetType = typeof(CartaoSVC.XDataSet);
            }
        }

        public class XDataSet<T> : XServiceDataSet<CartaoSVC.XTuple> where T : XDataTuple
        {

            public Guid CRDxCartaoEstadoID => CartaoSVC.xCRDxCartao.CRDxCartaoEstadoID.ID;
            public Guid CRDxCartaoID => CartaoSVC.xCRDxCartao.CRDxCartaoID.ID;
            public Guid CRDxConveniadoID => CartaoSVC.xCRDxCartao.CRDxConveniadoID.ID;
            public Guid Emissao => CartaoSVC.xCRDxCartao.Emissao.ID;
            public Guid ERPxPessoaFisicaID => CartaoSVC.xCRDxConveniado.ERPxPessoaFisicaID.ID;
            public Guid Estado => CartaoSVC.xCRDxCartaoEstado.Estado.ID;
            public Guid Limite => CartaoSVC.xCRDxConveniado.Limite.ID;
            public Guid Nome => CartaoSVC.xSYSxPessoa.Nome.ID;
            public Guid Numero => CartaoSVC.xCRDxCartao.Numero.ID;
            public Guid Vencimento => CartaoSVC.xCRDxCartao.Vencimento.ID;

            public XDataSet()
            {
                DataSetType = typeof(CartaoSVC.XDataSet);
            }

        }
        #endregion CartaoSVC.XDataSet

        [Guid(CartaoSVC.sCID)]
        public  interface XService : XIBaseService
        {
            new XDataSet DataSet
            {
                get;
            }
            new XTuple NewTuple(Object pPKValue = null);
             IEnumerable<XTuple> Tuples
            {
                get;
            }
             XTuple Current
            {
                get;
            }
            new XDataSet Get(XServiceData pData);
             XDataSet Get(params Object[] pWhere);
        }
        [XRegister(typeof(_Service), _Service.sCID, typeof(CartaoSVC))]
        protected class _Service : Service<CartaoSVC, XDataSet, XTuple>
        {
            public const String sCID = "BC82961D-8228-4BF2-AEE7-2D3C5189444C";
            public Guid gCID = new Guid(sCID);
        }

        public class Service<TModel, TDataSet, TTuple> : XBaseService<CartaoSVC, XDataSet, XTuple>, XService
             where TModel : CartaoSVC, new()
             where TDataSet : XDataSet, new()
             where TTuple : XTuple
        {
            XDataSet XService.DataSet => (XDataSet)DataSet;
            XTuple XService.NewTuple(Object pPKValue)
            {
                return (XTuple)NewTuple(pPKValue);
            }
            public new XDataTuple NewTuple(Object pPKValue = null)
            {
                return (XTuple)base.NewTuple(pPKValue);
            }
            IEnumerable<XTuple> XService.Tuples => (IEnumerable<XTuple>)Tuples;
            XTuple XService.Current => (XTuple )Current;
            XDataSet XService.Get(XServiceData pData)
            {
                return (XDataSet)Get(pData);
            }
            XDataSet XService.Get(params Object[] pWhere)
            {
                return (XDataSet)Get(pWhere);
            }
            public Service()
            {
                ID = gCID;
            }
        }
    }

}