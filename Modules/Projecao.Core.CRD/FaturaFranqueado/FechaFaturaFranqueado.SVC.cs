//<auto-generated/>
using System;
using System.Linq;
using Newtonsoft.Json;
using TFX.Core.Objects;
using TFX.Core.Model.Data;
using TFX.Core.Model.Cache;
using TFX.Core.Reflections;
using TFX.Core.Service.Job;
using TFX.Core.Service.SVC;
using TFX.Core.Model.DIC.SVC;
using TFX.Core.Model.DIC.ORM;
using TFX.Core.Model.DIC.FRM;
using TFX.Core.Model.DIC.APP;
using TFX.Core.Model.DIC.RPT;
using TFX.Core.Model.Services;
using TFX.Core.Model.DIC.Types;
using TFX.Core.Model.Interfaces;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Projecao.Core.CRD.FaturaFranqueado
{
    [XRegister(typeof(FechaFaturaFranqueadoSVC), sCID)]
    [XDASESource(@"D:\Tootega\Source\TFX20\Modules\Projecao.Core.CRD\Projecao.Core.CRD.csproj", @"D:\Tootega\Source\TFX20\Modules\Projecao.Core.CRD\FaturaFranqueado\FechaFaturaFranqueado.dssvc")]
    public class FechaFaturaFranqueadoSVC : XSVCModel
    {
        #region FechaFaturaFranqueadoFilterFRM

        [XRegister(typeof(FechaFaturaFranqueadoFilterFRM), sCID)]
        public class FechaFaturaFranqueadoFilterFRM : XFRMModel
        {
            public const String sCID = "5AA30B3B-BB27-45BC-A5FE-B23322442E79";
            static FechaFaturaFranqueadoFilterFRM()
            {
                gCID = new Guid(sCID);
            }
            public FechaFaturaFranqueadoFilterFRM()
            {
                ID = gCID;
                Name = "FechaFaturaFranqueadoFilter";
                Title = "";
                MinRows = 0;
                ConfigCID = new Guid("00000000-0000-0000-0000-000000000000");
                ConfigPKFilter = false;
                Rect = new XRect(28, 28, 401, 250);
                Style = XFRMStyle.Normal;
                ActionContext = XActionContext.All;
            }
            public static class Fields
            {
            }
        }

        #endregion FechaFaturaFranqueadoFilterFRM

        public const String sCID = "84B2B8C5-157B-477C-A051-47171ABC4DEC";
        public static Guid gCID = new Guid(sCID);

        public static readonly XORMParameterField Fechamento = new XORMParameterField(new Guid("FFA662E8-DED6-42F2-82CD-1E97B9482CFD"), "Fechamento", "Fechamento", XInt16.CID, 0, 0, false, gCID, null);
        public static readonly XORMParameterField FranqueadoID = new XORMParameterField(new Guid("13EB32D2-AB31-4E59-8E30-BAD97B9A3BA6"), "FranqueadoID", "Franqueado", XInt64.CID, 0, 0, false, gCID, null);

        public FechaFaturaFranqueadoSVC()
        {
            TupleType = typeof(FechaFaturaFranqueadoSVC.XTuple);
            DataSetType = typeof(FechaFaturaFranqueadoSVC.XDataSet);
            ServiceRuleCID = new Guid("76F98AED-E3B6-412A-AE45-EDF55BFD5A5F");
            OnlyActives = false;
            Actions = XSVCAction.All;
            Type = XServiceType.Utility;
            ID = new Guid("84B2B8C5-157B-477C-A051-47171ABC4DEC");
            Name = "FechaFaturaFranqueado";
            Title = "Fecha Fatura de Franqueado";
            IsCacheable = false;
            CompanyControl = false;
            IsJob = false;
            AutoLoad = true;
            FreeForUsers = false;
            ServerSideNewRecord = false;
            UseDistinct = false;
            JobType = XJobType.Default;
            CanExport = false;
            ModuleID = new Guid("EBB5930C-9A21-4AB6-993E-B86F40039784");
            Rights = new Int16[] { 1 }; 
            IsReadOnly = true;
            ClientScript = "Projecao.Core.CRD.js";
            DataSetFields = new Guid[] { FranqueadoID.ID, Fechamento.ID };
            PKField = FranqueadoID.ID;
            MasterRuleCID = new Guid("76F98AED-E3B6-412A-AE45-EDF55BFD5A5F");
            AddField(FranqueadoID);
            FranqueadoID.IsParam = true;
            AddField(Fechamento);
            Fechamento.IsParam = true;
            Fechamento.IsReadOnly = false;
            Fechamento.Length = 0;
            Fechamento.Scale = 0;
            Fechamento.IsDataField = true;
            Fechamento.AllowEmpty = true;
            FranqueadoID.GeneratePK = true;
            FranqueadoID.IsReadOnly = false;
            FranqueadoID.Length = 0;
            FranqueadoID.Scale = 0;
            FranqueadoID.IsDataField = true;
            FranqueadoID.AllowEmpty = true;
        }

        #region XFields

        public class XFields
        {
        public XORMField Fechamento => FechaFaturaFranqueadoSVC.Fechamento;
        public XORMField FranqueadoID => FechaFaturaFranqueadoSVC.FranqueadoID;
        }
        #endregion XFields
        #region FechaFaturaFranqueadoSVC.XTuple

        public  class XTuple : XDataTuple
        {

            public XTuple()
            {
            }

            public XTuple(Object[] pSource)
                : base(pSource)
            {
            }

            public XTuple(Int32 pColCount)
               : this(new Object[pColCount])
            {
            }

            public readonly XFields Fields = new XFields();

            #nullable enable

        public Int16 Fechamento
        {
            get
            {
                return (Int16)Value[FechaFaturaFranqueadoSVC.Fechamento.ID];
            }
            set
            {
                Value[FechaFaturaFranqueadoSVC.Fechamento.ID] = value;
            }
        }
        public Int16? oFechamento
        {
            get
            {
                GetOldValue(FechaFaturaFranqueadoSVC.Fechamento, out Object ovlr);
                return (Int16?)ovlr;
            }
        }

        public Int64 FranqueadoID
        {
            get
            {
                return (Int64)Value[FechaFaturaFranqueadoSVC.FranqueadoID.ID];
            }
            set
            {
                Value[FechaFaturaFranqueadoSVC.FranqueadoID.ID] = value;
            }
        }
        public Int64? oFranqueadoID
        {
            get
            {
                GetOldValue(FechaFaturaFranqueadoSVC.FranqueadoID, out Object ovlr);
                return (Int64?)ovlr;
            }
        }

            #nullable disable
        }
        #endregion FechaFaturaFranqueadoSVC.XTuple

        #region FechaFaturaFranqueadoSVC.XRule
        public abstract class XRule : XServiceUtilRule<FechaFaturaFranqueadoSVC.XDataSet, FechaFaturaFranqueadoSVC, FechaFaturaFranqueadoSVC.XTuple>
        {
        }
        #endregion FechaFaturaFranqueadoSVC.XRule

        #region FechaFaturaFranqueadoSVC.XDataSet

        public class XDataSet : XDataSet<FechaFaturaFranqueadoSVC.XTuple>
        {
            public XDataSet()
            {
                DataSetType = typeof(FechaFaturaFranqueadoSVC.XDataSet);
            }
        }

        public class XDataSet<T> : XServiceDataSet<FechaFaturaFranqueadoSVC.XTuple> where T : XDataTuple
        {

            public Guid Fechamento => FechaFaturaFranqueadoSVC.Fechamento.ID;
            public Guid FranqueadoID => FechaFaturaFranqueadoSVC.FranqueadoID.ID;

            public XDataSet()
            {
                DataSetType = typeof(FechaFaturaFranqueadoSVC.XDataSet);
            }

        }
        #endregion FechaFaturaFranqueadoSVC.XDataSet

        [Guid(FechaFaturaFranqueadoSVC.sCID)]
        public  interface XService : XIBaseService
        {
            new XDataSet DataSet
            {
                get;
            }
            new XTuple NewTuple(Object pPKValue = null);
             IEnumerable<XTuple> Tuples
            {
                get;
            }
             XTuple Current
            {
                get;
            }
            new XDataSet Get(XServiceData pData);
             XDataSet Get(params Object[] pWhere);
        }
        [XRegister(typeof(_Service), _Service.sCID, typeof(FechaFaturaFranqueadoSVC))]
        protected class _Service : Service<FechaFaturaFranqueadoSVC, XDataSet, XTuple>
        {
            public const String sCID = "EC990CD3-9609-454E-B7D2-59A21AC2264B";
            public Guid gCID = new Guid(sCID);
        }

        public class Service<TModel, TDataSet, TTuple> : XBaseService<FechaFaturaFranqueadoSVC, XDataSet, XTuple>, XService
             where TModel : FechaFaturaFranqueadoSVC, new()
             where TDataSet : XDataSet, new()
             where TTuple : XTuple
        {
            XDataSet XService.DataSet => (XDataSet)DataSet;
            XTuple XService.NewTuple(Object pPKValue)
            {
                return (XTuple)NewTuple(pPKValue);
            }
            public new XDataTuple NewTuple(Object pPKValue = null)
            {
                return (XTuple)base.NewTuple(pPKValue);
            }
            IEnumerable<XTuple> XService.Tuples => (IEnumerable<XTuple>)Tuples;
            XTuple XService.Current => (XTuple )Current;
            XDataSet XService.Get(XServiceData pData)
            {
                return (XDataSet)Get(pData);
            }
            XDataSet XService.Get(params Object[] pWhere)
            {
                return (XDataSet)Get(pWhere);
            }
            public Service()
            {
                ID = gCID;
            }
        }
    }

}