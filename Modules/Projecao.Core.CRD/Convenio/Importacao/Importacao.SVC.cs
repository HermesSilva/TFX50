//<auto-generated/>
using System;
using System.Linq;
using Newtonsoft.Json;
using TFX.Core.Objects;
using TFX.Core.Model.Data;
using TFX.Core.Model.Cache;
using TFX.Core.Reflections;
using TFX.Core.Service.Job;
using TFX.Core.Service.SVC;
using TFX.Core.Model.DIC.SVC;
using TFX.Core.Model.DIC.ORM;
using TFX.Core.Model.DIC.FRM;
using TFX.Core.Model.DIC.APP;
using TFX.Core.Model.DIC.RPT;
using TFX.Core.Model.Services;
using TFX.Core.Model.DIC.Types;
using TFX.Core.Model.Interfaces;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Projecao.Core.CRD.Convenio.Importacao
{
    [XRegister(typeof(ImportacaoSVC), sCID)]
    [XDASESource(@"D:\Tootega\Source\TFX20\Modules\Projecao.Core.CRD\Projecao.Core.CRD.csproj", @"D:\Tootega\Source\TFX20\Modules\Projecao.Core.CRD\Convenio\Importacao\Importacao.dssvc")]
    public class ImportacaoSVC : XSVCModel
    {
        #region ImportacaoFilterFRM

        [XRegister(typeof(ImportacaoFilterFRM), sCID)]
        public class ImportacaoFilterFRM : XFRMModel
        {
            public const String sCID = "AC4B05F7-F654-43A4-92E5-016835307232";
            static ImportacaoFilterFRM()
            {
                gCID = new Guid(sCID);
            }
            public ImportacaoFilterFRM()
            {
                ID = gCID;
                Name = "ImportacaoFilter";
                Title = "";
                MinRows = 0;
                ConfigCID = new Guid("00000000-0000-0000-0000-000000000000");
                ConfigPKFilter = false;
                Rect = new XRect(0, 0, 250, 92);
                Style = XFRMStyle.Normal;
                ActionContext = XActionContext.All;
            }
            public static class Fields
            {
            }
        }

        #endregion ImportacaoFilterFRM

        public const String sCID = "D61DDCF6-050C-4E21-93D4-E374312B4376";
        public static Guid gCID = new Guid(sCID);

        public static readonly XORMParameterField ArquivoCSV = new XORMParameterField(new Guid("7E1C1803-22E3-41A1-B053-27976D28B6C9"), "ArquivoCSV", "Lista de Conveniados em CSV", XString.CID, 0, 0, false, gCID, null);
        public static readonly XORMParameterField ConvenioID = new XORMParameterField(new Guid("FEE0E1BB-3DA6-4905-9431-1021457561B9"), "ConvenioID", "ID do Convênio", XInt64.CID, 0, 0, false, gCID, null);
        public static readonly XORMParameterField NomeArquivo = new XORMParameterField(new Guid("B13128EE-D436-448D-A716-C0079D545CFB"), "NomeArquivo", "Lista de Conveniados em CSV", XString.CID, 0, 0, false, gCID, null);
        public static readonly XORMParameterField Resultado = new XORMParameterField(new Guid("DFD1AE51-DF63-4BC3-993E-2D3D4971A057"), "Resultado", "Relatório da Importação", XString.CID, 0, 0, false, gCID, null);

        public ImportacaoSVC()
        {
            TupleType = typeof(ImportacaoSVC.XTuple);
            DataSetType = typeof(ImportacaoSVC.XDataSet);
            ServiceRuleCID = new Guid("2BFE938D-1274-4778-BD09-149A22BB6A60");
            OnlyActives = false;
            Actions = XSVCAction.All;
            Type = XServiceType.Utility;
            ID = new Guid("D61DDCF6-050C-4E21-93D4-E374312B4376");
            Name = "Importacao";
            Title = "Importação";
            IsCacheable = false;
            CompanyControl = false;
            IsJob = false;
            AutoLoad = true;
            FreeForUsers = false;
            ServerSideNewRecord = false;
            UseDistinct = false;
            JobType = XJobType.Default;
            CanExport = false;
            ModuleID = new Guid("EBB5930C-9A21-4AB6-993E-B86F40039784");
            Rights = new Int16[] { 1 }; 
            IsReadOnly = true;
            ClientScript = "Projecao.Core.CRD.js";
            DataSetFields = new Guid[] { ConvenioID.ID, ArquivoCSV.ID, NomeArquivo.ID, Resultado.ID };
            PKField = ConvenioID.ID;
            MasterRuleCID = new Guid("2BFE938D-1274-4778-BD09-149A22BB6A60");
            AddField(ConvenioID);
            ConvenioID.IsParam = true;
            AddField(ArquivoCSV);
            ArquivoCSV.IsParam = true;
            AddField(NomeArquivo);
            NomeArquivo.IsParam = true;
            AddField(Resultado);
            Resultado.IsParam = true;
            ArquivoCSV.IsReadOnly = false;
            ArquivoCSV.Length = 0;
            ArquivoCSV.Scale = 0;
            ArquivoCSV.IsDataField = true;
            ArquivoCSV.AllowEmpty = true;
            ConvenioID.GeneratePK = true;
            ConvenioID.IsReadOnly = false;
            ConvenioID.Length = 0;
            ConvenioID.Scale = 0;
            ConvenioID.IsDataField = true;
            ConvenioID.AllowEmpty = true;
            NomeArquivo.IsReadOnly = false;
            NomeArquivo.Length = 0;
            NomeArquivo.Scale = 0;
            NomeArquivo.IsDataField = true;
            NomeArquivo.AllowEmpty = true;
            Resultado.IsReadOnly = false;
            Resultado.Length = 0;
            Resultado.Scale = 0;
            Resultado.IsDataField = true;
            Resultado.AllowEmpty = true;
        }

        #region XFields

        public class XFields
        {
        public XORMField ArquivoCSV => ImportacaoSVC.ArquivoCSV;
        public XORMField ConvenioID => ImportacaoSVC.ConvenioID;
        public XORMField NomeArquivo => ImportacaoSVC.NomeArquivo;
        public XORMField Resultado => ImportacaoSVC.Resultado;
        }
        #endregion XFields
        #region ImportacaoSVC.XTuple

        public  class XTuple : XDataTuple
        {

            public XTuple()
            {
            }

            public XTuple(Object[] pSource)
                : base(pSource)
            {
            }

            public XTuple(Int32 pColCount)
               : this(new Object[pColCount])
            {
            }

            public readonly XFields Fields = new XFields();

            #nullable enable

        public String ArquivoCSV
        {
            get
            {
                return (String)Value[ImportacaoSVC.ArquivoCSV.ID];
            }
            set
            {
                Value[ImportacaoSVC.ArquivoCSV.ID] = value;
            }
        }
        public String? oArquivoCSV
        {
            get
            {
                GetOldValue(ImportacaoSVC.ArquivoCSV, out Object ovlr);
                return (String?)ovlr;
            }
        }

        public Int64 ConvenioID
        {
            get
            {
                return (Int64)Value[ImportacaoSVC.ConvenioID.ID];
            }
            set
            {
                Value[ImportacaoSVC.ConvenioID.ID] = value;
            }
        }
        public Int64? oConvenioID
        {
            get
            {
                GetOldValue(ImportacaoSVC.ConvenioID, out Object ovlr);
                return (Int64?)ovlr;
            }
        }

        public String NomeArquivo
        {
            get
            {
                return (String)Value[ImportacaoSVC.NomeArquivo.ID];
            }
            set
            {
                Value[ImportacaoSVC.NomeArquivo.ID] = value;
            }
        }
        public String? oNomeArquivo
        {
            get
            {
                GetOldValue(ImportacaoSVC.NomeArquivo, out Object ovlr);
                return (String?)ovlr;
            }
        }

        public String Resultado
        {
            get
            {
                return (String)Value[ImportacaoSVC.Resultado.ID];
            }
            set
            {
                Value[ImportacaoSVC.Resultado.ID] = value;
            }
        }
        public String? oResultado
        {
            get
            {
                GetOldValue(ImportacaoSVC.Resultado, out Object ovlr);
                return (String?)ovlr;
            }
        }

            #nullable disable
        }
        #endregion ImportacaoSVC.XTuple

        #region ImportacaoSVC.XRule
        public abstract class XRule : XServiceUtilRule<ImportacaoSVC.XDataSet, ImportacaoSVC, ImportacaoSVC.XTuple>
        {
        }
        #endregion ImportacaoSVC.XRule

        #region ImportacaoSVC.XDataSet

        public class XDataSet : XDataSet<ImportacaoSVC.XTuple>
        {
            public XDataSet()
            {
                DataSetType = typeof(ImportacaoSVC.XDataSet);
            }
        }

        public class XDataSet<T> : XServiceDataSet<ImportacaoSVC.XTuple> where T : XDataTuple
        {

            public Guid ArquivoCSV => ImportacaoSVC.ArquivoCSV.ID;
            public Guid ConvenioID => ImportacaoSVC.ConvenioID.ID;
            public Guid NomeArquivo => ImportacaoSVC.NomeArquivo.ID;
            public Guid Resultado => ImportacaoSVC.Resultado.ID;

            public XDataSet()
            {
                DataSetType = typeof(ImportacaoSVC.XDataSet);
            }

        }
        #endregion ImportacaoSVC.XDataSet

        [Guid(ImportacaoSVC.sCID)]
        public  interface XService : XIBaseService
        {
            new XDataSet DataSet
            {
                get;
            }
            new XTuple NewTuple(Object pPKValue = null);
             IEnumerable<XTuple> Tuples
            {
                get;
            }
             XTuple Current
            {
                get;
            }
            new XDataSet Get(XServiceData pData);
             XDataSet Get(params Object[] pWhere);
        }
        [XRegister(typeof(_Service), _Service.sCID, typeof(ImportacaoSVC))]
        protected class _Service : Service<ImportacaoSVC, XDataSet, XTuple>
        {
            public const String sCID = "4465BBBB-645C-4A2A-836E-5EA74F4B8ED1";
            public Guid gCID = new Guid(sCID);
        }

        public class Service<TModel, TDataSet, TTuple> : XBaseService<ImportacaoSVC, XDataSet, XTuple>, XService
             where TModel : ImportacaoSVC, new()
             where TDataSet : XDataSet, new()
             where TTuple : XTuple
        {
            XDataSet XService.DataSet => (XDataSet)DataSet;
            XTuple XService.NewTuple(Object pPKValue)
            {
                return (XTuple)NewTuple(pPKValue);
            }
            public new XDataTuple NewTuple(Object pPKValue = null)
            {
                return (XTuple)base.NewTuple(pPKValue);
            }
            IEnumerable<XTuple> XService.Tuples => (IEnumerable<XTuple>)Tuples;
            XTuple XService.Current => (XTuple )Current;
            XDataSet XService.Get(XServiceData pData)
            {
                return (XDataSet)Get(pData);
            }
            XDataSet XService.Get(params Object[] pWhere)
            {
                return (XDataSet)Get(pWhere);
            }
            public Service()
            {
                ID = gCID;
            }
        }
    }

}