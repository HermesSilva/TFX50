//<auto-generated/>
using System;
using System.Linq;
using Newtonsoft.Json;
using TFX.Core.Objects;
using TFX.Core.Model.Data;
using TFX.Core.Model.Cache;
using TFX.Core.Reflections;
using TFX.Core.Service.Job;
using TFX.Core.Service.SVC;
using Projecao.Core.PCR.DB;
using TFX.Core.Model.DIC.SVC;
using TFX.Core.Model.DIC.ORM;
using TFX.Core.Model.Services;
using TFX.Core.Model.DIC.Types;
using TFX.Core.Model.Interfaces;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Projecao.Core.PCR.Report
{
    [XRegister(typeof(IATFEficaciaSVC), sCID)]
    [XDASESource(@"D:\Tootega\Source\TFX20\Modules\Projecao.Core.PCR\Projecao.Core.PCR.csproj", @"D:\Tootega\Source\TFX20\Modules\Projecao.Core.PCR\Report\IATFEficacia.dssvc")]
    public class IATFEficaciaSVC : XSVCModel
    {
        public const String sCID = "E2860F8E-BFE3-414D-8825-0C745185D434";
        public static Guid gCID = new Guid(sCID);
        public static XSVCReference PCRxIATFFaseTipo_PCRxIATFFaseTipoID_PCRxAnimalEvento_PCRxIATFFaseTipoID; // PCRxIATFFaseTipo.PCRxIATFFaseTipoID --> PCRxAnimalEvento.PCRxIATFFaseTipoID
        public static XSVCReference PCRxAnimalEstado_PCRxAnimalEstadoID_PCRxAnimalEvento_PCRxAnimalEstadoID; // PCRxAnimalEstado.PCRxAnimalEstadoID --> PCRxAnimalEvento.PCRxAnimalEstadoID
        public static XSVCReference PCRxAnimalLote_PCRxAnimalLoteID_PCRxAnimalEvento_PCRxAnimalLoteID; // PCRxAnimalLote.PCRxAnimalLoteID --> PCRxAnimalEvento.PCRxAnimalLoteID
        public static XSVCReference PCRxEvento_PCRxEventoID_PCRxAnimalEvento_PCRxAnimalEventoID; // PCRxEvento.PCRxEventoID --> PCRxAnimalEvento.PCRxAnimalEventoID

        #region xPCRxAnimalEstado 
        public class xPCRxAnimalEstado : XSVCTable
        {

            public static Guid gCID => new Guid("7AE575FF-44D8-45F8-8918-00249BF31BA1");

            public xPCRxAnimalEstado()
            {
                Name = "PCRxAnimalEstado";
                Alias = "PCRxAnimalEstado";
                ID = gCID;
                ParentID =  global::Projecao.Core.PCR.DB.PCRx.PCRxAnimalEstado.gCID;

                Items.Add(PCRxAnimalEstadoID, PCRxAnimalEstadoID.ID);
                PCRxAnimalEstadoID.Owner = this;
                PCRxAnimalEstadoID.OwnerID = ID;
                PCRxAnimalEstadoID.TableName = Name;
                Items.Add(AnimalEstado, AnimalEstado.ID);
                AnimalEstado.Owner = this;
                AnimalEstado.OwnerID = ID;
                AnimalEstado.TableName = Name;
                AnimalEstado.Alias = "AnimalEstado";
            }

            public static XORMPKField PCRxAnimalEstadoID = new XORMPKField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimalEstado.PCRxAnimalEstadoID, new Guid("49A51BB6-F256-45D2-8BCD-43FA6722403A"), "PCRxAnimalEstadoID", "Estado");
            public static XORMFaceField AnimalEstado = new XORMFaceField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimalEstado.AnimalEstado, new Guid("9A9B0E88-D67D-4322-AF9A-68CDA338E038"), "AnimalEstado", "Estado do Animal");
        }
        #endregion xPCRxAnimalEstado 


        #region xPCRxEvento 
        public class xPCRxEvento : XSVCTable
        {

            public static Guid gCID => new Guid("A2561A5B-A76A-40F0-A549-E8CFD2358341");

            public xPCRxEvento()
            {
                Name = "PCRxEvento";
                Alias = "PCRxEvento";
                ID = gCID;
                ParentID =  global::Projecao.Core.PCR.DB.PCRx.PCRxEvento.gCID;

                Items.Add(PCRxEventoID, PCRxEventoID.ID);
                PCRxEventoID.Owner = this;
                PCRxEventoID.OwnerID = ID;
                PCRxEventoID.TableName = Name;
                Items.Add(Data, Data.ID);
                Data.Owner = this;
                Data.OwnerID = ID;
                Data.TableName = Name;
                Items.Add(Observacao, Observacao.ID);
                Observacao.Owner = this;
                Observacao.OwnerID = ID;
                Observacao.TableName = Name;
                Items.Add(PCRxEventoTipoID, PCRxEventoTipoID.ID);
                PCRxEventoTipoID.Owner = this;
                PCRxEventoTipoID.OwnerID = ID;
                PCRxEventoTipoID.TableName = Name;
                Items.Add(NTRxMobilePontoDestaqueID, NTRxMobilePontoDestaqueID.ID);
                NTRxMobilePontoDestaqueID.Owner = this;
                NTRxMobilePontoDestaqueID.OwnerID = ID;
                NTRxMobilePontoDestaqueID.TableName = Name;
                Items.Add(Latitude, Latitude.ID);
                Latitude.Owner = this;
                Latitude.OwnerID = ID;
                Latitude.TableName = Name;
                Items.Add(Longitude, Longitude.ID);
                Longitude.Owner = this;
                Longitude.OwnerID = ID;
                Longitude.TableName = Name;
                Items.Add(CTLxUsuarioID, CTLxUsuarioID.ID);
                CTLxUsuarioID.Owner = this;
                CTLxUsuarioID.OwnerID = ID;
                CTLxUsuarioID.TableName = Name;
            }

            public static XORMFaceField PCRxEventoID = new XORMFaceField(global::Projecao.Core.PCR.DB.PCRx.PCRxEvento.PCRxEventoID, new Guid("9609D2D1-8F5A-442A-B35D-5197627E9FF0"), "PCRxEventoID", "Evento");
            public static XORMDateField Data = new XORMDateField(global::Projecao.Core.PCR.DB.PCRx.PCRxEvento.Data, new Guid("DBE8BE65-2F22-40A0-AB28-04C16D3A1A11"), "Data", "Data");
            public static XORMField Observacao = new XORMField(global::Projecao.Core.PCR.DB.PCRx.PCRxEvento.Observacao, new Guid("F3EB077F-B942-4BFC-A66A-3E90574E2399"), "Observacao", "Observação");
            public static XORMFKField PCRxEventoTipoID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxEvento.PCRxEventoTipoID, new Guid("AF706F0D-5D9B-4F79-8785-D9EE629C73D0"), "PCRxEventoTipoID", "Tipo de Evento");
            public static XORMFKField NTRxMobilePontoDestaqueID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxEvento.NTRxMobilePontoDestaqueID, new Guid("97023B07-6A0D-4570-956C-5D4AF84C2351"), "NTRxMobilePontoDestaqueID", "Ponto de Destaque");
            public static XORMDecimalField Latitude = new XORMDecimalField(global::Projecao.Core.PCR.DB.PCRx.PCRxEvento.Latitude, new Guid("DB2DF4A5-D757-4501-A587-4CCD65BE8A91"), "Latitude", "Latitude");
            public static XORMDecimalField Longitude = new XORMDecimalField(global::Projecao.Core.PCR.DB.PCRx.PCRxEvento.Longitude, new Guid("C122C97C-63AE-49DD-9800-6EEFBDE75A64"), "Longitude", "Longitude");
            public static XORMFKField CTLxUsuarioID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxEvento.CTLxUsuarioID, new Guid("E59A66E4-6E65-424F-93A9-6F7F248E6827"), "CTLxUsuarioID", "Usuário");
        }
        #endregion xPCRxEvento 


        #region xPCRxIATFFaseTipo 
        public class xPCRxIATFFaseTipo : XSVCTable
        {

            public static Guid gCID => new Guid("A5BA176A-D1DC-4EF7-BCAE-087A0ECA7FCA");

            public xPCRxIATFFaseTipo()
            {
                Name = "PCRxIATFFaseTipo";
                Alias = "PCRxIATFFaseTipo";
                ID = gCID;
                ParentID =  global::Projecao.Core.PCR.DB.PCRx.PCRxIATFFaseTipo.gCID;

                Items.Add(PCRxIATFFaseTipoID, PCRxIATFFaseTipoID.ID);
                PCRxIATFFaseTipoID.Owner = this;
                PCRxIATFFaseTipoID.OwnerID = ID;
                PCRxIATFFaseTipoID.TableName = Name;
                Items.Add(Tipo, Tipo.ID);
                Tipo.Owner = this;
                Tipo.OwnerID = ID;
                Tipo.TableName = Name;
                Tipo.Alias = "Tipo";
                Items.Add(Operacional, Operacional.ID);
                Operacional.Owner = this;
                Operacional.OwnerID = ID;
                Operacional.TableName = Name;
            }

            public static XORMPKField PCRxIATFFaseTipoID = new XORMPKField(global::Projecao.Core.PCR.DB.PCRx.PCRxIATFFaseTipo.PCRxIATFFaseTipoID, new Guid("EA2E04FC-D51A-4316-8D49-1140D9BEE36F"), "PCRxIATFFaseTipoID", "Tipo de Fase");
            public static XORMFaceField Tipo = new XORMFaceField(global::Projecao.Core.PCR.DB.PCRx.PCRxIATFFaseTipo.Tipo, new Guid("810E8FCE-3D61-48F0-964D-8B8D29AB743E"), "Tipo", "Nome da Fase");
            public static XORMField Operacional = new XORMField(global::Projecao.Core.PCR.DB.PCRx.PCRxIATFFaseTipo.Operacional, new Guid("1F76F93B-D9E6-4CA8-858F-955F2135A497"), "Operacional", "Operacional");
        }
        #endregion xPCRxIATFFaseTipo 


        #region xPCRxAnimalLote 
        public class xPCRxAnimalLote : XSVCTable
        {

            public static Guid gCID => new Guid("C9937A9A-F27D-4474-B806-0E3310990EB8");

            public xPCRxAnimalLote()
            {
                Name = "PCRxAnimalLote";
                Alias = "PCRxAnimalLote";
                ID = gCID;
                ParentID =  global::Projecao.Core.PCR.DB.PCRx.PCRxAnimalLote.gCID;

                Items.Add(PCRxAnimalLoteID, PCRxAnimalLoteID.ID);
                PCRxAnimalLoteID.Owner = this;
                PCRxAnimalLoteID.OwnerID = ID;
                PCRxAnimalLoteID.TableName = Name;
                Items.Add(DataCriacao, DataCriacao.ID);
                DataCriacao.Owner = this;
                DataCriacao.OwnerID = ID;
                DataCriacao.TableName = Name;
                Items.Add(Lote, Lote.ID);
                Lote.Owner = this;
                Lote.OwnerID = ID;
                Lote.TableName = Name;
                Lote.Alias = "Lote";
                Items.Add(Ano, Ano.ID);
                Ano.Owner = this;
                Ano.OwnerID = ID;
                Ano.TableName = Name;
                Ano.Alias = "Quantidade";
            }

            public static XORMFaceField PCRxAnimalLoteID = new XORMFaceField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimalLote.PCRxAnimalLoteID, new Guid("6A2460BF-D171-4F50-A45F-0DB9A788A9BF"), "PCRxAnimalLoteID", "Lote de Animais");
            public static XORMDateTimeField DataCriacao = new XORMDateTimeField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimalLote.DataCriacao, new Guid("4E776A9C-572F-49D5-8259-5EBC234A52C6"), "DataCriacao", "da de Criação");
            public static XORMFaceField Lote = new XORMFaceField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimalLote.Lote, new Guid("F64F4941-798D-4F4B-A5FD-605CEC648637"), "Lote", "Lote");
            public static XORMField Ano = new XORMField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimalLote.Ano, new Guid("B99F3A96-1D54-4E83-B228-1F330DCC40A3"), "Ano", "Quantidade");
        }
        #endregion xPCRxAnimalLote 


        #region xPCRxAnimalEvento 
        public class xPCRxAnimalEvento : XSVCTable
        {

            public static Guid gCID => new Guid("DB10A772-B1A5-43FE-A186-09E87349DF5E");

            public xPCRxAnimalEvento()
            {
                Name = "PCRxAnimalEvento";
                Alias = "PCRxAnimalEvento";
                ID = gCID;
                ParentID =  global::Projecao.Core.PCR.DB.PCRx.PCRxAnimalEvento.gCID;

                Items.Add(PCRxAnimalEventoID, PCRxAnimalEventoID.ID);
                PCRxAnimalEventoID.Owner = this;
                PCRxAnimalEventoID.OwnerID = ID;
                PCRxAnimalEventoID.TableName = Name;
                Items.Add(SYSxPessoaID, SYSxPessoaID.ID);
                SYSxPessoaID.Owner = this;
                SYSxPessoaID.OwnerID = ID;
                SYSxPessoaID.TableName = Name;
                Items.Add(ISExItemID, ISExItemID.ID);
                ISExItemID.Owner = this;
                ISExItemID.OwnerID = ID;
                ISExItemID.TableName = Name;
                Items.Add(PCRxReprodutorID, PCRxReprodutorID.ID);
                PCRxReprodutorID.Owner = this;
                PCRxReprodutorID.OwnerID = ID;
                PCRxReprodutorID.TableName = Name;
                Items.Add(PCRxAnimalID, PCRxAnimalID.ID);
                PCRxAnimalID.Owner = this;
                PCRxAnimalID.OwnerID = ID;
                PCRxAnimalID.TableName = Name;
                Items.Add(Valor, Valor.ID);
                Valor.Owner = this;
                Valor.OwnerID = ID;
                Valor.TableName = Name;
                Items.Add(PCRxAnimalLoteID, PCRxAnimalLoteID.ID);
                PCRxAnimalLoteID.Owner = this;
                PCRxAnimalLoteID.OwnerID = ID;
                PCRxAnimalLoteID.TableName = Name;
                Items.Add(PCRxIATFFaseID, PCRxIATFFaseID.ID);
                PCRxIATFFaseID.Owner = this;
                PCRxIATFFaseID.OwnerID = ID;
                PCRxIATFFaseID.TableName = Name;
                Items.Add(PCRxAnimalEstadoID, PCRxAnimalEstadoID.ID);
                PCRxAnimalEstadoID.Owner = this;
                PCRxAnimalEstadoID.OwnerID = ID;
                PCRxAnimalEstadoID.TableName = Name;
                Items.Add(PCRxIATFFaseTipoID, PCRxIATFFaseTipoID.ID);
                PCRxIATFFaseTipoID.Owner = this;
                PCRxIATFFaseTipoID.OwnerID = ID;
                PCRxIATFFaseTipoID.TableName = Name;
                Items.Add(Grupo, Grupo.ID);
                Grupo.Owner = this;
                Grupo.OwnerID = ID;
                Grupo.TableName = Name;
            }

            public static XORMFaceField PCRxAnimalEventoID = new XORMFaceField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimalEvento.PCRxAnimalEventoID, new Guid("5E6056D5-414D-441E-91C7-C9DF1ADC77F6"), "PCRxAnimalEventoID", "Eventos de Animais");
            public static XORMFKField SYSxPessoaID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimalEvento.SYSxPessoaID, new Guid("8F140AE2-DFFD-457C-B75F-A3FD61B826D4"), "SYSxPessoaID", "Responsável");
            public static XORMFKField ISExItemID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimalEvento.ISExItemID, new Guid("1E425A51-09A2-4673-B73C-307976C1C0E4"), "ISExItemID", "Item");
            public static XORMFKField PCRxReprodutorID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimalEvento.PCRxReprodutorID, new Guid("7A4E5017-EB5B-4FFA-8C57-5297022CB619"), "PCRxReprodutorID", "Reprodutor");
            public static XORMFKField PCRxAnimalID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimalEvento.PCRxAnimalID, new Guid("F5EA58AE-1D7B-4E30-A8E3-1352BCAC8656"), "PCRxAnimalID", "Animal");
            public static XORMDecimalField Valor = new XORMDecimalField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimalEvento.Valor, new Guid("E8D1DB23-7C40-4382-BF29-8738AA02E9F9"), "Valor", "Valor");
            public static XORMFKField PCRxAnimalLoteID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimalEvento.PCRxAnimalLoteID, new Guid("1E59FF5B-8638-4D42-A700-457F851A2302"), "PCRxAnimalLoteID", "Lote de Animais");
            public static XORMFKField PCRxIATFFaseID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimalEvento.PCRxIATFFaseID, new Guid("8F39AE6C-759B-47FF-ACE3-F76F051E4CC3"), "PCRxIATFFaseID", "Fases da IATF");
            public static XORMFKField PCRxAnimalEstadoID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimalEvento.PCRxAnimalEstadoID, new Guid("D9FFAAFC-6AE1-4C5B-9A95-9AEF4FBC4393"), "PCRxAnimalEstadoID", "Estado");
            public static XORMFKField PCRxIATFFaseTipoID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimalEvento.PCRxIATFFaseTipoID, new Guid("AB56ACF2-0DA5-48E4-8D66-4100F847B3D2"), "PCRxIATFFaseTipoID", "Tipo de Fase");
            public static XORMField Grupo = new XORMField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimalEvento.Grupo, new Guid("E7006A32-385F-45F5-A092-48E7BDC84C1A"), "Grupo", "Grupo");
        }
        #endregion xPCRxAnimalEvento 


        public xPCRxAnimalEstado PCRxAnimalEstado;
        public xPCRxAnimalEvento PCRxAnimalEvento;
        public xPCRxAnimalLote PCRxAnimalLote;
        public xPCRxEvento PCRxEvento;
        public xPCRxIATFFaseTipo PCRxIATFFaseTipo;
        public static readonly XORMParameterField EmpresaID = new XORMParameterField(new Guid("2C1BA854-45D5-4852-944C-869BF058B6D1"), "EmpresaID", "User Data Field", XGuid.CID, 0, 0, false, gCID, null);
        public static readonly XORMParameterField PrimaryKeyID = new XORMParameterField(new Guid("BBE1FCE7-BE43-4626-9BB4-A20302E10207"), "PrimaryKeyID", "User Data Field", XInt32.CID, 0, 0, false, gCID, null);

        public IATFEficaciaSVC()
        {
            TupleType = typeof(IATFEficaciaSVC.XTuple);
            DataSetType = typeof(IATFEficaciaSVC.XDataSet);
            ServiceRuleCID = new Guid("C09B2E25-713B-4912-B9E2-E58552336056");
            OnlyActives = false;
            Actions = XSVCAction.All;
            Type = XServiceType.Default;
            ID = new Guid("E2860F8E-BFE3-414D-8825-0C745185D434");
            Name = "IATFEficacia";
            Title = "";
            IsCacheable = false;
            CompanyControl = false;
            IsJob = false;
            AutoLoad = true;
            FreeForUsers = false;
            ServerSideNewRecord = false;
            UseDistinct = false;
            JobType = XJobType.Default;
            CanExport = false;
            ModuleID = new Guid("02C4E7C5-1B4F-43DB-AC6C-CD36BBE428B7");
            Rights = new Int16[] { 1 }; 
            IsReadOnly = true;
            ClientScript = "Projecao.Core.PCR.js";
            OrderByFields = new Guid[] { xPCRxAnimalEstado.AnimalEstado.ID };
            DataSetFields = new Guid[] { xPCRxAnimalLote.Lote.ID, xPCRxAnimalEstado.AnimalEstado.ID, xPCRxIATFFaseTipo.Tipo.ID, PrimaryKeyID.ID, EmpresaID.ID, xPCRxAnimalLote.Ano.ID };
            PKField = PrimaryKeyID.ID;
            MasterRuleCID = new Guid("C09B2E25-713B-4912-B9E2-E58552336056");
            PCRxAnimalEstado = new xPCRxAnimalEstado();
            PCRxAnimalEstado.IsReadOnly = true;
            AddTable(PCRxAnimalEstado);
            PCRxAnimalEvento = new xPCRxAnimalEvento();
            PCRxAnimalEvento.IsReadOnly = true;
            AddTable(PCRxAnimalEvento);
            PCRxAnimalLote = new xPCRxAnimalLote();
            PCRxAnimalLote.IsReadOnly = true;
            AddTable(PCRxAnimalLote);
            PCRxEvento = new xPCRxEvento();
            PCRxEvento.IsReadOnly = true;
            AddTable(PCRxEvento);
            PCRxIATFFaseTipo = new xPCRxIATFFaseTipo();
            PCRxIATFFaseTipo.IsReadOnly = true;
            AddTable(PCRxIATFFaseTipo);
            MasterTableID = PCRxEvento.ID;
            PCRxIATFFaseTipo_PCRxIATFFaseTipoID_PCRxAnimalEvento_PCRxIATFFaseTipoID = AddReference(new XSVCReference(new Guid("0E48CBDA-FA55-4D63-ACD7-D51442CA7543"), "FK_0E48CBDAFA554D63ACD7D51442CA7543", IATFEficaciaSVC.xPCRxIATFFaseTipo.gCID, xPCRxIATFFaseTipo.PCRxIATFFaseTipoID.ID, IATFEficaciaSVC.xPCRxAnimalEvento.gCID, xPCRxAnimalEvento.PCRxIATFFaseTipoID.ID, XJoinType.Inner)); // PCRxIATFFaseTipo.PCRxIATFFaseTipoID --> PCRxAnimalEvento.PCRxIATFFaseTipoID
            PCRxAnimalEstado_PCRxAnimalEstadoID_PCRxAnimalEvento_PCRxAnimalEstadoID = AddReference(new XSVCReference(new Guid("2A93ED54-16D9-4A17-ADC7-93501315E9D4"), "FK_2A93ED5416D94A17ADC793501315E9D4", IATFEficaciaSVC.xPCRxAnimalEstado.gCID, xPCRxAnimalEstado.PCRxAnimalEstadoID.ID, IATFEficaciaSVC.xPCRxAnimalEvento.gCID, xPCRxAnimalEvento.PCRxAnimalEstadoID.ID, XJoinType.Inner)); // PCRxAnimalEstado.PCRxAnimalEstadoID --> PCRxAnimalEvento.PCRxAnimalEstadoID
            PCRxAnimalLote_PCRxAnimalLoteID_PCRxAnimalEvento_PCRxAnimalLoteID = AddReference(new XSVCReference(new Guid("528CAEC6-4C90-4945-BBFE-3DFD062CEB1F"), "FK_528CAEC64C904945BBFE3DFD062CEB1F", IATFEficaciaSVC.xPCRxAnimalLote.gCID, xPCRxAnimalLote.PCRxAnimalLoteID.ID, IATFEficaciaSVC.xPCRxAnimalEvento.gCID, xPCRxAnimalEvento.PCRxAnimalLoteID.ID, XJoinType.Inner)); // PCRxAnimalLote.PCRxAnimalLoteID --> PCRxAnimalEvento.PCRxAnimalLoteID
            PCRxEvento_PCRxEventoID_PCRxAnimalEvento_PCRxAnimalEventoID = AddReference(new XSVCReference(new Guid("A0D67A08-A8F7-43BA-85C0-FFE971FEF2A3"), "FK_A0D67A08A8F743BA85C0FFE971FEF2A3", IATFEficaciaSVC.xPCRxEvento.gCID, xPCRxEvento.PCRxEventoID.ID, IATFEficaciaSVC.xPCRxAnimalEvento.gCID, xPCRxAnimalEvento.PCRxAnimalEventoID.ID, XJoinType.Inner)); // PCRxEvento.PCRxEventoID --> PCRxAnimalEvento.PCRxAnimalEventoID
            AddField(PrimaryKeyID);
            PrimaryKeyID.IsParam = true;
            AddField(EmpresaID);
            EmpresaID.IsParam = true;
            xPCRxAnimalEstado.AnimalEstado.IsReadOnly = true;
            xPCRxAnimalEstado.AnimalEstado.OrderType = XOrderType.Asc;
            xPCRxAnimalEstado.AnimalEstado.IsDataField = true;
            xPCRxAnimalEstado.AnimalEstado.AllowEmpty = true;
            EmpresaID.IsReadOnly = false;
            EmpresaID.Length = 0;
            EmpresaID.Scale = 0;
            EmpresaID.IsDataField = true;
            EmpresaID.AllowEmpty = true;
            xPCRxAnimalLote.Lote.IsReadOnly = true;
            xPCRxAnimalLote.Lote.Length = 12;
            xPCRxAnimalLote.Lote.IsDataField = true;
            xPCRxAnimalLote.Lote.AllowEmpty = true;
            PrimaryKeyID.GeneratePK = true;
            PrimaryKeyID.IsReadOnly = false;
            PrimaryKeyID.Length = 0;
            PrimaryKeyID.Scale = 0;
            PrimaryKeyID.IsDataField = true;
            PrimaryKeyID.AllowEmpty = true;
            xPCRxAnimalLote.Ano.IsReadOnly = true;
            xPCRxAnimalLote.Ano.TypeID = XInt32.CID;
            xPCRxAnimalLote.Ano.DefaultValue = default(Int32);
            xPCRxAnimalLote.Ano.DBFunctionID = new Guid("E802F379-E6B3-4D4D-9DFC-2AC0A6E604A9");
            xPCRxAnimalLote.Ano.IsDataField = true;
            xPCRxAnimalLote.Ano.AllowEmpty = true;
            xPCRxIATFFaseTipo.Tipo.IsReadOnly = true;
            xPCRxIATFFaseTipo.Tipo.Length = 35;
            xPCRxIATFFaseTipo.Tipo.IsDataField = true;
            xPCRxIATFFaseTipo.Tipo.AllowEmpty = true;
        }

        #region XFields

        public class XFields
        {
        public XORMField AnimalEstado => xPCRxAnimalEstado.AnimalEstado;
        public XORMField EmpresaID => IATFEficaciaSVC.EmpresaID;
        public XORMField Lote => xPCRxAnimalLote.Lote;
        public XORMField PrimaryKeyID => IATFEficaciaSVC.PrimaryKeyID;
        public XORMField Quantidade => xPCRxAnimalLote.Ano;
        public XORMField Tipo => xPCRxIATFFaseTipo.Tipo;
        }
        #endregion XFields
        #region IATFEficaciaSVC.XTuple

        public  class XTuple : XDataTuple
        {

            public XTuple()
            {
            }

            public XTuple(Object[] pSource)
                : base(pSource)
            {
            }

            public XTuple(Int32 pColCount)
               : this(new Object[pColCount])
            {
            }

            public readonly XFields Fields = new XFields();

            #nullable enable

        public String AnimalEstado
        {
            get
            {
                return (String)Value[IATFEficaciaSVC.xPCRxAnimalEstado.AnimalEstado.ID];
            }
            set
            {
                Value[IATFEficaciaSVC.xPCRxAnimalEstado.AnimalEstado.ID] = value;
            }
        }
        public String? oAnimalEstado
        {
            get
            {
                GetOldValue(IATFEficaciaSVC.xPCRxAnimalEstado.AnimalEstado, out Object ovlr);
                return (String?)ovlr;
            }
        }

        public Guid EmpresaID
        {
            get
            {
                return (Guid)Value[IATFEficaciaSVC.EmpresaID.ID];
            }
            set
            {
                Value[IATFEficaciaSVC.EmpresaID.ID] = value;
            }
        }
        public Guid? oEmpresaID
        {
            get
            {
                GetOldValue(IATFEficaciaSVC.EmpresaID, out Object ovlr);
                return (Guid?)ovlr;
            }
        }

        public String Lote
        {
            get
            {
                return (String)Value[IATFEficaciaSVC.xPCRxAnimalLote.Lote.ID];
            }
            set
            {
                Value[IATFEficaciaSVC.xPCRxAnimalLote.Lote.ID] = value;
            }
        }
        public String? oLote
        {
            get
            {
                GetOldValue(IATFEficaciaSVC.xPCRxAnimalLote.Lote, out Object ovlr);
                return (String?)ovlr;
            }
        }

        public Int32 PrimaryKeyID
        {
            get
            {
                return (Int32)Value[IATFEficaciaSVC.PrimaryKeyID.ID];
            }
            set
            {
                Value[IATFEficaciaSVC.PrimaryKeyID.ID] = value;
            }
        }
        public Int32? oPrimaryKeyID
        {
            get
            {
                GetOldValue(IATFEficaciaSVC.PrimaryKeyID, out Object ovlr);
                return (Int32?)ovlr;
            }
        }

        public Int32 Quantidade
        {
            get
            {
                return (Int32)Value[IATFEficaciaSVC.xPCRxAnimalLote.Ano.ID];
            }
            set
            {
                Value[IATFEficaciaSVC.xPCRxAnimalLote.Ano.ID] = value;
            }
        }
        public Int32? oQuantidade
        {
            get
            {
                GetOldValue(IATFEficaciaSVC.xPCRxAnimalLote.Ano, out Object ovlr);
                return (Int32?)ovlr;
            }
        }

        public String Tipo
        {
            get
            {
                return (String)Value[IATFEficaciaSVC.xPCRxIATFFaseTipo.Tipo.ID];
            }
            set
            {
                Value[IATFEficaciaSVC.xPCRxIATFFaseTipo.Tipo.ID] = value;
            }
        }
        public String? oTipo
        {
            get
            {
                GetOldValue(IATFEficaciaSVC.xPCRxIATFFaseTipo.Tipo, out Object ovlr);
                return (String?)ovlr;
            }
        }

            #nullable disable
        }
        #endregion IATFEficaciaSVC.XTuple

        #region IATFEficaciaSVC.XRule
        public abstract class XRule : XServiceRule<IATFEficaciaSVC.XDataSet, IATFEficaciaSVC, IATFEficaciaSVC.XTuple>
        {
        }
        #endregion IATFEficaciaSVC.XRule

        #region IATFEficaciaSVC.XDataSet

        public class XDataSet : XDataSet<IATFEficaciaSVC.XTuple>
        {
            public XDataSet()
            {
                DataSetType = typeof(IATFEficaciaSVC.XDataSet);
            }
        }

        public class XDataSet<T> : XServiceDataSet<IATFEficaciaSVC.XTuple> where T : XDataTuple
        {

            public Guid AnimalEstado => IATFEficaciaSVC.xPCRxAnimalEstado.AnimalEstado.ID;
            public Guid EmpresaID => IATFEficaciaSVC.EmpresaID.ID;
            public Guid Lote => IATFEficaciaSVC.xPCRxAnimalLote.Lote.ID;
            public Guid PrimaryKeyID => IATFEficaciaSVC.PrimaryKeyID.ID;
            public Guid Quantidade => IATFEficaciaSVC.xPCRxAnimalLote.Ano.ID;
            public Guid Tipo => IATFEficaciaSVC.xPCRxIATFFaseTipo.Tipo.ID;

            public XDataSet()
            {
                DataSetType = typeof(IATFEficaciaSVC.XDataSet);
            }

        }
        #endregion IATFEficaciaSVC.XDataSet

        [Guid(IATFEficaciaSVC.sCID)]
        public  interface XService : XIBaseService
        {
            new XDataSet DataSet
            {
                get;
            }
            new XTuple NewTuple(Object pPKValue = null);
             IEnumerable<XTuple> Tuples
            {
                get;
            }
             XTuple Current
            {
                get;
            }
            new XDataSet Get(XServiceData pData);
             XDataSet Get(params Object[] pWhere);
        }
        [XRegister(typeof(_Service), _Service.sCID, typeof(IATFEficaciaSVC))]
        protected class _Service : Service<IATFEficaciaSVC, XDataSet, XTuple>
        {
            public const String sCID = "60566746-656F-4555-B9C1-BF8F4B73102C";
            public Guid gCID = new Guid(sCID);
        }

        public class Service<TModel, TDataSet, TTuple> : XBaseService<IATFEficaciaSVC, XDataSet, XTuple>, XService
             where TModel : IATFEficaciaSVC, new()
             where TDataSet : XDataSet, new()
             where TTuple : XTuple
        {
            XDataSet XService.DataSet => (XDataSet)DataSet;
            XTuple XService.NewTuple(Object pPKValue)
            {
                return (XTuple)NewTuple(pPKValue);
            }
            public new XDataTuple NewTuple(Object pPKValue = null)
            {
                return (XTuple)base.NewTuple(pPKValue);
            }
            IEnumerable<XTuple> XService.Tuples => (IEnumerable<XTuple>)Tuples;
            XTuple XService.Current => (XTuple )Current;
            XDataSet XService.Get(XServiceData pData)
            {
                return (XDataSet)Get(pData);
            }
            XDataSet XService.Get(params Object[] pWhere)
            {
                return (XDataSet)Get(pWhere);
            }
            public Service()
            {
                ID = gCID;
            }
        }
    }

}