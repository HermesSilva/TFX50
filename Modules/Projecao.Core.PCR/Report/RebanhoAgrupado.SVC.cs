//<auto-generated/>
using System;
using System.Linq;
using Newtonsoft.Json;
using TFX.Core.Objects;
using TFX.Core.Model.Data;
using TFX.Core.Model.Cache;
using TFX.Core.Reflections;
using TFX.Core.Service.Job;
using TFX.Core.Service.SVC;
using TFX.Core.Model.DIC.SVC;
using TFX.Core.Model.DIC.ORM;
using TFX.Core.Model.Services;
using TFX.Core.Model.DIC.Types;
using Projecao.Core.PCR.Report;
using TFX.Core.Model.Interfaces;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Projecao.Core.PCR.Report
{
    [XRegister(typeof(RebanhoAgrupadoSVC), sCID)]
    [XDASESource(@"D:\Tootega\Source\TFX20\Modules\Projecao.Core.PCR\Projecao.Core.PCR.csproj", @"D:\Tootega\Source\TFX20\Modules\Projecao.Core.PCR\Report\RebanhoAgrupado.dssvc")]
    public class RebanhoAgrupadoSVC : XSVCModel
    {
        public const String sCID = "4BC9872B-C0BD-45A3-A312-83C16EE6EA46";
        public static Guid gCID = new Guid(sCID);

        public static readonly XORMParameterField Designacao = new XORMParameterField(new Guid("9671AB49-8EFE-49E6-A923-2761B303036A"), "Designacao", "Designação", XString.CID, 0, 0, false, gCID, null);
        public static readonly XORMParameterField EmpresaID = new XORMParameterField(new Guid("5A38A232-344E-4985-B7BE-677F98626CDB"), "EmpresaID", "User Data Field", XGuid.CID, 0, 0, false, gCID, null);
        public static readonly XORMParameterField Especie = new XORMParameterField(new Guid("DAE6CE7E-99A3-40A2-B19F-A9AD90920D94"), "Especie", "Espécie", XString.CID, 0, 0, false, gCID, null);
        public static readonly XORMParameterField FaixaEtaria = new XORMParameterField(new Guid("D9181818-6F0A-4052-8B43-65E2765B30D9"), "FaixaEtaria", "Faixa Etária", XString.CID, 0, 0, false, gCID, null);
        public static readonly XORMParameterField GeneroID = new XORMParameterField(new Guid("1528A0CC-33F9-46F7-A646-835AC32E3557"), "GeneroID", "Genero", XInt16.CID, 0, 0, false, gCID, null);
        public static readonly XORMParameterField Meses = new XORMParameterField(new Guid("D92D1F06-D5A8-499C-AB64-22FA460B3E32"), "Meses", "Mêses", XInt32.CID, 0, 0, false, gCID, null);
        public static readonly XORMParameterField PrimaryKeyID = new XORMParameterField(new Guid("A0EC4D82-BC41-4E34-97BE-968CD7F1839F"), "PrimaryKeyID", "PK", XInt32.CID, 0, 0, false, gCID, null);
        public static readonly XORMParameterField Quantidade = new XORMParameterField(new Guid("545E44A4-72B8-4411-9030-A194A897CA3B"), "Quantidade", "Quantidade", XInt32.CID, 0, 0, false, gCID, null);

        public RebanhoAgrupadoSVC()
        {
            TupleType = typeof(RebanhoAgrupadoSVC.XTuple);
            DataSetType = typeof(RebanhoAgrupadoSVC.XDataSet);
            ServiceRuleCID = new Guid("066B62E2-75D7-47F6-B088-34984DDEA09E");
            OnlyActives = false;
            Actions = XSVCAction.All;
            Type = XServiceType.Utility;
            ID = new Guid("4BC9872B-C0BD-45A3-A312-83C16EE6EA46");
            Name = "RebanhoAgrupado";
            Title = "";
            IsCacheable = false;
            CompanyControl = false;
            IsJob = false;
            AutoLoad = true;
            FreeForUsers = false;
            ServerSideNewRecord = false;
            UseDistinct = false;
            JobType = XJobType.Default;
            CanExport = false;
            ModuleID = new Guid("02C4E7C5-1B4F-43DB-AC6C-CD36BBE428B7");
            Rights = new Int16[] { 1 }; 
            IsReadOnly = true;
            ClientScript = "Projecao.Core.PCR.js";
            DataSetFields = new Guid[] { PrimaryKeyID.ID, FaixaEtaria.ID, Quantidade.ID, Designacao.ID, GeneroID.ID, EmpresaID.ID, Especie.ID, Meses.ID };
            PKField = PrimaryKeyID.ID;
            MasterRuleCID = new Guid("066B62E2-75D7-47F6-B088-34984DDEA09E");
            AddReference(new XSVCReference(new Guid("3716E2A2-0537-4B27-A46C-9316A323E17B"), "FK_3716E2A205374B27A46C9316A323E17B", VacinaSVC.gCID, VacinaSVC.PrimaryKeyID.ID, RebanhoAgrupadoSVC.gCID, RebanhoAgrupadoSVC.PrimaryKeyID.ID, XJoinType.SubService));
            XSubServiceItem ss3716E2A205374B27A46C9316A323E17B = new XSubServiceItem(VacinaSVC.gCID, VacinaSVC.PrimaryKeyID.ID, RebanhoAgrupadoSVC.gCID, PrimaryKeyID.ID, true, XSubSeviceType.Default);
            ss3716E2A205374B27A46C9316A323E17B.Rights = new Int16[] { 1 };
            ss3716E2A205374B27A46C9316A323E17B.Name = "Vacina";
            SubServices.Add(ss3716E2A205374B27A46C9316A323E17B);
            AddField(PrimaryKeyID);
            PrimaryKeyID.IsParam = true;
            AddField(FaixaEtaria);
            FaixaEtaria.IsParam = true;
            AddField(Quantidade);
            Quantidade.IsParam = true;
            AddField(Designacao);
            Designacao.IsParam = true;
            AddField(GeneroID);
            GeneroID.IsParam = true;
            AddField(EmpresaID);
            EmpresaID.IsParam = true;
            AddField(Especie);
            Especie.IsParam = true;
            AddField(Meses);
            Meses.IsParam = true;
            Designacao.IsReadOnly = false;
            Designacao.Length = 0;
            Designacao.Scale = 0;
            Designacao.IsDataField = true;
            Designacao.AllowEmpty = true;
            EmpresaID.IsReadOnly = false;
            EmpresaID.Length = 0;
            EmpresaID.Scale = 0;
            EmpresaID.IsDataField = true;
            EmpresaID.AllowEmpty = true;
            Especie.IsReadOnly = false;
            Especie.Length = 0;
            Especie.Scale = 0;
            Especie.IsDataField = true;
            Especie.AllowEmpty = true;
            FaixaEtaria.IsReadOnly = false;
            FaixaEtaria.Length = 0;
            FaixaEtaria.Scale = 0;
            FaixaEtaria.IsDataField = true;
            FaixaEtaria.AllowEmpty = true;
            GeneroID.IsReadOnly = false;
            GeneroID.Length = 0;
            GeneroID.Scale = 0;
            GeneroID.IsDataField = true;
            GeneroID.AllowEmpty = true;
            Meses.IsReadOnly = false;
            Meses.Length = 0;
            Meses.Scale = 0;
            Meses.IsDataField = true;
            Meses.AllowEmpty = true;
            PrimaryKeyID.GeneratePK = true;
            PrimaryKeyID.IsReadOnly = false;
            PrimaryKeyID.Length = 0;
            PrimaryKeyID.Scale = 0;
            PrimaryKeyID.IsDataField = true;
            PrimaryKeyID.AllowEmpty = true;
            Quantidade.IsReadOnly = false;
            Quantidade.Length = 0;
            Quantidade.Scale = 0;
            Quantidade.IsDataField = true;
            Quantidade.AllowEmpty = true;
        }

        #region XFields

        public class XFields
        {
        public XORMField Designacao => RebanhoAgrupadoSVC.Designacao;
        public XORMField EmpresaID => RebanhoAgrupadoSVC.EmpresaID;
        public XORMField Especie => RebanhoAgrupadoSVC.Especie;
        public XORMField FaixaEtaria => RebanhoAgrupadoSVC.FaixaEtaria;
        public XORMField GeneroID => RebanhoAgrupadoSVC.GeneroID;
        public XORMField Meses => RebanhoAgrupadoSVC.Meses;
        public XORMField PrimaryKeyID => RebanhoAgrupadoSVC.PrimaryKeyID;
        public XORMField Quantidade => RebanhoAgrupadoSVC.Quantidade;
        }
        #endregion XFields
        #region RebanhoAgrupadoSVC.XTuple

        public  class XTuple : XDataTuple
        {

            public XTuple()
            {
            }

            public XTuple(Object[] pSource)
                : base(pSource)
            {
            }

            public XTuple(Int32 pColCount)
               : this(new Object[pColCount])
            {
            }

            public readonly XFields Fields = new XFields();

            #nullable enable

        public String Designacao
        {
            get
            {
                return (String)Value[RebanhoAgrupadoSVC.Designacao.ID];
            }
            set
            {
                Value[RebanhoAgrupadoSVC.Designacao.ID] = value;
            }
        }
        public String? oDesignacao
        {
            get
            {
                GetOldValue(RebanhoAgrupadoSVC.Designacao, out Object ovlr);
                return (String?)ovlr;
            }
        }

        public Guid EmpresaID
        {
            get
            {
                return (Guid)Value[RebanhoAgrupadoSVC.EmpresaID.ID];
            }
            set
            {
                Value[RebanhoAgrupadoSVC.EmpresaID.ID] = value;
            }
        }
        public Guid? oEmpresaID
        {
            get
            {
                GetOldValue(RebanhoAgrupadoSVC.EmpresaID, out Object ovlr);
                return (Guid?)ovlr;
            }
        }

        public String Especie
        {
            get
            {
                return (String)Value[RebanhoAgrupadoSVC.Especie.ID];
            }
            set
            {
                Value[RebanhoAgrupadoSVC.Especie.ID] = value;
            }
        }
        public String? oEspecie
        {
            get
            {
                GetOldValue(RebanhoAgrupadoSVC.Especie, out Object ovlr);
                return (String?)ovlr;
            }
        }

        public String FaixaEtaria
        {
            get
            {
                return (String)Value[RebanhoAgrupadoSVC.FaixaEtaria.ID];
            }
            set
            {
                Value[RebanhoAgrupadoSVC.FaixaEtaria.ID] = value;
            }
        }
        public String? oFaixaEtaria
        {
            get
            {
                GetOldValue(RebanhoAgrupadoSVC.FaixaEtaria, out Object ovlr);
                return (String?)ovlr;
            }
        }

        public Int16 GeneroID
        {
            get
            {
                return (Int16)Value[RebanhoAgrupadoSVC.GeneroID.ID];
            }
            set
            {
                Value[RebanhoAgrupadoSVC.GeneroID.ID] = value;
            }
        }
        public Int16? oGeneroID
        {
            get
            {
                GetOldValue(RebanhoAgrupadoSVC.GeneroID, out Object ovlr);
                return (Int16?)ovlr;
            }
        }

        public Int32 Meses
        {
            get
            {
                return (Int32)Value[RebanhoAgrupadoSVC.Meses.ID];
            }
            set
            {
                Value[RebanhoAgrupadoSVC.Meses.ID] = value;
            }
        }
        public Int32? oMeses
        {
            get
            {
                GetOldValue(RebanhoAgrupadoSVC.Meses, out Object ovlr);
                return (Int32?)ovlr;
            }
        }

        public Int32 PrimaryKeyID
        {
            get
            {
                return (Int32)Value[RebanhoAgrupadoSVC.PrimaryKeyID.ID];
            }
            set
            {
                Value[RebanhoAgrupadoSVC.PrimaryKeyID.ID] = value;
            }
        }
        public Int32? oPrimaryKeyID
        {
            get
            {
                GetOldValue(RebanhoAgrupadoSVC.PrimaryKeyID, out Object ovlr);
                return (Int32?)ovlr;
            }
        }

        public Int32 Quantidade
        {
            get
            {
                return (Int32)Value[RebanhoAgrupadoSVC.Quantidade.ID];
            }
            set
            {
                Value[RebanhoAgrupadoSVC.Quantidade.ID] = value;
            }
        }
        public Int32? oQuantidade
        {
            get
            {
                GetOldValue(RebanhoAgrupadoSVC.Quantidade, out Object ovlr);
                return (Int32?)ovlr;
            }
        }

            #nullable disable
        }
        #endregion RebanhoAgrupadoSVC.XTuple

        #region RebanhoAgrupadoSVC.XRule
        public abstract class XRule : XServiceUtilRule<RebanhoAgrupadoSVC.XDataSet, RebanhoAgrupadoSVC, RebanhoAgrupadoSVC.XTuple>
        {
        }
        #endregion RebanhoAgrupadoSVC.XRule

        #region RebanhoAgrupadoSVC.XDataSet

        public class XDataSet : XDataSet<RebanhoAgrupadoSVC.XTuple>
        {
            public XDataSet()
            {
                DataSetType = typeof(RebanhoAgrupadoSVC.XDataSet);
            }
        }

        public class XDataSet<T> : XServiceDataSet<RebanhoAgrupadoSVC.XTuple> where T : XDataTuple
        {

            public Guid Designacao => RebanhoAgrupadoSVC.Designacao.ID;
            public Guid EmpresaID => RebanhoAgrupadoSVC.EmpresaID.ID;
            public Guid Especie => RebanhoAgrupadoSVC.Especie.ID;
            public Guid FaixaEtaria => RebanhoAgrupadoSVC.FaixaEtaria.ID;
            public Guid GeneroID => RebanhoAgrupadoSVC.GeneroID.ID;
            public Guid Meses => RebanhoAgrupadoSVC.Meses.ID;
            public Guid PrimaryKeyID => RebanhoAgrupadoSVC.PrimaryKeyID.ID;
            public Guid Quantidade => RebanhoAgrupadoSVC.Quantidade.ID;

            public XDataSet()
            {
                DataSetType = typeof(RebanhoAgrupadoSVC.XDataSet);
            }

            private Projecao.Core.PCR.Report.VacinaSVC.XDataSet _VacinaDataSet;

            public Projecao.Core.PCR.Report.VacinaSVC.XDataSet VacinaDataSet
            {
                get
                {
                    if (_VacinaDataSet == null)
                    {
                        _VacinaDataSet.IsReadOnly = true;
                        _VacinaDataSet = (Projecao.Core.PCR.Report.VacinaSVC.XDataSet)Children.Get(Projecao.Core.PCR.Report.VacinaSVC.gCID);
                    }
                    return  _VacinaDataSet;
                }
            }

        }
        #endregion RebanhoAgrupadoSVC.XDataSet

        [Guid(RebanhoAgrupadoSVC.sCID)]
        public  interface XService : XIBaseService
        {
            new XDataSet DataSet
            {
                get;
            }
            new XTuple NewTuple(Object pPKValue = null);
             IEnumerable<XTuple> Tuples
            {
                get;
            }
             XTuple Current
            {
                get;
            }
            new XDataSet Get(XServiceData pData);
             XDataSet Get(params Object[] pWhere);
        }
        [XRegister(typeof(_Service), _Service.sCID, typeof(RebanhoAgrupadoSVC))]
        protected class _Service : Service<RebanhoAgrupadoSVC, XDataSet, XTuple>
        {
            public const String sCID = "AADC74E8-731F-43D2-9EAF-7E12A8D4314B";
            public Guid gCID = new Guid(sCID);
        }

        public class Service<TModel, TDataSet, TTuple> : XBaseService<RebanhoAgrupadoSVC, XDataSet, XTuple>, XService
             where TModel : RebanhoAgrupadoSVC, new()
             where TDataSet : XDataSet, new()
             where TTuple : XTuple
        {
            XDataSet XService.DataSet => (XDataSet)DataSet;
            XTuple XService.NewTuple(Object pPKValue)
            {
                return (XTuple)NewTuple(pPKValue);
            }
            public new XDataTuple NewTuple(Object pPKValue = null)
            {
                return (XTuple)base.NewTuple(pPKValue);
            }
            IEnumerable<XTuple> XService.Tuples => (IEnumerable<XTuple>)Tuples;
            XTuple XService.Current => (XTuple )Current;
            XDataSet XService.Get(XServiceData pData)
            {
                return (XDataSet)Get(pData);
            }
            XDataSet XService.Get(params Object[] pWhere)
            {
                return (XDataSet)Get(pWhere);
            }
            public Service()
            {
                ID = gCID;
            }
        }
    }

}