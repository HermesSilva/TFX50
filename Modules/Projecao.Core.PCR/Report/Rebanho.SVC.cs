//<auto-generated/>
using System;
using System.Linq;
using Newtonsoft.Json;
using TFX.Core.Objects;
using TFX.Core.Model.Data;
using TFX.Core.Model.Cache;
using TFX.Core.Reflections;
using TFX.Core.Service.Job;
using TFX.Core.Service.SVC;
using Projecao.Core.ERP.DB;
using Projecao.Core.PCR.DB;
using TFX.Core.Model.DIC.SVC;
using TFX.Core.Model.DIC.ORM;
using TFX.Core.Model.Services;
using TFX.Core.Model.DIC.Types;
using TFX.Core.Model.Interfaces;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Projecao.Core.PCR.Report
{
    [XRegister(typeof(RebanhoSVC), sCID)]
    [XDASESource(@"D:\Tootega\Source\TFX20\Modules\Projecao.Core.PCR\Projecao.Core.PCR.csproj", @"D:\Tootega\Source\TFX20\Modules\Projecao.Core.PCR\Report\Rebanho.dssvc")]
    public class RebanhoSVC : XSVCModel
    {
        public const String sCID = "0294F421-2858-4392-AC86-7E4500906317";
        public static Guid gCID = new Guid(sCID);
        public static XSVCReference ERPxGenero_ERPxGeneroID_PCRxAnimal_ERPxGeneroID; // ERPxGenero.ERPxGeneroID --> PCRxAnimal.ERPxGeneroID
        public static XSVCReference PCRxReprodutor_PCRxReprodutorID_PCRxAnimal_PCRxAnimalID; // PCRxReprodutor.PCRxReprodutorID --> PCRxAnimal.PCRxAnimalID

        #region xERPxGenero 
        public class xERPxGenero : XSVCTable
        {

            public static Guid gCID => new Guid("805500CF-D14B-4A9C-A70C-168BE798AB37");

            public xERPxGenero()
            {
                Name = "ERPxGenero";
                Alias = "ERPxGenero";
                ID = gCID;
                ParentID =  global::Projecao.Core.ERP.DB.ERPx.ERPxGenero.gCID;

                Items.Add(Genero, Genero.ID);
                Genero.Owner = this;
                Genero.OwnerID = ID;
                Genero.TableName = Name;
                Genero.Alias = "Genero";
                Items.Add(ERPxGeneroID, ERPxGeneroID.ID);
                ERPxGeneroID.Owner = this;
                ERPxGeneroID.OwnerID = ID;
                ERPxGeneroID.TableName = Name;
                Items.Add(Invisivel, Invisivel.ID);
                Invisivel.Owner = this;
                Invisivel.OwnerID = ID;
                Invisivel.TableName = Name;
                Items.Add(Designacao, Designacao.ID);
                Designacao.Owner = this;
                Designacao.OwnerID = ID;
                Designacao.TableName = Name;
                Designacao.Alias = "Designacao";
            }

            public static XORMFaceField Genero = new XORMFaceField(global::Projecao.Core.ERP.DB.ERPx.ERPxGenero.Genero, new Guid("C6583730-FF03-4911-B567-88C40A0E7280"), "Genero", "Gênero");
            public static XORMPKField ERPxGeneroID = new XORMPKField(global::Projecao.Core.ERP.DB.ERPx.ERPxGenero.ERPxGeneroID, new Guid("18EFBD58-965C-444C-A8F7-81FEE2DD6BB8"), "ERPxGeneroID", "Gênero");
            public static XORMField Invisivel = new XORMField(global::Projecao.Core.ERP.DB.ERPx.ERPxGenero.Invisivel, new Guid("8D0690C0-EDCF-47EF-9D1B-58CC7C0A0D6B"), "Invisivel", "Invisível");
            public static XORMField Designacao = new XORMField(global::Projecao.Core.ERP.DB.ERPx.ERPxGenero.Designacao, new Guid("618C1677-085A-4A69-B835-61E55DFDCA2F"), "Designacao", "Designação");
        }
        #endregion xERPxGenero 


        #region xPCRxAnimal 
        public class xPCRxAnimal : XSVCTable
        {

            public static Guid gCID => new Guid("E20C61DE-25A8-46F0-A575-E59B519B1070");

            public xPCRxAnimal()
            {
                Name = "PCRxAnimal";
                Alias = "PCRxAnimal";
                ID = gCID;
                ParentID =  global::Projecao.Core.PCR.DB.PCRx.PCRxAnimal.gCID;

                Items.Add(PCRxAnimalID, PCRxAnimalID.ID);
                PCRxAnimalID.Owner = this;
                PCRxAnimalID.OwnerID = ID;
                PCRxAnimalID.TableName = Name;
                PCRxAnimalID.Alias = "PCRxAnimalID";
                Items.Add(ERPxGeneroID, ERPxGeneroID.ID);
                ERPxGeneroID.Owner = this;
                ERPxGeneroID.OwnerID = ID;
                ERPxGeneroID.TableName = Name;
                ERPxGeneroID.Alias = "ERPxGeneroID";
                Items.Add(PCRxRacaID, PCRxRacaID.ID);
                PCRxRacaID.Owner = this;
                PCRxRacaID.OwnerID = ID;
                PCRxRacaID.TableName = Name;
                Items.Add(PCRxAnimalFaseID, PCRxAnimalFaseID.ID);
                PCRxAnimalFaseID.Owner = this;
                PCRxAnimalFaseID.OwnerID = ID;
                PCRxAnimalFaseID.TableName = Name;
                Items.Add(Nascimento, Nascimento.ID);
                Nascimento.Owner = this;
                Nascimento.OwnerID = ID;
                Nascimento.TableName = Name;
                Nascimento.Alias = "Nascimento";
                Items.Add(SYSxEmpresaID, SYSxEmpresaID.ID);
                SYSxEmpresaID.Owner = this;
                SYSxEmpresaID.OwnerID = ID;
                SYSxEmpresaID.TableName = Name;
                Items.Add(PCRxAnimalEstadoID, PCRxAnimalEstadoID.ID);
                PCRxAnimalEstadoID.Owner = this;
                PCRxAnimalEstadoID.OwnerID = ID;
                PCRxAnimalEstadoID.TableName = Name;
                Items.Add(NumeroPartos, NumeroPartos.ID);
                NumeroPartos.Owner = this;
                NumeroPartos.OwnerID = ID;
                NumeroPartos.TableName = Name;
                Items.Add(PCRxEventoReprodutivoID, PCRxEventoReprodutivoID.ID);
                PCRxEventoReprodutivoID.Owner = this;
                PCRxEventoReprodutivoID.OwnerID = ID;
                PCRxEventoReprodutivoID.TableName = Name;
                Items.Add(PCRxAnimalLoteID, PCRxAnimalLoteID.ID);
                PCRxAnimalLoteID.Owner = this;
                PCRxAnimalLoteID.OwnerID = ID;
                PCRxAnimalLoteID.TableName = Name;
                Items.Add(PCRxIATFFaseID, PCRxIATFFaseID.ID);
                PCRxIATFFaseID.Owner = this;
                PCRxIATFFaseID.OwnerID = ID;
                PCRxIATFFaseID.TableName = Name;
            }

            public static XORMFaceField PCRxAnimalID = new XORMFaceField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimal.PCRxAnimalID, new Guid("3EFF4D28-A11C-4316-9525-F9DA2EE4977A"), "PCRxAnimalID", "Animal");
            public static XORMFKField ERPxGeneroID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimal.ERPxGeneroID, new Guid("970C2036-9120-4EEE-9480-8C1205925A33"), "ERPxGeneroID", "Sexo");
            public static XORMFKField PCRxRacaID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimal.PCRxRacaID, new Guid("12D8A68D-4A11-421F-B133-C1592955BD31"), "PCRxRacaID", "Raça");
            public static XORMFKField PCRxAnimalFaseID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimal.PCRxAnimalFaseID, new Guid("0D9556B5-E8EF-496A-8362-49AB4F85962F"), "PCRxAnimalFaseID", "Fase do Animal");
            public static XORMDateField Nascimento = new XORMDateField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimal.Nascimento, new Guid("C7564A70-E226-4ECA-BA6C-37445987A0E6"), "Nascimento", "Nascimento");
            public static XORMFKField SYSxEmpresaID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimal.SYSxEmpresaID, new Guid("87B54ED7-D8D9-4C1F-9B4F-E07AD6C58572"), "SYSxEmpresaID", "Empresa");
            public static XORMFKField PCRxAnimalEstadoID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimal.PCRxAnimalEstadoID, new Guid("68210077-DFF4-467F-9174-E4707EC5F5DD"), "PCRxAnimalEstadoID", "Estado");
            public static XORMField NumeroPartos = new XORMField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimal.NumeroPartos, new Guid("D785E8C3-4B1C-4F89-8F9B-45C12900538F"), "NumeroPartos", "Número de Partos");
            public static XORMFKField PCRxEventoReprodutivoID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimal.PCRxEventoReprodutivoID, new Guid("4BFEDD35-9727-4543-BFC9-EC152A4B1622"), "PCRxEventoReprodutivoID", "Eventos de Animais");
            public static XORMFKField PCRxAnimalLoteID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimal.PCRxAnimalLoteID, new Guid("298971A9-B81B-4629-B6E0-8C69FBF16989"), "PCRxAnimalLoteID", "Lote de Animais");
            public static XORMFKField PCRxIATFFaseID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimal.PCRxIATFFaseID, new Guid("17F81152-D53B-4D02-82D7-7B1821CB61CA"), "PCRxIATFFaseID", "Fases da IATF");
        }
        #endregion xPCRxAnimal 


        #region xPCRxReprodutor 
        public class xPCRxReprodutor : XSVCTable
        {

            public static Guid gCID => new Guid("F2E9D4AD-91AF-45CC-9264-4BCF63631707");

            public xPCRxReprodutor()
            {
                Name = "PCRxReprodutor";
                Alias = "PCRxReprodutor";
                ID = gCID;
                ParentID =  global::Projecao.Core.PCR.DB.PCRx.PCRxReprodutor.gCID;

                Items.Add(PCRxReprodutorID, PCRxReprodutorID.ID);
                PCRxReprodutorID.Owner = this;
                PCRxReprodutorID.OwnerID = ID;
                PCRxReprodutorID.TableName = Name;
                Items.Add(ApenasSemem, ApenasSemem.ID);
                ApenasSemem.Owner = this;
                ApenasSemem.OwnerID = ID;
                ApenasSemem.TableName = Name;
            }

            public static XORMFaceField PCRxReprodutorID = new XORMFaceField(global::Projecao.Core.PCR.DB.PCRx.PCRxReprodutor.PCRxReprodutorID, new Guid("16968E7D-7563-45D4-878E-6A1822CF7CFC"), "PCRxReprodutorID", "Reprodutor");
            public static XORMField ApenasSemem = new XORMField(global::Projecao.Core.PCR.DB.PCRx.PCRxReprodutor.ApenasSemem, new Guid("2DFBD0BC-DE91-457A-BF1B-F57A9FF5214A"), "ApenasSemem", "Apenas Sêmem");
        }
        #endregion xPCRxReprodutor 


        public xERPxGenero ERPxGenero;
        public xPCRxAnimal PCRxAnimal;
        public xPCRxReprodutor PCRxReprodutor;

        public RebanhoSVC()
        {
            TupleType = typeof(RebanhoSVC.XTuple);
            DataSetType = typeof(RebanhoSVC.XDataSet);
            ServiceRuleCID = new Guid("30DEB411-6D98-4F26-B456-C7FE9DF41B01");
            OnlyActives = false;
            Actions = XSVCAction.All;
            Type = XServiceType.Default;
            ID = new Guid("0294F421-2858-4392-AC86-7E4500906317");
            Name = "Rebanho";
            Title = "";
            IsCacheable = false;
            CompanyControl = false;
            IsJob = false;
            AutoLoad = true;
            FreeForUsers = false;
            ServerSideNewRecord = false;
            UseDistinct = false;
            JobType = XJobType.Default;
            CanExport = false;
            ModuleID = new Guid("02C4E7C5-1B4F-43DB-AC6C-CD36BBE428B7");
            Rights = new Int16[] { 1 }; 
            IsReadOnly = true;
            ClientScript = "Projecao.Core.PCR.js";
            GridFields = new Guid[] { xPCRxAnimal.ERPxGeneroID.ID, xPCRxAnimal.Nascimento.ID };
            DataSetFields = new Guid[] { xERPxGenero.Designacao.ID, xERPxGenero.Genero.ID, xPCRxAnimal.ERPxGeneroID.ID, xPCRxAnimal.Nascimento.ID, xPCRxAnimal.PCRxAnimalID.ID };
            PKField = xPCRxAnimal.PCRxAnimalID.ID;
            ConfigTableID = new Guid("01BC341A-0142-4C60-87A7-9228AD3A73E9");
            MasterRuleCID = new Guid("30DEB411-6D98-4F26-B456-C7FE9DF41B01");
            ERPxGenero = new xERPxGenero();
            ERPxGenero.IsReadOnly = true;
            AddTable(ERPxGenero);
            PCRxAnimal = new xPCRxAnimal();
            PCRxAnimal.IsReadOnly = true;
            AddTable(PCRxAnimal);
            PCRxReprodutor = new xPCRxReprodutor();
            PCRxReprodutor.IsReadOnly = true;
            AddTable(PCRxReprodutor);
            MasterTableID = PCRxAnimal.ID;
            ERPxGenero_ERPxGeneroID_PCRxAnimal_ERPxGeneroID = AddReference(new XSVCReference(new Guid("837498FD-7E52-42B0-98DF-CF73C1FF7CBC"), "FK_837498FD7E5242B098DFCF73C1FF7CBC", RebanhoSVC.xERPxGenero.gCID, xERPxGenero.ERPxGeneroID.ID, RebanhoSVC.xPCRxAnimal.gCID, xPCRxAnimal.ERPxGeneroID.ID, XJoinType.Inner)); // ERPxGenero.ERPxGeneroID --> PCRxAnimal.ERPxGeneroID
            PCRxReprodutor_PCRxReprodutorID_PCRxAnimal_PCRxAnimalID = AddReference(new XSVCReference(new Guid("C5455884-FC28-4C84-926C-B9499BF726B4"), "FK_C5455884FC284C84926CB9499BF726B4", RebanhoSVC.xPCRxReprodutor.gCID, xPCRxReprodutor.PCRxReprodutorID.ID, RebanhoSVC.xPCRxAnimal.gCID, xPCRxAnimal.PCRxAnimalID.ID, XJoinType.Left)); // PCRxReprodutor.PCRxReprodutorID --> PCRxAnimal.PCRxAnimalID
            xERPxGenero.Designacao.IsReadOnly = true;
            xERPxGenero.Designacao.Length = 20;
            xERPxGenero.Designacao.IsDataField = true;
            xERPxGenero.Designacao.AllowEmpty = true;
            xPCRxAnimal.ERPxGeneroID.IsReadOnly = true;
            xPCRxAnimal.ERPxGeneroID.IsDataField = true;
            xPCRxAnimal.ERPxGeneroID.AllowEmpty = true;
            xERPxGenero.Genero.IsReadOnly = true;
            xERPxGenero.Genero.Length = 15;
            xERPxGenero.Genero.IsDataField = true;
            xERPxGenero.Genero.AllowEmpty = true;
            xPCRxAnimal.Nascimento.IsReadOnly = true;
            xPCRxAnimal.Nascimento.IsDataField = true;
            xPCRxAnimal.Nascimento.AllowEmpty = true;
            xPCRxAnimal.PCRxAnimalID.IsReadOnly = true;
            xPCRxAnimal.PCRxAnimalID.IsDataField = true;
            xPCRxAnimal.PCRxAnimalID.AllowEmpty = true;
        }

        #region XFields

        public class XFields
        {
        public XORMField Designacao => xERPxGenero.Designacao;
        public XORMField ERPxGeneroID => xPCRxAnimal.ERPxGeneroID;
        public XORMField Genero => xERPxGenero.Genero;
        public XORMField Nascimento => xPCRxAnimal.Nascimento;
        public XORMField PCRxAnimalID => xPCRxAnimal.PCRxAnimalID;
        }
        #endregion XFields
        #region RebanhoSVC.XTuple

        public  class XTuple : XDataTuple
        {

            public XTuple()
            {
            }

            public XTuple(Object[] pSource)
                : base(pSource)
            {
            }

            public XTuple(Int32 pColCount)
               : this(new Object[pColCount])
            {
            }

            public readonly XFields Fields = new XFields();

            #nullable enable

        public String Designacao
        {
            get
            {
                return (String)Value[RebanhoSVC.xERPxGenero.Designacao.ID];
            }
            set
            {
                Value[RebanhoSVC.xERPxGenero.Designacao.ID] = value;
            }
        }
        public String? oDesignacao
        {
            get
            {
                GetOldValue(RebanhoSVC.xERPxGenero.Designacao, out Object ovlr);
                return (String?)ovlr;
            }
        }

        public Int16 ERPxGeneroID
        {
            get
            {
                return (Int16)Value[RebanhoSVC.xPCRxAnimal.ERPxGeneroID.ID];
            }
            set
            {
                Value[RebanhoSVC.xPCRxAnimal.ERPxGeneroID.ID] = value;
            }
        }
        public Int16? oERPxGeneroID
        {
            get
            {
                GetOldValue(RebanhoSVC.xPCRxAnimal.ERPxGeneroID, out Object ovlr);
                return (Int16?)ovlr;
            }
        }

        public String Genero
        {
            get
            {
                return (String)Value[RebanhoSVC.xERPxGenero.Genero.ID];
            }
            set
            {
                Value[RebanhoSVC.xERPxGenero.Genero.ID] = value;
            }
        }
        public String? oGenero
        {
            get
            {
                GetOldValue(RebanhoSVC.xERPxGenero.Genero, out Object ovlr);
                return (String?)ovlr;
            }
        }

        public DateTime Nascimento
        {
            get
            {
                return (DateTime)Value[RebanhoSVC.xPCRxAnimal.Nascimento.ID];
            }
            set
            {
                Value[RebanhoSVC.xPCRxAnimal.Nascimento.ID] = value;
            }
        }
        public DateTime? oNascimento
        {
            get
            {
                GetOldValue(RebanhoSVC.xPCRxAnimal.Nascimento, out Object ovlr);
                return (DateTime?)ovlr;
            }
        }

        public Guid PCRxAnimalID
        {
            get
            {
                return (Guid)Value[RebanhoSVC.xPCRxAnimal.PCRxAnimalID.ID];
            }
            set
            {
                Value[RebanhoSVC.xPCRxAnimal.PCRxAnimalID.ID] = value;
            }
        }
        public Guid? oPCRxAnimalID
        {
            get
            {
                GetOldValue(RebanhoSVC.xPCRxAnimal.PCRxAnimalID, out Object ovlr);
                return (Guid?)ovlr;
            }
        }

            #nullable disable
        }
        #endregion RebanhoSVC.XTuple

        #region RebanhoSVC.XRule
        public abstract class XRule : XServiceRule<RebanhoSVC.XDataSet, RebanhoSVC, RebanhoSVC.XTuple>
        {
        }
        #endregion RebanhoSVC.XRule

        #region RebanhoSVC.XDataSet

        public class XDataSet : XDataSet<RebanhoSVC.XTuple>
        {
            public XDataSet()
            {
                DataSetType = typeof(RebanhoSVC.XDataSet);
            }
        }

        public class XDataSet<T> : XServiceDataSet<RebanhoSVC.XTuple> where T : XDataTuple
        {

            public Guid Designacao => RebanhoSVC.xERPxGenero.Designacao.ID;
            public Guid ERPxGeneroID => RebanhoSVC.xPCRxAnimal.ERPxGeneroID.ID;
            public Guid Genero => RebanhoSVC.xERPxGenero.Genero.ID;
            public Guid Nascimento => RebanhoSVC.xPCRxAnimal.Nascimento.ID;
            public Guid PCRxAnimalID => RebanhoSVC.xPCRxAnimal.PCRxAnimalID.ID;

            public XDataSet()
            {
                DataSetType = typeof(RebanhoSVC.XDataSet);
            }

        }
        #endregion RebanhoSVC.XDataSet

        [Guid(RebanhoSVC.sCID)]
        public  interface XService : XIBaseService
        {
            new XDataSet DataSet
            {
                get;
            }
            new XTuple NewTuple(Object pPKValue = null);
             IEnumerable<XTuple> Tuples
            {
                get;
            }
             XTuple Current
            {
                get;
            }
            new XDataSet Get(XServiceData pData);
             XDataSet Get(params Object[] pWhere);
        }
        [XRegister(typeof(_Service), _Service.sCID, typeof(RebanhoSVC))]
        protected class _Service : Service<RebanhoSVC, XDataSet, XTuple>
        {
            public const String sCID = "3FE9A498-3947-4901-B36C-07120F27BEAF";
            public Guid gCID = new Guid(sCID);
        }

        public class Service<TModel, TDataSet, TTuple> : XBaseService<RebanhoSVC, XDataSet, XTuple>, XService
             where TModel : RebanhoSVC, new()
             where TDataSet : XDataSet, new()
             where TTuple : XTuple
        {
            XDataSet XService.DataSet => (XDataSet)DataSet;
            XTuple XService.NewTuple(Object pPKValue)
            {
                return (XTuple)NewTuple(pPKValue);
            }
            public new XDataTuple NewTuple(Object pPKValue = null)
            {
                return (XTuple)base.NewTuple(pPKValue);
            }
            IEnumerable<XTuple> XService.Tuples => (IEnumerable<XTuple>)Tuples;
            XTuple XService.Current => (XTuple )Current;
            XDataSet XService.Get(XServiceData pData)
            {
                return (XDataSet)Get(pData);
            }
            XDataSet XService.Get(params Object[] pWhere)
            {
                return (XDataSet)Get(pWhere);
            }
            public Service()
            {
                ID = gCID;
            }
        }
    }

}