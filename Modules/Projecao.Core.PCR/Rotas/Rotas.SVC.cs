//<auto-generated/>
using System;
using System.Linq;
using Newtonsoft.Json;
using TFX.Core.Objects;
using TFX.Core.Model.Data;
using TFX.Core.Model.Cache;
using TFX.Core.Reflections;
using TFX.Core.Service.Job;
using TFX.Core.Service.SVC;
using Projecao.Core.NTR.DB;
using TFX.Core.Model.DIC.SVC;
using TFX.Core.Model.DIC.ORM;
using TFX.Core.Model.Services;
using TFX.Core.Model.DIC.Types;
using TFX.Core.Model.Interfaces;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Projecao.Core.PCR.Rotas
{
    [XRegister(typeof(RotasSVC), sCID)]
    [XDASESource(@"D:\Tootega\Source\TFX20\Modules\Projecao.Core.PCR\Projecao.Core.PCR.csproj", @"D:\Tootega\Source\TFX20\Modules\Projecao.Core.PCR\Rotas\Rotas.dssvc")]
    public class RotasSVC : XSVCModel
    {
        public const String sCID = "1EC95B7E-799A-45B8-B610-2C7E478BC23B";
        public static Guid gCID = new Guid(sCID);

        #region xNTRxMobileAtividade 
        public class xNTRxMobileAtividade : XSVCTable
        {

            public static Guid gCID => new Guid("5320A46A-C0F8-40DB-A39E-C6F3AD8C9A91");

            public xNTRxMobileAtividade()
            {
                Name = "NTRxMobileAtividade";
                Alias = "NTRxMobileAtividade";
                ID = gCID;
                ParentID =  global::Projecao.Core.NTR.DB.NTRx.NTRxMobileAtividade.gCID;

                Items.Add(NTRxMobileAtividadeID, NTRxMobileAtividadeID.ID);
                NTRxMobileAtividadeID.Owner = this;
                NTRxMobileAtividadeID.OwnerID = ID;
                NTRxMobileAtividadeID.TableName = Name;
                NTRxMobileAtividadeID.Alias = "NTRxMobileAtividadeID";
                Items.Add(DataInicial, DataInicial.ID);
                DataInicial.Owner = this;
                DataInicial.OwnerID = ID;
                DataInicial.TableName = Name;
                DataInicial.Alias = "DataInicial";
                Items.Add(DataFinal, DataFinal.ID);
                DataFinal.Owner = this;
                DataFinal.OwnerID = ID;
                DataFinal.TableName = Name;
                DataFinal.Alias = "DataFinal";
                Items.Add(Rota, Rota.ID);
                Rota.Owner = this;
                Rota.OwnerID = ID;
                Rota.TableName = Name;
                Items.Add(NTRxMobileConfigID, NTRxMobileConfigID.ID);
                NTRxMobileConfigID.Owner = this;
                NTRxMobileConfigID.OwnerID = ID;
                NTRxMobileConfigID.TableName = Name;
                NTRxMobileConfigID.Alias = "NTRxMobileConfigID";
                Items.Add(Distancia, Distancia.ID);
                Distancia.Owner = this;
                Distancia.OwnerID = ID;
                Distancia.TableName = Name;
                Distancia.Alias = "Distancia";
            }

            public static XORMPKField NTRxMobileAtividadeID = new XORMPKField(global::Projecao.Core.NTR.DB.NTRx.NTRxMobileAtividade.NTRxMobileAtividadeID, new Guid("F58E1178-A2EC-4D67-A85B-AF87E71DDCF1"), "NTRxMobileAtividadeID", "Atividade por Mobile");
            public static XORMDateField DataInicial = new XORMDateField(global::Projecao.Core.NTR.DB.NTRx.NTRxMobileAtividade.DataInicial, new Guid("4C774549-493B-4794-8CD2-EC20F4BB112B"), "DataInicial", "Data Inicial");
            public static XORMDateField DataFinal = new XORMDateField(global::Projecao.Core.NTR.DB.NTRx.NTRxMobileAtividade.DataFinal, new Guid("66B439BB-8D6A-47F3-B9BE-6F435BBB254A"), "DataFinal", "Data");
            public static XORMField Rota = new XORMField(global::Projecao.Core.NTR.DB.NTRx.NTRxMobileAtividade.Rota, new Guid("F225A240-0B2A-4CAD-8ABD-3222E3194DAC"), "Rota", "Rota");
            public static XORMFKField NTRxMobileConfigID = new XORMFKField(global::Projecao.Core.NTR.DB.NTRx.NTRxMobileAtividade.NTRxMobileConfigID, new Guid("01E1EAFA-0417-40EE-B78E-B783F3EEDB8D"), "NTRxMobileConfigID", "Configurações de Dispositivo Móvel");
            public static XORMField Distancia = new XORMField(global::Projecao.Core.NTR.DB.NTRx.NTRxMobileAtividade.Distancia, new Guid("DAB1326F-6E31-4786-A15A-DB4216D74F7C"), "Distancia", "Distância (m)");
        }
        #endregion xNTRxMobileAtividade 


        public xNTRxMobileAtividade NTRxMobileAtividade;

        public RotasSVC()
        {
            TupleType = typeof(RotasSVC.XTuple);
            DataSetType = typeof(RotasSVC.XDataSet);
            ServiceRuleCID = new Guid("3ECECB5D-474B-4C20-A0C9-6294B6A89684");
            OnlyActives = false;
            Actions = XSVCAction.All;
            Type = XServiceType.Default;
            ID = new Guid("1EC95B7E-799A-45B8-B610-2C7E478BC23B");
            Name = "Rotas";
            Title = "";
            IsCacheable = false;
            CompanyControl = false;
            IsJob = false;
            AutoLoad = true;
            FreeForUsers = false;
            ServerSideNewRecord = false;
            UseDistinct = false;
            JobType = XJobType.Default;
            CanExport = false;
            ModuleID = new Guid("02C4E7C5-1B4F-43DB-AC6C-CD36BBE428B7");
            Rights = new Int16[] { 1 }; 
            IsReadOnly = true;
            ClientScript = "Projecao.Core.PCR.js";
            GridFields = new Guid[] { xNTRxMobileAtividade.Distancia.ID, xNTRxMobileAtividade.DataFinal.ID };
            OrderByFields = new Guid[] { xNTRxMobileAtividade.DataInicial.ID, xNTRxMobileAtividade.DataFinal.ID };
            DataSetFields = new Guid[] { xNTRxMobileAtividade.DataInicial.ID, xNTRxMobileAtividade.DataFinal.ID, xNTRxMobileAtividade.NTRxMobileAtividadeID.ID, xNTRxMobileAtividade.NTRxMobileConfigID.ID, xNTRxMobileAtividade.Distancia.ID };
            PKField = xNTRxMobileAtividade.NTRxMobileAtividadeID.ID;
            ConfigTableID = new Guid("7C262B22-F4A4-419B-8F88-2123CCF74217");
            MasterRuleCID = new Guid("3ECECB5D-474B-4C20-A0C9-6294B6A89684");
            NTRxMobileAtividade = new xNTRxMobileAtividade();
            NTRxMobileAtividade.IsReadOnly = true;
            AddTable(NTRxMobileAtividade);
            MasterTableID = NTRxMobileAtividade.ID;
            xNTRxMobileAtividade.DataFinal.IsReadOnly = true;
            xNTRxMobileAtividade.DataFinal.OrderType = XOrderType.Desc;
            xNTRxMobileAtividade.DataFinal.IsDataField = true;
            xNTRxMobileAtividade.DataFinal.AllowEmpty = true;
            xNTRxMobileAtividade.DataInicial.IsReadOnly = true;
            xNTRxMobileAtividade.DataInicial.OrderType = XOrderType.Desc;
            xNTRxMobileAtividade.DataInicial.IsDataField = true;
            xNTRxMobileAtividade.DataInicial.AllowEmpty = true;
            xNTRxMobileAtividade.Distancia.IsReadOnly = true;
            xNTRxMobileAtividade.Distancia.IsDataField = true;
            xNTRxMobileAtividade.Distancia.AllowEmpty = true;
            xNTRxMobileAtividade.NTRxMobileAtividadeID.IsReadOnly = true;
            xNTRxMobileAtividade.NTRxMobileAtividadeID.IsDataField = true;
            xNTRxMobileAtividade.NTRxMobileAtividadeID.AllowEmpty = true;
            xNTRxMobileAtividade.NTRxMobileConfigID.IsReadOnly = true;
            xNTRxMobileAtividade.NTRxMobileConfigID.IsDataField = true;
            xNTRxMobileAtividade.NTRxMobileConfigID.AllowEmpty = true;
        }

        #region XFields

        public class XFields
        {
        public XORMField DataFinal => xNTRxMobileAtividade.DataFinal;
        public XORMField DataInicial => xNTRxMobileAtividade.DataInicial;
        public XORMField Distancia => xNTRxMobileAtividade.Distancia;
        public XORMField NTRxMobileAtividadeID => xNTRxMobileAtividade.NTRxMobileAtividadeID;
        public XORMField NTRxMobileConfigID => xNTRxMobileAtividade.NTRxMobileConfigID;
        }
        #endregion XFields
        #region RotasSVC.XTuple

        public  class XTuple : XDataTuple
        {

            public XTuple()
            {
            }

            public XTuple(Object[] pSource)
                : base(pSource)
            {
            }

            public XTuple(Int32 pColCount)
               : this(new Object[pColCount])
            {
            }

            public readonly XFields Fields = new XFields();

            #nullable enable

        public DateTime DataFinal
        {
            get
            {
                return (DateTime)Value[RotasSVC.xNTRxMobileAtividade.DataFinal.ID];
            }
            set
            {
                Value[RotasSVC.xNTRxMobileAtividade.DataFinal.ID] = value;
            }
        }
        public DateTime? oDataFinal
        {
            get
            {
                GetOldValue(RotasSVC.xNTRxMobileAtividade.DataFinal, out Object ovlr);
                return (DateTime?)ovlr;
            }
        }

        public DateTime DataInicial
        {
            get
            {
                return (DateTime)Value[RotasSVC.xNTRxMobileAtividade.DataInicial.ID];
            }
            set
            {
                Value[RotasSVC.xNTRxMobileAtividade.DataInicial.ID] = value;
            }
        }
        public DateTime? oDataInicial
        {
            get
            {
                GetOldValue(RotasSVC.xNTRxMobileAtividade.DataInicial, out Object ovlr);
                return (DateTime?)ovlr;
            }
        }

        public Int32 Distancia
        {
            get
            {
                return (Int32)Value[RotasSVC.xNTRxMobileAtividade.Distancia.ID];
            }
            set
            {
                Value[RotasSVC.xNTRxMobileAtividade.Distancia.ID] = value;
            }
        }
        public Int32? oDistancia
        {
            get
            {
                GetOldValue(RotasSVC.xNTRxMobileAtividade.Distancia, out Object ovlr);
                return (Int32?)ovlr;
            }
        }

        public Int32 NTRxMobileAtividadeID
        {
            get
            {
                return (Int32)Value[RotasSVC.xNTRxMobileAtividade.NTRxMobileAtividadeID.ID];
            }
            set
            {
                Value[RotasSVC.xNTRxMobileAtividade.NTRxMobileAtividadeID.ID] = value;
            }
        }
        public Int32? oNTRxMobileAtividadeID
        {
            get
            {
                GetOldValue(RotasSVC.xNTRxMobileAtividade.NTRxMobileAtividadeID, out Object ovlr);
                return (Int32?)ovlr;
            }
        }

        public Guid NTRxMobileConfigID
        {
            get
            {
                return (Guid)Value[RotasSVC.xNTRxMobileAtividade.NTRxMobileConfigID.ID];
            }
            set
            {
                Value[RotasSVC.xNTRxMobileAtividade.NTRxMobileConfigID.ID] = value;
            }
        }
        public Guid? oNTRxMobileConfigID
        {
            get
            {
                GetOldValue(RotasSVC.xNTRxMobileAtividade.NTRxMobileConfigID, out Object ovlr);
                return (Guid?)ovlr;
            }
        }

            #nullable disable
        }
        #endregion RotasSVC.XTuple

        #region RotasSVC.XRule
        public abstract class XRule : XServiceRule<RotasSVC.XDataSet, RotasSVC, RotasSVC.XTuple>
        {
        }
        #endregion RotasSVC.XRule

        #region RotasSVC.XDataSet

        public class XDataSet : XDataSet<RotasSVC.XTuple>
        {
            public XDataSet()
            {
                DataSetType = typeof(RotasSVC.XDataSet);
            }
        }

        public class XDataSet<T> : XServiceDataSet<RotasSVC.XTuple> where T : XDataTuple
        {

            public Guid DataFinal => RotasSVC.xNTRxMobileAtividade.DataFinal.ID;
            public Guid DataInicial => RotasSVC.xNTRxMobileAtividade.DataInicial.ID;
            public Guid Distancia => RotasSVC.xNTRxMobileAtividade.Distancia.ID;
            public Guid NTRxMobileAtividadeID => RotasSVC.xNTRxMobileAtividade.NTRxMobileAtividadeID.ID;
            public Guid NTRxMobileConfigID => RotasSVC.xNTRxMobileAtividade.NTRxMobileConfigID.ID;

            public XDataSet()
            {
                DataSetType = typeof(RotasSVC.XDataSet);
            }

        }
        #endregion RotasSVC.XDataSet

        [Guid(RotasSVC.sCID)]
        public  interface XService : XIBaseService
        {
            new XDataSet DataSet
            {
                get;
            }
            new XTuple NewTuple(Object pPKValue = null);
             IEnumerable<XTuple> Tuples
            {
                get;
            }
             XTuple Current
            {
                get;
            }
            new XDataSet Get(XServiceData pData);
             XDataSet Get(params Object[] pWhere);
        }
        [XRegister(typeof(_Service), _Service.sCID, typeof(RotasSVC))]
        protected class _Service : Service<RotasSVC, XDataSet, XTuple>
        {
            public const String sCID = "4F1EB419-A9D9-4C56-96B8-E78188FCC791";
            public Guid gCID = new Guid(sCID);
        }

        public class Service<TModel, TDataSet, TTuple> : XBaseService<RotasSVC, XDataSet, XTuple>, XService
             where TModel : RotasSVC, new()
             where TDataSet : XDataSet, new()
             where TTuple : XTuple
        {
            XDataSet XService.DataSet => (XDataSet)DataSet;
            XTuple XService.NewTuple(Object pPKValue)
            {
                return (XTuple)NewTuple(pPKValue);
            }
            public new XDataTuple NewTuple(Object pPKValue = null)
            {
                return (XTuple)base.NewTuple(pPKValue);
            }
            IEnumerable<XTuple> XService.Tuples => (IEnumerable<XTuple>)Tuples;
            XTuple XService.Current => (XTuple )Current;
            XDataSet XService.Get(XServiceData pData)
            {
                return (XDataSet)Get(pData);
            }
            XDataSet XService.Get(params Object[] pWhere)
            {
                return (XDataSet)Get(pWhere);
            }
            public Service()
            {
                ID = gCID;
            }
        }
    }

}