//<auto-generated/>
using System;
using System.Linq;
using Newtonsoft.Json;
using TFX.Core.Objects;
using TFX.Core.Model.Data;
using TFX.Core.Model.Cache;
using TFX.Core.Reflections;
using TFX.Core.Service.Job;
using TFX.Core.Service.SVC;
using Projecao.Core.NTR.DB;
using TFX.Core.Model.DIC.SVC;
using TFX.Core.Model.DIC.ORM;
using TFX.Core.Service.Apps;
using TFX.Core.Model.Services;
using Projecao.Core.PCR.Rotas;
using TFX.Core.Model.DIC.Types;
using Projecao.Core.PCR.Retiro;
using TFX.Core.Model.Interfaces;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Projecao.Core.PCR.Rotas
{
    [XRegister(typeof(RotaDadosSVC), sCID)]
    [XDASESource(@"D:\Tootega\Source\TFX20\Modules\Projecao.Core.PCR\Projecao.Core.PCR.csproj", @"D:\Tootega\Source\TFX20\Modules\Projecao.Core.PCR\Rotas\RotaDados.dssvc")]
    public class RotaDadosSVC : XSVCModel
    {
        public const String sCID = "991D6BA4-284E-43D7-A2FC-32B647BCB97E";
        public static Guid gCID = new Guid(sCID);
        public static XSVCReference CTLxUsuarioEmpresa_CTLxUsuarioID_NTRxMobileAtividade_NTRxMobileConfigID; // CTLxUsuarioEmpresa.CTLxUsuarioID --> NTRxMobileAtividade.NTRxMobileConfigID

        #region xNTRxMobileAtividade 
        public class xNTRxMobileAtividade : XSVCTable
        {

            public static Guid gCID => new Guid("32D05549-7856-4146-A777-FD55CF97CFCB");

            public xNTRxMobileAtividade()
            {
                Name = "NTRxMobileAtividade";
                Alias = "NTRxMobileAtividade";
                ID = gCID;
                ParentID =  global::Projecao.Core.NTR.DB.NTRx.NTRxMobileAtividade.gCID;

                Items.Add(NTRxMobileAtividadeID, NTRxMobileAtividadeID.ID);
                NTRxMobileAtividadeID.Owner = this;
                NTRxMobileAtividadeID.OwnerID = ID;
                NTRxMobileAtividadeID.TableName = Name;
                NTRxMobileAtividadeID.Alias = "NTRxMobileAtividadeID";
                Items.Add(DataInicial, DataInicial.ID);
                DataInicial.Owner = this;
                DataInicial.OwnerID = ID;
                DataInicial.TableName = Name;
                DataInicial.Alias = "DataInicial";
                Items.Add(DataFinal, DataFinal.ID);
                DataFinal.Owner = this;
                DataFinal.OwnerID = ID;
                DataFinal.TableName = Name;
                DataFinal.Alias = "DataFinal";
                Items.Add(Rota, Rota.ID);
                Rota.Owner = this;
                Rota.OwnerID = ID;
                Rota.TableName = Name;
                Rota.Alias = "Rota";
                Items.Add(NTRxMobileConfigID, NTRxMobileConfigID.ID);
                NTRxMobileConfigID.Owner = this;
                NTRxMobileConfigID.OwnerID = ID;
                NTRxMobileConfigID.TableName = Name;
                NTRxMobileConfigID.Alias = "NTRxMobileConfigID";
                Items.Add(Distancia, Distancia.ID);
                Distancia.Owner = this;
                Distancia.OwnerID = ID;
                Distancia.TableName = Name;
            }

            public static XORMPKField NTRxMobileAtividadeID = new XORMPKField(global::Projecao.Core.NTR.DB.NTRx.NTRxMobileAtividade.NTRxMobileAtividadeID, new Guid("41920B0E-5736-413F-B9CD-0F67B1097332"), "NTRxMobileAtividadeID", "Atividade por Mobile");
            public static XORMDateField DataInicial = new XORMDateField(global::Projecao.Core.NTR.DB.NTRx.NTRxMobileAtividade.DataInicial, new Guid("F5BC302B-EB18-4E2D-982F-F3138CA3AB01"), "DataInicial", "Data Inicial");
            public static XORMDateField DataFinal = new XORMDateField(global::Projecao.Core.NTR.DB.NTRx.NTRxMobileAtividade.DataFinal, new Guid("BF9E9A28-D933-4EC9-8834-B8C2C88CC168"), "DataFinal", "Data Final");
            public static XORMField Rota = new XORMField(global::Projecao.Core.NTR.DB.NTRx.NTRxMobileAtividade.Rota, new Guid("15FEC6B8-C241-4E6E-A5FA-5521ED81574E"), "Rota", "Rota");
            public static XORMFKField NTRxMobileConfigID = new XORMFKField(global::Projecao.Core.NTR.DB.NTRx.NTRxMobileAtividade.NTRxMobileConfigID, new Guid("3837191D-4E53-476F-A412-D01D1D6C3828"), "NTRxMobileConfigID", "Configurações de Dispositivo Móvel");
            public static XORMField Distancia = new XORMField(global::Projecao.Core.NTR.DB.NTRx.NTRxMobileAtividade.Distancia, new Guid("1AF098D5-B3A7-418D-B92C-65DC46BCE0F7"), "Distancia", "Distância (m)");
        }
        #endregion xNTRxMobileAtividade 


        #region xCTLxUsuarioEmpresa 
        public class xCTLxUsuarioEmpresa : XSVCTable
        {

            public static Guid gCID => new Guid("BE0D6843-85AE-4184-A2E2-B5A0A2BEBF2D");

            public xCTLxUsuarioEmpresa()
            {
                Name = "CTLxUsuarioEmpresa";
                Alias = "CTLxUsuarioEmpresa";
                ID = gCID;
                ParentID =  global::TFX.Core.Service.Apps.CTLx.CTLxUsuarioEmpresa.gCID;

                Items.Add(SYSxEmpresaPermitidaID, SYSxEmpresaPermitidaID.ID);
                SYSxEmpresaPermitidaID.Owner = this;
                SYSxEmpresaPermitidaID.OwnerID = ID;
                SYSxEmpresaPermitidaID.TableName = Name;
                SYSxEmpresaPermitidaID.Alias = "SYSxEmpresaPermitidaID";
                Items.Add(CTLxUsuarioEmpresaID, CTLxUsuarioEmpresaID.ID);
                CTLxUsuarioEmpresaID.Owner = this;
                CTLxUsuarioEmpresaID.OwnerID = ID;
                CTLxUsuarioEmpresaID.TableName = Name;
                Items.Add(CTLxUsuarioID, CTLxUsuarioID.ID);
                CTLxUsuarioID.Owner = this;
                CTLxUsuarioID.OwnerID = ID;
                CTLxUsuarioID.TableName = Name;
                Items.Add(SYSxEstadoID, SYSxEstadoID.ID);
                SYSxEstadoID.Owner = this;
                SYSxEstadoID.OwnerID = ID;
                SYSxEstadoID.TableName = Name;
            }

            public static XORMFKField SYSxEmpresaPermitidaID = new XORMFKField(global::TFX.Core.Service.Apps.CTLx.CTLxUsuarioEmpresa.SYSxEmpresaPermitidaID, new Guid("B8721C65-FE46-42B0-A7E1-23C1385E66D5"), "SYSxEmpresaPermitidaID", "Empresa");
            public static XORMPKField CTLxUsuarioEmpresaID = new XORMPKField(global::TFX.Core.Service.Apps.CTLx.CTLxUsuarioEmpresa.CTLxUsuarioEmpresaID, new Guid("9DFD830A-B618-40E7-AC8C-B7C0E889AE21"), "CTLxUsuarioEmpresaID", "Empresa por Usuário");
            public static XORMFKField CTLxUsuarioID = new XORMFKField(global::TFX.Core.Service.Apps.CTLx.CTLxUsuarioEmpresa.CTLxUsuarioID, new Guid("2C04A103-2CCD-4552-959A-55973D717107"), "CTLxUsuarioID", "Usuário");
            public static XORMStateField SYSxEstadoID = new XORMStateField(global::TFX.Core.Service.Apps.CTLx.CTLxUsuarioEmpresa.SYSxEstadoID, new Guid("3BFED800-1871-4DB9-B868-CEE13758DB4C"), "SYSxEstadoID", "Estado");
        }
        #endregion xCTLxUsuarioEmpresa 


        public xCTLxUsuarioEmpresa CTLxUsuarioEmpresa;
        public xNTRxMobileAtividade NTRxMobileAtividade;
        public static readonly XORMParameterField CoordenadasArea = new XORMParameterField(new Guid("085EEE55-DE23-48DD-B695-6C79C1025E82"), "CoordenadasArea", "Coordenadas do Área", XString.CID, 0, 0, false, gCID, null);
        public static readonly XORMParameterField Latitude = new XORMParameterField(new Guid("AC4E7EB6-815C-4B81-AE92-F381AF2F29F8"), "Latitude", "Latitude", XDecimal.CID, 0, 0, false, gCID, null);
        public static readonly XORMParameterField Longitude = new XORMParameterField(new Guid("38BBA73C-3E86-42FD-9E52-04190500CA36"), "Longitude", "Longitude", XDecimal.CID, 0, 0, false, gCID, null);
        public static readonly XORMParameterField Pontos = new XORMParameterField(new Guid("DA09C6ED-6049-4063-BF62-195AD7E65CDC"), "Pontos", "Pontos de Destaque", XString.CID, 0, 0, false, gCID, null);

        public RotaDadosSVC()
        {
            TupleType = typeof(RotaDadosSVC.XTuple);
            DataSetType = typeof(RotaDadosSVC.XDataSet);
            ServiceRuleCID = new Guid("4939DF13-476C-411D-9695-B6D89CCF95A5");
            OnlyActives = false;
            Actions = XSVCAction.All;
            Type = XServiceType.Default;
            ID = new Guid("991D6BA4-284E-43D7-A2FC-32B647BCB97E");
            Name = "RotaDados";
            Title = "";
            IsCacheable = false;
            CompanyControl = false;
            IsJob = false;
            AutoLoad = true;
            FreeForUsers = false;
            ServerSideNewRecord = false;
            UseDistinct = false;
            JobType = XJobType.Default;
            CanExport = false;
            ModuleID = new Guid("02C4E7C5-1B4F-43DB-AC6C-CD36BBE428B7");
            Rights = new Int16[] { 1 }; 
            IsReadOnly = true;
            ClientScript = "Projecao.Core.PCR.js";
            DataSetFields = new Guid[] { xNTRxMobileAtividade.Rota.ID, xNTRxMobileAtividade.NTRxMobileAtividadeID.ID, Pontos.ID, xNTRxMobileAtividade.NTRxMobileConfigID.ID, xNTRxMobileAtividade.DataInicial.ID, xNTRxMobileAtividade.DataFinal.ID, Latitude.ID, Longitude.ID, CoordenadasArea.ID, xCTLxUsuarioEmpresa.SYSxEmpresaPermitidaID.ID };
            PKField = xNTRxMobileAtividade.NTRxMobileAtividadeID.ID;
            ConfigTableID = new Guid("7C262B22-F4A4-419B-8F88-2123CCF74217");
            MasterRuleCID = new Guid("4939DF13-476C-411D-9695-B6D89CCF95A5");
            XSubServiceItem ss1F087DD17E364E7C911D080AA22332F1 = new XSubServiceItem(RetiroSVC.gCID, RetiroSVC.xPCRxRetiro.SYSxEmpresaID.ID, RotaDadosSVC.gCID, xCTLxUsuarioEmpresa.SYSxEmpresaPermitidaID.ID, true, XSubSeviceType.Default);
            ss1F087DD17E364E7C911D080AA22332F1.Rights = new Int16[] { 1 }; 
            ss1F087DD17E364E7C911D080AA22332F1.LateLoad = false;
            SubServices.Add(ss1F087DD17E364E7C911D080AA22332F1);
            CTLxUsuarioEmpresa = new xCTLxUsuarioEmpresa();
            CTLxUsuarioEmpresa.IsReadOnly = true;
            AddTable(CTLxUsuarioEmpresa);
            NTRxMobileAtividade = new xNTRxMobileAtividade();
            NTRxMobileAtividade.IsReadOnly = true;
            AddTable(NTRxMobileAtividade);
            MasterTableID = NTRxMobileAtividade.ID;
            CTLxUsuarioEmpresa_CTLxUsuarioID_NTRxMobileAtividade_NTRxMobileConfigID = AddReference(new XSVCReference(new Guid("2FD89EB0-84D9-4A10-BF96-3C56F74846EA"), "FK_2FD89EB084D94A10BF963C56F74846EA", RotaDadosSVC.xCTLxUsuarioEmpresa.gCID, xCTLxUsuarioEmpresa.CTLxUsuarioID.ID, RotaDadosSVC.xNTRxMobileAtividade.gCID, xNTRxMobileAtividade.NTRxMobileConfigID.ID, XJoinType.Inner)); // CTLxUsuarioEmpresa.CTLxUsuarioID --> NTRxMobileAtividade.NTRxMobileConfigID
            XSVCReference FK_398F17A38FC6403B998864BD6BC8E89E = new XSVCReference(new Guid("398F17A3-8FC6-403B-9988-64BD6BC8E89E"), "FK_398F17A38FC6403B998864BD6BC8E89E", RetiroSVC.gCID, RetiroSVC.xPCRxRetiro.SYSxEmpresaID.ID, CTLxUsuarioEmpresa.ID, RotaDadosSVC.xCTLxUsuarioEmpresa.SYSxEmpresaPermitidaID.ID, XJoinType.SubService); // RetiroSVC.SYSxEmpresaID --> RotaDados.SYSxEmpresaPermitidaID
            FK_398F17A38FC6403B998864BD6BC8E89E.IsLowRelevance = false;
            AddReference(FK_398F17A38FC6403B998864BD6BC8E89E);
            AddField(Pontos);
            Pontos.IsParam = true;
            AddField(Latitude);
            Latitude.IsParam = true;
            AddField(Longitude);
            Longitude.IsParam = true;
            AddField(CoordenadasArea);
            CoordenadasArea.IsParam = true;
            CoordenadasArea.IsReadOnly = false;
            CoordenadasArea.Length = 0;
            CoordenadasArea.Scale = 0;
            CoordenadasArea.IsDataField = true;
            CoordenadasArea.AllowEmpty = true;
            xNTRxMobileAtividade.DataFinal.IsReadOnly = true;
            xNTRxMobileAtividade.DataFinal.IsDataField = true;
            xNTRxMobileAtividade.DataFinal.AllowEmpty = true;
            xNTRxMobileAtividade.DataInicial.IsReadOnly = true;
            xNTRxMobileAtividade.DataInicial.IsDataField = true;
            xNTRxMobileAtividade.DataInicial.AllowEmpty = true;
            Latitude.IsReadOnly = false;
            Latitude.Length = 20;
            Latitude.Scale = 10;
            Latitude.IsDataField = true;
            Latitude.AllowEmpty = true;
            Longitude.IsReadOnly = false;
            Longitude.Length = 20;
            Longitude.Scale = 10;
            Longitude.IsDataField = true;
            Longitude.AllowEmpty = true;
            xNTRxMobileAtividade.NTRxMobileAtividadeID.IsReadOnly = true;
            xNTRxMobileAtividade.NTRxMobileAtividadeID.IsDataField = true;
            xNTRxMobileAtividade.NTRxMobileAtividadeID.AllowEmpty = true;
            xNTRxMobileAtividade.NTRxMobileConfigID.IsReadOnly = true;
            xNTRxMobileAtividade.NTRxMobileConfigID.IsDataField = true;
            xNTRxMobileAtividade.NTRxMobileConfigID.AllowEmpty = true;
            Pontos.IsReadOnly = false;
            Pontos.Length = 0;
            Pontos.Scale = 0;
            Pontos.IsDataField = true;
            Pontos.AllowEmpty = true;
            xNTRxMobileAtividade.Rota.IsReadOnly = true;
            xNTRxMobileAtividade.Rota.IsDataField = true;
            xNTRxMobileAtividade.Rota.AllowEmpty = true;
            xCTLxUsuarioEmpresa.SYSxEmpresaPermitidaID.IsReadOnly = true;
            xCTLxUsuarioEmpresa.SYSxEmpresaPermitidaID.IsDataField = true;
            xCTLxUsuarioEmpresa.SYSxEmpresaPermitidaID.AllowEmpty = true;
        }

        #region XFields

        public class XFields
        {
        public XORMField CoordenadasArea => RotaDadosSVC.CoordenadasArea;
        public XORMField DataFinal => xNTRxMobileAtividade.DataFinal;
        public XORMField DataInicial => xNTRxMobileAtividade.DataInicial;
        public XORMField Latitude => RotaDadosSVC.Latitude;
        public XORMField Longitude => RotaDadosSVC.Longitude;
        public XORMField NTRxMobileAtividadeID => xNTRxMobileAtividade.NTRxMobileAtividadeID;
        public XORMField NTRxMobileConfigID => xNTRxMobileAtividade.NTRxMobileConfigID;
        public XORMField Pontos => RotaDadosSVC.Pontos;
        public XORMField Rota => xNTRxMobileAtividade.Rota;
        public XORMField SYSxEmpresaPermitidaID => xCTLxUsuarioEmpresa.SYSxEmpresaPermitidaID;
        }
        #endregion XFields
        #region RotaDadosSVC.XTuple

        public  class XTuple : XDataTuple
        {

            public XTuple()
            {
            }

            public XTuple(Object[] pSource)
                : base(pSource)
            {
            }

            public XTuple(Int32 pColCount)
               : this(new Object[pColCount])
            {
            }

            public readonly XFields Fields = new XFields();

            #nullable enable

        public String CoordenadasArea
        {
            get
            {
                return (String)Value[RotaDadosSVC.CoordenadasArea.ID];
            }
            set
            {
                Value[RotaDadosSVC.CoordenadasArea.ID] = value;
            }
        }
        public String? oCoordenadasArea
        {
            get
            {
                GetOldValue(RotaDadosSVC.CoordenadasArea, out Object ovlr);
                return (String?)ovlr;
            }
        }

        public DateTime DataFinal
        {
            get
            {
                return (DateTime)Value[RotaDadosSVC.xNTRxMobileAtividade.DataFinal.ID];
            }
            set
            {
                Value[RotaDadosSVC.xNTRxMobileAtividade.DataFinal.ID] = value;
            }
        }
        public DateTime? oDataFinal
        {
            get
            {
                GetOldValue(RotaDadosSVC.xNTRxMobileAtividade.DataFinal, out Object ovlr);
                return (DateTime?)ovlr;
            }
        }

        public DateTime DataInicial
        {
            get
            {
                return (DateTime)Value[RotaDadosSVC.xNTRxMobileAtividade.DataInicial.ID];
            }
            set
            {
                Value[RotaDadosSVC.xNTRxMobileAtividade.DataInicial.ID] = value;
            }
        }
        public DateTime? oDataInicial
        {
            get
            {
                GetOldValue(RotaDadosSVC.xNTRxMobileAtividade.DataInicial, out Object ovlr);
                return (DateTime?)ovlr;
            }
        }

        public Decimal Latitude
        {
            get
            {
                return (Decimal)Value[RotaDadosSVC.Latitude.ID];
            }
            set
            {
                Value[RotaDadosSVC.Latitude.ID] = value;
            }
        }
        public Decimal? oLatitude
        {
            get
            {
                GetOldValue(RotaDadosSVC.Latitude, out Object ovlr);
                return (Decimal?)ovlr;
            }
        }

        public Decimal Longitude
        {
            get
            {
                return (Decimal)Value[RotaDadosSVC.Longitude.ID];
            }
            set
            {
                Value[RotaDadosSVC.Longitude.ID] = value;
            }
        }
        public Decimal? oLongitude
        {
            get
            {
                GetOldValue(RotaDadosSVC.Longitude, out Object ovlr);
                return (Decimal?)ovlr;
            }
        }

        public Int32 NTRxMobileAtividadeID
        {
            get
            {
                return (Int32)Value[RotaDadosSVC.xNTRxMobileAtividade.NTRxMobileAtividadeID.ID];
            }
            set
            {
                Value[RotaDadosSVC.xNTRxMobileAtividade.NTRxMobileAtividadeID.ID] = value;
            }
        }
        public Int32? oNTRxMobileAtividadeID
        {
            get
            {
                GetOldValue(RotaDadosSVC.xNTRxMobileAtividade.NTRxMobileAtividadeID, out Object ovlr);
                return (Int32?)ovlr;
            }
        }

        public Guid NTRxMobileConfigID
        {
            get
            {
                return (Guid)Value[RotaDadosSVC.xNTRxMobileAtividade.NTRxMobileConfigID.ID];
            }
            set
            {
                Value[RotaDadosSVC.xNTRxMobileAtividade.NTRxMobileConfigID.ID] = value;
            }
        }
        public Guid? oNTRxMobileConfigID
        {
            get
            {
                GetOldValue(RotaDadosSVC.xNTRxMobileAtividade.NTRxMobileConfigID, out Object ovlr);
                return (Guid?)ovlr;
            }
        }

        public String Pontos
        {
            get
            {
                return (String)Value[RotaDadosSVC.Pontos.ID];
            }
            set
            {
                Value[RotaDadosSVC.Pontos.ID] = value;
            }
        }
        public String? oPontos
        {
            get
            {
                GetOldValue(RotaDadosSVC.Pontos, out Object ovlr);
                return (String?)ovlr;
            }
        }

        public String Rota
        {
            get
            {
                return (String)Value[RotaDadosSVC.xNTRxMobileAtividade.Rota.ID];
            }
            set
            {
                Value[RotaDadosSVC.xNTRxMobileAtividade.Rota.ID] = value;
            }
        }
        public String? oRota
        {
            get
            {
                GetOldValue(RotaDadosSVC.xNTRxMobileAtividade.Rota, out Object ovlr);
                return (String?)ovlr;
            }
        }

        public Guid SYSxEmpresaPermitidaID
        {
            get
            {
                return (Guid)Value[RotaDadosSVC.xCTLxUsuarioEmpresa.SYSxEmpresaPermitidaID.ID];
            }
            set
            {
                Value[RotaDadosSVC.xCTLxUsuarioEmpresa.SYSxEmpresaPermitidaID.ID] = value;
            }
        }
        public Guid? oSYSxEmpresaPermitidaID
        {
            get
            {
                GetOldValue(RotaDadosSVC.xCTLxUsuarioEmpresa.SYSxEmpresaPermitidaID, out Object ovlr);
                return (Guid?)ovlr;
            }
        }

            #nullable disable
        }
        #endregion RotaDadosSVC.XTuple

        #region RotaDadosSVC.XRule
        public abstract class XRule : XServiceRule<RotaDadosSVC.XDataSet, RotaDadosSVC, RotaDadosSVC.XTuple>
        {
        }
        #endregion RotaDadosSVC.XRule

        #region RotaDadosSVC.XDataSet

        public class XDataSet : XDataSet<RotaDadosSVC.XTuple>
        {
            public XDataSet()
            {
                DataSetType = typeof(RotaDadosSVC.XDataSet);
            }
        }

        public class XDataSet<T> : XServiceDataSet<RotaDadosSVC.XTuple> where T : XDataTuple
        {

            public Guid CoordenadasArea => RotaDadosSVC.CoordenadasArea.ID;
            public Guid DataFinal => RotaDadosSVC.xNTRxMobileAtividade.DataFinal.ID;
            public Guid DataInicial => RotaDadosSVC.xNTRxMobileAtividade.DataInicial.ID;
            public Guid Latitude => RotaDadosSVC.Latitude.ID;
            public Guid Longitude => RotaDadosSVC.Longitude.ID;
            public Guid NTRxMobileAtividadeID => RotaDadosSVC.xNTRxMobileAtividade.NTRxMobileAtividadeID.ID;
            public Guid NTRxMobileConfigID => RotaDadosSVC.xNTRxMobileAtividade.NTRxMobileConfigID.ID;
            public Guid Pontos => RotaDadosSVC.Pontos.ID;
            public Guid Rota => RotaDadosSVC.xNTRxMobileAtividade.Rota.ID;
            public Guid SYSxEmpresaPermitidaID => RotaDadosSVC.xCTLxUsuarioEmpresa.SYSxEmpresaPermitidaID.ID;

            public XDataSet()
            {
                DataSetType = typeof(RotaDadosSVC.XDataSet);
            }

            private Projecao.Core.PCR.Retiro.RetiroSVC.XDataSet _RetiroDataSet;

            public Projecao.Core.PCR.Retiro.RetiroSVC.XDataSet RetiroDataSet
            {
                get
                {
                    if (_RetiroDataSet == null)
                    {
                        _RetiroDataSet.IsReadOnly = true;
                        _RetiroDataSet = (Projecao.Core.PCR.Retiro.RetiroSVC.XDataSet)Children.Get(Projecao.Core.PCR.Retiro.RetiroSVC.gCID);
                    }
                    return  _RetiroDataSet;
                }
            }

        }
        #endregion RotaDadosSVC.XDataSet

        [Guid(RotaDadosSVC.sCID)]
        public  interface XService : XIBaseService
        {
            new XDataSet DataSet
            {
                get;
            }
            new XTuple NewTuple(Object pPKValue = null);
             IEnumerable<XTuple> Tuples
            {
                get;
            }
             XTuple Current
            {
                get;
            }
            new XDataSet Get(XServiceData pData);
             XDataSet Get(params Object[] pWhere);
        }
        [XRegister(typeof(_Service), _Service.sCID, typeof(RotaDadosSVC))]
        protected class _Service : Service<RotaDadosSVC, XDataSet, XTuple>
        {
            public const String sCID = "424336AB-36ED-4B64-8893-E5B050A6B5E4";
            public Guid gCID = new Guid(sCID);
        }

        public class Service<TModel, TDataSet, TTuple> : XBaseService<RotaDadosSVC, XDataSet, XTuple>, XService
             where TModel : RotaDadosSVC, new()
             where TDataSet : XDataSet, new()
             where TTuple : XTuple
        {
            XDataSet XService.DataSet => (XDataSet)DataSet;
            XTuple XService.NewTuple(Object pPKValue)
            {
                return (XTuple)NewTuple(pPKValue);
            }
            public new XDataTuple NewTuple(Object pPKValue = null)
            {
                return (XTuple)base.NewTuple(pPKValue);
            }
            IEnumerable<XTuple> XService.Tuples => (IEnumerable<XTuple>)Tuples;
            XTuple XService.Current => (XTuple )Current;
            XDataSet XService.Get(XServiceData pData)
            {
                return (XDataSet)Get(pData);
            }
            XDataSet XService.Get(params Object[] pWhere)
            {
                return (XDataSet)Get(pWhere);
            }
            public Service()
            {
                ID = gCID;
            }
        }
    }

}