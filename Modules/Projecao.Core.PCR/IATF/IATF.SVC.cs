//<auto-generated/>
using System;
using System.Linq;
using Newtonsoft.Json;
using TFX.Core.Objects;
using TFX.Core.Model.Data;
using TFX.Core.Model.Cache;
using TFX.Core.Reflections;
using TFX.Core.Service.Job;
using TFX.Core.Service.SVC;
using Projecao.Core.PCR.DB;
using TFX.Core.Model.DIC.SVC;
using TFX.Core.Model.DIC.ORM;
using TFX.Core.Model.DIC.FRM;
using TFX.Core.Model.DIC.APP;
using TFX.Core.Model.DIC.RPT;
using Projecao.Core.PCR.IATF;
using TFX.Core.Model.Services;
using TFX.Core.Model.DIC.Types;
using TFX.Core.Model.Interfaces;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Projecao.Core.PCR.IATF
{
    [XRegister(typeof(IATFSVC), sCID)]
    [XDASESource(@"D:\Tootega\Source\TFX20\Modules\Projecao.Core.PCR\Projecao.Core.PCR.csproj", @"D:\Tootega\Source\TFX20\Modules\Projecao.Core.PCR\IATF\IATF.dssvc")]
    public class IATFSVC : XSVCModel
    {
        #region IATFFilterFRM

        [XRegister(typeof(IATFFilterFRM), sCID)]
        public class IATFFilterFRM : XFRMModel
        {
            public const String sCID = "0EEB1289-A07E-4DCE-ADF2-84515BCBEC76";
            static IATFFilterFRM()
            {
                gCID = new Guid(sCID);
            }
            public IATFFilterFRM()
            {
                ID = gCID;
                Name = "IATFFilter";
                Title = "";
                MinRows = 1;
                ConfigCID = new Guid("00000000-0000-0000-0000-000000000000");
                ConfigPKFilter = false;
                Rect = new XRect(20, 20, 965, 678);
                Style = XFRMStyle.Normal;
                ActionContext = XActionContext.All;
                AddItem(Nome);
                Nome.ForceRW = true;
                Nome.CanInsert = true;
                Nome.CanUpdate = true;
                Nome.RowCount = 1;
                Nome.ColCount = 32;
                Nome.RowCountSmall = 1;
                Nome.ColCountSmall = 32;
                Nome.IsHidden = false;
                Nome.IsHiddenSmall = false;
                Nome.AdditionalTitle = "";
                Nome.Location = 1;
                Nome.EditorCID = new Guid("AA2A0DB9-2C59-4833-994D-3DBF2AA0CB3C");
                Nome.FormImplace = true;
                Nome.Operator = XOperator.EqualTo;
                Nome.JustifyHeight = false;
                Nome.AllowEmpty = true;
                Nome.FontColor = "#000000";
                Nome.FontStyle = XFontStyle.Normal;
                Nome.ShowFooter = false;
                Nome.ViewSAM = new Guid("00000000-0000-0000-0000-000000000000");
                Nome.Scale = 0;
                Nome.Length = 50;
                Nome.SearchAction = XSearchAction.Default;
                Nome.TypeID = XString.CID;
                Nome.AdditionalFieldsID = new Guid[] {  };
                Nome.AdditionalDataFieldsID = new Guid[] {  };
                Nome.TargetFilterFieldID = new Guid[] {  };
                Nome.SourceFilterFieldID = new Guid[] {  };
                Nome.TargetDisplayFieldID = new Guid[] {  };
                Nome.SourceDisplayFieldID = new Guid[] {  };
                Nome.AutoLoad = false;
                Nome.ApplicationID = new Guid("00000000-0000-0000-0000-000000000000");
                Nome.FilterInative = true;
                Nome.IsAnswer = false;
                Nome.AllowMultiSelect = false;
            }
            public XFRMField Nome = new XFRMField(new Guid("C656F1CF-1DBD-432E-B54B-336CB3F1528C"), "Nome", "Nome", XString.CID, 1, 32, false, gCID, null, new Guid("22BB1AAC-6110-4F87-ACBE-DFD26692F1F6")); // String;
            public static class Fields
            {
                public static XFieldInfo Nome = new XFieldInfo(new Guid("C656F1CF-1DBD-432E-B54B-336CB3F1528C"), "Nome", "Nome", typeof(String));
            }
        }

        #endregion IATFFilterFRM

        public const String sCID = "DE7D437E-1F14-4E87-A1A6-7945C3A7822B";
        public static Guid gCID = new Guid(sCID);

        #region xPCRxIATF 
        public class xPCRxIATF : XSVCTable
        {

            public static Guid gCID => new Guid("0366740B-793B-4837-A6BA-8F94C31A1F85");

            public xPCRxIATF()
            {
                Name = "PCRxIATF";
                Alias = "PCRxIATF";
                ID = gCID;
                ParentID =  global::Projecao.Core.PCR.DB.PCRx.PCRxIATF.gCID;

                Items.Add(PCRxIATFID, PCRxIATFID.ID);
                PCRxIATFID.Owner = this;
                PCRxIATFID.OwnerID = ID;
                PCRxIATFID.TableName = Name;
                PCRxIATFID.Alias = "PCRxIATFID";
                Items.Add(Nome, Nome.ID);
                Nome.Owner = this;
                Nome.OwnerID = ID;
                Nome.TableName = Name;
                Nome.Alias = "Nome";
                Items.Add(Duracao, Duracao.ID);
                Duracao.Owner = this;
                Duracao.OwnerID = ID;
                Duracao.TableName = Name;
                Duracao.Alias = "Duracao";
                Items.Add(Fases, Fases.ID);
                Fases.Owner = this;
                Fases.OwnerID = ID;
                Fases.TableName = Name;
                Fases.Alias = "Fases";
                Items.Add(SYSxEstadoID, SYSxEstadoID.ID);
                SYSxEstadoID.Owner = this;
                SYSxEstadoID.OwnerID = ID;
                SYSxEstadoID.TableName = Name;
                SYSxEstadoID.Alias = "SYSxEstadoID";
            }

            public static XORMFaceField PCRxIATFID = new XORMFaceField(global::Projecao.Core.PCR.DB.PCRx.PCRxIATF.PCRxIATFID, new Guid("E5330C25-8D4F-4534-89BC-A79ECE474083"), "PCRxIATFID", "Inseminação Artificial em Tempo Fixo");
            public static XORMField Nome = new XORMField(global::Projecao.Core.PCR.DB.PCRx.PCRxIATF.Nome, new Guid("22BB1AAC-6110-4F87-ACBE-DFD26692F1F6"), "Nome", "Nome");
            public static XORMField Duracao = new XORMField(global::Projecao.Core.PCR.DB.PCRx.PCRxIATF.Duracao, new Guid("DB8EB44D-B6E3-43F9-A9FA-1169DC700F59"), "Duracao", "Duração (dias)");
            public static XORMField Fases = new XORMField(global::Projecao.Core.PCR.DB.PCRx.PCRxIATF.Fases, new Guid("36488D10-CA23-410F-97B1-1A0E5FEE758E"), "Fases", "Fases");
            public static XORMStateField SYSxEstadoID = new XORMStateField(global::Projecao.Core.PCR.DB.PCRx.PCRxIATF.SYSxEstadoID, new Guid("DA15B6A4-FFB3-4A41-9A65-7264027A6C41"), "SYSxEstadoID", "Estado");
        }
        #endregion xPCRxIATF 


        public xPCRxIATF PCRxIATF;

        public IATFSVC()
        {
            TupleType = typeof(IATFSVC.XTuple);
            DataSetType = typeof(IATFSVC.XDataSet);
            ServiceRuleCID = new Guid("00E8BB7F-04CD-4BE8-9FCA-538984D69E95");
            OnlyActives = false;
            Actions = XSVCAction.All;
            Type = XServiceType.Default;
            ID = new Guid("DE7D437E-1F14-4E87-A1A6-7945C3A7822B");
            Name = "IATF";
            Title = "";
            IsCacheable = false;
            CompanyControl = false;
            IsJob = false;
            AutoLoad = true;
            FreeForUsers = false;
            ServerSideNewRecord = false;
            UseDistinct = false;
            JobType = XJobType.Default;
            CanExport = false;
            ModuleID = new Guid("02C4E7C5-1B4F-43DB-AC6C-CD36BBE428B7");
            Rights = new Int16[] { 1, 2, 3, 4, 5, 6, 7 }; 
            FilterFormID = new Guid("0EEB1289-A07E-4DCE-ADF2-84515BCBEC76");
            IsReadOnly = false;
            ClientScript = "Projecao.Core.PCR.js";
            GridFields = new Guid[] { xPCRxIATF.Nome.ID, xPCRxIATF.Fases.ID, xPCRxIATF.Duracao.ID, xPCRxIATF.SYSxEstadoID.ID };
            OrderByFields = new Guid[] { xPCRxIATF.Nome.ID };
            DataSetFields = new Guid[] { xPCRxIATF.PCRxIATFID.ID, xPCRxIATF.Nome.ID, xPCRxIATF.Duracao.ID, xPCRxIATF.Fases.ID, xPCRxIATF.SYSxEstadoID.ID };
            PKField = xPCRxIATF.PCRxIATFID.ID;
            ConfigTableID = new Guid("1E640A17-14F3-4D24-ACF6-FE224C1EF1E0");
            StateField = xPCRxIATF.SYSxEstadoID.ID;
            MasterRuleCID = new Guid("00E8BB7F-04CD-4BE8-9FCA-538984D69E95");
            XSubServiceItem ss50B46D1AA07D4A44AFB7ACE08CEDA60A = new XSubServiceItem(IATFFasesSVC.gCID, IATFFasesSVC.xPCRxIATFFase.PCRxIATFID.ID, IATFSVC.gCID, xPCRxIATF.PCRxIATFID.ID, false, XSubSeviceType.Default);
            ss50B46D1AA07D4A44AFB7ACE08CEDA60A.Rights = new Int16[] { 1, 2, 3, 4, 5, 6, 7 }; 
            ss50B46D1AA07D4A44AFB7ACE08CEDA60A.LateLoad = false;
            SubServices.Add(ss50B46D1AA07D4A44AFB7ACE08CEDA60A);
            PCRxIATF = new xPCRxIATF();
            PCRxIATF.IsReadOnly = false;
            AddTable(PCRxIATF);
            MasterTableID = PCRxIATF.ID;
            XSVCReference FK_4062247761254F8C8A8C6DAC758FE854 = new XSVCReference(new Guid("40622477-6125-4F8C-8A8C-6DAC758FE854"), "FK_4062247761254F8C8A8C6DAC758FE854", IATFFasesSVC.gCID, IATFFasesSVC.xPCRxIATFFase.PCRxIATFID.ID, PCRxIATF.ID, IATFSVC.xPCRxIATF.PCRxIATFID.ID, XJoinType.SubService); // IATFFasesSVC.PCRxIATFID --> IATF.PCRxIATFID
            FK_4062247761254F8C8A8C6DAC758FE854.IsLowRelevance = false;
            AddReference(FK_4062247761254F8C8A8C6DAC758FE854);
            xPCRxIATF.Duracao.IsDataField = true;
            xPCRxIATF.Duracao.AllowEmpty = true;
            xPCRxIATF.Fases.IsDataField = true;
            xPCRxIATF.Fases.FilterUse = true;
            xPCRxIATF.Fases.AllowEmpty = true;
            xPCRxIATF.Nome.OrderType = XOrderType.Asc;
            xPCRxIATF.Nome.Length = 50;
            xPCRxIATF.Nome.IsDataField = true;
            xPCRxIATF.Nome.FilterUse = true;
            xPCRxIATF.Nome.AllowEmpty = true;
            xPCRxIATF.PCRxIATFID.GeneratePK = true;
            xPCRxIATF.PCRxIATFID.IsDataField = true;
            xPCRxIATF.PCRxIATFID.AllowEmpty = true;
            xPCRxIATF.SYSxEstadoID.IsDataField = true;
            xPCRxIATF.SYSxEstadoID.AllowEmpty = true;
        }

        #region XFields

        public class XFields
        {
        public XORMField Duracao => xPCRxIATF.Duracao;
        public XORMField Fases => xPCRxIATF.Fases;
        public XORMField Nome => xPCRxIATF.Nome;
        public XORMField PCRxIATFID => xPCRxIATF.PCRxIATFID;
        public XORMField SYSxEstadoID => xPCRxIATF.SYSxEstadoID;
        }
        #endregion XFields
        #region IATFSVC.XTuple

        public  class XTuple : XDataTuple
        {

            public XTuple()
            {
            }

            public XTuple(Object[] pSource)
                : base(pSource)
            {
            }

            public XTuple(Int32 pColCount)
               : this(new Object[pColCount])
            {
            }

            public readonly XFields Fields = new XFields();

            #nullable enable

        public Int32 Duracao
        {
            get
            {
                return (Int32)Value[IATFSVC.xPCRxIATF.Duracao.ID];
            }
            set
            {
                Value[IATFSVC.xPCRxIATF.Duracao.ID] = value;
            }
        }
        public Int32? oDuracao
        {
            get
            {
                GetOldValue(IATFSVC.xPCRxIATF.Duracao, out Object ovlr);
                return (Int32?)ovlr;
            }
        }

        public Int32 Fases
        {
            get
            {
                return (Int32)Value[IATFSVC.xPCRxIATF.Fases.ID];
            }
            set
            {
                Value[IATFSVC.xPCRxIATF.Fases.ID] = value;
            }
        }
        public Int32? oFases
        {
            get
            {
                GetOldValue(IATFSVC.xPCRxIATF.Fases, out Object ovlr);
                return (Int32?)ovlr;
            }
        }

        public String Nome
        {
            get
            {
                return (String)Value[IATFSVC.xPCRxIATF.Nome.ID];
            }
            set
            {
                Value[IATFSVC.xPCRxIATF.Nome.ID] = value;
            }
        }
        public String? oNome
        {
            get
            {
                GetOldValue(IATFSVC.xPCRxIATF.Nome, out Object ovlr);
                return (String?)ovlr;
            }
        }

        public Int32 PCRxIATFID
        {
            get
            {
                return (Int32)Value[IATFSVC.xPCRxIATF.PCRxIATFID.ID];
            }
            set
            {
                Value[IATFSVC.xPCRxIATF.PCRxIATFID.ID] = value;
            }
        }
        public Int32? oPCRxIATFID
        {
            get
            {
                GetOldValue(IATFSVC.xPCRxIATF.PCRxIATFID, out Object ovlr);
                return (Int32?)ovlr;
            }
        }

        public Int16 SYSxEstadoID
        {
            get
            {
                return (Int16)Value[IATFSVC.xPCRxIATF.SYSxEstadoID.ID];
            }
            set
            {
                Value[IATFSVC.xPCRxIATF.SYSxEstadoID.ID] = value;
            }
        }
        public Int16? oSYSxEstadoID
        {
            get
            {
                GetOldValue(IATFSVC.xPCRxIATF.SYSxEstadoID, out Object ovlr);
                return (Int16?)ovlr;
            }
        }

            #nullable disable
        }
        #endregion IATFSVC.XTuple

        #region IATFSVC.XRule
        public abstract class XRule : XServiceRule<IATFSVC.XDataSet, IATFSVC, IATFSVC.XTuple>
        {
        }
        #endregion IATFSVC.XRule

        #region IATFSVC.XDataSet

        public class XDataSet : XDataSet<IATFSVC.XTuple>
        {
            public XDataSet()
            {
                DataSetType = typeof(IATFSVC.XDataSet);
            }
        }

        public class XDataSet<T> : XServiceDataSet<IATFSVC.XTuple> where T : XDataTuple
        {

            public Guid Duracao => IATFSVC.xPCRxIATF.Duracao.ID;
            public Guid Fases => IATFSVC.xPCRxIATF.Fases.ID;
            public Guid Nome => IATFSVC.xPCRxIATF.Nome.ID;
            public Guid PCRxIATFID => IATFSVC.xPCRxIATF.PCRxIATFID.ID;
            public Guid SYSxEstadoID => IATFSVC.xPCRxIATF.SYSxEstadoID.ID;

            public XDataSet()
            {
                DataSetType = typeof(IATFSVC.XDataSet);
            }

            private Projecao.Core.PCR.IATF.IATFFasesSVC.XDataSet _IATFFasesDataSet;

            public Projecao.Core.PCR.IATF.IATFFasesSVC.XDataSet IATFFasesDataSet
            {
                get
                {
                    if (_IATFFasesDataSet == null)
                    {
                        _IATFFasesDataSet = (Projecao.Core.PCR.IATF.IATFFasesSVC.XDataSet)Children.Get(Projecao.Core.PCR.IATF.IATFFasesSVC.gCID);
                    }
                    return  _IATFFasesDataSet;
                }
            }

        }
        #endregion IATFSVC.XDataSet

        [Guid(IATFSVC.sCID)]
        public  interface XService : XIBaseService
        {
            new XDataSet DataSet
            {
                get;
            }
            new XTuple NewTuple(Object pPKValue = null);
             IEnumerable<XTuple> Tuples
            {
                get;
            }
             XTuple Current
            {
                get;
            }
            new XDataSet Get(XServiceData pData);
             XDataSet Get(params Object[] pWhere);
        }
        [XRegister(typeof(_Service), _Service.sCID, typeof(IATFSVC))]
        protected class _Service : Service<IATFSVC, XDataSet, XTuple>
        {
            public const String sCID = "0567A6DD-853D-467B-897F-AE3A3D5F5F76";
            public Guid gCID = new Guid(sCID);
        }

        public class Service<TModel, TDataSet, TTuple> : XBaseService<IATFSVC, XDataSet, XTuple>, XService
             where TModel : IATFSVC, new()
             where TDataSet : XDataSet, new()
             where TTuple : XTuple
        {
            XDataSet XService.DataSet => (XDataSet)DataSet;
            XTuple XService.NewTuple(Object pPKValue)
            {
                return (XTuple)NewTuple(pPKValue);
            }
            public new XDataTuple NewTuple(Object pPKValue = null)
            {
                return (XTuple)base.NewTuple(pPKValue);
            }
            IEnumerable<XTuple> XService.Tuples => (IEnumerable<XTuple>)Tuples;
            XTuple XService.Current => (XTuple )Current;
            XDataSet XService.Get(XServiceData pData)
            {
                return (XDataSet)Get(pData);
            }
            XDataSet XService.Get(params Object[] pWhere)
            {
                return (XDataSet)Get(pWhere);
            }
            public Service()
            {
                ID = gCID;
            }
        }
    }

}