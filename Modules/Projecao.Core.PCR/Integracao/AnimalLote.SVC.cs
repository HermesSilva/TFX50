//<auto-generated/>
using System;
using System.Linq;
using Newtonsoft.Json;
using TFX.Core.Objects;
using TFX.Core.Model.Data;
using TFX.Core.Model.Cache;
using TFX.Core.Reflections;
using TFX.Core.Service.Job;
using TFX.Core.Service.SVC;
using Projecao.Core.PCR.DB;
using TFX.Core.Model.DIC.SVC;
using TFX.Core.Model.DIC.ORM;
using TFX.Core.Model.Services;
using TFX.Core.Model.DIC.Types;
using TFX.Core.Model.Interfaces;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Projecao.Core.PCR.Integracao
{
    [XRegister(typeof(AnimalLoteSVC), sCID)]
    [XDASESource(@"D:\Tootega\Source\TFX20\Modules\Projecao.Core.PCR\Projecao.Core.PCR.csproj", @"D:\Tootega\Source\TFX20\Modules\Projecao.Core.PCR\Integracao\AnimalLote.dssvc")]
    public class AnimalLoteSVC : XSVCModel
    {
        public const String sCID = "893CB87A-8BB0-4FEC-8F7D-C3CA61BF7C0D";
        public static Guid gCID = new Guid(sCID);

        #region xPCRxAnimalLote 
        public class xPCRxAnimalLote : XSVCTable
        {

            public static Guid gCID => new Guid("E67B3922-A5FD-45F1-BB0D-B66729153D0F");

            public xPCRxAnimalLote()
            {
                Name = "PCRxAnimalLote";
                Alias = "PCRxAnimalLote";
                ID = gCID;
                ParentID =  global::Projecao.Core.PCR.DB.PCRx.PCRxAnimalLote.gCID;

                Items.Add(PCRxAnimalLoteID, PCRxAnimalLoteID.ID);
                PCRxAnimalLoteID.Owner = this;
                PCRxAnimalLoteID.OwnerID = ID;
                PCRxAnimalLoteID.TableName = Name;
                PCRxAnimalLoteID.Alias = "PCRxAnimalLoteID";
                Items.Add(DataCriacao, DataCriacao.ID);
                DataCriacao.Owner = this;
                DataCriacao.OwnerID = ID;
                DataCriacao.TableName = Name;
                DataCriacao.Alias = "DataCriacao";
                Items.Add(Lote, Lote.ID);
                Lote.Owner = this;
                Lote.OwnerID = ID;
                Lote.TableName = Name;
                Lote.Alias = "Lote";
                Items.Add(Ano, Ano.ID);
                Ano.Owner = this;
                Ano.OwnerID = ID;
                Ano.TableName = Name;
                Ano.Alias = "Ano";
            }

            public static XORMFaceField PCRxAnimalLoteID = new XORMFaceField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimalLote.PCRxAnimalLoteID, new Guid("9420CBCF-97AF-4D3D-80A6-5CA4FCAE2B9D"), "PCRxAnimalLoteID", "Lote de Animais");
            public static XORMDateTimeField DataCriacao = new XORMDateTimeField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimalLote.DataCriacao, new Guid("0320F551-BB09-416B-8F94-16A2B67D2902"), "DataCriacao", "da de Criação");
            public static XORMFaceField Lote = new XORMFaceField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimalLote.Lote, new Guid("02510BAB-4124-4EAF-A998-27AEC1243A07"), "Lote", "Lote");
            public static XORMField Ano = new XORMField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimalLote.Ano, new Guid("A6B59A99-B00A-4568-8B95-CA545F2B4682"), "Ano", "Ano");
        }
        #endregion xPCRxAnimalLote 


        public xPCRxAnimalLote PCRxAnimalLote;

        public AnimalLoteSVC()
        {
            TupleType = typeof(AnimalLoteSVC.XTuple);
            DataSetType = typeof(AnimalLoteSVC.XDataSet);
            ServiceRuleCID = new Guid("6E9001BB-63FE-4AA6-8E97-172168298CFF");
            OnlyActives = false;
            Actions = XSVCAction.All;
            Type = XServiceType.Default;
            ID = new Guid("893CB87A-8BB0-4FEC-8F7D-C3CA61BF7C0D");
            Name = "AnimalLote";
            Title = "";
            IsCacheable = false;
            CompanyControl = false;
            IsJob = false;
            AutoLoad = true;
            FreeForUsers = false;
            ServerSideNewRecord = false;
            UseDistinct = false;
            JobType = XJobType.Default;
            CanExport = true;
            ModuleID = new Guid("02C4E7C5-1B4F-43DB-AC6C-CD36BBE428B7");
            Rights = new Int16[] { 1 }; 
            IsReadOnly = true;
            ClientScript = "Projecao.Core.PCR.js";
            OrderByFields = new Guid[] { xPCRxAnimalLote.DataCriacao.ID };
            DataSetFields = new Guid[] { xPCRxAnimalLote.DataCriacao.ID, xPCRxAnimalLote.Lote.ID, xPCRxAnimalLote.Ano.ID, xPCRxAnimalLote.PCRxAnimalLoteID.ID };
            PKField = xPCRxAnimalLote.PCRxAnimalLoteID.ID;
            ConfigTableID = new Guid("0C08D035-CD77-4C4F-BC61-30A984D669BD");
            MasterRuleCID = new Guid("6E9001BB-63FE-4AA6-8E97-172168298CFF");
            PCRxAnimalLote = new xPCRxAnimalLote();
            PCRxAnimalLote.IsReadOnly = true;
            AddTable(PCRxAnimalLote);
            MasterTableID = PCRxAnimalLote.ID;
            xPCRxAnimalLote.Ano.IsReadOnly = true;
            xPCRxAnimalLote.Ano.IsDataField = true;
            xPCRxAnimalLote.Ano.AllowEmpty = true;
            xPCRxAnimalLote.DataCriacao.IsReadOnly = true;
            xPCRxAnimalLote.DataCriacao.OrderType = XOrderType.Desc;
            xPCRxAnimalLote.DataCriacao.IsDataField = true;
            xPCRxAnimalLote.DataCriacao.AllowEmpty = true;
            xPCRxAnimalLote.Lote.IsReadOnly = true;
            xPCRxAnimalLote.Lote.Length = 12;
            xPCRxAnimalLote.Lote.IsDataField = true;
            xPCRxAnimalLote.Lote.AllowEmpty = true;
            xPCRxAnimalLote.PCRxAnimalLoteID.IsReadOnly = true;
            xPCRxAnimalLote.PCRxAnimalLoteID.IsDataField = true;
            xPCRxAnimalLote.PCRxAnimalLoteID.AllowEmpty = true;
        }

        #region XFields

        public class XFields
        {
        public XORMField Ano => xPCRxAnimalLote.Ano;
        public XORMField DataCriacao => xPCRxAnimalLote.DataCriacao;
        public XORMField Lote => xPCRxAnimalLote.Lote;
        public XORMField PCRxAnimalLoteID => xPCRxAnimalLote.PCRxAnimalLoteID;
        }
        #endregion XFields
        #region AnimalLoteSVC.XTuple

        public  class XTuple : XDataTuple
        {

            public XTuple()
            {
            }

            public XTuple(Object[] pSource)
                : base(pSource)
            {
            }

            public XTuple(Int32 pColCount)
               : this(new Object[pColCount])
            {
            }

            public readonly XFields Fields = new XFields();

            #nullable enable

        public Int32 Ano
        {
            get
            {
                return (Int32)Value[AnimalLoteSVC.xPCRxAnimalLote.Ano.ID];
            }
            set
            {
                Value[AnimalLoteSVC.xPCRxAnimalLote.Ano.ID] = value;
            }
        }
        public Int32? oAno
        {
            get
            {
                GetOldValue(AnimalLoteSVC.xPCRxAnimalLote.Ano, out Object ovlr);
                return (Int32?)ovlr;
            }
        }

        public DateTime DataCriacao
        {
            get
            {
                return (DateTime)Value[AnimalLoteSVC.xPCRxAnimalLote.DataCriacao.ID];
            }
            set
            {
                Value[AnimalLoteSVC.xPCRxAnimalLote.DataCriacao.ID] = value;
            }
        }
        public DateTime? oDataCriacao
        {
            get
            {
                GetOldValue(AnimalLoteSVC.xPCRxAnimalLote.DataCriacao, out Object ovlr);
                return (DateTime?)ovlr;
            }
        }

        public String Lote
        {
            get
            {
                return (String)Value[AnimalLoteSVC.xPCRxAnimalLote.Lote.ID];
            }
            set
            {
                Value[AnimalLoteSVC.xPCRxAnimalLote.Lote.ID] = value;
            }
        }
        public String? oLote
        {
            get
            {
                GetOldValue(AnimalLoteSVC.xPCRxAnimalLote.Lote, out Object ovlr);
                return (String?)ovlr;
            }
        }

        public Guid PCRxAnimalLoteID
        {
            get
            {
                return (Guid)Value[AnimalLoteSVC.xPCRxAnimalLote.PCRxAnimalLoteID.ID];
            }
            set
            {
                Value[AnimalLoteSVC.xPCRxAnimalLote.PCRxAnimalLoteID.ID] = value;
            }
        }
        public Guid? oPCRxAnimalLoteID
        {
            get
            {
                GetOldValue(AnimalLoteSVC.xPCRxAnimalLote.PCRxAnimalLoteID, out Object ovlr);
                return (Guid?)ovlr;
            }
        }

            #nullable disable
        }
        #endregion AnimalLoteSVC.XTuple

        #region AnimalLoteSVC.XRule
        public abstract class XRule : XServiceRule<AnimalLoteSVC.XDataSet, AnimalLoteSVC, AnimalLoteSVC.XTuple>
        {
        }
        #endregion AnimalLoteSVC.XRule

        #region AnimalLoteSVC.XDataSet

        public class XDataSet : XDataSet<AnimalLoteSVC.XTuple>
        {
            public XDataSet()
            {
                DataSetType = typeof(AnimalLoteSVC.XDataSet);
            }
        }

        public class XDataSet<T> : XServiceDataSet<AnimalLoteSVC.XTuple> where T : XDataTuple
        {

            public Guid Ano => AnimalLoteSVC.xPCRxAnimalLote.Ano.ID;
            public Guid DataCriacao => AnimalLoteSVC.xPCRxAnimalLote.DataCriacao.ID;
            public Guid Lote => AnimalLoteSVC.xPCRxAnimalLote.Lote.ID;
            public Guid PCRxAnimalLoteID => AnimalLoteSVC.xPCRxAnimalLote.PCRxAnimalLoteID.ID;

            public XDataSet()
            {
                DataSetType = typeof(AnimalLoteSVC.XDataSet);
            }

        }
        #endregion AnimalLoteSVC.XDataSet

        [Guid(AnimalLoteSVC.sCID)]
        public  interface XService : XIBaseService
        {
            new XDataSet DataSet
            {
                get;
            }
            new XTuple NewTuple(Object pPKValue = null);
             IEnumerable<XTuple> Tuples
            {
                get;
            }
             XTuple Current
            {
                get;
            }
            new XDataSet Get(XServiceData pData);
             XDataSet Get(params Object[] pWhere);
        }
        [XRegister(typeof(_Service), _Service.sCID, typeof(AnimalLoteSVC))]
        protected class _Service : Service<AnimalLoteSVC, XDataSet, XTuple>
        {
            public const String sCID = "0ECEA80C-D4B6-47B5-98B9-627181F4C933";
            public Guid gCID = new Guid(sCID);
        }

        public class Service<TModel, TDataSet, TTuple> : XBaseService<AnimalLoteSVC, XDataSet, XTuple>, XService
             where TModel : AnimalLoteSVC, new()
             where TDataSet : XDataSet, new()
             where TTuple : XTuple
        {
            XDataSet XService.DataSet => (XDataSet)DataSet;
            XTuple XService.NewTuple(Object pPKValue)
            {
                return (XTuple)NewTuple(pPKValue);
            }
            public new XDataTuple NewTuple(Object pPKValue = null)
            {
                return (XTuple)base.NewTuple(pPKValue);
            }
            IEnumerable<XTuple> XService.Tuples => (IEnumerable<XTuple>)Tuples;
            XTuple XService.Current => (XTuple )Current;
            XDataSet XService.Get(XServiceData pData)
            {
                return (XDataSet)Get(pData);
            }
            XDataSet XService.Get(params Object[] pWhere)
            {
                return (XDataSet)Get(pWhere);
            }
            public Service()
            {
                ID = gCID;
            }
        }
    }

}