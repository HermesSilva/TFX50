//<auto-generated/>
using System;
using System.Linq;
using Newtonsoft.Json;
using TFX.Core.Objects;
using TFX.Core.Model.Data;
using TFX.Core.Model.Cache;
using TFX.Core.Reflections;
using TFX.Core.Service.Job;
using TFX.Core.Service.SVC;
using Projecao.Core.PCR.DB;
using TFX.Core.Model.DIC.SVC;
using TFX.Core.Model.DIC.ORM;
using TFX.Core.Model.Services;
using TFX.Core.Model.DIC.Types;
using TFX.Core.Model.Interfaces;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Projecao.Core.PCR.Integracao
{
    [XRegister(typeof(PastoSVC), sCID)]
    [XDASESource(@"D:\Tootega\Source\TFX20\Modules\Projecao.Core.PCR\Projecao.Core.PCR.csproj", @"D:\Tootega\Source\TFX20\Modules\Projecao.Core.PCR\Integracao\Pasto.dssvc")]
    public class PastoSVC : XSVCModel
    {
        public const String sCID = "90BD2069-5FAD-4B50-95B9-B16DC787E077";
        public static Guid gCID = new Guid(sCID);
        public static XSVCReference PCRxPasto_PCRxRetiroID_PCRxRetiro_PCRxRetiroID; // PCRxPasto.PCRxRetiroID --> PCRxRetiro.PCRxRetiroID

        #region xPCRxRetiro 
        public class xPCRxRetiro : XSVCTable
        {

            public static Guid gCID => new Guid("96EAAF4D-E68A-4343-96DE-D6196F76A790");

            public xPCRxRetiro()
            {
                Name = "PCRxRetiro";
                Alias = "PCRxRetiro";
                ID = gCID;
                ParentID =  global::Projecao.Core.PCR.DB.PCRx.PCRxRetiro.gCID;

                Items.Add(PCRxRetiroID, PCRxRetiroID.ID);
                PCRxRetiroID.Owner = this;
                PCRxRetiroID.OwnerID = ID;
                PCRxRetiroID.TableName = Name;
                Items.Add(Nome, Nome.ID);
                Nome.Owner = this;
                Nome.OwnerID = ID;
                Nome.TableName = Name;
                Nome.Alias = "NomeRetiro";
                Items.Add(SYSxEmpresaID, SYSxEmpresaID.ID);
                SYSxEmpresaID.Owner = this;
                SYSxEmpresaID.OwnerID = ID;
                SYSxEmpresaID.TableName = Name;
                Items.Add(Latitude, Latitude.ID);
                Latitude.Owner = this;
                Latitude.OwnerID = ID;
                Latitude.TableName = Name;
                Items.Add(Longitude, Longitude.ID);
                Longitude.Owner = this;
                Longitude.OwnerID = ID;
                Longitude.TableName = Name;
                Items.Add(CoordenadasArea, CoordenadasArea.ID);
                CoordenadasArea.Owner = this;
                CoordenadasArea.OwnerID = ID;
                CoordenadasArea.TableName = Name;
            }

            public static XORMPKField PCRxRetiroID = new XORMPKField(global::Projecao.Core.PCR.DB.PCRx.PCRxRetiro.PCRxRetiroID, new Guid("1DDFE2BF-8A6A-4B89-A980-30686D3C6DD4"), "PCRxRetiroID", "Retiro");
            public static XORMField Nome = new XORMField(global::Projecao.Core.PCR.DB.PCRx.PCRxRetiro.Nome, new Guid("4712B097-3200-4376-BB2A-ED6C720FD883"), "Nome", "Retiro");
            public static XORMFKField SYSxEmpresaID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxRetiro.SYSxEmpresaID, new Guid("DF907325-050C-4FAE-8F72-0A4B4525938A"), "SYSxEmpresaID", "Empresa");
            public static XORMDecimalField Latitude = new XORMDecimalField(global::Projecao.Core.PCR.DB.PCRx.PCRxRetiro.Latitude, new Guid("A9F9F91E-B0F2-4ABF-A90C-EF1CB620F85C"), "Latitude", "Latitude");
            public static XORMDecimalField Longitude = new XORMDecimalField(global::Projecao.Core.PCR.DB.PCRx.PCRxRetiro.Longitude, new Guid("DF23842D-D88B-4A8D-BF0B-76387494C125"), "Longitude", "Longitude");
            public static XORMField CoordenadasArea = new XORMField(global::Projecao.Core.PCR.DB.PCRx.PCRxRetiro.CoordenadasArea, new Guid("E76A046D-EF4C-457D-81A9-5DB59184F011"), "CoordenadasArea", "Coordenadas da Área");
        }
        #endregion xPCRxRetiro 


        #region xPCRxPasto 
        public class xPCRxPasto : XSVCTable
        {

            public static Guid gCID => new Guid("E7E95A3A-9AE8-497F-B58F-4743CAE26498");

            public xPCRxPasto()
            {
                Name = "PCRxPasto";
                Alias = "PCRxPasto";
                ID = gCID;
                ParentID =  global::Projecao.Core.PCR.DB.PCRx.PCRxPasto.gCID;

                Items.Add(PCRxPastoID, PCRxPastoID.ID);
                PCRxPastoID.Owner = this;
                PCRxPastoID.OwnerID = ID;
                PCRxPastoID.TableName = Name;
                PCRxPastoID.Alias = "PCRxPastoID";
                Items.Add(Nome, Nome.ID);
                Nome.Owner = this;
                Nome.OwnerID = ID;
                Nome.TableName = Name;
                Nome.Alias = "Nome";
                Items.Add(Area, Area.ID);
                Area.Owner = this;
                Area.OwnerID = ID;
                Area.TableName = Name;
                Area.Alias = "Area";
                Items.Add(PCRxRetiroID, PCRxRetiroID.ID);
                PCRxRetiroID.Owner = this;
                PCRxRetiroID.OwnerID = ID;
                PCRxRetiroID.TableName = Name;
                PCRxRetiroID.Alias = "PCRxRetiroID";
                Items.Add(Latitude, Latitude.ID);
                Latitude.Owner = this;
                Latitude.OwnerID = ID;
                Latitude.TableName = Name;
                Latitude.Alias = "Latitude";
                Items.Add(Longitude, Longitude.ID);
                Longitude.Owner = this;
                Longitude.OwnerID = ID;
                Longitude.TableName = Name;
                Longitude.Alias = "Longitude";
                Items.Add(CoordenadasArea, CoordenadasArea.ID);
                CoordenadasArea.Owner = this;
                CoordenadasArea.OwnerID = ID;
                CoordenadasArea.TableName = Name;
                CoordenadasArea.Alias = "CoordenadasArea";
            }

            public static XORMPKField PCRxPastoID = new XORMPKField(global::Projecao.Core.PCR.DB.PCRx.PCRxPasto.PCRxPastoID, new Guid("91C39B17-68BE-4546-A1C0-43E2BC2BC8E7"), "PCRxPastoID", "Pasto");
            public static XORMField Nome = new XORMField(global::Projecao.Core.PCR.DB.PCRx.PCRxPasto.Nome, new Guid("8798FA5E-2CC6-4509-B97F-AEED210C2DA6"), "Nome", "Nome");
            public static XORMField Area = new XORMField(global::Projecao.Core.PCR.DB.PCRx.PCRxPasto.Area, new Guid("079F7222-F55C-40A6-968D-FFDA0CAB6979"), "Area", "Área (ha)");
            public static XORMFKField PCRxRetiroID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxPasto.PCRxRetiroID, new Guid("BA6094D5-3F2B-47C9-B909-291DC1B8255A"), "PCRxRetiroID", "Retiro");
            public static XORMDecimalField Latitude = new XORMDecimalField(global::Projecao.Core.PCR.DB.PCRx.PCRxPasto.Latitude, new Guid("4168BF62-4025-4763-8917-156D2F558714"), "Latitude", "Latitude");
            public static XORMDecimalField Longitude = new XORMDecimalField(global::Projecao.Core.PCR.DB.PCRx.PCRxPasto.Longitude, new Guid("B3002D54-E0AB-4F8A-9F89-754C9BA9373C"), "Longitude", "Longitude");
            public static XORMField CoordenadasArea = new XORMField(global::Projecao.Core.PCR.DB.PCRx.PCRxPasto.CoordenadasArea, new Guid("E0369CFD-A23A-49B1-9D57-BD53DC7B0C0E"), "CoordenadasArea", "Coordenadas da Área");
        }
        #endregion xPCRxPasto 


        public xPCRxPasto PCRxPasto;
        public xPCRxRetiro PCRxRetiro;

        public PastoSVC()
        {
            TupleType = typeof(PastoSVC.XTuple);
            DataSetType = typeof(PastoSVC.XDataSet);
            ServiceRuleCID = new Guid("436E43EB-6444-4BAB-AF9D-065874904C48");
            OnlyActives = false;
            Actions = XSVCAction.All;
            Type = XServiceType.Default;
            ID = new Guid("90BD2069-5FAD-4B50-95B9-B16DC787E077");
            Name = "Pasto";
            Title = "";
            IsCacheable = false;
            CompanyControl = false;
            IsJob = false;
            AutoLoad = true;
            FreeForUsers = false;
            ServerSideNewRecord = false;
            UseDistinct = false;
            JobType = XJobType.Default;
            CanExport = true;
            ModuleID = new Guid("02C4E7C5-1B4F-43DB-AC6C-CD36BBE428B7");
            Rights = new Int16[] { 1 }; 
            IsReadOnly = true;
            ClientScript = "Projecao.Core.PCR.js";
            OrderByFields = new Guid[] { xPCRxPasto.Nome.ID, xPCRxRetiro.Nome.ID };
            DataSetFields = new Guid[] { xPCRxPasto.PCRxRetiroID.ID, xPCRxPasto.Area.ID, xPCRxPasto.Nome.ID, xPCRxPasto.PCRxPastoID.ID, xPCRxRetiro.Nome.ID, xPCRxPasto.Latitude.ID, xPCRxPasto.Longitude.ID, xPCRxPasto.CoordenadasArea.ID };
            PKField = xPCRxPasto.PCRxPastoID.ID;
            ConfigTableID = new Guid("9E612729-ECC6-47BA-938E-E3B80F180157");
            MasterRuleCID = new Guid("436E43EB-6444-4BAB-AF9D-065874904C48");
            PCRxPasto = new xPCRxPasto();
            PCRxPasto.IsReadOnly = true;
            AddTable(PCRxPasto);
            PCRxRetiro = new xPCRxRetiro();
            PCRxRetiro.IsReadOnly = true;
            AddTable(PCRxRetiro);
            MasterTableID = PCRxPasto.ID;
            PCRxPasto_PCRxRetiroID_PCRxRetiro_PCRxRetiroID = AddReference(new XSVCReference(new Guid("60C6ECD6-A1F4-4B70-9BC7-61531E448F58"), "FK_60C6ECD6A1F44B709BC761531E448F58", PastoSVC.xPCRxPasto.gCID, xPCRxPasto.PCRxRetiroID.ID, PastoSVC.xPCRxRetiro.gCID, xPCRxRetiro.PCRxRetiroID.ID, XJoinType.Inner)); // PCRxPasto.PCRxRetiroID --> PCRxRetiro.PCRxRetiroID
            xPCRxPasto.Area.IsReadOnly = true;
            xPCRxPasto.Area.IsDataField = true;
            xPCRxPasto.Area.AllowEmpty = true;
            xPCRxPasto.CoordenadasArea.IsReadOnly = true;
            xPCRxPasto.CoordenadasArea.IsDataField = true;
            xPCRxPasto.CoordenadasArea.AllowEmpty = true;
            xPCRxPasto.Latitude.IsReadOnly = true;
            xPCRxPasto.Latitude.Length = 20;
            xPCRxPasto.Latitude.Scale = 10;
            xPCRxPasto.Latitude.IsDataField = true;
            xPCRxPasto.Latitude.AllowEmpty = true;
            xPCRxPasto.Longitude.IsReadOnly = true;
            xPCRxPasto.Longitude.Length = 20;
            xPCRxPasto.Longitude.Scale = 10;
            xPCRxPasto.Longitude.IsDataField = true;
            xPCRxPasto.Longitude.AllowEmpty = true;
            xPCRxPasto.Nome.IsReadOnly = true;
            xPCRxPasto.Nome.OrderType = XOrderType.Asc;
            xPCRxPasto.Nome.Length = 50;
            xPCRxPasto.Nome.IsDataField = true;
            xPCRxPasto.Nome.AllowEmpty = true;
            xPCRxRetiro.Nome.IsReadOnly = true;
            xPCRxRetiro.Nome.OrderType = XOrderType.Asc;
            xPCRxRetiro.Nome.Length = 30;
            xPCRxRetiro.Nome.IsDataField = true;
            xPCRxRetiro.Nome.AllowEmpty = true;
            xPCRxPasto.PCRxPastoID.IsReadOnly = true;
            xPCRxPasto.PCRxPastoID.IsDataField = true;
            xPCRxPasto.PCRxPastoID.AllowEmpty = true;
            xPCRxPasto.PCRxRetiroID.IsReadOnly = true;
            xPCRxPasto.PCRxRetiroID.IsDataField = true;
            xPCRxPasto.PCRxRetiroID.AllowEmpty = true;
        }

        #region XFields

        public class XFields
        {
        public XORMField Area => xPCRxPasto.Area;
        public XORMField CoordenadasArea => xPCRxPasto.CoordenadasArea;
        public XORMField Latitude => xPCRxPasto.Latitude;
        public XORMField Longitude => xPCRxPasto.Longitude;
        public XORMField Nome => xPCRxPasto.Nome;
        public XORMField NomeRetiro => xPCRxRetiro.Nome;
        public XORMField PCRxPastoID => xPCRxPasto.PCRxPastoID;
        public XORMField PCRxRetiroID => xPCRxPasto.PCRxRetiroID;
        }
        #endregion XFields
        #region PastoSVC.XTuple

        public  class XTuple : XDataTuple
        {

            public XTuple()
            {
            }

            public XTuple(Object[] pSource)
                : base(pSource)
            {
            }

            public XTuple(Int32 pColCount)
               : this(new Object[pColCount])
            {
            }

            public readonly XFields Fields = new XFields();

            #nullable enable

        public Int32 Area
        {
            get
            {
                return (Int32)Value[PastoSVC.xPCRxPasto.Area.ID];
            }
            set
            {
                Value[PastoSVC.xPCRxPasto.Area.ID] = value;
            }
        }
        public Int32? oArea
        {
            get
            {
                GetOldValue(PastoSVC.xPCRxPasto.Area, out Object ovlr);
                return (Int32?)ovlr;
            }
        }

        public String CoordenadasArea
        {
            get
            {
                return (String)Value[PastoSVC.xPCRxPasto.CoordenadasArea.ID];
            }
            set
            {
                Value[PastoSVC.xPCRxPasto.CoordenadasArea.ID] = value;
            }
        }
        public String? oCoordenadasArea
        {
            get
            {
                GetOldValue(PastoSVC.xPCRxPasto.CoordenadasArea, out Object ovlr);
                return (String?)ovlr;
            }
        }

        public Decimal Latitude
        {
            get
            {
                return (Decimal)Value[PastoSVC.xPCRxPasto.Latitude.ID];
            }
            set
            {
                Value[PastoSVC.xPCRxPasto.Latitude.ID] = value;
            }
        }
        public Decimal? oLatitude
        {
            get
            {
                GetOldValue(PastoSVC.xPCRxPasto.Latitude, out Object ovlr);
                return (Decimal?)ovlr;
            }
        }

        public Decimal Longitude
        {
            get
            {
                return (Decimal)Value[PastoSVC.xPCRxPasto.Longitude.ID];
            }
            set
            {
                Value[PastoSVC.xPCRxPasto.Longitude.ID] = value;
            }
        }
        public Decimal? oLongitude
        {
            get
            {
                GetOldValue(PastoSVC.xPCRxPasto.Longitude, out Object ovlr);
                return (Decimal?)ovlr;
            }
        }

        public String Nome
        {
            get
            {
                return (String)Value[PastoSVC.xPCRxPasto.Nome.ID];
            }
            set
            {
                Value[PastoSVC.xPCRxPasto.Nome.ID] = value;
            }
        }
        public String? oNome
        {
            get
            {
                GetOldValue(PastoSVC.xPCRxPasto.Nome, out Object ovlr);
                return (String?)ovlr;
            }
        }

        public String NomeRetiro
        {
            get
            {
                return (String)Value[PastoSVC.xPCRxRetiro.Nome.ID];
            }
            set
            {
                Value[PastoSVC.xPCRxRetiro.Nome.ID] = value;
            }
        }
        public String? oNomeRetiro
        {
            get
            {
                GetOldValue(PastoSVC.xPCRxRetiro.Nome, out Object ovlr);
                return (String?)ovlr;
            }
        }

        public Int32 PCRxPastoID
        {
            get
            {
                return (Int32)Value[PastoSVC.xPCRxPasto.PCRxPastoID.ID];
            }
            set
            {
                Value[PastoSVC.xPCRxPasto.PCRxPastoID.ID] = value;
            }
        }
        public Int32? oPCRxPastoID
        {
            get
            {
                GetOldValue(PastoSVC.xPCRxPasto.PCRxPastoID, out Object ovlr);
                return (Int32?)ovlr;
            }
        }

        public Int32 PCRxRetiroID
        {
            get
            {
                return (Int32)Value[PastoSVC.xPCRxPasto.PCRxRetiroID.ID];
            }
            set
            {
                Value[PastoSVC.xPCRxPasto.PCRxRetiroID.ID] = value;
            }
        }
        public Int32? oPCRxRetiroID
        {
            get
            {
                GetOldValue(PastoSVC.xPCRxPasto.PCRxRetiroID, out Object ovlr);
                return (Int32?)ovlr;
            }
        }

            #nullable disable
        }
        #endregion PastoSVC.XTuple

        #region PastoSVC.XRule
        public abstract class XRule : XServiceRule<PastoSVC.XDataSet, PastoSVC, PastoSVC.XTuple>
        {
        }
        #endregion PastoSVC.XRule

        #region PastoSVC.XDataSet

        public class XDataSet : XDataSet<PastoSVC.XTuple>
        {
            public XDataSet()
            {
                DataSetType = typeof(PastoSVC.XDataSet);
            }
        }

        public class XDataSet<T> : XServiceDataSet<PastoSVC.XTuple> where T : XDataTuple
        {

            public Guid Area => PastoSVC.xPCRxPasto.Area.ID;
            public Guid CoordenadasArea => PastoSVC.xPCRxPasto.CoordenadasArea.ID;
            public Guid Latitude => PastoSVC.xPCRxPasto.Latitude.ID;
            public Guid Longitude => PastoSVC.xPCRxPasto.Longitude.ID;
            public Guid Nome => PastoSVC.xPCRxPasto.Nome.ID;
            public Guid NomeRetiro => PastoSVC.xPCRxRetiro.Nome.ID;
            public Guid PCRxPastoID => PastoSVC.xPCRxPasto.PCRxPastoID.ID;
            public Guid PCRxRetiroID => PastoSVC.xPCRxPasto.PCRxRetiroID.ID;

            public XDataSet()
            {
                DataSetType = typeof(PastoSVC.XDataSet);
            }

        }
        #endregion PastoSVC.XDataSet

        [Guid(PastoSVC.sCID)]
        public  interface XService : XIBaseService
        {
            new XDataSet DataSet
            {
                get;
            }
            new XTuple NewTuple(Object pPKValue = null);
             IEnumerable<XTuple> Tuples
            {
                get;
            }
             XTuple Current
            {
                get;
            }
            new XDataSet Get(XServiceData pData);
             XDataSet Get(params Object[] pWhere);
        }
        [XRegister(typeof(_Service), _Service.sCID, typeof(PastoSVC))]
        protected class _Service : Service<PastoSVC, XDataSet, XTuple>
        {
            public const String sCID = "30BF91C2-0E61-40D6-89E4-42427014AF90";
            public Guid gCID = new Guid(sCID);
        }

        public class Service<TModel, TDataSet, TTuple> : XBaseService<PastoSVC, XDataSet, XTuple>, XService
             where TModel : PastoSVC, new()
             where TDataSet : XDataSet, new()
             where TTuple : XTuple
        {
            XDataSet XService.DataSet => (XDataSet)DataSet;
            XTuple XService.NewTuple(Object pPKValue)
            {
                return (XTuple)NewTuple(pPKValue);
            }
            public new XDataTuple NewTuple(Object pPKValue = null)
            {
                return (XTuple)base.NewTuple(pPKValue);
            }
            IEnumerable<XTuple> XService.Tuples => (IEnumerable<XTuple>)Tuples;
            XTuple XService.Current => (XTuple )Current;
            XDataSet XService.Get(XServiceData pData)
            {
                return (XDataSet)Get(pData);
            }
            XDataSet XService.Get(params Object[] pWhere)
            {
                return (XDataSet)Get(pWhere);
            }
            public Service()
            {
                ID = gCID;
            }
        }
    }

}