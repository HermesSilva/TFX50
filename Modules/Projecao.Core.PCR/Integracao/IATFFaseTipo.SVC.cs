//<auto-generated/>
using System;
using System.Linq;
using Newtonsoft.Json;
using TFX.Core.Objects;
using TFX.Core.Model.Data;
using TFX.Core.Model.Cache;
using TFX.Core.Reflections;
using TFX.Core.Service.Job;
using TFX.Core.Service.SVC;
using Projecao.Core.PCR.DB;
using TFX.Core.Model.DIC.SVC;
using TFX.Core.Model.DIC.ORM;
using TFX.Core.Model.Services;
using TFX.Core.Model.DIC.Types;
using TFX.Core.Model.Interfaces;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Projecao.Core.PCR.Integracao
{
    [XRegister(typeof(IATFFaseTipoSVC), sCID)]
    [XDASESource(@"D:\Tootega\Source\TFX20\Modules\Projecao.Core.PCR\Projecao.Core.PCR.csproj", @"D:\Tootega\Source\TFX20\Modules\Projecao.Core.PCR\Integracao\IATFFaseTipo.dssvc")]
    public class IATFFaseTipoSVC : XSVCModel
    {
        public const String sCID = "E21E1BD8-CAB8-414B-A112-FD6C6423182E";
        public static Guid gCID = new Guid(sCID);

        #region xPCRxIATFFaseTipo 
        public class xPCRxIATFFaseTipo : XSVCTable
        {

            public static Guid gCID => new Guid("4C0D2958-4B5B-4DAE-92DC-E38BB8177644");

            public xPCRxIATFFaseTipo()
            {
                Name = "PCRxIATFFaseTipo";
                Alias = "PCRxIATFFaseTipo";
                ID = gCID;
                ParentID =  global::Projecao.Core.PCR.DB.PCRx.PCRxIATFFaseTipo.gCID;

                Items.Add(PCRxIATFFaseTipoID, PCRxIATFFaseTipoID.ID);
                PCRxIATFFaseTipoID.Owner = this;
                PCRxIATFFaseTipoID.OwnerID = ID;
                PCRxIATFFaseTipoID.TableName = Name;
                PCRxIATFFaseTipoID.Alias = "PCRxIATFFaseTipoID";
                Items.Add(Tipo, Tipo.ID);
                Tipo.Owner = this;
                Tipo.OwnerID = ID;
                Tipo.TableName = Name;
                Tipo.Alias = "Tipo";
                Items.Add(Operacional, Operacional.ID);
                Operacional.Owner = this;
                Operacional.OwnerID = ID;
                Operacional.TableName = Name;
            }

            public static XORMPKField PCRxIATFFaseTipoID = new XORMPKField(global::Projecao.Core.PCR.DB.PCRx.PCRxIATFFaseTipo.PCRxIATFFaseTipoID, new Guid("01050970-AD7C-4982-ACF3-3B6C603395D5"), "PCRxIATFFaseTipoID", "Tipo de Fase");
            public static XORMFaceField Tipo = new XORMFaceField(global::Projecao.Core.PCR.DB.PCRx.PCRxIATFFaseTipo.Tipo, new Guid("0F5A8BCF-45DC-4C6B-8AE4-804E0C764536"), "Tipo", "Nome da Fase");
            public static XORMField Operacional = new XORMField(global::Projecao.Core.PCR.DB.PCRx.PCRxIATFFaseTipo.Operacional, new Guid("931A1A2A-7912-4176-BB6A-C85C026337ED"), "Operacional", "Operacional");
        }
        #endregion xPCRxIATFFaseTipo 


        public xPCRxIATFFaseTipo PCRxIATFFaseTipo;

        public IATFFaseTipoSVC()
        {
            TupleType = typeof(IATFFaseTipoSVC.XTuple);
            DataSetType = typeof(IATFFaseTipoSVC.XDataSet);
            ServiceRuleCID = new Guid("769E2774-147E-4CCF-B5C6-AB78733129EC");
            OnlyActives = false;
            Actions = XSVCAction.All;
            Type = XServiceType.Default;
            ID = new Guid("E21E1BD8-CAB8-414B-A112-FD6C6423182E");
            Name = "IATFFaseTipo";
            Title = "";
            IsCacheable = false;
            CompanyControl = false;
            IsJob = false;
            AutoLoad = true;
            FreeForUsers = false;
            ServerSideNewRecord = false;
            UseDistinct = false;
            JobType = XJobType.Default;
            CanExport = true;
            ModuleID = new Guid("02C4E7C5-1B4F-43DB-AC6C-CD36BBE428B7");
            Rights = new Int16[] { 1 }; 
            IsReadOnly = true;
            ClientScript = "Projecao.Core.PCR.js";
            OrderByFields = new Guid[] { xPCRxIATFFaseTipo.Tipo.ID };
            DataSetFields = new Guid[] { xPCRxIATFFaseTipo.Tipo.ID, xPCRxIATFFaseTipo.PCRxIATFFaseTipoID.ID };
            PKField = xPCRxIATFFaseTipo.PCRxIATFFaseTipoID.ID;
            ConfigTableID = new Guid("D2ECB9D2-BDB4-4D0A-9343-9BDD2099045D");
            MasterRuleCID = new Guid("769E2774-147E-4CCF-B5C6-AB78733129EC");
            PCRxIATFFaseTipo = new xPCRxIATFFaseTipo();
            PCRxIATFFaseTipo.IsReadOnly = true;
            AddTable(PCRxIATFFaseTipo);
            MasterTableID = PCRxIATFFaseTipo.ID;
            xPCRxIATFFaseTipo.PCRxIATFFaseTipoID.IsReadOnly = true;
            xPCRxIATFFaseTipo.PCRxIATFFaseTipoID.IsDataField = true;
            xPCRxIATFFaseTipo.PCRxIATFFaseTipoID.AllowEmpty = true;
            xPCRxIATFFaseTipo.Tipo.IsReadOnly = true;
            xPCRxIATFFaseTipo.Tipo.OrderType = XOrderType.Asc;
            xPCRxIATFFaseTipo.Tipo.Length = 35;
            xPCRxIATFFaseTipo.Tipo.IsDataField = true;
            xPCRxIATFFaseTipo.Tipo.AllowEmpty = true;
        }

        #region XFields

        public class XFields
        {
        public XORMField PCRxIATFFaseTipoID => xPCRxIATFFaseTipo.PCRxIATFFaseTipoID;
        public XORMField Tipo => xPCRxIATFFaseTipo.Tipo;
        }
        #endregion XFields
        #region IATFFaseTipoSVC.XTuple

        public  class XTuple : XDataTuple
        {

            public XTuple()
            {
            }

            public XTuple(Object[] pSource)
                : base(pSource)
            {
            }

            public XTuple(Int32 pColCount)
               : this(new Object[pColCount])
            {
            }

            public readonly XFields Fields = new XFields();

            #nullable enable

        public Int16 PCRxIATFFaseTipoID
        {
            get
            {
                return (Int16)Value[IATFFaseTipoSVC.xPCRxIATFFaseTipo.PCRxIATFFaseTipoID.ID];
            }
            set
            {
                Value[IATFFaseTipoSVC.xPCRxIATFFaseTipo.PCRxIATFFaseTipoID.ID] = value;
            }
        }
        public Int16? oPCRxIATFFaseTipoID
        {
            get
            {
                GetOldValue(IATFFaseTipoSVC.xPCRxIATFFaseTipo.PCRxIATFFaseTipoID, out Object ovlr);
                return (Int16?)ovlr;
            }
        }

        public String Tipo
        {
            get
            {
                return (String)Value[IATFFaseTipoSVC.xPCRxIATFFaseTipo.Tipo.ID];
            }
            set
            {
                Value[IATFFaseTipoSVC.xPCRxIATFFaseTipo.Tipo.ID] = value;
            }
        }
        public String? oTipo
        {
            get
            {
                GetOldValue(IATFFaseTipoSVC.xPCRxIATFFaseTipo.Tipo, out Object ovlr);
                return (String?)ovlr;
            }
        }

            #nullable disable
        }
        #endregion IATFFaseTipoSVC.XTuple

        #region IATFFaseTipoSVC.XRule
        public abstract class XRule : XServiceRule<IATFFaseTipoSVC.XDataSet, IATFFaseTipoSVC, IATFFaseTipoSVC.XTuple>
        {
        }
        #endregion IATFFaseTipoSVC.XRule

        #region IATFFaseTipoSVC.XDataSet

        public class XDataSet : XDataSet<IATFFaseTipoSVC.XTuple>
        {
            public XDataSet()
            {
                DataSetType = typeof(IATFFaseTipoSVC.XDataSet);
            }
        }

        public class XDataSet<T> : XServiceDataSet<IATFFaseTipoSVC.XTuple> where T : XDataTuple
        {

            public Guid PCRxIATFFaseTipoID => IATFFaseTipoSVC.xPCRxIATFFaseTipo.PCRxIATFFaseTipoID.ID;
            public Guid Tipo => IATFFaseTipoSVC.xPCRxIATFFaseTipo.Tipo.ID;

            public XDataSet()
            {
                DataSetType = typeof(IATFFaseTipoSVC.XDataSet);
            }

        }
        #endregion IATFFaseTipoSVC.XDataSet

        [Guid(IATFFaseTipoSVC.sCID)]
        public  interface XService : XIBaseService
        {
            new XDataSet DataSet
            {
                get;
            }
            new XTuple NewTuple(Object pPKValue = null);
             IEnumerable<XTuple> Tuples
            {
                get;
            }
             XTuple Current
            {
                get;
            }
            new XDataSet Get(XServiceData pData);
             XDataSet Get(params Object[] pWhere);
        }
        [XRegister(typeof(_Service), _Service.sCID, typeof(IATFFaseTipoSVC))]
        protected class _Service : Service<IATFFaseTipoSVC, XDataSet, XTuple>
        {
            public const String sCID = "447F9D35-45E7-464A-8FFF-912B5EA98A2D";
            public Guid gCID = new Guid(sCID);
        }

        public class Service<TModel, TDataSet, TTuple> : XBaseService<IATFFaseTipoSVC, XDataSet, XTuple>, XService
             where TModel : IATFFaseTipoSVC, new()
             where TDataSet : XDataSet, new()
             where TTuple : XTuple
        {
            XDataSet XService.DataSet => (XDataSet)DataSet;
            XTuple XService.NewTuple(Object pPKValue)
            {
                return (XTuple)NewTuple(pPKValue);
            }
            public new XDataTuple NewTuple(Object pPKValue = null)
            {
                return (XTuple)base.NewTuple(pPKValue);
            }
            IEnumerable<XTuple> XService.Tuples => (IEnumerable<XTuple>)Tuples;
            XTuple XService.Current => (XTuple )Current;
            XDataSet XService.Get(XServiceData pData)
            {
                return (XDataSet)Get(pData);
            }
            XDataSet XService.Get(params Object[] pWhere)
            {
                return (XDataSet)Get(pWhere);
            }
            public Service()
            {
                ID = gCID;
            }
        }
    }

}