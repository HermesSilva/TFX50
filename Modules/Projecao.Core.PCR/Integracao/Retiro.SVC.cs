//<auto-generated/>
using System;
using System.Linq;
using Newtonsoft.Json;
using TFX.Core.Objects;
using TFX.Core.Model.Data;
using TFX.Core.Model.Cache;
using TFX.Core.Reflections;
using TFX.Core.Service.Job;
using TFX.Core.Service.SVC;
using Projecao.Core.PCR.DB;
using TFX.Core.Model.DIC.SVC;
using TFX.Core.Model.DIC.ORM;
using TFX.Core.Model.Services;
using TFX.Core.Model.DIC.Types;
using TFX.Core.Model.Interfaces;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Projecao.Core.PCR.Integracao
{
    [XRegister(typeof(RetiroSVC), sCID)]
    [XDASESource(@"D:\Tootega\Source\TFX20\Modules\Projecao.Core.PCR\Projecao.Core.PCR.csproj", @"D:\Tootega\Source\TFX20\Modules\Projecao.Core.PCR\Integracao\Retiro.dssvc")]
    public class RetiroSVC : XSVCModel
    {
        public const String sCID = "6CA30B97-524C-45B8-973E-3D4DA12D2289";
        public static Guid gCID = new Guid(sCID);

        #region xPCRxRetiro 
        public class xPCRxRetiro : XSVCTable
        {

            public static Guid gCID => new Guid("6DE3872F-90B0-486F-B7A9-3364D5D8F488");

            public xPCRxRetiro()
            {
                Name = "PCRxRetiro";
                Alias = "PCRxRetiro";
                ID = gCID;
                ParentID =  global::Projecao.Core.PCR.DB.PCRx.PCRxRetiro.gCID;

                Items.Add(PCRxRetiroID, PCRxRetiroID.ID);
                PCRxRetiroID.Owner = this;
                PCRxRetiroID.OwnerID = ID;
                PCRxRetiroID.TableName = Name;
                PCRxRetiroID.Alias = "PCRxRetiroID";
                Items.Add(Nome, Nome.ID);
                Nome.Owner = this;
                Nome.OwnerID = ID;
                Nome.TableName = Name;
                Nome.Alias = "Nome";
                Items.Add(SYSxEmpresaID, SYSxEmpresaID.ID);
                SYSxEmpresaID.Owner = this;
                SYSxEmpresaID.OwnerID = ID;
                SYSxEmpresaID.TableName = Name;
                SYSxEmpresaID.Alias = "SYSxEmpresaID";
                Items.Add(Latitude, Latitude.ID);
                Latitude.Owner = this;
                Latitude.OwnerID = ID;
                Latitude.TableName = Name;
                Latitude.Alias = "Latitude";
                Items.Add(Longitude, Longitude.ID);
                Longitude.Owner = this;
                Longitude.OwnerID = ID;
                Longitude.TableName = Name;
                Longitude.Alias = "Longitude";
                Items.Add(CoordenadasArea, CoordenadasArea.ID);
                CoordenadasArea.Owner = this;
                CoordenadasArea.OwnerID = ID;
                CoordenadasArea.TableName = Name;
                CoordenadasArea.Alias = "CoordenadasArea";
            }

            public static XORMPKField PCRxRetiroID = new XORMPKField(global::Projecao.Core.PCR.DB.PCRx.PCRxRetiro.PCRxRetiroID, new Guid("B4D94654-7328-4639-91A5-A5B515B18CD7"), "PCRxRetiroID", "Retiro");
            public static XORMField Nome = new XORMField(global::Projecao.Core.PCR.DB.PCRx.PCRxRetiro.Nome, new Guid("7622539C-8471-4D6D-8EBA-84E756E99107"), "Nome", "Nome");
            public static XORMFKField SYSxEmpresaID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxRetiro.SYSxEmpresaID, new Guid("0FFE7022-5A63-4117-83F1-10E1BBB63D37"), "SYSxEmpresaID", "Empresa");
            public static XORMDecimalField Latitude = new XORMDecimalField(global::Projecao.Core.PCR.DB.PCRx.PCRxRetiro.Latitude, new Guid("86165CD6-6903-403A-915E-5D84FA7493BC"), "Latitude", "Latitude");
            public static XORMDecimalField Longitude = new XORMDecimalField(global::Projecao.Core.PCR.DB.PCRx.PCRxRetiro.Longitude, new Guid("FD6EC4B3-846B-46B6-86FC-763B17C8FE58"), "Longitude", "Longitude");
            public static XORMField CoordenadasArea = new XORMField(global::Projecao.Core.PCR.DB.PCRx.PCRxRetiro.CoordenadasArea, new Guid("16709F0E-5ABD-4355-A901-3F0DB1382AC3"), "CoordenadasArea", "Coordenadas da Área");
        }
        #endregion xPCRxRetiro 


        public xPCRxRetiro PCRxRetiro;

        public RetiroSVC()
        {
            TupleType = typeof(RetiroSVC.XTuple);
            DataSetType = typeof(RetiroSVC.XDataSet);
            ServiceRuleCID = new Guid("5BF4A105-BD66-4AE1-868B-ADFBC538DC8E");
            OnlyActives = false;
            Actions = XSVCAction.All;
            Type = XServiceType.Default;
            ID = new Guid("6CA30B97-524C-45B8-973E-3D4DA12D2289");
            Name = "Retiro";
            Title = "";
            IsCacheable = false;
            CompanyControl = false;
            IsJob = false;
            AutoLoad = true;
            FreeForUsers = false;
            ServerSideNewRecord = false;
            UseDistinct = false;
            JobType = XJobType.Default;
            CanExport = true;
            ModuleID = new Guid("02C4E7C5-1B4F-43DB-AC6C-CD36BBE428B7");
            Rights = new Int16[] { 1 }; 
            IsReadOnly = true;
            ClientScript = "Projecao.Core.PCR.js";
            OrderByFields = new Guid[] { xPCRxRetiro.Nome.ID };
            DataSetFields = new Guid[] { xPCRxRetiro.SYSxEmpresaID.ID, xPCRxRetiro.Nome.ID, xPCRxRetiro.PCRxRetiroID.ID, xPCRxRetiro.CoordenadasArea.ID, xPCRxRetiro.Longitude.ID, xPCRxRetiro.Latitude.ID };
            PKField = xPCRxRetiro.PCRxRetiroID.ID;
            ConfigTableID = new Guid("9D362636-A0DF-402C-8691-C3A229AC7935");
            MasterRuleCID = new Guid("5BF4A105-BD66-4AE1-868B-ADFBC538DC8E");
            PCRxRetiro = new xPCRxRetiro();
            PCRxRetiro.IsReadOnly = true;
            AddTable(PCRxRetiro);
            MasterTableID = PCRxRetiro.ID;
            xPCRxRetiro.CoordenadasArea.IsReadOnly = true;
            xPCRxRetiro.CoordenadasArea.IsDataField = true;
            xPCRxRetiro.CoordenadasArea.AllowEmpty = true;
            xPCRxRetiro.Latitude.IsReadOnly = true;
            xPCRxRetiro.Latitude.Length = 20;
            xPCRxRetiro.Latitude.Scale = 10;
            xPCRxRetiro.Latitude.IsDataField = true;
            xPCRxRetiro.Latitude.AllowEmpty = true;
            xPCRxRetiro.Longitude.IsReadOnly = true;
            xPCRxRetiro.Longitude.Length = 20;
            xPCRxRetiro.Longitude.Scale = 10;
            xPCRxRetiro.Longitude.IsDataField = true;
            xPCRxRetiro.Longitude.AllowEmpty = true;
            xPCRxRetiro.Nome.IsReadOnly = true;
            xPCRxRetiro.Nome.OrderType = XOrderType.Asc;
            xPCRxRetiro.Nome.Length = 30;
            xPCRxRetiro.Nome.IsDataField = true;
            xPCRxRetiro.Nome.AllowEmpty = true;
            xPCRxRetiro.PCRxRetiroID.IsReadOnly = true;
            xPCRxRetiro.PCRxRetiroID.IsDataField = true;
            xPCRxRetiro.PCRxRetiroID.AllowEmpty = true;
            xPCRxRetiro.SYSxEmpresaID.IsReadOnly = true;
            xPCRxRetiro.SYSxEmpresaID.IsDataField = true;
            xPCRxRetiro.SYSxEmpresaID.AllowEmpty = true;
        }

        #region XFields

        public class XFields
        {
        public XORMField CoordenadasArea => xPCRxRetiro.CoordenadasArea;
        public XORMField Latitude => xPCRxRetiro.Latitude;
        public XORMField Longitude => xPCRxRetiro.Longitude;
        public XORMField Nome => xPCRxRetiro.Nome;
        public XORMField PCRxRetiroID => xPCRxRetiro.PCRxRetiroID;
        public XORMField SYSxEmpresaID => xPCRxRetiro.SYSxEmpresaID;
        }
        #endregion XFields
        #region RetiroSVC.XTuple

        public  class XTuple : XDataTuple
        {

            public XTuple()
            {
            }

            public XTuple(Object[] pSource)
                : base(pSource)
            {
            }

            public XTuple(Int32 pColCount)
               : this(new Object[pColCount])
            {
            }

            public readonly XFields Fields = new XFields();

            #nullable enable

        public String CoordenadasArea
        {
            get
            {
                return (String)Value[RetiroSVC.xPCRxRetiro.CoordenadasArea.ID];
            }
            set
            {
                Value[RetiroSVC.xPCRxRetiro.CoordenadasArea.ID] = value;
            }
        }
        public String? oCoordenadasArea
        {
            get
            {
                GetOldValue(RetiroSVC.xPCRxRetiro.CoordenadasArea, out Object ovlr);
                return (String?)ovlr;
            }
        }

        public Decimal Latitude
        {
            get
            {
                return (Decimal)Value[RetiroSVC.xPCRxRetiro.Latitude.ID];
            }
            set
            {
                Value[RetiroSVC.xPCRxRetiro.Latitude.ID] = value;
            }
        }
        public Decimal? oLatitude
        {
            get
            {
                GetOldValue(RetiroSVC.xPCRxRetiro.Latitude, out Object ovlr);
                return (Decimal?)ovlr;
            }
        }

        public Decimal Longitude
        {
            get
            {
                return (Decimal)Value[RetiroSVC.xPCRxRetiro.Longitude.ID];
            }
            set
            {
                Value[RetiroSVC.xPCRxRetiro.Longitude.ID] = value;
            }
        }
        public Decimal? oLongitude
        {
            get
            {
                GetOldValue(RetiroSVC.xPCRxRetiro.Longitude, out Object ovlr);
                return (Decimal?)ovlr;
            }
        }

        public String Nome
        {
            get
            {
                return (String)Value[RetiroSVC.xPCRxRetiro.Nome.ID];
            }
            set
            {
                Value[RetiroSVC.xPCRxRetiro.Nome.ID] = value;
            }
        }
        public String? oNome
        {
            get
            {
                GetOldValue(RetiroSVC.xPCRxRetiro.Nome, out Object ovlr);
                return (String?)ovlr;
            }
        }

        public Int32 PCRxRetiroID
        {
            get
            {
                return (Int32)Value[RetiroSVC.xPCRxRetiro.PCRxRetiroID.ID];
            }
            set
            {
                Value[RetiroSVC.xPCRxRetiro.PCRxRetiroID.ID] = value;
            }
        }
        public Int32? oPCRxRetiroID
        {
            get
            {
                GetOldValue(RetiroSVC.xPCRxRetiro.PCRxRetiroID, out Object ovlr);
                return (Int32?)ovlr;
            }
        }

        public Guid SYSxEmpresaID
        {
            get
            {
                return (Guid)Value[RetiroSVC.xPCRxRetiro.SYSxEmpresaID.ID];
            }
            set
            {
                Value[RetiroSVC.xPCRxRetiro.SYSxEmpresaID.ID] = value;
            }
        }
        public Guid? oSYSxEmpresaID
        {
            get
            {
                GetOldValue(RetiroSVC.xPCRxRetiro.SYSxEmpresaID, out Object ovlr);
                return (Guid?)ovlr;
            }
        }

            #nullable disable
        }
        #endregion RetiroSVC.XTuple

        #region RetiroSVC.XRule
        public abstract class XRule : XServiceRule<RetiroSVC.XDataSet, RetiroSVC, RetiroSVC.XTuple>
        {
        }
        #endregion RetiroSVC.XRule

        #region RetiroSVC.XDataSet

        public class XDataSet : XDataSet<RetiroSVC.XTuple>
        {
            public XDataSet()
            {
                DataSetType = typeof(RetiroSVC.XDataSet);
            }
        }

        public class XDataSet<T> : XServiceDataSet<RetiroSVC.XTuple> where T : XDataTuple
        {

            public Guid CoordenadasArea => RetiroSVC.xPCRxRetiro.CoordenadasArea.ID;
            public Guid Latitude => RetiroSVC.xPCRxRetiro.Latitude.ID;
            public Guid Longitude => RetiroSVC.xPCRxRetiro.Longitude.ID;
            public Guid Nome => RetiroSVC.xPCRxRetiro.Nome.ID;
            public Guid PCRxRetiroID => RetiroSVC.xPCRxRetiro.PCRxRetiroID.ID;
            public Guid SYSxEmpresaID => RetiroSVC.xPCRxRetiro.SYSxEmpresaID.ID;

            public XDataSet()
            {
                DataSetType = typeof(RetiroSVC.XDataSet);
            }

        }
        #endregion RetiroSVC.XDataSet

        [Guid(RetiroSVC.sCID)]
        public  interface XService : XIBaseService
        {
            new XDataSet DataSet
            {
                get;
            }
            new XTuple NewTuple(Object pPKValue = null);
             IEnumerable<XTuple> Tuples
            {
                get;
            }
             XTuple Current
            {
                get;
            }
            new XDataSet Get(XServiceData pData);
             XDataSet Get(params Object[] pWhere);
        }
        [XRegister(typeof(_Service), _Service.sCID, typeof(RetiroSVC))]
        protected class _Service : Service<RetiroSVC, XDataSet, XTuple>
        {
            public const String sCID = "2F2BF853-AB6B-49A2-A3B1-AD59198B3089";
            public Guid gCID = new Guid(sCID);
        }

        public class Service<TModel, TDataSet, TTuple> : XBaseService<RetiroSVC, XDataSet, XTuple>, XService
             where TModel : RetiroSVC, new()
             where TDataSet : XDataSet, new()
             where TTuple : XTuple
        {
            XDataSet XService.DataSet => (XDataSet)DataSet;
            XTuple XService.NewTuple(Object pPKValue)
            {
                return (XTuple)NewTuple(pPKValue);
            }
            public new XDataTuple NewTuple(Object pPKValue = null)
            {
                return (XTuple)base.NewTuple(pPKValue);
            }
            IEnumerable<XTuple> XService.Tuples => (IEnumerable<XTuple>)Tuples;
            XTuple XService.Current => (XTuple )Current;
            XDataSet XService.Get(XServiceData pData)
            {
                return (XDataSet)Get(pData);
            }
            XDataSet XService.Get(params Object[] pWhere)
            {
                return (XDataSet)Get(pWhere);
            }
            public Service()
            {
                ID = gCID;
            }
        }
    }

}