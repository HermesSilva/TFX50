//<auto-generated/>
using System;
using System.Linq;
using Newtonsoft.Json;
using TFX.Core.Objects;
using TFX.Core.Model.Data;
using TFX.Core.Model.Cache;
using TFX.Core.Reflections;
using TFX.Core.Service.Job;
using TFX.Core.Service.SVC;
using Projecao.Core.PCR.DB;
using TFX.Core.Model.DIC.SVC;
using TFX.Core.Model.DIC.ORM;
using TFX.Core.Service.Apps;
using TFX.Core.Model.Services;
using TFX.Core.Model.DIC.Types;
using TFX.Core.Model.Interfaces;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Projecao.Core.PCR.Integracao
{
    [XRegister(typeof(FazendaSVC), sCID)]
    [XDASESource(@"D:\Tootega\Source\TFX20\Modules\Projecao.Core.PCR\Projecao.Core.PCR.csproj", @"D:\Tootega\Source\TFX20\Modules\Projecao.Core.PCR\Integracao\Fazenda.dssvc")]
    public class FazendaSVC : XSVCModel
    {
        public const String sCID = "B2BD9CAD-F4BD-48D6-BBB8-F9BD298596F7";
        public static Guid gCID = new Guid(sCID);
        public static XSVCReference SYSxPessoa_SYSxPessoaID_PCRxFazenda_PCRxFazendaID; // SYSxPessoa.SYSxPessoaID --> PCRxFazenda.PCRxFazendaID
        public static XSVCReference SYSxEmpresa_SYSxEmpresaID_PCRxFazenda_PCRxFazendaID; // SYSxEmpresa.SYSxEmpresaID --> PCRxFazenda.PCRxFazendaID

        #region xSYSxPessoa 
        public class xSYSxPessoa : XSVCTable
        {

            public static Guid gCID => new Guid("3912B36F-73A0-42AF-9308-21AD5F995654");

            public xSYSxPessoa()
            {
                Name = "SYSxPessoa";
                Alias = "SYSxPessoa";
                ID = gCID;
                ParentID =  global::TFX.Core.Service.Apps.SYSx.SYSxPessoa.gCID;

                Items.Add(Nome, Nome.ID);
                Nome.Owner = this;
                Nome.OwnerID = ID;
                Nome.TableName = Name;
                Nome.Alias = "Nome";
                Items.Add(SYSxPessoaID, SYSxPessoaID.ID);
                SYSxPessoaID.Owner = this;
                SYSxPessoaID.OwnerID = ID;
                SYSxPessoaID.TableName = Name;
            }

            public static XORMFaceField Nome = new XORMFaceField(global::TFX.Core.Service.Apps.SYSx.SYSxPessoa.Nome, new Guid("E056578D-C0EE-46CF-88E8-9E0F0A52CFA1"), "Nome", "Nome");
            public static XORMPKField SYSxPessoaID = new XORMPKField(global::TFX.Core.Service.Apps.SYSx.SYSxPessoa.SYSxPessoaID, new Guid("65F39448-C414-498F-BC2D-F1F49207A244"), "SYSxPessoaID", "Pessoas");
        }
        #endregion xSYSxPessoa 


        #region xPCRxFazenda 
        public class xPCRxFazenda : XSVCTable
        {

            public static Guid gCID => new Guid("C1847033-54A9-477F-9731-5FDA34AA479D");

            public xPCRxFazenda()
            {
                Name = "PCRxFazenda";
                Alias = "PCRxFazenda";
                ID = gCID;
                ParentID =  global::Projecao.Core.PCR.DB.PCRx.PCRxFazenda.gCID;

                Items.Add(PCRxFazendaID, PCRxFazendaID.ID);
                PCRxFazendaID.Owner = this;
                PCRxFazendaID.OwnerID = ID;
                PCRxFazendaID.TableName = Name;
                PCRxFazendaID.Alias = "PCRxFazendaID";
                Items.Add(CEPxLocalidadeID, CEPxLocalidadeID.ID);
                CEPxLocalidadeID.Owner = this;
                CEPxLocalidadeID.OwnerID = ID;
                CEPxLocalidadeID.TableName = Name;
                CEPxLocalidadeID.Alias = "CEPxLocalidadeID";
                Items.Add(SYSxEstadoID, SYSxEstadoID.ID);
                SYSxEstadoID.Owner = this;
                SYSxEstadoID.OwnerID = ID;
                SYSxEstadoID.TableName = Name;
                SYSxEstadoID.Alias = "SYSxEstadoID";
                Items.Add(SYSxEmpresaID, SYSxEmpresaID.ID);
                SYSxEmpresaID.Owner = this;
                SYSxEmpresaID.OwnerID = ID;
                SYSxEmpresaID.TableName = Name;
                SYSxEmpresaID.Alias = "SYSxEmpresaID";
                Items.Add(CoordenadasArea, CoordenadasArea.ID);
                CoordenadasArea.Owner = this;
                CoordenadasArea.OwnerID = ID;
                CoordenadasArea.TableName = Name;
            }

            public static XORMFaceField PCRxFazendaID = new XORMFaceField(global::Projecao.Core.PCR.DB.PCRx.PCRxFazenda.PCRxFazendaID, new Guid("390B1D9B-55FD-4352-A3E0-426CB57D7E08"), "PCRxFazendaID", "Fazenda");
            public static XORMFKField CEPxLocalidadeID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxFazenda.CEPxLocalidadeID, new Guid("CF5F26B5-6E5A-4410-9D11-CF11B837E1DC"), "CEPxLocalidadeID", "Localidade");
            public static XORMStateField SYSxEstadoID = new XORMStateField(global::Projecao.Core.PCR.DB.PCRx.PCRxFazenda.SYSxEstadoID, new Guid("843E92BA-095D-4138-9322-A6D8199828E8"), "SYSxEstadoID", "Estado");
            public static XORMFKField SYSxEmpresaID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxFazenda.SYSxEmpresaID, new Guid("5E2CE54A-1B04-4460-84E4-ACF7437DD024"), "SYSxEmpresaID", "Empresa");
            public static XORMField CoordenadasArea = new XORMField(global::Projecao.Core.PCR.DB.PCRx.PCRxFazenda.CoordenadasArea, new Guid("4CF6C573-468A-47BD-A06C-28950AC6ED10"), "CoordenadasArea", "Coordenadas da Área");
        }
        #endregion xPCRxFazenda 


        #region xSYSxEmpresa 
        public class xSYSxEmpresa : XSVCTable
        {

            public static Guid gCID => new Guid("E6826065-359B-4FBF-9936-48C97B8D0CB8");

            public xSYSxEmpresa()
            {
                Name = "SYSxEmpresa";
                Alias = "SYSxEmpresa";
                ID = gCID;
                ParentID =  global::TFX.Core.Service.Apps.SYSx.SYSxEmpresa.gCID;

                Items.Add(Sigla, Sigla.ID);
                Sigla.Owner = this;
                Sigla.OwnerID = ID;
                Sigla.TableName = Name;
                Sigla.Alias = "Sigla";
                Items.Add(SYSxEmpresaID, SYSxEmpresaID.ID);
                SYSxEmpresaID.Owner = this;
                SYSxEmpresaID.OwnerID = ID;
                SYSxEmpresaID.TableName = Name;
                Items.Add(SYSxEstadoID, SYSxEstadoID.ID);
                SYSxEstadoID.Owner = this;
                SYSxEstadoID.OwnerID = ID;
                SYSxEstadoID.TableName = Name;
                Items.Add(SYSxEmpresaMatrizID, SYSxEmpresaMatrizID.ID);
                SYSxEmpresaMatrizID.Owner = this;
                SYSxEmpresaMatrizID.OwnerID = ID;
                SYSxEmpresaMatrizID.TableName = Name;
            }

            public static XORMFaceField Sigla = new XORMFaceField(global::TFX.Core.Service.Apps.SYSx.SYSxEmpresa.Sigla, new Guid("114BF049-C4E7-43B3-B8DD-E98EA78219F7"), "Sigla", "Sigla");
            public static XORMPKField SYSxEmpresaID = new XORMPKField(global::TFX.Core.Service.Apps.SYSx.SYSxEmpresa.SYSxEmpresaID, new Guid("6CF9157C-D3F0-460E-ADDC-3E03C0BA7F01"), "SYSxEmpresaID", "Empresa");
            public static XORMStateField SYSxEstadoID = new XORMStateField(global::TFX.Core.Service.Apps.SYSx.SYSxEmpresa.SYSxEstadoID, new Guid("E10FE1AD-9C03-4B7A-B72F-D126052639E2"), "SYSxEstadoID", "Estado");
            public static XORMFKField SYSxEmpresaMatrizID = new XORMFKField(global::TFX.Core.Service.Apps.SYSx.SYSxEmpresa.SYSxEmpresaMatrizID, new Guid("CE56A176-45C5-4E6C-84B4-843ACB2F1061"), "SYSxEmpresaMatrizID", "Empresa");
        }
        #endregion xSYSxEmpresa 


        public xPCRxFazenda PCRxFazenda;
        public xSYSxEmpresa SYSxEmpresa;
        public xSYSxPessoa SYSxPessoa;
        public static readonly XORMParameterField DataBanco = new XORMParameterField(new Guid("FD5677A3-7205-4057-A648-50EB11EE1556"), "DataBanco", "User Data Field", XDateTime.CID, 0, 0, false, gCID, null);

        public FazendaSVC()
        {
            TupleType = typeof(FazendaSVC.XTuple);
            DataSetType = typeof(FazendaSVC.XDataSet);
            ServiceRuleCID = new Guid("9DDB8A71-5FE9-46BC-AE31-63D5E1B187E8");
            OnlyActives = false;
            Actions = XSVCAction.All;
            Type = XServiceType.Default;
            ID = new Guid("B2BD9CAD-F4BD-48D6-BBB8-F9BD298596F7");
            Name = "Fazenda";
            Title = "";
            IsCacheable = false;
            CompanyControl = false;
            IsJob = false;
            AutoLoad = true;
            FreeForUsers = false;
            ServerSideNewRecord = false;
            UseDistinct = false;
            JobType = XJobType.Default;
            CanExport = true;
            ModuleID = new Guid("02C4E7C5-1B4F-43DB-AC6C-CD36BBE428B7");
            Rights = new Int16[] { 1 }; 
            IsReadOnly = true;
            ClientScript = "Projecao.Core.PCR.js";
            DataSetFields = new Guid[] { xSYSxPessoa.Nome.ID, xSYSxEmpresa.Sigla.ID, xPCRxFazenda.PCRxFazendaID.ID, xPCRxFazenda.CEPxLocalidadeID.ID, xPCRxFazenda.SYSxEstadoID.ID, xPCRxFazenda.SYSxEmpresaID.ID, DataBanco.ID };
            PKField = xPCRxFazenda.PCRxFazendaID.ID;
            ConfigTableID = new Guid("D2945FAE-04F8-439E-9F42-7B1326DC55CF");
            StateField = xPCRxFazenda.SYSxEstadoID.ID;
            MasterRuleCID = new Guid("9DDB8A71-5FE9-46BC-AE31-63D5E1B187E8");
            PCRxFazenda = new xPCRxFazenda();
            PCRxFazenda.IsReadOnly = true;
            AddTable(PCRxFazenda);
            SYSxEmpresa = new xSYSxEmpresa();
            SYSxEmpresa.IsReadOnly = true;
            AddTable(SYSxEmpresa);
            SYSxPessoa = new xSYSxPessoa();
            SYSxPessoa.IsReadOnly = true;
            AddTable(SYSxPessoa);
            MasterTableID = PCRxFazenda.ID;
            SYSxPessoa_SYSxPessoaID_PCRxFazenda_PCRxFazendaID = AddReference(new XSVCReference(new Guid("287514BB-190E-4DCA-8032-A5B6FDFBB285"), "FK_287514BB190E4DCA8032A5B6FDFBB285", FazendaSVC.xSYSxPessoa.gCID, xSYSxPessoa.SYSxPessoaID.ID, FazendaSVC.xPCRxFazenda.gCID, xPCRxFazenda.PCRxFazendaID.ID, XJoinType.Inner)); // SYSxPessoa.SYSxPessoaID --> PCRxFazenda.PCRxFazendaID
            SYSxEmpresa_SYSxEmpresaID_PCRxFazenda_PCRxFazendaID = AddReference(new XSVCReference(new Guid("2EEF913A-6DC9-4BCB-8AB3-82F82A2BF7D0"), "FK_2EEF913A6DC94BCB8AB382F82A2BF7D0", FazendaSVC.xSYSxEmpresa.gCID, xSYSxEmpresa.SYSxEmpresaID.ID, FazendaSVC.xPCRxFazenda.gCID, xPCRxFazenda.PCRxFazendaID.ID, XJoinType.Inner)); // SYSxEmpresa.SYSxEmpresaID --> PCRxFazenda.PCRxFazendaID
            AddField(DataBanco);
            DataBanco.IsParam = true;
            xPCRxFazenda.CEPxLocalidadeID.IsReadOnly = true;
            xPCRxFazenda.CEPxLocalidadeID.IsDataField = true;
            xPCRxFazenda.CEPxLocalidadeID.AllowEmpty = true;
            DataBanco.IsReadOnly = false;
            DataBanco.Length = 0;
            DataBanco.Scale = 0;
            DataBanco.IsDataField = true;
            DataBanco.AllowEmpty = true;
            xSYSxPessoa.Nome.IsReadOnly = true;
            xSYSxPessoa.Nome.Length = 256;
            xSYSxPessoa.Nome.IsDataField = true;
            xSYSxPessoa.Nome.AllowEmpty = true;
            xPCRxFazenda.PCRxFazendaID.IsReadOnly = true;
            xPCRxFazenda.PCRxFazendaID.IsDataField = true;
            xPCRxFazenda.PCRxFazendaID.AllowEmpty = true;
            xSYSxEmpresa.Sigla.IsReadOnly = true;
            xSYSxEmpresa.Sigla.Length = 25;
            xSYSxEmpresa.Sigla.IsDataField = true;
            xSYSxEmpresa.Sigla.AllowEmpty = true;
            xPCRxFazenda.SYSxEmpresaID.IsReadOnly = true;
            xPCRxFazenda.SYSxEmpresaID.IsDataField = true;
            xPCRxFazenda.SYSxEmpresaID.AllowEmpty = true;
            xPCRxFazenda.SYSxEstadoID.IsReadOnly = true;
            xPCRxFazenda.SYSxEstadoID.IsDataField = true;
            xPCRxFazenda.SYSxEstadoID.AllowEmpty = true;
        }

        #region XFields

        public class XFields
        {
        public XORMField CEPxLocalidadeID => xPCRxFazenda.CEPxLocalidadeID;
        public XORMField DataBanco => FazendaSVC.DataBanco;
        public XORMField Nome => xSYSxPessoa.Nome;
        public XORMField PCRxFazendaID => xPCRxFazenda.PCRxFazendaID;
        public XORMField Sigla => xSYSxEmpresa.Sigla;
        public XORMField SYSxEmpresaID => xPCRxFazenda.SYSxEmpresaID;
        public XORMField SYSxEstadoID => xPCRxFazenda.SYSxEstadoID;
        }
        #endregion XFields
        #region FazendaSVC.XTuple

        public  class XTuple : XDataTuple
        {

            public XTuple()
            {
            }

            public XTuple(Object[] pSource)
                : base(pSource)
            {
            }

            public XTuple(Int32 pColCount)
               : this(new Object[pColCount])
            {
            }

            public readonly XFields Fields = new XFields();

            #nullable enable

        public Int32 CEPxLocalidadeID
        {
            get
            {
                return (Int32)Value[FazendaSVC.xPCRxFazenda.CEPxLocalidadeID.ID];
            }
            set
            {
                Value[FazendaSVC.xPCRxFazenda.CEPxLocalidadeID.ID] = value;
            }
        }
        public Int32? oCEPxLocalidadeID
        {
            get
            {
                GetOldValue(FazendaSVC.xPCRxFazenda.CEPxLocalidadeID, out Object ovlr);
                return (Int32?)ovlr;
            }
        }

        public DateTime DataBanco
        {
            get
            {
                return (DateTime)Value[FazendaSVC.DataBanco.ID];
            }
            set
            {
                Value[FazendaSVC.DataBanco.ID] = value;
            }
        }
        public DateTime? oDataBanco
        {
            get
            {
                GetOldValue(FazendaSVC.DataBanco, out Object ovlr);
                return (DateTime?)ovlr;
            }
        }

        public String Nome
        {
            get
            {
                return (String)Value[FazendaSVC.xSYSxPessoa.Nome.ID];
            }
            set
            {
                Value[FazendaSVC.xSYSxPessoa.Nome.ID] = value;
            }
        }
        public String? oNome
        {
            get
            {
                GetOldValue(FazendaSVC.xSYSxPessoa.Nome, out Object ovlr);
                return (String?)ovlr;
            }
        }

        public Guid PCRxFazendaID
        {
            get
            {
                return (Guid)Value[FazendaSVC.xPCRxFazenda.PCRxFazendaID.ID];
            }
            set
            {
                Value[FazendaSVC.xPCRxFazenda.PCRxFazendaID.ID] = value;
            }
        }
        public Guid? oPCRxFazendaID
        {
            get
            {
                GetOldValue(FazendaSVC.xPCRxFazenda.PCRxFazendaID, out Object ovlr);
                return (Guid?)ovlr;
            }
        }

        public String Sigla
        {
            get
            {
                return (String)Value[FazendaSVC.xSYSxEmpresa.Sigla.ID];
            }
            set
            {
                Value[FazendaSVC.xSYSxEmpresa.Sigla.ID] = value;
            }
        }
        public String? oSigla
        {
            get
            {
                GetOldValue(FazendaSVC.xSYSxEmpresa.Sigla, out Object ovlr);
                return (String?)ovlr;
            }
        }

        public Guid SYSxEmpresaID
        {
            get
            {
                return (Guid)Value[FazendaSVC.xPCRxFazenda.SYSxEmpresaID.ID];
            }
            set
            {
                Value[FazendaSVC.xPCRxFazenda.SYSxEmpresaID.ID] = value;
            }
        }
        public Guid? oSYSxEmpresaID
        {
            get
            {
                GetOldValue(FazendaSVC.xPCRxFazenda.SYSxEmpresaID, out Object ovlr);
                return (Guid?)ovlr;
            }
        }

        public Int16 SYSxEstadoID
        {
            get
            {
                return (Int16)Value[FazendaSVC.xPCRxFazenda.SYSxEstadoID.ID];
            }
            set
            {
                Value[FazendaSVC.xPCRxFazenda.SYSxEstadoID.ID] = value;
            }
        }
        public Int16? oSYSxEstadoID
        {
            get
            {
                GetOldValue(FazendaSVC.xPCRxFazenda.SYSxEstadoID, out Object ovlr);
                return (Int16?)ovlr;
            }
        }

            #nullable disable
        }
        #endregion FazendaSVC.XTuple

        #region FazendaSVC.XRule
        public abstract class XRule : XServiceRule<FazendaSVC.XDataSet, FazendaSVC, FazendaSVC.XTuple>
        {
        }
        #endregion FazendaSVC.XRule

        #region FazendaSVC.XDataSet

        public class XDataSet : XDataSet<FazendaSVC.XTuple>
        {
            public XDataSet()
            {
                DataSetType = typeof(FazendaSVC.XDataSet);
            }
        }

        public class XDataSet<T> : XServiceDataSet<FazendaSVC.XTuple> where T : XDataTuple
        {

            public Guid CEPxLocalidadeID => FazendaSVC.xPCRxFazenda.CEPxLocalidadeID.ID;
            public Guid DataBanco => FazendaSVC.DataBanco.ID;
            public Guid Nome => FazendaSVC.xSYSxPessoa.Nome.ID;
            public Guid PCRxFazendaID => FazendaSVC.xPCRxFazenda.PCRxFazendaID.ID;
            public Guid Sigla => FazendaSVC.xSYSxEmpresa.Sigla.ID;
            public Guid SYSxEmpresaID => FazendaSVC.xPCRxFazenda.SYSxEmpresaID.ID;
            public Guid SYSxEstadoID => FazendaSVC.xPCRxFazenda.SYSxEstadoID.ID;

            public XDataSet()
            {
                DataSetType = typeof(FazendaSVC.XDataSet);
            }

        }
        #endregion FazendaSVC.XDataSet

        [Guid(FazendaSVC.sCID)]
        public  interface XService : XIBaseService
        {
            new XDataSet DataSet
            {
                get;
            }
            new XTuple NewTuple(Object pPKValue = null);
             IEnumerable<XTuple> Tuples
            {
                get;
            }
             XTuple Current
            {
                get;
            }
            new XDataSet Get(XServiceData pData);
             XDataSet Get(params Object[] pWhere);
        }
        [XRegister(typeof(_Service), _Service.sCID, typeof(FazendaSVC))]
        protected class _Service : Service<FazendaSVC, XDataSet, XTuple>
        {
            public const String sCID = "86D34C13-5C25-4AE6-822C-8D9709A5563F";
            public Guid gCID = new Guid(sCID);
        }

        public class Service<TModel, TDataSet, TTuple> : XBaseService<FazendaSVC, XDataSet, XTuple>, XService
             where TModel : FazendaSVC, new()
             where TDataSet : XDataSet, new()
             where TTuple : XTuple
        {
            XDataSet XService.DataSet => (XDataSet)DataSet;
            XTuple XService.NewTuple(Object pPKValue)
            {
                return (XTuple)NewTuple(pPKValue);
            }
            public new XDataTuple NewTuple(Object pPKValue = null)
            {
                return (XTuple)base.NewTuple(pPKValue);
            }
            IEnumerable<XTuple> XService.Tuples => (IEnumerable<XTuple>)Tuples;
            XTuple XService.Current => (XTuple )Current;
            XDataSet XService.Get(XServiceData pData)
            {
                return (XDataSet)Get(pData);
            }
            XDataSet XService.Get(params Object[] pWhere)
            {
                return (XDataSet)Get(pWhere);
            }
            public Service()
            {
                ID = gCID;
            }
        }
    }

}