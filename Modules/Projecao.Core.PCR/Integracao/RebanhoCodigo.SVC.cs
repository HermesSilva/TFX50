//<auto-generated/>
using System;
using System.Linq;
using Newtonsoft.Json;
using TFX.Core.Objects;
using TFX.Core.Model.Data;
using TFX.Core.Model.Cache;
using TFX.Core.Reflections;
using TFX.Core.Service.Job;
using TFX.Core.Service.SVC;
using Projecao.Core.ISE.DB;
using Projecao.Core.PCR.DB;
using TFX.Core.Model.DIC.SVC;
using TFX.Core.Model.DIC.ORM;
using TFX.Core.Model.Services;
using TFX.Core.Model.DIC.Types;
using TFX.Core.Model.Interfaces;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Projecao.Core.PCR.Integracao
{
    [XRegister(typeof(RebanhoCodigoSVC), sCID)]
    [XDASESource(@"D:\Tootega\Source\TFX20\Modules\Projecao.Core.PCR\Projecao.Core.PCR.csproj", @"D:\Tootega\Source\TFX20\Modules\Projecao.Core.PCR\Integracao\RebanhoCodigo.dssvc")]
    public class RebanhoCodigoSVC : XSVCModel
    {
        public const String sCID = "7CBC9D70-37FB-40C3-80DE-3CDB9C9E8DAA";
        public static Guid gCID = new Guid(sCID);
        public static XSVCReference PCRxAnimal_PCRxAnimalID_ISExCodigo_ISExItemID; // PCRxAnimal.PCRxAnimalID --> ISExCodigo.ISExItemID

        #region xISExCodigo 
        public class xISExCodigo : XSVCTable
        {

            public static Guid gCID => new Guid("548AAA3A-BBD4-4413-9938-EF6F2FDF6341");

            public xISExCodigo()
            {
                Name = "ISExCodigo";
                Alias = "ISExCodigo";
                ID = gCID;
                ParentID =  global::Projecao.Core.ISE.DB.ISEx.ISExCodigo.gCID;

                Items.Add(ISExCodigoID, ISExCodigoID.ID);
                ISExCodigoID.Owner = this;
                ISExCodigoID.OwnerID = ID;
                ISExCodigoID.TableName = Name;
                ISExCodigoID.Alias = "ISExCodigoID";
                Items.Add(ISExCodigoTipoID, ISExCodigoTipoID.ID);
                ISExCodigoTipoID.Owner = this;
                ISExCodigoTipoID.OwnerID = ID;
                ISExCodigoTipoID.TableName = Name;
                ISExCodigoTipoID.Alias = "ISExCodigoTipoID";
                Items.Add(Numero, Numero.ID);
                Numero.Owner = this;
                Numero.OwnerID = ID;
                Numero.TableName = Name;
                Numero.Alias = "Numero";
                Items.Add(ISExItemID, ISExItemID.ID);
                ISExItemID.Owner = this;
                ISExItemID.OwnerID = ID;
                ISExItemID.TableName = Name;
                ISExItemID.Alias = "ISExItemID";
                Items.Add(NumeroCurto, NumeroCurto.ID);
                NumeroCurto.Owner = this;
                NumeroCurto.OwnerID = ID;
                NumeroCurto.TableName = Name;
                NumeroCurto.Alias = "NumeroCurto";
            }

            public static XORMPKField ISExCodigoID = new XORMPKField(global::Projecao.Core.ISE.DB.ISEx.ISExCodigo.ISExCodigoID, new Guid("21D40151-C1C8-4B00-9A89-AAB56B6B1025"), "ISExCodigoID", "Tipo de Código");
            public static XORMFKField ISExCodigoTipoID = new XORMFKField(global::Projecao.Core.ISE.DB.ISEx.ISExCodigo.ISExCodigoTipoID, new Guid("7D7B9163-06D9-48E2-80AB-3658929AE45F"), "ISExCodigoTipoID", "Tipo de Código");
            public static XORMField Numero = new XORMField(global::Projecao.Core.ISE.DB.ISEx.ISExCodigo.Numero, new Guid("FA295F71-0D7C-414E-8885-C6BB4AC157CB"), "Numero", "Número");
            public static XORMFKField ISExItemID = new XORMFKField(global::Projecao.Core.ISE.DB.ISEx.ISExCodigo.ISExItemID, new Guid("92BCEE55-9887-42F2-8942-AC5869A11BC0"), "ISExItemID", "Item");
            public static XORMField NumeroCurto = new XORMField(global::Projecao.Core.ISE.DB.ISEx.ISExCodigo.NumeroCurto, new Guid("DC63289C-E459-4FF2-90BB-984CDE5A8E76"), "NumeroCurto", "Número Curto");
        }
        #endregion xISExCodigo 


        #region xPCRxAnimal 
        public class xPCRxAnimal : XSVCTable
        {

            public static Guid gCID => new Guid("72E4F261-682B-4024-BFD8-B205CA600BE5");

            public xPCRxAnimal()
            {
                Name = "PCRxAnimal";
                Alias = "PCRxAnimal";
                ID = gCID;
                ParentID =  global::Projecao.Core.PCR.DB.PCRx.PCRxAnimal.gCID;

                Items.Add(PCRxAnimalID, PCRxAnimalID.ID);
                PCRxAnimalID.Owner = this;
                PCRxAnimalID.OwnerID = ID;
                PCRxAnimalID.TableName = Name;
                Items.Add(ERPxGeneroID, ERPxGeneroID.ID);
                ERPxGeneroID.Owner = this;
                ERPxGeneroID.OwnerID = ID;
                ERPxGeneroID.TableName = Name;
                Items.Add(PCRxRacaID, PCRxRacaID.ID);
                PCRxRacaID.Owner = this;
                PCRxRacaID.OwnerID = ID;
                PCRxRacaID.TableName = Name;
                Items.Add(PCRxAnimalFaseID, PCRxAnimalFaseID.ID);
                PCRxAnimalFaseID.Owner = this;
                PCRxAnimalFaseID.OwnerID = ID;
                PCRxAnimalFaseID.TableName = Name;
                Items.Add(Nascimento, Nascimento.ID);
                Nascimento.Owner = this;
                Nascimento.OwnerID = ID;
                Nascimento.TableName = Name;
                Items.Add(SYSxEmpresaID, SYSxEmpresaID.ID);
                SYSxEmpresaID.Owner = this;
                SYSxEmpresaID.OwnerID = ID;
                SYSxEmpresaID.TableName = Name;
                Items.Add(PCRxAnimalEstadoID, PCRxAnimalEstadoID.ID);
                PCRxAnimalEstadoID.Owner = this;
                PCRxAnimalEstadoID.OwnerID = ID;
                PCRxAnimalEstadoID.TableName = Name;
                Items.Add(NumeroPartos, NumeroPartos.ID);
                NumeroPartos.Owner = this;
                NumeroPartos.OwnerID = ID;
                NumeroPartos.TableName = Name;
                Items.Add(PCRxEventoReprodutivoID, PCRxEventoReprodutivoID.ID);
                PCRxEventoReprodutivoID.Owner = this;
                PCRxEventoReprodutivoID.OwnerID = ID;
                PCRxEventoReprodutivoID.TableName = Name;
                Items.Add(PCRxAnimalLoteID, PCRxAnimalLoteID.ID);
                PCRxAnimalLoteID.Owner = this;
                PCRxAnimalLoteID.OwnerID = ID;
                PCRxAnimalLoteID.TableName = Name;
                Items.Add(PCRxIATFFaseID, PCRxIATFFaseID.ID);
                PCRxIATFFaseID.Owner = this;
                PCRxIATFFaseID.OwnerID = ID;
                PCRxIATFFaseID.TableName = Name;
            }

            public static XORMFaceField PCRxAnimalID = new XORMFaceField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimal.PCRxAnimalID, new Guid("CD9F6FF4-AAC9-44E0-BBA0-0E3DA0F137BC"), "PCRxAnimalID", "Animal");
            public static XORMFKField ERPxGeneroID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimal.ERPxGeneroID, new Guid("E65434F2-84C8-4828-BD8C-1DEFCA7A7F64"), "ERPxGeneroID", "Sexo");
            public static XORMFKField PCRxRacaID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimal.PCRxRacaID, new Guid("E7B2A088-39CF-4CAB-829E-0CED1BABF421"), "PCRxRacaID", "Raça");
            public static XORMFKField PCRxAnimalFaseID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimal.PCRxAnimalFaseID, new Guid("A38C12F0-68AB-45C3-8FE3-2BC908FBEF00"), "PCRxAnimalFaseID", "Fase do Animal");
            public static XORMDateField Nascimento = new XORMDateField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimal.Nascimento, new Guid("99D635DB-04D8-4876-90AF-FAF7F01DF854"), "Nascimento", "Nascimento");
            public static XORMFKField SYSxEmpresaID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimal.SYSxEmpresaID, new Guid("960AD272-CD18-429B-A8E0-39B617D209BE"), "SYSxEmpresaID", "Empresa");
            public static XORMFKField PCRxAnimalEstadoID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimal.PCRxAnimalEstadoID, new Guid("53C0B7C6-BE10-4EB0-BF19-9F163086D452"), "PCRxAnimalEstadoID", "Estado");
            public static XORMField NumeroPartos = new XORMField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimal.NumeroPartos, new Guid("0B8790B5-9800-4646-A4AB-F34675CB162F"), "NumeroPartos", "Número de Partos");
            public static XORMFKField PCRxEventoReprodutivoID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimal.PCRxEventoReprodutivoID, new Guid("46A9448C-3112-442D-B1B0-685C77972997"), "PCRxEventoReprodutivoID", "Eventos de Animais");
            public static XORMFKField PCRxAnimalLoteID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimal.PCRxAnimalLoteID, new Guid("A2B420CA-C699-4A09-9794-E9112A5071FF"), "PCRxAnimalLoteID", "Lote de Animais");
            public static XORMFKField PCRxIATFFaseID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimal.PCRxIATFFaseID, new Guid("2E0DA3E4-7C95-45E9-8767-35EECA9DEE37"), "PCRxIATFFaseID", "Fases da IATF");
        }
        #endregion xPCRxAnimal 


        public xISExCodigo ISExCodigo;
        public xPCRxAnimal PCRxAnimal;

        public RebanhoCodigoSVC()
        {
            TupleType = typeof(RebanhoCodigoSVC.XTuple);
            DataSetType = typeof(RebanhoCodigoSVC.XDataSet);
            ServiceRuleCID = new Guid("46D48944-05D8-40BF-8AE2-82F45CB321B6");
            OnlyActives = false;
            Actions = XSVCAction.All;
            Type = XServiceType.Default;
            ID = new Guid("7CBC9D70-37FB-40C3-80DE-3CDB9C9E8DAA");
            Name = "RebanhoCodigo";
            Title = "";
            IsCacheable = false;
            CompanyControl = false;
            IsJob = false;
            AutoLoad = true;
            FreeForUsers = false;
            ServerSideNewRecord = false;
            UseDistinct = false;
            JobType = XJobType.Default;
            CanExport = true;
            ModuleID = new Guid("02C4E7C5-1B4F-43DB-AC6C-CD36BBE428B7");
            Rights = new Int16[] { 1 }; 
            IsReadOnly = true;
            ClientScript = "Projecao.Core.PCR.js";
            DataSetFields = new Guid[] { xISExCodigo.NumeroCurto.ID, xISExCodigo.Numero.ID, xISExCodigo.ISExCodigoTipoID.ID, xISExCodigo.ISExItemID.ID, xISExCodigo.ISExCodigoID.ID };
            PKField = xISExCodigo.ISExCodigoID.ID;
            ConfigTableID = new Guid("8477EAA3-2114-4287-AD0B-C1C0CD224BC1");
            MasterRuleCID = new Guid("46D48944-05D8-40BF-8AE2-82F45CB321B6");
            ISExCodigo = new xISExCodigo();
            ISExCodigo.IsReadOnly = true;
            AddTable(ISExCodigo);
            PCRxAnimal = new xPCRxAnimal();
            PCRxAnimal.IsReadOnly = true;
            AddTable(PCRxAnimal);
            MasterTableID = ISExCodigo.ID;
            PCRxAnimal_PCRxAnimalID_ISExCodigo_ISExItemID = AddReference(new XSVCReference(new Guid("5109946C-7B1F-4D2C-9D1E-AD917720545F"), "FK_5109946C7B1F4D2C9D1EAD917720545F", RebanhoCodigoSVC.xPCRxAnimal.gCID, xPCRxAnimal.PCRxAnimalID.ID, RebanhoCodigoSVC.xISExCodigo.gCID, xISExCodigo.ISExItemID.ID, XJoinType.Inner)); // PCRxAnimal.PCRxAnimalID --> ISExCodigo.ISExItemID
            xISExCodigo.ISExCodigoID.IsReadOnly = true;
            xISExCodigo.ISExCodigoID.IsDataField = true;
            xISExCodigo.ISExCodigoID.AllowEmpty = true;
            xISExCodigo.ISExCodigoTipoID.IsReadOnly = true;
            xISExCodigo.ISExCodigoTipoID.IsDataField = true;
            xISExCodigo.ISExCodigoTipoID.AllowEmpty = true;
            xISExCodigo.ISExItemID.IsReadOnly = true;
            xISExCodigo.ISExItemID.IsDataField = true;
            xISExCodigo.ISExItemID.AllowEmpty = true;
            xISExCodigo.Numero.IsReadOnly = true;
            xISExCodigo.Numero.Length = 36;
            xISExCodigo.Numero.IsDataField = true;
            xISExCodigo.Numero.AllowEmpty = true;
            xISExCodigo.NumeroCurto.IsReadOnly = true;
            xISExCodigo.NumeroCurto.Length = 10;
            xISExCodigo.NumeroCurto.IsDataField = true;
            xISExCodigo.NumeroCurto.AllowEmpty = true;
        }

        #region XFields

        public class XFields
        {
        public XORMField ISExCodigoID => xISExCodigo.ISExCodigoID;
        public XORMField ISExCodigoTipoID => xISExCodigo.ISExCodigoTipoID;
        public XORMField ISExItemID => xISExCodigo.ISExItemID;
        public XORMField Numero => xISExCodigo.Numero;
        public XORMField NumeroCurto => xISExCodigo.NumeroCurto;
        }
        #endregion XFields
        #region RebanhoCodigoSVC.XTuple

        public  class XTuple : XDataTuple
        {

            public XTuple()
            {
            }

            public XTuple(Object[] pSource)
                : base(pSource)
            {
            }

            public XTuple(Int32 pColCount)
               : this(new Object[pColCount])
            {
            }

            public readonly XFields Fields = new XFields();

            #nullable enable

        public Guid ISExCodigoID
        {
            get
            {
                return (Guid)Value[RebanhoCodigoSVC.xISExCodigo.ISExCodigoID.ID];
            }
            set
            {
                Value[RebanhoCodigoSVC.xISExCodigo.ISExCodigoID.ID] = value;
            }
        }
        public Guid? oISExCodigoID
        {
            get
            {
                GetOldValue(RebanhoCodigoSVC.xISExCodigo.ISExCodigoID, out Object ovlr);
                return (Guid?)ovlr;
            }
        }

        public Int16 ISExCodigoTipoID
        {
            get
            {
                return (Int16)Value[RebanhoCodigoSVC.xISExCodigo.ISExCodigoTipoID.ID];
            }
            set
            {
                Value[RebanhoCodigoSVC.xISExCodigo.ISExCodigoTipoID.ID] = value;
            }
        }
        public Int16? oISExCodigoTipoID
        {
            get
            {
                GetOldValue(RebanhoCodigoSVC.xISExCodigo.ISExCodigoTipoID, out Object ovlr);
                return (Int16?)ovlr;
            }
        }

        public Guid ISExItemID
        {
            get
            {
                return (Guid)Value[RebanhoCodigoSVC.xISExCodigo.ISExItemID.ID];
            }
            set
            {
                Value[RebanhoCodigoSVC.xISExCodigo.ISExItemID.ID] = value;
            }
        }
        public Guid? oISExItemID
        {
            get
            {
                GetOldValue(RebanhoCodigoSVC.xISExCodigo.ISExItemID, out Object ovlr);
                return (Guid?)ovlr;
            }
        }

        public String Numero
        {
            get
            {
                return (String)Value[RebanhoCodigoSVC.xISExCodigo.Numero.ID];
            }
            set
            {
                Value[RebanhoCodigoSVC.xISExCodigo.Numero.ID] = value;
            }
        }
        public String? oNumero
        {
            get
            {
                GetOldValue(RebanhoCodigoSVC.xISExCodigo.Numero, out Object ovlr);
                return (String?)ovlr;
            }
        }

        public String NumeroCurto
        {
            get
            {
                return (String)Value[RebanhoCodigoSVC.xISExCodigo.NumeroCurto.ID];
            }
            set
            {
                Value[RebanhoCodigoSVC.xISExCodigo.NumeroCurto.ID] = value;
            }
        }
        public String? oNumeroCurto
        {
            get
            {
                GetOldValue(RebanhoCodigoSVC.xISExCodigo.NumeroCurto, out Object ovlr);
                return (String?)ovlr;
            }
        }

            #nullable disable
        }
        #endregion RebanhoCodigoSVC.XTuple

        #region RebanhoCodigoSVC.XRule
        public abstract class XRule : XServiceRule<RebanhoCodigoSVC.XDataSet, RebanhoCodigoSVC, RebanhoCodigoSVC.XTuple>
        {
        }
        #endregion RebanhoCodigoSVC.XRule

        #region RebanhoCodigoSVC.XDataSet

        public class XDataSet : XDataSet<RebanhoCodigoSVC.XTuple>
        {
            public XDataSet()
            {
                DataSetType = typeof(RebanhoCodigoSVC.XDataSet);
            }
        }

        public class XDataSet<T> : XServiceDataSet<RebanhoCodigoSVC.XTuple> where T : XDataTuple
        {

            public Guid ISExCodigoID => RebanhoCodigoSVC.xISExCodigo.ISExCodigoID.ID;
            public Guid ISExCodigoTipoID => RebanhoCodigoSVC.xISExCodigo.ISExCodigoTipoID.ID;
            public Guid ISExItemID => RebanhoCodigoSVC.xISExCodigo.ISExItemID.ID;
            public Guid Numero => RebanhoCodigoSVC.xISExCodigo.Numero.ID;
            public Guid NumeroCurto => RebanhoCodigoSVC.xISExCodigo.NumeroCurto.ID;

            public XDataSet()
            {
                DataSetType = typeof(RebanhoCodigoSVC.XDataSet);
            }

        }
        #endregion RebanhoCodigoSVC.XDataSet

        [Guid(RebanhoCodigoSVC.sCID)]
        public  interface XService : XIBaseService
        {
            new XDataSet DataSet
            {
                get;
            }
            new XTuple NewTuple(Object pPKValue = null);
             IEnumerable<XTuple> Tuples
            {
                get;
            }
             XTuple Current
            {
                get;
            }
            new XDataSet Get(XServiceData pData);
             XDataSet Get(params Object[] pWhere);
        }
        [XRegister(typeof(_Service), _Service.sCID, typeof(RebanhoCodigoSVC))]
        protected class _Service : Service<RebanhoCodigoSVC, XDataSet, XTuple>
        {
            public const String sCID = "C744ED9C-388E-4B66-8F79-B3B7410E0E0C";
            public Guid gCID = new Guid(sCID);
        }

        public class Service<TModel, TDataSet, TTuple> : XBaseService<RebanhoCodigoSVC, XDataSet, XTuple>, XService
             where TModel : RebanhoCodigoSVC, new()
             where TDataSet : XDataSet, new()
             where TTuple : XTuple
        {
            XDataSet XService.DataSet => (XDataSet)DataSet;
            XTuple XService.NewTuple(Object pPKValue)
            {
                return (XTuple)NewTuple(pPKValue);
            }
            public new XDataTuple NewTuple(Object pPKValue = null)
            {
                return (XTuple)base.NewTuple(pPKValue);
            }
            IEnumerable<XTuple> XService.Tuples => (IEnumerable<XTuple>)Tuples;
            XTuple XService.Current => (XTuple )Current;
            XDataSet XService.Get(XServiceData pData)
            {
                return (XDataSet)Get(pData);
            }
            XDataSet XService.Get(params Object[] pWhere)
            {
                return (XDataSet)Get(pWhere);
            }
            public Service()
            {
                ID = gCID;
            }
        }
    }

}