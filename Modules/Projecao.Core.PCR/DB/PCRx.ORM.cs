//<auto-generated/>
using System;
using System.Linq;
using TFX.Core.Data;
using TFX.Core.Cache;
using TFX.Core.Model.DIC;
using TFX.Core.Model.Data;
using TFX.Core.Model.Cache;
using TFX.Core.Reflections;
using TFX.Core.Service.SVC;
using Projecao.Core.ISE.DB;
using Projecao.Core.ERP.DB;
using Projecao.Core.NTR.DB;
using Projecao.Core.CEP.DB;
using TFX.Core.Model.DIC.ORM;
using TFX.Core.Service.Apps;
using TFX.Core.Model.DIC.Types;
using TFX.Core.Model.Interfaces;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Projecao.Core.PCR.DB
{
    [XRegister(typeof(PCRx), "6DBB562A-5705-4031-BFEF-ED55908FB5F4")]
    public class PCRx : XModelDictionary
    {
        #region ERPxGenero

        [XRegister(typeof(ERPxGenero), sCID, typeof(global::Projecao.Core.ERP.DB.ERPx.ERPxGenero))]
        public class ERPxGenero : XORMShadowTable
        {
            public const String sCID = "52394B1F-F6D4-4D9D-831E-BD8E1720A35E";
            #region XDefault
            public class XDefault : global::Projecao.Core.ERP.DB.ERPx.ERPxGenero.XDefault
            {
                public static String sTouro => _Titles[(Int16)3];
                public const Int16 Touro = (Int16)3;
                private static Dictionary<Int16, String> _Titles = new Dictionary<Int16, String>()
                {
                [(Int16)3] = "Touro"
                };
                public new static String GetTitle(Int16 pIndex)
                {
                    if (!_Titles.ContainsKey(pIndex))
                        return global::Projecao.Core.ERP.DB.ERPx.ERPxGenero.XDefault.GetTitle(pIndex);
                    return _Titles[pIndex];
                }
            }
            #endregion XDefault
            public override void LoadDefaultData(XDataSet pDataSet)
            {
                pDataSet.AddDefaultTuple(new global::Projecao.Core.ERP.DB.ERPx.ERPxGenero.XTuple(new Object[] {@"Touro", (Int16)3, true, @"Macho"}), (Int16)3);
            }
        }

        #endregion ERPxGenero

        #region ERPxPessoaFisicaTipo

        [XRegister(typeof(ERPxPessoaFisicaTipo), sCID, typeof(global::Projecao.Core.ERP.DB.ERPx.ERPxPessoaFisicaTipo))]
        public class ERPxPessoaFisicaTipo : XORMShadowTable
        {
            public const String sCID = "9F7D6131-E2FA-4921-9A59-AFB085F85E13";
            #region XDefault
            public class XDefault : global::Projecao.Core.ERP.DB.ERPx.ERPxPessoaFisicaTipo.XDefault
            {
                public static String sVeterinario => _Titles[(Int16)2];
                public const Int16 Veterinario = (Int16)2;
                private static Dictionary<Int16, String> _Titles = new Dictionary<Int16, String>()
                {
                [(Int16)2] = "Veterinário"
                };
                public new static String GetTitle(Int16 pIndex)
                {
                    if (!_Titles.ContainsKey(pIndex))
                        return global::Projecao.Core.ERP.DB.ERPx.ERPxPessoaFisicaTipo.XDefault.GetTitle(pIndex);
                    return _Titles[pIndex];
                }
            }
            #endregion XDefault
            public override void LoadDefaultData(XDataSet pDataSet)
            {
                pDataSet.AddDefaultTuple(new global::Projecao.Core.ERP.DB.ERPx.ERPxPessoaFisicaTipo.XTuple(new Object[] {(Int16)2, @"Veterinário"}), (Int16)2);
            }
        }

        #endregion ERPxPessoaFisicaTipo

        #region ISExCategoria

        [XRegister(typeof(ISExCategoria), sCID, typeof(global::Projecao.Core.ISE.DB.ISEx.ISExCategoria))]
        public class ISExCategoria : XORMShadowTable
        {
            public const String sCID = "12A584FC-A23E-4B75-9243-5779383689C4";
            #region XDefault
            public class XDefault : global::Projecao.Core.ISE.DB.ISEx.ISExCategoria.XDefault
            {
                public static String sGado_em_Pe => _Titles[(Int16)101];
                public const Int16 Gado_em_Pe = (Int16)101;
                public static String sImplante_para_IATF => _Titles[(Int16)104];
                public const Int16 Implante_para_IATF = (Int16)104;
                public static String sHormonio_para_AITF => _Titles[(Int16)100];
                public const Int16 Hormonio_para_AITF = (Int16)100;
                public static String sVacina_Bovina => _Titles[(Int16)103];
                public const Int16 Vacina_Bovina = (Int16)103;
                public static String sMedicamento_para_Bovino => _Titles[(Int16)105];
                public const Int16 Medicamento_para_Bovino = (Int16)105;
                public static String sReprodutor_Bovino => _Titles[(Int16)102];
                public const Int16 Reprodutor_Bovino = (Int16)102;
                private static Dictionary<Int16, String> _Titles = new Dictionary<Int16, String>()
                {
                [(Int16)101] = "Gado em Pé",
                [(Int16)104] = "Implante para IATF",
                [(Int16)100] = "Hormônio para AITF",
                [(Int16)103] = "Vacina Bovina",
                [(Int16)105] = "Medicamento para Bovino",
                [(Int16)102] = "Reprodutor Bovino"
                };
                public new static String GetTitle(Int16 pIndex)
                {
                    if (!_Titles.ContainsKey(pIndex))
                        return global::Projecao.Core.ISE.DB.ISEx.ISExCategoria.XDefault.GetTitle(pIndex);
                    return _Titles[pIndex];
                }
            }
            #endregion XDefault
            public override void LoadDefaultData(XDataSet pDataSet)
            {
                pDataSet.AddDefaultTuple(new global::Projecao.Core.ISE.DB.ISEx.ISExCategoria.XTuple(new Object[] {(Int16)101, @"Gado em Pé"}), (Int16)101);
                pDataSet.AddDefaultTuple(new global::Projecao.Core.ISE.DB.ISEx.ISExCategoria.XTuple(new Object[] {(Int16)104, @"Implante para IATF"}), (Int16)104);
                pDataSet.AddDefaultTuple(new global::Projecao.Core.ISE.DB.ISEx.ISExCategoria.XTuple(new Object[] {(Int16)100, @"Hormônio para AITF"}), (Int16)100);
                pDataSet.AddDefaultTuple(new global::Projecao.Core.ISE.DB.ISEx.ISExCategoria.XTuple(new Object[] {(Int16)103, @"Vacina Bovina"}), (Int16)103);
                pDataSet.AddDefaultTuple(new global::Projecao.Core.ISE.DB.ISEx.ISExCategoria.XTuple(new Object[] {(Int16)105, @"Medicamento para Bovino"}), (Int16)105);
                pDataSet.AddDefaultTuple(new global::Projecao.Core.ISE.DB.ISEx.ISExCategoria.XTuple(new Object[] {(Int16)102, @"Reprodutor Bovino"}), (Int16)102);
            }
        }

        #endregion ISExCategoria

        #region ISExCodigoTipo

        [XRegister(typeof(ISExCodigoTipo), sCID, typeof(global::Projecao.Core.ISE.DB.ISEx.ISExCodigoTipo))]
        public class ISExCodigoTipo : XORMShadowTable
        {
            public const String sCID = "EE57EEC3-1E46-4DC8-A58E-027992DCDC32";
            #region XDefault
            public class XDefault
            {
                public static String sBrinco_VisualRFID => _Titles[(Int16)10];
                public const Int16 Brinco_VisualRFID = (Int16)10;
                private static Dictionary<Int16, String> _Titles = new Dictionary<Int16, String>()
                {
                [(Int16)10] = "Brinco Visual/RFID"
                };
                public static String GetTitle(Int16 pIndex)
                {
                    if (!_Titles.ContainsKey(pIndex))
                        return "";
                    return _Titles[pIndex];
                }
            }
            #endregion XDefault
            public override void LoadDefaultData(XDataSet pDataSet)
            {
                pDataSet.AddDefaultTuple(new global::Projecao.Core.ISE.DB.ISEx.ISExCodigoTipo.XTuple(new Object[] {(Int16)10, @"Brinco Visual/RFID"}), (Int16)10);
            }
        }

        #endregion ISExCodigoTipo

        #region PCRxAnimal

        [XRegister(typeof(PCRxAnimal), sCID)]
        public class PCRxAnimal : XORMTable
        {
            public const String sCID = "01BC341A-0142-4C60-87A7-9228AD3A73E9";
            public static Guid gCID = new Guid(sCID);
            #region XDefault
            public class XDefault : global::Projecao.Core.ISE.DB.ISEx.ISExItem.XDefault
            {
            }
            #endregion XDefault
            #region XTuple
            public class XTuple : XDataTuple
            {
                public XTuple()
                {
                }
                public XTuple(Object[] pSource)
                    : base(pSource)
                {
                }
                public XTuple(Int32 pColCount)
                   : this(new Object[pColCount])
                {
                }
                #nullable enable
                public Int16 ERPxGeneroID
                {
                    get
                    {
                        return (Int16)Value[PCRxAnimal.ERPxGeneroID];
                    }
                    set
                    {
                        this[PCRxAnimal.ERPxGeneroID] = value;
                    }
                }
                public Int16? oERPxGeneroID
                {
                    get
                    {
                        GetOldValue(PCRxAnimal.ERPxGeneroID, out Object ovlr);
                        return (Int16?)ovlr;
                    }
                }
                public DateTime Nascimento
                {
                    get
                    {
                        return (DateTime)Value[PCRxAnimal.Nascimento];
                    }
                    set
                    {
                        this[PCRxAnimal.Nascimento] = value;
                    }
                }
                public DateTime? oNascimento
                {
                    get
                    {
                        GetOldValue(PCRxAnimal.Nascimento, out Object ovlr);
                        return (DateTime?)ovlr;
                    }
                }
                public Int32 NumeroPartos
                {
                    get
                    {
                        return (Int32)Value[PCRxAnimal.NumeroPartos];
                    }
                    set
                    {
                        this[PCRxAnimal.NumeroPartos] = value;
                    }
                }
                public Int32? oNumeroPartos
                {
                    get
                    {
                        GetOldValue(PCRxAnimal.NumeroPartos, out Object ovlr);
                        return (Int32?)ovlr;
                    }
                }
                public Int16 PCRxAnimalEstadoID
                {
                    get
                    {
                        return (Int16)Value[PCRxAnimal.PCRxAnimalEstadoID];
                    }
                    set
                    {
                        this[PCRxAnimal.PCRxAnimalEstadoID] = value;
                    }
                }
                public Int16? oPCRxAnimalEstadoID
                {
                    get
                    {
                        GetOldValue(PCRxAnimal.PCRxAnimalEstadoID, out Object ovlr);
                        return (Int16?)ovlr;
                    }
                }
                public Int16 PCRxAnimalFaseID
                {
                    get
                    {
                        return (Int16)Value[PCRxAnimal.PCRxAnimalFaseID];
                    }
                    set
                    {
                        this[PCRxAnimal.PCRxAnimalFaseID] = value;
                    }
                }
                public Int16? oPCRxAnimalFaseID
                {
                    get
                    {
                        GetOldValue(PCRxAnimal.PCRxAnimalFaseID, out Object ovlr);
                        return (Int16?)ovlr;
                    }
                }
                public Guid PCRxAnimalID
                {
                    get
                    {
                        return (Guid)Value[PCRxAnimal.PCRxAnimalID];
                    }
                    set
                    {
                        this[PCRxAnimal.PCRxAnimalID] = value;
                    }
                }
                public Guid? oPCRxAnimalID
                {
                    get
                    {
                        GetOldValue(PCRxAnimal.PCRxAnimalID, out Object ovlr);
                        return (Guid?)ovlr;
                    }
                }
                public Guid PCRxAnimalLoteID
                {
                    get
                    {
                        return (Guid)Value[PCRxAnimal.PCRxAnimalLoteID];
                    }
                    set
                    {
                        this[PCRxAnimal.PCRxAnimalLoteID] = value;
                    }
                }
                public Guid? oPCRxAnimalLoteID
                {
                    get
                    {
                        GetOldValue(PCRxAnimal.PCRxAnimalLoteID, out Object ovlr);
                        return (Guid?)ovlr;
                    }
                }
                public Guid PCRxEventoReprodutivoID
                {
                    get
                    {
                        return (Guid)Value[PCRxAnimal.PCRxEventoReprodutivoID];
                    }
                    set
                    {
                        this[PCRxAnimal.PCRxEventoReprodutivoID] = value;
                    }
                }
                public Guid? oPCRxEventoReprodutivoID
                {
                    get
                    {
                        GetOldValue(PCRxAnimal.PCRxEventoReprodutivoID, out Object ovlr);
                        return (Guid?)ovlr;
                    }
                }
                public Guid PCRxIATFFaseID
                {
                    get
                    {
                        return (Guid)Value[PCRxAnimal.PCRxIATFFaseID];
                    }
                    set
                    {
                        this[PCRxAnimal.PCRxIATFFaseID] = value;
                    }
                }
                public Guid? oPCRxIATFFaseID
                {
                    get
                    {
                        GetOldValue(PCRxAnimal.PCRxIATFFaseID, out Object ovlr);
                        return (Guid?)ovlr;
                    }
                }
                public Int16 PCRxRacaID
                {
                    get
                    {
                        return (Int16)Value[PCRxAnimal.PCRxRacaID];
                    }
                    set
                    {
                        this[PCRxAnimal.PCRxRacaID] = value;
                    }
                }
                public Int16? oPCRxRacaID
                {
                    get
                    {
                        GetOldValue(PCRxAnimal.PCRxRacaID, out Object ovlr);
                        return (Int16?)ovlr;
                    }
                }
                public Guid SYSxEmpresaID
                {
                    get
                    {
                        return (Guid)Value[PCRxAnimal.SYSxEmpresaID];
                    }
                    set
                    {
                        this[PCRxAnimal.SYSxEmpresaID] = value;
                    }
                }
                public Guid? oSYSxEmpresaID
                {
                    get
                    {
                        GetOldValue(PCRxAnimal.SYSxEmpresaID, out Object ovlr);
                        return (Guid?)ovlr;
                    }
                }
                #nullable disable
            }
            #endregion XTuple
            private static PCRxAnimal _Instance;
            public static PCRxAnimal Instance
            {
                get
                {
                    if (_Instance == null)
                        _Instance = XTypeCache.CreateInstanceNP<PCRxAnimal>(gCID);
                    return _Instance;
                }
            }
            public static XORMFKField ERPxGeneroID = new XORMFKField(new Guid("98658AB8-3A24-4D01-9EE4-D94FCC26CBEC"), "ERPxGeneroID", "Sexo", XInt16.CID, 0, 0, false, gCID, (Int16)0);
            public static XORMDateField Nascimento = new XORMDateField(new Guid("9ACE52AD-BD7C-489D-9DED-89B628B9181F"), "Nascimento", "Nascimento", XDate.CID, 0, 0, false, gCID, TFX.Core.XDefault.NullDateTime);
            public static XORMField NumeroPartos = new XORMField(new Guid("BE81865F-4FEE-4D03-8DB7-6E2DB47F6ED8"), "NumeroPartos", "Número de Partos", XInt32.CID, 0, 0, false, gCID, 0);
            public static XORMFKField PCRxAnimalEstadoID = new XORMFKField(new Guid("518E003B-6FE3-492D-A7B6-9E18BBBE1418"), "PCRxAnimalEstadoID", "Estado", XInt16.CID, 0, 0, false, gCID, (Int16)0);
            public static XORMFKField PCRxAnimalFaseID = new XORMFKField(new Guid("6F750833-607D-47FF-9444-708A003695FB"), "PCRxAnimalFaseID", "Fase do Animal", XInt16.CID, 0, 0, false, gCID, (Int16)0);
            public static XORMPKField PCRxAnimalID = new XORMPKField(new Guid("A349F727-2863-4383-871B-30647E958805"), "PCRxAnimalID", "Animal", XGuid.CID, 0, 0, false, gCID, new Guid("00000000-0000-0000-0000-000000000000"));
            public static XORMFKField PCRxAnimalLoteID = new XORMFKField(new Guid("E42FECD9-F63C-45DA-A2C2-8AAB816A63ED"), "PCRxAnimalLoteID", "Lote de Animais", XGuid.CID, 0, 0, false, gCID, new Guid("00000000-0000-0000-0000-000000000000"));
            public static XORMFKField PCRxEventoReprodutivoID = new XORMFKField(new Guid("0AC8EA11-CA49-4C95-B3E4-F0FFA82935FC"), "PCRxEventoReprodutivoID", "Eventos de Animais", XGuid.CID, 0, 0, false, gCID, new Guid("00000000-0000-0000-0000-000000000000"));
            public static XORMFKField PCRxIATFFaseID = new XORMFKField(new Guid("8997E5CD-B44D-4E76-AB4F-DAD4E876BAF2"), "PCRxIATFFaseID", "Fases da IATF", XGuid.CID, 0, 0, false, gCID, new Guid("00000000-0000-0000-0000-000000000000"));
            public static XORMFKField PCRxRacaID = new XORMFKField(new Guid("86093D1B-5A1D-4929-933B-9D1AAB862402"), "PCRxRacaID", "Raça", XInt16.CID, 0, 0, false, gCID, (Int16)0);
            public static XORMFKField SYSxEmpresaID = new XORMFKField(new Guid("D5EAFF29-341E-4C45-AC48-59D0BB206442"), "SYSxEmpresaID", "Empresa", XGuid.CID, 0, 0, false, gCID, new Guid("00000000-0000-0000-0000-000000000000"));
            public static readonly XORMReference FK_8CB6D8B2B0DF4A719AB12E7CF8AE0EE4 = new XORMReference(new Guid("8CB6D8B2-B0DF-4A71-9AB1-2E7CF8AE0EE4"), "FK_8CB6D8B2B0DF4A719AB12E7CF8AE0EE4", gCID, PCRxAnimalID.ID, global::Projecao.Core.ISE.DB.ISEx.ISExItem.gCID, global::Projecao.Core.ISE.DB.ISEx.ISExItem.ISExItemID.ID);
            public static readonly XORMReference FK_7B33D1804CDC40238ACC7E7B1A81A1DD = new XORMReference(new Guid("7B33D180-4CDC-4023-8ACC-7E7B1A81A1DD"), "FK_7B33D1804CDC40238ACC7E7B1A81A1DD", gCID, ERPxGeneroID.ID, global::Projecao.Core.ERP.DB.ERPx.ERPxGenero.gCID, global::Projecao.Core.ERP.DB.ERPx.ERPxGenero.ERPxGeneroID.ID);
            public static readonly XORMReference FK_97E065A8AB4A42319C4168E111829312 = new XORMReference(new Guid("97E065A8-AB4A-4231-9C41-68E111829312"), "FK_97E065A8AB4A42319C4168E111829312", gCID, PCRxRacaID.ID, PCRxRaca.gCID, PCRxRaca.PCRxRacaID.ID);
            public static readonly XORMReference FK_2B3F49C02D43436995FFEC922A781EA8 = new XORMReference(new Guid("2B3F49C0-2D43-4369-95FF-EC922A781EA8"), "FK_2B3F49C02D43436995FFEC922A781EA8", gCID, PCRxAnimalFaseID.ID, PCRxAnimalFase.gCID, PCRxAnimalFase.PCRxAnimalFaseID.ID);
            public static readonly XORMReference FK_2E2EC50CBA6D4DBCA73DD45140ECE56F = new XORMReference(new Guid("2E2EC50C-BA6D-4DBC-A73D-D45140ECE56F"), "FK_2E2EC50CBA6D4DBCA73DD45140ECE56F", gCID, SYSxEmpresaID.ID, global::TFX.Core.Service.Apps.SYSx.SYSxEmpresa.gCID, global::TFX.Core.Service.Apps.SYSx.SYSxEmpresa.SYSxEmpresaID.ID);
            public static readonly XORMReference FK_C62D7402A7D24CD29B1DBF7B99BD8556 = new XORMReference(new Guid("C62D7402-A7D2-4CD2-9B1D-BF7B99BD8556"), "FK_C62D7402A7D24CD29B1DBF7B99BD8556", gCID, PCRxAnimalEstadoID.ID, PCRxAnimalEstado.gCID, PCRxAnimalEstado.PCRxAnimalEstadoID.ID);
            public static readonly XORMReference FK_1B9FA7D9F6D84C6A93AADB7F2937DA42 = new XORMReference(new Guid("1B9FA7D9-F6D8-4C6A-93AA-DB7F2937DA42"), "FK_1B9FA7D9F6D84C6A93AADB7F2937DA42", gCID, PCRxEventoReprodutivoID.ID, PCRxAnimalEvento.gCID, PCRxAnimalEvento.PCRxAnimalEventoID.ID);
            public static readonly XORMReference FK_2B59FB1172ED444C9969389CB0ABA200 = new XORMReference(new Guid("2B59FB11-72ED-444C-9969-389CB0ABA200"), "FK_2B59FB1172ED444C9969389CB0ABA200", gCID, PCRxAnimalLoteID.ID, PCRxAnimalLote.gCID, PCRxAnimalLote.PCRxAnimalLoteID.ID);
            public static readonly XORMReference FK_A961FCF6AD6048BDB11BB54CD2ABC84C = new XORMReference(new Guid("A961FCF6-AD60-48BD-B11B-B54CD2ABC84C"), "FK_A961FCF6AD6048BDB11BB54CD2ABC84C", gCID, PCRxIATFFaseID.ID, PCRxIATFFase.gCID, PCRxIATFFase.PCRxIATFFaseID.ID);
            public static readonly XORMIndex IX_B2FA0D4A1CAA4FFE9D956BE404EE8257 = new XORMIndex();
            public static readonly XORMIndex IX_F0E26A2CC9AA40F690591B2BDAAEA199 = new XORMIndex();
            public static readonly XORMIndex IX_7B33D1804CDC40238ACC7E7B1A81A1DD = new XORMIndex();
            public static readonly XORMIndex IX_97E065A8AB4A42319C4168E111829312 = new XORMIndex();
            public static readonly XORMIndex IX_2B3F49C02D43436995FFEC922A781EA8 = new XORMIndex();
            public static readonly XORMIndex IX_2E2EC50CBA6D4DBCA73DD45140ECE56F = new XORMIndex();
            public static readonly XORMIndex IX_C62D7402A7D24CD29B1DBF7B99BD8556 = new XORMIndex();
            public static readonly XORMIndex IX_1B9FA7D9F6D84C6A93AADB7F2937DA42 = new XORMIndex();
            public static readonly XORMIndex IX_2B59FB1172ED444C9969389CB0ABA200 = new XORMIndex();
            public static readonly XORMIndex IX_A961FCF6AD6048BDB11BB54CD2ABC84C = new XORMIndex();
            static PCRxAnimal()
            {
                PCRxAnimalID.PKID = new Guid("92BFA7915EEA41DF877867BEA8995016");
                PCRxAnimalID.UpdateStatic = true;
                PCRxAnimalID.InsertOnly = false;
                PCRxAnimalID.TableName = "PCRxAnimal";
                PCRxAnimalID.SourceTableID = new Guid("01BC341A-0142-4C60-87A7-9228AD3A73E9");
                PCRxAnimalID.Index = 0;
                PCRxAnimalID.IsFaceField = true;
                PCRxAnimalEstadoID.UpdateStatic = true;
                PCRxAnimalEstadoID.InsertOnly = false;
                PCRxAnimalEstadoID.TableName = "PCRxAnimal";
                PCRxAnimalEstadoID.SourceTableID = new Guid("01BC341A-0142-4C60-87A7-9228AD3A73E9");
                PCRxAnimalEstadoID.Index = 1;
                PCRxAnimalFaseID.UpdateStatic = true;
                PCRxAnimalFaseID.InsertOnly = false;
                PCRxAnimalFaseID.TableName = "PCRxAnimal";
                PCRxAnimalFaseID.SourceTableID = new Guid("01BC341A-0142-4C60-87A7-9228AD3A73E9");
                PCRxAnimalFaseID.Index = 2;
                Nascimento.UpdateStatic = true;
                Nascimento.InsertOnly = false;
                Nascimento.TableName = "PCRxAnimal";
                Nascimento.SourceTableID = new Guid("01BC341A-0142-4C60-87A7-9228AD3A73E9");
                Nascimento.Index = 3;
                PCRxIATFFaseID.UpdateStatic = true;
                PCRxIATFFaseID.InsertOnly = false;
                PCRxIATFFaseID.TableName = "PCRxAnimal";
                PCRxIATFFaseID.SourceTableID = new Guid("01BC341A-0142-4C60-87A7-9228AD3A73E9");
                PCRxIATFFaseID.Index = 4;
                SYSxEmpresaID.UpdateStatic = true;
                SYSxEmpresaID.InsertOnly = false;
                SYSxEmpresaID.TableName = "PCRxAnimal";
                SYSxEmpresaID.SourceTableID = new Guid("01BC341A-0142-4C60-87A7-9228AD3A73E9");
                SYSxEmpresaID.Index = 5;
                ERPxGeneroID.UpdateStatic = true;
                ERPxGeneroID.InsertOnly = false;
                ERPxGeneroID.TableName = "PCRxAnimal";
                ERPxGeneroID.SourceTableID = new Guid("01BC341A-0142-4C60-87A7-9228AD3A73E9");
                ERPxGeneroID.Index = 6;
                PCRxEventoReprodutivoID.UpdateStatic = true;
                PCRxEventoReprodutivoID.InsertOnly = false;
                PCRxEventoReprodutivoID.TableName = "PCRxAnimal";
                PCRxEventoReprodutivoID.SourceTableID = new Guid("01BC341A-0142-4C60-87A7-9228AD3A73E9");
                PCRxEventoReprodutivoID.Index = 7;
                PCRxRacaID.UpdateStatic = true;
                PCRxRacaID.InsertOnly = false;
                PCRxRacaID.TableName = "PCRxAnimal";
                PCRxRacaID.SourceTableID = new Guid("01BC341A-0142-4C60-87A7-9228AD3A73E9");
                PCRxRacaID.Index = 8;
                NumeroPartos.UpdateStatic = true;
                NumeroPartos.InsertOnly = false;
                NumeroPartos.TableName = "PCRxAnimal";
                NumeroPartos.SourceTableID = new Guid("01BC341A-0142-4C60-87A7-9228AD3A73E9");
                NumeroPartos.Min = -2147483648;
                NumeroPartos.Max = 2147483647;
                NumeroPartos.Index = 9;
                PCRxAnimalLoteID.UpdateStatic = true;
                PCRxAnimalLoteID.InsertOnly = false;
                PCRxAnimalLoteID.TableName = "PCRxAnimal";
                PCRxAnimalLoteID.SourceTableID = new Guid("01BC341A-0142-4C60-87A7-9228AD3A73E9");
                PCRxAnimalLoteID.Index = 10;
                IX_B2FA0D4A1CAA4FFE9D956BE404EE8257.Name = "IX_B2FA0D4A1CAA4FFE9D956BE404EE8257";
                IX_B2FA0D4A1CAA4FFE9D956BE404EE8257.ID = new Guid("B2FA0D4A-1CAA-4FFE-9D95-6BE404EE8257");
                IX_B2FA0D4A1CAA4FFE9D956BE404EE8257.IsUnique = false;
                IX_B2FA0D4A1CAA4FFE9D956BE404EE8257.Description = "";
                IX_B2FA0D4A1CAA4FFE9D956BE404EE8257.AddItem(ERPxGeneroID);
                IX_B2FA0D4A1CAA4FFE9D956BE404EE8257.AddItem(PCRxAnimalEstadoID);
                IX_B2FA0D4A1CAA4FFE9D956BE404EE8257.AddItem(PCRxAnimalID);
                IX_B2FA0D4A1CAA4FFE9D956BE404EE8257.AddItem(PCRxIATFFaseID);
                IX_B2FA0D4A1CAA4FFE9D956BE404EE8257.AddItem(PCRxAnimalLoteID);
                IX_B2FA0D4A1CAA4FFE9D956BE404EE8257.AddItem(PCRxAnimalFaseID);
                IX_B2FA0D4A1CAA4FFE9D956BE404EE8257.AddItem(PCRxRacaID);
                IX_B2FA0D4A1CAA4FFE9D956BE404EE8257.AddItem(Nascimento);
                IX_B2FA0D4A1CAA4FFE9D956BE404EE8257.AddItem(SYSxEmpresaID);
                IX_F0E26A2CC9AA40F690591B2BDAAEA199.Name = "IX_F0E26A2CC9AA40F690591B2BDAAEA199";
                IX_F0E26A2CC9AA40F690591B2BDAAEA199.ID = new Guid("F0E26A2C-C9AA-40F6-9059-1B2BDAAEA199");
                IX_F0E26A2CC9AA40F690591B2BDAAEA199.IsUnique = false;
                IX_F0E26A2CC9AA40F690591B2BDAAEA199.Description = "";
                IX_F0E26A2CC9AA40F690591B2BDAAEA199.AddItem(ERPxGeneroID);
                IX_F0E26A2CC9AA40F690591B2BDAAEA199.AddItem(PCRxAnimalID);
                IX_F0E26A2CC9AA40F690591B2BDAAEA199.AddItem(Nascimento);
                IX_7B33D1804CDC40238ACC7E7B1A81A1DD.Name = "IX_7B33D1804CDC40238ACC7E7B1A81A1DD";
                IX_7B33D1804CDC40238ACC7E7B1A81A1DD.ID = new Guid("ACD15FCD-F5F5-4B37-836B-6336487B4CAF");
                IX_7B33D1804CDC40238ACC7E7B1A81A1DD.IsUnique = false;
                IX_7B33D1804CDC40238ACC7E7B1A81A1DD.Description = "";
                IX_7B33D1804CDC40238ACC7E7B1A81A1DD.AddItem(ERPxGeneroID);
                IX_97E065A8AB4A42319C4168E111829312.Name = "IX_97E065A8AB4A42319C4168E111829312";
                IX_97E065A8AB4A42319C4168E111829312.ID = new Guid("844D567A-C6D3-41BF-85DC-753DD6149FE8");
                IX_97E065A8AB4A42319C4168E111829312.IsUnique = false;
                IX_97E065A8AB4A42319C4168E111829312.Description = "";
                IX_97E065A8AB4A42319C4168E111829312.AddItem(PCRxRacaID);
                IX_2B3F49C02D43436995FFEC922A781EA8.Name = "IX_2B3F49C02D43436995FFEC922A781EA8";
                IX_2B3F49C02D43436995FFEC922A781EA8.ID = new Guid("66CA12D3-A57D-4300-B6EC-28F152847047");
                IX_2B3F49C02D43436995FFEC922A781EA8.IsUnique = false;
                IX_2B3F49C02D43436995FFEC922A781EA8.Description = "";
                IX_2B3F49C02D43436995FFEC922A781EA8.AddItem(PCRxAnimalFaseID);
                IX_2E2EC50CBA6D4DBCA73DD45140ECE56F.Name = "IX_2E2EC50CBA6D4DBCA73DD45140ECE56F";
                IX_2E2EC50CBA6D4DBCA73DD45140ECE56F.ID = new Guid("71A8075B-199D-4F90-9FF1-8CA6990FA4AF");
                IX_2E2EC50CBA6D4DBCA73DD45140ECE56F.IsUnique = false;
                IX_2E2EC50CBA6D4DBCA73DD45140ECE56F.Description = "";
                IX_2E2EC50CBA6D4DBCA73DD45140ECE56F.AddItem(SYSxEmpresaID);
                IX_C62D7402A7D24CD29B1DBF7B99BD8556.Name = "IX_C62D7402A7D24CD29B1DBF7B99BD8556";
                IX_C62D7402A7D24CD29B1DBF7B99BD8556.ID = new Guid("D409DC0A-4C5A-4C1E-9DC5-B9081FDC5581");
                IX_C62D7402A7D24CD29B1DBF7B99BD8556.IsUnique = false;
                IX_C62D7402A7D24CD29B1DBF7B99BD8556.Description = "";
                IX_C62D7402A7D24CD29B1DBF7B99BD8556.AddItem(PCRxAnimalEstadoID);
                IX_1B9FA7D9F6D84C6A93AADB7F2937DA42.Name = "IX_1B9FA7D9F6D84C6A93AADB7F2937DA42";
                IX_1B9FA7D9F6D84C6A93AADB7F2937DA42.ID = new Guid("1877E8D3-28E9-43E5-A2BD-0DA8513C60C8");
                IX_1B9FA7D9F6D84C6A93AADB7F2937DA42.IsUnique = false;
                IX_1B9FA7D9F6D84C6A93AADB7F2937DA42.Description = "";
                IX_1B9FA7D9F6D84C6A93AADB7F2937DA42.AddItem(PCRxEventoReprodutivoID);
                IX_2B59FB1172ED444C9969389CB0ABA200.Name = "IX_2B59FB1172ED444C9969389CB0ABA200";
                IX_2B59FB1172ED444C9969389CB0ABA200.ID = new Guid("F8576779-79E2-4FBA-AAEF-1B3878D8D94A");
                IX_2B59FB1172ED444C9969389CB0ABA200.IsUnique = false;
                IX_2B59FB1172ED444C9969389CB0ABA200.Description = "";
                IX_2B59FB1172ED444C9969389CB0ABA200.AddItem(PCRxAnimalLoteID);
                IX_A961FCF6AD6048BDB11BB54CD2ABC84C.Name = "IX_A961FCF6AD6048BDB11BB54CD2ABC84C";
                IX_A961FCF6AD6048BDB11BB54CD2ABC84C.ID = new Guid("6C926C63-2E7D-45F3-BA3C-DBE1F0621475");
                IX_A961FCF6AD6048BDB11BB54CD2ABC84C.IsUnique = false;
                IX_A961FCF6AD6048BDB11BB54CD2ABC84C.Description = "";
                IX_A961FCF6AD6048BDB11BB54CD2ABC84C.AddItem(PCRxIATFFaseID);
                PCRxAnimalID.AllowZero = true;
                FK_8CB6D8B2B0DF4A719AB12E7CF8AE0EE4.AllowZero = true;
                ERPxGeneroID.AllowZero = true;
                FK_7B33D1804CDC40238ACC7E7B1A81A1DD.AllowZero = true;
                PCRxRacaID.AllowZero = true;
                FK_97E065A8AB4A42319C4168E111829312.AllowZero = true;
                PCRxAnimalFaseID.AllowZero = true;
                FK_2B3F49C02D43436995FFEC922A781EA8.AllowZero = true;
                SYSxEmpresaID.AllowZero = true;
                FK_2E2EC50CBA6D4DBCA73DD45140ECE56F.AllowZero = true;
                PCRxAnimalEstadoID.AllowZero = true;
                FK_C62D7402A7D24CD29B1DBF7B99BD8556.AllowZero = true;
                PCRxEventoReprodutivoID.AllowZero = true;
                FK_1B9FA7D9F6D84C6A93AADB7F2937DA42.AllowZero = true;
                PCRxAnimalLoteID.AllowZero = true;
                FK_2B59FB1172ED444C9969389CB0ABA200.AllowZero = true;
                PCRxIATFFaseID.AllowZero = true;
                FK_A961FCF6AD6048BDB11BB54CD2ABC84C.AllowZero = true;
            }
            protected PCRxAnimal()
            {
                TupleType = typeof(XTuple);
                PersistenceType = typeof(__PCRxAnimal);
                ID = new Guid("01BC341A-0142-4C60-87A7-9228AD3A73E9");
                Name = "PCRxAnimal";
                Title = "Animal";
                CompanyControlType = XCompanyControlType.CurrentCompany;
                ModuleID = new Guid("02C4E7C5-1B4F-43DB-AC6C-CD36BBE428B7");
                DeleteOnDeactivate = false;
                PKName = "PK_A349F72728634383871B30647E958805";
                FaceField = PCRxAnimalID;
                DisplayField = PCRxAnimalID;
                InheritanceID = new Guid("8BB836C8-EC72-48FA-A5AB-95DC2BD05E22");
            }
            protected override void LoadDefaultData(XDataSet pDataSet)
            {
                base.LoadDefaultData(pDataSet);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {new Guid("00000000-0000-0000-0000-000000000000"), (Int16)0, (Int16)0, TFX.Core.XDefault.NullDateTime, new Guid("00000000-0000-0000-0000-000000000000"), new Guid("00000000-0000-0000-0000-000000000000"), (Int16)0, new Guid("00000000-0000-0000-0000-000000000000"), (Int16)0, 0, new Guid("00000000-0000-0000-0000-000000000000")}), new Guid("00000000-0000-0000-0000-000000000000"));
            }
        }

        #endregion PCRxAnimal

        #region PCRxAnimalEstado

        [XRegister(typeof(PCRxAnimalEstado), sCID)]
        public class PCRxAnimalEstado : XORMTable
        {
            public const String sCID = "42E7ECA7-C58D-4FF6-ADAF-62D0CA1F1BBF";
            public static Guid gCID = new Guid(sCID);
            #region XDefault
            public class XDefault
            {
                public static String sPeriodo_de_Mama => _Titles[(Int16)7];
                public const Int16 Periodo_de_Mama = (Int16)7;
                public static String sVendida => _Titles[(Int16)9];
                public const Int16 Vendida = (Int16)9;
                public static String sImplante_Hormonal => _Titles[(Int16)3];
                public const Int16 Implante_Hormonal = (Int16)3;
                public static String sParida => _Titles[(Int16)6];
                public const Int16 Parida = (Int16)6;
                public static String sPrenha => _Titles[(Int16)5];
                public const Int16 Prenha = (Int16)5;
                public static String sNA => _Titles[(Int16)0];
                public const Int16 NA = (Int16)0;
                public static String sInceminado => _Titles[(Int16)4];
                public const Int16 Inceminado = (Int16)4;
                public static String sMorto => _Titles[(Int16)8];
                public const Int16 Morto = (Int16)8;
                public static String sEngorda => _Titles[(Int16)2];
                public const Int16 Engorda = (Int16)2;
                public static String sCrescimento => _Titles[(Int16)1];
                public const Int16 Crescimento = (Int16)1;
                public static String sSolteira => _Titles[(Int16)10];
                public const Int16 Solteira = (Int16)10;
                private static Dictionary<Int16, String> _Titles = new Dictionary<Int16, String>()
                {
                [(Int16)7] = "Período de Mama",
                [(Int16)9] = "Vendida",
                [(Int16)3] = "Implante Hormonal",
                [(Int16)6] = "Parida",
                [(Int16)5] = "Prenha",
                [(Int16)0] = "NA",
                [(Int16)4] = "Inceminado",
                [(Int16)8] = "Morto",
                [(Int16)2] = "Engorda",
                [(Int16)1] = "Crescimento",
                [(Int16)10] = "Solteira"
                };
                public static String GetTitle(Int16 pIndex)
                {
                    if (!_Titles.ContainsKey(pIndex))
                        return "";
                    return _Titles[pIndex];
                }
            }
            #endregion XDefault
            #region XTuple
            public class XTuple : XDataTuple
            {
                public XTuple()
                {
                }
                public XTuple(Object[] pSource)
                    : base(pSource)
                {
                }
                public XTuple(Int32 pColCount)
                   : this(new Object[pColCount])
                {
                }
                #nullable enable
                public String AnimalEstado
                {
                    get
                    {
                        return (String)Value[PCRxAnimalEstado.AnimalEstado];
                    }
                    set
                    {
                        this[PCRxAnimalEstado.AnimalEstado] = value;
                    }
                }
                public String? oAnimalEstado
                {
                    get
                    {
                        GetOldValue(PCRxAnimalEstado.AnimalEstado, out Object ovlr);
                        return (String?)ovlr;
                    }
                }
                public Int16 PCRxAnimalEstadoID
                {
                    get
                    {
                        return (Int16)Value[PCRxAnimalEstado.PCRxAnimalEstadoID];
                    }
                    set
                    {
                        this[PCRxAnimalEstado.PCRxAnimalEstadoID] = value;
                    }
                }
                public Int16? oPCRxAnimalEstadoID
                {
                    get
                    {
                        GetOldValue(PCRxAnimalEstado.PCRxAnimalEstadoID, out Object ovlr);
                        return (Int16?)ovlr;
                    }
                }
                #nullable disable
            }
            #endregion XTuple
            private static PCRxAnimalEstado _Instance;
            public static PCRxAnimalEstado Instance
            {
                get
                {
                    if (_Instance == null)
                        _Instance = XTypeCache.CreateInstanceNP<PCRxAnimalEstado>(gCID);
                    return _Instance;
                }
            }
            public static XORMFaceField AnimalEstado = new XORMFaceField(new Guid("F9E74758-A7C0-4C56-95B4-B68BBFB56A31"), "AnimalEstado", "Estado do Animal", XString.CID, 0, 0, false, gCID, null);
            public static XORMPKField PCRxAnimalEstadoID = new XORMPKField(new Guid("649D51FA-2B3D-48D2-A4C8-9B08F52F9A35"), "PCRxAnimalEstadoID", "Estado", XInt16.CID, 0, 0, false, gCID, (Int16)0);
            static PCRxAnimalEstado()
            {
                PCRxAnimalEstadoID.PKID = new Guid("1E5B2039DDF34E1283C8D4702BEAB985");
                PCRxAnimalEstadoID.UpdateStatic = true;
                PCRxAnimalEstadoID.InsertOnly = false;
                PCRxAnimalEstadoID.TableName = "PCRxAnimalEstado";
                PCRxAnimalEstadoID.SourceTableID = new Guid("42E7ECA7-C58D-4FF6-ADAF-62D0CA1F1BBF");
                PCRxAnimalEstadoID.Index = 0;
                AnimalEstado.UpdateStatic = true;
                AnimalEstado.InsertOnly = false;
                AnimalEstado.TableName = "PCRxAnimalEstado";
                AnimalEstado.SourceTableID = new Guid("42E7ECA7-C58D-4FF6-ADAF-62D0CA1F1BBF");
                AnimalEstado.Index = 1;
                AnimalEstado.IsFaceField = true;
            }
            protected PCRxAnimalEstado()
            {
                TupleType = typeof(XTuple);
                PersistenceType = typeof(__PCRxAnimalEstado);
                ID = new Guid("42E7ECA7-C58D-4FF6-ADAF-62D0CA1F1BBF");
                Name = "PCRxAnimalEstado";
                Title = "Estado";
                CompanyControlType = XCompanyControlType.None;
                ModuleID = new Guid("02C4E7C5-1B4F-43DB-AC6C-CD36BBE428B7");
                DeleteOnDeactivate = false;
                PKName = "PK_649D51FA2B3D48D2A4C89B08F52F9A35";
                FaceField = AnimalEstado;
                IsCached = true;
                DisplayField = AnimalEstado;
            }
            protected override void LoadDefaultData(XDataSet pDataSet)
            {
                base.LoadDefaultData(pDataSet);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)7, @"Período de Mama"}), (Int16)7);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)9, @"Vendida"}), (Int16)9);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)3, @"Implante Hormonal"}), (Int16)3);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)6, @"Parida"}), (Int16)6);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)5, @"Prenha"}), (Int16)5);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)0, @"NA"}), (Int16)0);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)4, @"Inceminado"}), (Int16)4);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)8, @"Morto"}), (Int16)8);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)2, @"Engorda"}), (Int16)2);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)1, @"Crescimento"}), (Int16)1);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)10, @"Solteira"}), (Int16)10);
            }
        }

        #endregion PCRxAnimalEstado

        #region PCRxAnimalEvento

        [XRegister(typeof(PCRxAnimalEvento), sCID)]
        public class PCRxAnimalEvento : XORMTable
        {
            public const String sCID = "3D4ED437-A9E9-4775-B2A0-887BE2B192B4";
            public static Guid gCID = new Guid(sCID);
            #region XDefault
            public class XDefault
            {
                public static String s_00000000000000000000000000000000 => _Titles[new Guid("00000000-0000-0000-0000-000000000000")];
                public static Guid _00000000000000000000000000000000 = new Guid("00000000-0000-0000-0000-000000000000");
                private static Dictionary<Guid, String> _Titles = new Dictionary<Guid, String>()
                {
                [new Guid("00000000-0000-0000-0000-000000000000")] = "00000000-0000-0000-0000-000000000000"
                };
                public static String GetTitle(Guid pIndex)
                {
                    if (!_Titles.ContainsKey(pIndex))
                        return "";
                    return _Titles[pIndex];
                }
            }
            #endregion XDefault
            #region XTuple
            public class XTuple : XDataTuple
            {
                public XTuple()
                {
                }
                public XTuple(Object[] pSource)
                    : base(pSource)
                {
                }
                public XTuple(Int32 pColCount)
                   : this(new Object[pColCount])
                {
                }
                #nullable enable
                public String Grupo
                {
                    get
                    {
                        return (String)Value[PCRxAnimalEvento.Grupo];
                    }
                    set
                    {
                        this[PCRxAnimalEvento.Grupo] = value;
                    }
                }
                public String? oGrupo
                {
                    get
                    {
                        GetOldValue(PCRxAnimalEvento.Grupo, out Object ovlr);
                        return (String?)ovlr;
                    }
                }
                public Guid ISExItemID
                {
                    get
                    {
                        return (Guid)Value[PCRxAnimalEvento.ISExItemID];
                    }
                    set
                    {
                        this[PCRxAnimalEvento.ISExItemID] = value;
                    }
                }
                public Guid? oISExItemID
                {
                    get
                    {
                        GetOldValue(PCRxAnimalEvento.ISExItemID, out Object ovlr);
                        return (Guid?)ovlr;
                    }
                }
                public Int16 PCRxAnimalEstadoID
                {
                    get
                    {
                        return (Int16)Value[PCRxAnimalEvento.PCRxAnimalEstadoID];
                    }
                    set
                    {
                        this[PCRxAnimalEvento.PCRxAnimalEstadoID] = value;
                    }
                }
                public Int16? oPCRxAnimalEstadoID
                {
                    get
                    {
                        GetOldValue(PCRxAnimalEvento.PCRxAnimalEstadoID, out Object ovlr);
                        return (Int16?)ovlr;
                    }
                }
                public Guid PCRxAnimalEventoID
                {
                    get
                    {
                        return (Guid)Value[PCRxAnimalEvento.PCRxAnimalEventoID];
                    }
                    set
                    {
                        this[PCRxAnimalEvento.PCRxAnimalEventoID] = value;
                    }
                }
                public Guid? oPCRxAnimalEventoID
                {
                    get
                    {
                        GetOldValue(PCRxAnimalEvento.PCRxAnimalEventoID, out Object ovlr);
                        return (Guid?)ovlr;
                    }
                }
                public Guid PCRxAnimalID
                {
                    get
                    {
                        return (Guid)Value[PCRxAnimalEvento.PCRxAnimalID];
                    }
                    set
                    {
                        this[PCRxAnimalEvento.PCRxAnimalID] = value;
                    }
                }
                public Guid? oPCRxAnimalID
                {
                    get
                    {
                        GetOldValue(PCRxAnimalEvento.PCRxAnimalID, out Object ovlr);
                        return (Guid?)ovlr;
                    }
                }
                public Guid PCRxAnimalLoteID
                {
                    get
                    {
                        return (Guid)Value[PCRxAnimalEvento.PCRxAnimalLoteID];
                    }
                    set
                    {
                        this[PCRxAnimalEvento.PCRxAnimalLoteID] = value;
                    }
                }
                public Guid? oPCRxAnimalLoteID
                {
                    get
                    {
                        GetOldValue(PCRxAnimalEvento.PCRxAnimalLoteID, out Object ovlr);
                        return (Guid?)ovlr;
                    }
                }
                public Guid PCRxIATFFaseID
                {
                    get
                    {
                        return (Guid)Value[PCRxAnimalEvento.PCRxIATFFaseID];
                    }
                    set
                    {
                        this[PCRxAnimalEvento.PCRxIATFFaseID] = value;
                    }
                }
                public Guid? oPCRxIATFFaseID
                {
                    get
                    {
                        GetOldValue(PCRxAnimalEvento.PCRxIATFFaseID, out Object ovlr);
                        return (Guid?)ovlr;
                    }
                }
                public Int16 PCRxIATFFaseTipoID
                {
                    get
                    {
                        return (Int16)Value[PCRxAnimalEvento.PCRxIATFFaseTipoID];
                    }
                    set
                    {
                        this[PCRxAnimalEvento.PCRxIATFFaseTipoID] = value;
                    }
                }
                public Int16? oPCRxIATFFaseTipoID
                {
                    get
                    {
                        GetOldValue(PCRxAnimalEvento.PCRxIATFFaseTipoID, out Object ovlr);
                        return (Int16?)ovlr;
                    }
                }
                public Guid PCRxReprodutorID
                {
                    get
                    {
                        return (Guid)Value[PCRxAnimalEvento.PCRxReprodutorID];
                    }
                    set
                    {
                        this[PCRxAnimalEvento.PCRxReprodutorID] = value;
                    }
                }
                public Guid? oPCRxReprodutorID
                {
                    get
                    {
                        GetOldValue(PCRxAnimalEvento.PCRxReprodutorID, out Object ovlr);
                        return (Guid?)ovlr;
                    }
                }
                public Guid SYSxPessoaID
                {
                    get
                    {
                        return (Guid)Value[PCRxAnimalEvento.SYSxPessoaID];
                    }
                    set
                    {
                        this[PCRxAnimalEvento.SYSxPessoaID] = value;
                    }
                }
                public Guid? oSYSxPessoaID
                {
                    get
                    {
                        GetOldValue(PCRxAnimalEvento.SYSxPessoaID, out Object ovlr);
                        return (Guid?)ovlr;
                    }
                }
                public Decimal Valor
                {
                    get
                    {
                        return (Decimal)Value[PCRxAnimalEvento.Valor];
                    }
                    set
                    {
                        this[PCRxAnimalEvento.Valor] = value;
                    }
                }
                public Decimal? oValor
                {
                    get
                    {
                        GetOldValue(PCRxAnimalEvento.Valor, out Object ovlr);
                        return (Decimal?)ovlr;
                    }
                }
                #nullable disable
            }
            #endregion XTuple
            private static PCRxAnimalEvento _Instance;
            public static PCRxAnimalEvento Instance
            {
                get
                {
                    if (_Instance == null)
                        _Instance = XTypeCache.CreateInstanceNP<PCRxAnimalEvento>(gCID);
                    return _Instance;
                }
            }
            public static XORMField Grupo = new XORMField(new Guid("A8823A0B-F407-4093-8837-C3BD8686AF1A"), "Grupo", "Grupo", XString.CID, 10, 0, true, gCID, null);
            public static XORMFKField ISExItemID = new XORMFKField(new Guid("84C3E8FC-2D49-49E6-8B05-6BB1FC7B4390"), "ISExItemID", "Item", XGuid.CID, 0, 0, false, gCID, new Guid("00000000-0000-0000-0000-000000000000"));
            public static XORMFKField PCRxAnimalEstadoID = new XORMFKField(new Guid("1E710674-235C-4490-91F2-3F257B2D882B"), "PCRxAnimalEstadoID", "Estado", XInt16.CID, 0, 0, false, gCID, (Int16)0);
            public static XORMPKField PCRxAnimalEventoID = new XORMPKField(new Guid("3600E3B8-909C-41CF-BE4C-A112E982C68A"), "PCRxAnimalEventoID", "Eventos de Animais", XGuid.CID, 0, 0, false, gCID, new Guid("00000000-0000-0000-0000-000000000000"));
            public static XORMFKField PCRxAnimalID = new XORMFKField(new Guid("FDB6AF75-444F-4794-81FD-1358D0372590"), "PCRxAnimalID", "Animal", XGuid.CID, 0, 0, false, gCID, new Guid("00000000-0000-0000-0000-000000000000"));
            public static XORMFKField PCRxAnimalLoteID = new XORMFKField(new Guid("CFBBA53B-3E06-4EDC-9698-C597445600B8"), "PCRxAnimalLoteID", "Lote de Animais", XGuid.CID, 0, 0, false, gCID, new Guid("00000000-0000-0000-0000-000000000000"));
            public static XORMFKField PCRxIATFFaseID = new XORMFKField(new Guid("02BA5EDC-CE47-4F6C-AE62-7A7C38603D35"), "PCRxIATFFaseID", "Fases da IATF", XGuid.CID, 0, 0, false, gCID, new Guid("00000000-0000-0000-0000-000000000000"));
            public static XORMFKField PCRxIATFFaseTipoID = new XORMFKField(new Guid("90546320-205D-4AB9-A5B1-BA66AAC1B96F"), "PCRxIATFFaseTipoID", "Tipo de Fase", XInt16.CID, 0, 0, false, gCID, (Int16)0);
            public static XORMFKField PCRxReprodutorID = new XORMFKField(new Guid("69E6E20F-5780-40DB-80B7-1BE445047B77"), "PCRxReprodutorID", "Reprodutor", XGuid.CID, 0, 0, false, gCID, new Guid("00000000-0000-0000-0000-000000000000"));
            public static XORMFKField SYSxPessoaID = new XORMFKField(new Guid("9B90564A-7769-4016-A146-9FC0EECA0100"), "SYSxPessoaID", "Responsável", XGuid.CID, 0, 0, false, gCID, new Guid("00000000-0000-0000-0000-000000000000"));
            public static XORMDecimalField Valor = new XORMDecimalField(new Guid("7D36E4CF-C505-49D7-9F94-DCADF1957634"), "Valor", "Valor", XDecimal.CID, 25, 2, false, gCID, 0);
            public static readonly XORMReference FK_42EFE6DB12064EDB90941A7F33C86DA8 = new XORMReference(new Guid("42EFE6DB-1206-4EDB-9094-1A7F33C86DA8"), "FK_42EFE6DB12064EDB90941A7F33C86DA8", gCID, SYSxPessoaID.ID, global::TFX.Core.Service.Apps.SYSx.SYSxPessoa.gCID, global::TFX.Core.Service.Apps.SYSx.SYSxPessoa.SYSxPessoaID.ID);
            public static readonly XORMReference FK_4A73303075584856B65A97FA8512E10B = new XORMReference(new Guid("4A733030-7558-4856-B65A-97FA8512E10B"), "FK_4A73303075584856B65A97FA8512E10B", gCID, PCRxReprodutorID.ID, PCRxReprodutor.gCID, PCRxReprodutor.PCRxReprodutorID.ID);
            public static readonly XORMReference FK_A5C644E75854454D93A58A3295A50F57 = new XORMReference(new Guid("A5C644E7-5854-454D-93A5-8A3295A50F57"), "FK_A5C644E75854454D93A58A3295A50F57", gCID, PCRxAnimalEventoID.ID, PCRxEvento.gCID, PCRxEvento.PCRxEventoID.ID);
            public static readonly XORMReference FK_9FAD20773B804EC484CCE1B5A9ECBDA1 = new XORMReference(new Guid("9FAD2077-3B80-4EC4-84CC-E1B5A9ECBDA1"), "FK_9FAD20773B804EC484CCE1B5A9ECBDA1", gCID, PCRxAnimalID.ID, PCRxAnimal.gCID, PCRxAnimal.PCRxAnimalID.ID);
            public static readonly XORMReference FK_6910F1D272BA48F18EAB9A36B4BFEB47 = new XORMReference(new Guid("6910F1D2-72BA-48F1-8EAB-9A36B4BFEB47"), "FK_6910F1D272BA48F18EAB9A36B4BFEB47", gCID, PCRxAnimalLoteID.ID, PCRxAnimalLote.gCID, PCRxAnimalLote.PCRxAnimalLoteID.ID);
            public static readonly XORMReference FK_8EA9736F97D64AE9A0DC78C061D840BB = new XORMReference(new Guid("8EA9736F-97D6-4AE9-A0DC-78C061D840BB"), "FK_8EA9736F97D64AE9A0DC78C061D840BB", gCID, PCRxIATFFaseID.ID, PCRxIATFFase.gCID, PCRxIATFFase.PCRxIATFFaseID.ID);
            public static readonly XORMReference FK_6FB1FC0CD2794D9A89AC29F79552CE72 = new XORMReference(new Guid("6FB1FC0C-D279-4D9A-89AC-29F79552CE72"), "FK_6FB1FC0CD2794D9A89AC29F79552CE72", gCID, PCRxAnimalEstadoID.ID, PCRxAnimalEstado.gCID, PCRxAnimalEstado.PCRxAnimalEstadoID.ID);
            public static readonly XORMReference FK_234460DBDF0E44DDB6B92AE8FDB8B0F5 = new XORMReference(new Guid("234460DB-DF0E-44DD-B6B9-2AE8FDB8B0F5"), "FK_234460DBDF0E44DDB6B92AE8FDB8B0F5", gCID, PCRxIATFFaseTipoID.ID, PCRxIATFFaseTipo.gCID, PCRxIATFFaseTipo.PCRxIATFFaseTipoID.ID);
            public static readonly XORMReference FK_DA8CCC87E5E74A4083AA9C0659143FF4 = new XORMReference(new Guid("DA8CCC87-E5E7-4A40-83AA-9C0659143FF4"), "FK_DA8CCC87E5E74A4083AA9C0659143FF4", gCID, ISExItemID.ID, global::Projecao.Core.ISE.DB.ISEx.ISExItem.gCID, global::Projecao.Core.ISE.DB.ISEx.ISExItem.ISExItemID.ID);
            public static readonly XORMIndex IX_C74BCB98AB8241349D27EE4A942BDF46 = new XORMIndex();
            public static readonly XORMIndex IX_E4C3597481804BCAA30C76A547756467 = new XORMIndex();
            public static readonly XORMIndex IX_42EFE6DB12064EDB90941A7F33C86DA8 = new XORMIndex();
            public static readonly XORMIndex IX_4A73303075584856B65A97FA8512E10B = new XORMIndex();
            public static readonly XORMIndex IX_9FAD20773B804EC484CCE1B5A9ECBDA1 = new XORMIndex();
            public static readonly XORMIndex IX_6910F1D272BA48F18EAB9A36B4BFEB47 = new XORMIndex();
            public static readonly XORMIndex IX_8EA9736F97D64AE9A0DC78C061D840BB = new XORMIndex();
            public static readonly XORMIndex IX_6FB1FC0CD2794D9A89AC29F79552CE72 = new XORMIndex();
            public static readonly XORMIndex IX_234460DBDF0E44DDB6B92AE8FDB8B0F5 = new XORMIndex();
            public static readonly XORMIndex IX_DA8CCC87E5E74A4083AA9C0659143FF4 = new XORMIndex();
            static PCRxAnimalEvento()
            {
                PCRxAnimalEventoID.PKID = new Guid("3D1DB0899E8E447B88E5549875EC3C50");
                PCRxAnimalEventoID.UpdateStatic = true;
                PCRxAnimalEventoID.InsertOnly = false;
                PCRxAnimalEventoID.TableName = "PCRxAnimalEvento";
                PCRxAnimalEventoID.SourceTableID = new Guid("3D4ED437-A9E9-4775-B2A0-887BE2B192B4");
                PCRxAnimalEventoID.Index = 0;
                PCRxAnimalEventoID.IsFaceField = true;
                PCRxAnimalLoteID.UpdateStatic = true;
                PCRxAnimalLoteID.InsertOnly = false;
                PCRxAnimalLoteID.TableName = "PCRxAnimalEvento";
                PCRxAnimalLoteID.SourceTableID = new Guid("3D4ED437-A9E9-4775-B2A0-887BE2B192B4");
                PCRxAnimalLoteID.Index = 1;
                PCRxAnimalID.UpdateStatic = true;
                PCRxAnimalID.InsertOnly = false;
                PCRxAnimalID.TableName = "PCRxAnimalEvento";
                PCRxAnimalID.SourceTableID = new Guid("3D4ED437-A9E9-4775-B2A0-887BE2B192B4");
                PCRxAnimalID.Index = 2;
                SYSxPessoaID.UpdateStatic = true;
                SYSxPessoaID.InsertOnly = false;
                SYSxPessoaID.TableName = "PCRxAnimalEvento";
                SYSxPessoaID.SourceTableID = new Guid("3D4ED437-A9E9-4775-B2A0-887BE2B192B4");
                SYSxPessoaID.Index = 3;
                PCRxIATFFaseID.UpdateStatic = true;
                PCRxIATFFaseID.InsertOnly = false;
                PCRxIATFFaseID.TableName = "PCRxAnimalEvento";
                PCRxIATFFaseID.SourceTableID = new Guid("3D4ED437-A9E9-4775-B2A0-887BE2B192B4");
                PCRxIATFFaseID.Index = 4;
                Valor.UpdateStatic = true;
                Valor.InsertOnly = false;
                Valor.TableName = "PCRxAnimalEvento";
                Valor.SourceTableID = new Guid("3D4ED437-A9E9-4775-B2A0-887BE2B192B4");
                Valor.Min = -79228162514264337593543950335M;
                Valor.Max = 79228162514264337593543950335M;
                Valor.Index = 5;
                PCRxReprodutorID.UpdateStatic = true;
                PCRxReprodutorID.InsertOnly = false;
                PCRxReprodutorID.TableName = "PCRxAnimalEvento";
                PCRxReprodutorID.SourceTableID = new Guid("3D4ED437-A9E9-4775-B2A0-887BE2B192B4");
                PCRxReprodutorID.Index = 6;
                PCRxAnimalEstadoID.UpdateStatic = true;
                PCRxAnimalEstadoID.InsertOnly = false;
                PCRxAnimalEstadoID.TableName = "PCRxAnimalEvento";
                PCRxAnimalEstadoID.SourceTableID = new Guid("3D4ED437-A9E9-4775-B2A0-887BE2B192B4");
                PCRxAnimalEstadoID.Index = 7;
                ISExItemID.UpdateStatic = true;
                ISExItemID.InsertOnly = false;
                ISExItemID.TableName = "PCRxAnimalEvento";
                ISExItemID.SourceTableID = new Guid("3D4ED437-A9E9-4775-B2A0-887BE2B192B4");
                ISExItemID.Index = 8;
                PCRxIATFFaseTipoID.UpdateStatic = true;
                PCRxIATFFaseTipoID.InsertOnly = false;
                PCRxIATFFaseTipoID.TableName = "PCRxAnimalEvento";
                PCRxIATFFaseTipoID.SourceTableID = new Guid("3D4ED437-A9E9-4775-B2A0-887BE2B192B4");
                PCRxIATFFaseTipoID.Index = 9;
                Grupo.UpdateStatic = true;
                Grupo.InsertOnly = false;
                Grupo.TableName = "PCRxAnimalEvento";
                Grupo.SourceTableID = new Guid("3D4ED437-A9E9-4775-B2A0-887BE2B192B4");
                Grupo.Index = 10;
                IX_C74BCB98AB8241349D27EE4A942BDF46.Name = "IX_C74BCB98AB8241349D27EE4A942BDF46";
                IX_C74BCB98AB8241349D27EE4A942BDF46.ID = new Guid("C74BCB98-AB82-4134-9D27-EE4A942BDF46");
                IX_C74BCB98AB8241349D27EE4A942BDF46.IsUnique = false;
                IX_C74BCB98AB8241349D27EE4A942BDF46.Description = "";
                IX_C74BCB98AB8241349D27EE4A942BDF46.AddItem(PCRxIATFFaseTipoID);
                IX_C74BCB98AB8241349D27EE4A942BDF46.AddItem(PCRxAnimalLoteID);
                IX_C74BCB98AB8241349D27EE4A942BDF46.AddItem(PCRxAnimalEstadoID);
                IX_C74BCB98AB8241349D27EE4A942BDF46.AddItem(PCRxAnimalEventoID);
                IX_E4C3597481804BCAA30C76A547756467.Name = "IX_E4C3597481804BCAA30C76A547756467";
                IX_E4C3597481804BCAA30C76A547756467.ID = new Guid("E4C35974-8180-4BCA-A30C-76A547756467");
                IX_E4C3597481804BCAA30C76A547756467.IsUnique = false;
                IX_E4C3597481804BCAA30C76A547756467.Description = "";
                IX_E4C3597481804BCAA30C76A547756467.AddItem(PCRxAnimalEstadoID);
                IX_E4C3597481804BCAA30C76A547756467.AddItem(PCRxAnimalID);
                IX_42EFE6DB12064EDB90941A7F33C86DA8.Name = "IX_42EFE6DB12064EDB90941A7F33C86DA8";
                IX_42EFE6DB12064EDB90941A7F33C86DA8.ID = new Guid("89F6E80F-577D-40EA-BB2A-E5136A3E956A");
                IX_42EFE6DB12064EDB90941A7F33C86DA8.IsUnique = false;
                IX_42EFE6DB12064EDB90941A7F33C86DA8.Description = "";
                IX_42EFE6DB12064EDB90941A7F33C86DA8.AddItem(SYSxPessoaID);
                IX_4A73303075584856B65A97FA8512E10B.Name = "IX_4A73303075584856B65A97FA8512E10B";
                IX_4A73303075584856B65A97FA8512E10B.ID = new Guid("A7F88731-D17F-4ED3-815E-C920341A8A15");
                IX_4A73303075584856B65A97FA8512E10B.IsUnique = false;
                IX_4A73303075584856B65A97FA8512E10B.Description = "";
                IX_4A73303075584856B65A97FA8512E10B.AddItem(PCRxReprodutorID);
                IX_9FAD20773B804EC484CCE1B5A9ECBDA1.Name = "IX_9FAD20773B804EC484CCE1B5A9ECBDA1";
                IX_9FAD20773B804EC484CCE1B5A9ECBDA1.ID = new Guid("ECE90905-82EF-4206-9E70-5BC53AB3B66A");
                IX_9FAD20773B804EC484CCE1B5A9ECBDA1.IsUnique = false;
                IX_9FAD20773B804EC484CCE1B5A9ECBDA1.Description = "";
                IX_9FAD20773B804EC484CCE1B5A9ECBDA1.AddItem(PCRxAnimalID);
                IX_6910F1D272BA48F18EAB9A36B4BFEB47.Name = "IX_6910F1D272BA48F18EAB9A36B4BFEB47";
                IX_6910F1D272BA48F18EAB9A36B4BFEB47.ID = new Guid("4871A699-3E4C-4F7E-9917-EDE65D4F1B7E");
                IX_6910F1D272BA48F18EAB9A36B4BFEB47.IsUnique = false;
                IX_6910F1D272BA48F18EAB9A36B4BFEB47.Description = "";
                IX_6910F1D272BA48F18EAB9A36B4BFEB47.AddItem(PCRxAnimalLoteID);
                IX_8EA9736F97D64AE9A0DC78C061D840BB.Name = "IX_8EA9736F97D64AE9A0DC78C061D840BB";
                IX_8EA9736F97D64AE9A0DC78C061D840BB.ID = new Guid("36DF96C5-8561-436E-B92C-FDA391BBEA78");
                IX_8EA9736F97D64AE9A0DC78C061D840BB.IsUnique = false;
                IX_8EA9736F97D64AE9A0DC78C061D840BB.Description = "";
                IX_8EA9736F97D64AE9A0DC78C061D840BB.AddItem(PCRxIATFFaseID);
                IX_6FB1FC0CD2794D9A89AC29F79552CE72.Name = "IX_6FB1FC0CD2794D9A89AC29F79552CE72";
                IX_6FB1FC0CD2794D9A89AC29F79552CE72.ID = new Guid("E7E164C4-A653-49AD-87A7-4993CE525CAC");
                IX_6FB1FC0CD2794D9A89AC29F79552CE72.IsUnique = false;
                IX_6FB1FC0CD2794D9A89AC29F79552CE72.Description = "";
                IX_6FB1FC0CD2794D9A89AC29F79552CE72.AddItem(PCRxAnimalEstadoID);
                IX_234460DBDF0E44DDB6B92AE8FDB8B0F5.Name = "IX_234460DBDF0E44DDB6B92AE8FDB8B0F5";
                IX_234460DBDF0E44DDB6B92AE8FDB8B0F5.ID = new Guid("ABF8DD1B-7B5D-4CF0-BC9C-46E502E8BD5A");
                IX_234460DBDF0E44DDB6B92AE8FDB8B0F5.IsUnique = false;
                IX_234460DBDF0E44DDB6B92AE8FDB8B0F5.Description = "";
                IX_234460DBDF0E44DDB6B92AE8FDB8B0F5.AddItem(PCRxIATFFaseTipoID);
                IX_DA8CCC87E5E74A4083AA9C0659143FF4.Name = "IX_DA8CCC87E5E74A4083AA9C0659143FF4";
                IX_DA8CCC87E5E74A4083AA9C0659143FF4.ID = new Guid("208C5514-F0EF-4DF5-97FC-0C10C500E06A");
                IX_DA8CCC87E5E74A4083AA9C0659143FF4.IsUnique = false;
                IX_DA8CCC87E5E74A4083AA9C0659143FF4.Description = "";
                IX_DA8CCC87E5E74A4083AA9C0659143FF4.AddItem(ISExItemID);
                SYSxPessoaID.AllowZero = true;
                FK_42EFE6DB12064EDB90941A7F33C86DA8.AllowZero = true;
                PCRxReprodutorID.AllowZero = true;
                FK_4A73303075584856B65A97FA8512E10B.AllowZero = true;
                PCRxAnimalEventoID.AllowZero = true;
                FK_A5C644E75854454D93A58A3295A50F57.AllowZero = true;
                PCRxAnimalID.AllowZero = true;
                FK_9FAD20773B804EC484CCE1B5A9ECBDA1.AllowZero = true;
                PCRxAnimalLoteID.AllowZero = true;
                FK_6910F1D272BA48F18EAB9A36B4BFEB47.AllowZero = true;
                PCRxIATFFaseID.AllowZero = true;
                FK_8EA9736F97D64AE9A0DC78C061D840BB.AllowZero = true;
                PCRxAnimalEstadoID.AllowZero = true;
                FK_6FB1FC0CD2794D9A89AC29F79552CE72.AllowZero = true;
                PCRxIATFFaseTipoID.AllowZero = true;
                FK_234460DBDF0E44DDB6B92AE8FDB8B0F5.AllowZero = true;
                ISExItemID.AllowZero = true;
                FK_DA8CCC87E5E74A4083AA9C0659143FF4.AllowZero = true;
            }
            protected PCRxAnimalEvento()
            {
                TupleType = typeof(XTuple);
                PersistenceType = typeof(__PCRxAnimalEvento);
                ID = new Guid("3D4ED437-A9E9-4775-B2A0-887BE2B192B4");
                Name = "PCRxAnimalEvento";
                Title = "Eventos de Animais";
                CompanyControlType = XCompanyControlType.None;
                ModuleID = new Guid("02C4E7C5-1B4F-43DB-AC6C-CD36BBE428B7");
                DeleteOnDeactivate = false;
                PKName = "PK_3600E3B8909C41CFBE4CA112E982C68A";
                FaceField = PCRxAnimalEventoID;
                DisplayField = PCRxAnimalEventoID;
                InheritanceID = new Guid("9C81F109-A48B-4008-92F3-F5E06E46099F");
            }
            protected override void LoadDefaultData(XDataSet pDataSet)
            {
                base.LoadDefaultData(pDataSet);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {new Guid("00000000-0000-0000-0000-000000000000"), new Guid("00000000-0000-0000-0000-000000000000"), new Guid("00000000-0000-0000-0000-000000000000"), new Guid("00000000-0000-0000-0000-000000000000"), new Guid("00000000-0000-0000-0000-000000000000"), 0, new Guid("00000000-0000-0000-0000-000000000000"), (Int16)0, new Guid("00000000-0000-0000-0000-000000000000"), (Int16)0, @""}), new Guid("00000000-0000-0000-0000-000000000000"));
            }
        }

        #endregion PCRxAnimalEvento

        #region PCRxAnimalFase

        [XRegister(typeof(PCRxAnimalFase), sCID)]
        public class PCRxAnimalFase : XORMTable
        {
            public const String sCID = "BED17687-9812-4E46-8EFD-6D512BB723B1";
            public static Guid gCID = new Guid(sCID);
            #region XDefault
            public class XDefault
            {
                public static String sBezerro => _Titles[(Int16)1];
                public const Int16 Bezerro = (Int16)1;
                public static String sGarrote => _Titles[(Int16)4];
                public const Int16 Garrote = (Int16)4;
                public static String sNI => _Titles[(Int16)0];
                public const Int16 NI = (Int16)0;
                public static String sVaca => _Titles[(Int16)5];
                public const Int16 Vaca = (Int16)5;
                public static String sTouro => _Titles[(Int16)6];
                public const Int16 Touro = (Int16)6;
                public static String sBezerra => _Titles[(Int16)2];
                public const Int16 Bezerra = (Int16)2;
                public static String sNovilha => _Titles[(Int16)3];
                public const Int16 Novilha = (Int16)3;
                private static Dictionary<Int16, String> _Titles = new Dictionary<Int16, String>()
                {
                [(Int16)1] = "Bezerro",
                [(Int16)4] = "Garrote",
                [(Int16)0] = "NI",
                [(Int16)5] = "Vaca",
                [(Int16)6] = "Touro",
                [(Int16)2] = "Bezerra",
                [(Int16)3] = "Novilha"
                };
                public static String GetTitle(Int16 pIndex)
                {
                    if (!_Titles.ContainsKey(pIndex))
                        return "";
                    return _Titles[pIndex];
                }
            }
            #endregion XDefault
            #region XTuple
            public class XTuple : XDataTuple
            {
                public XTuple()
                {
                }
                public XTuple(Object[] pSource)
                    : base(pSource)
                {
                }
                public XTuple(Int32 pColCount)
                   : this(new Object[pColCount])
                {
                }
                #nullable enable
                public String Fase
                {
                    get
                    {
                        return (String)Value[PCRxAnimalFase.Fase];
                    }
                    set
                    {
                        this[PCRxAnimalFase.Fase] = value;
                    }
                }
                public String? oFase
                {
                    get
                    {
                        GetOldValue(PCRxAnimalFase.Fase, out Object ovlr);
                        return (String?)ovlr;
                    }
                }
                public Int16 PCRxAnimalFaseID
                {
                    get
                    {
                        return (Int16)Value[PCRxAnimalFase.PCRxAnimalFaseID];
                    }
                    set
                    {
                        this[PCRxAnimalFase.PCRxAnimalFaseID] = value;
                    }
                }
                public Int16? oPCRxAnimalFaseID
                {
                    get
                    {
                        GetOldValue(PCRxAnimalFase.PCRxAnimalFaseID, out Object ovlr);
                        return (Int16?)ovlr;
                    }
                }
                #nullable disable
            }
            #endregion XTuple
            private static PCRxAnimalFase _Instance;
            public static PCRxAnimalFase Instance
            {
                get
                {
                    if (_Instance == null)
                        _Instance = XTypeCache.CreateInstanceNP<PCRxAnimalFase>(gCID);
                    return _Instance;
                }
            }
            public static XORMFaceField Fase = new XORMFaceField(new Guid("F7EEE207-AE13-4273-AF6C-B90775AE5F9F"), "Fase", "Fase", XString.CID, 25, 0, false, gCID, null);
            public static XORMPKField PCRxAnimalFaseID = new XORMPKField(new Guid("3D7DBFE8-FF9E-4BFE-A7CB-613BE945F907"), "PCRxAnimalFaseID", "Fase do Animal", XInt16.CID, 0, 0, false, gCID, (Int16)0);
            static PCRxAnimalFase()
            {
                PCRxAnimalFaseID.PKID = new Guid("29BB567ADED647549D5D5D089DD9AB16");
                PCRxAnimalFaseID.UpdateStatic = true;
                PCRxAnimalFaseID.InsertOnly = false;
                PCRxAnimalFaseID.TableName = "PCRxAnimalFase";
                PCRxAnimalFaseID.SourceTableID = new Guid("BED17687-9812-4E46-8EFD-6D512BB723B1");
                PCRxAnimalFaseID.Index = 0;
                Fase.UpdateStatic = true;
                Fase.InsertOnly = false;
                Fase.TableName = "PCRxAnimalFase";
                Fase.SourceTableID = new Guid("BED17687-9812-4E46-8EFD-6D512BB723B1");
                Fase.Index = 1;
                Fase.IsFaceField = true;
            }
            protected PCRxAnimalFase()
            {
                TupleType = typeof(XTuple);
                PersistenceType = typeof(__PCRxAnimalFase);
                ID = new Guid("BED17687-9812-4E46-8EFD-6D512BB723B1");
                Name = "PCRxAnimalFase";
                Title = "Fase do Animal";
                CompanyControlType = XCompanyControlType.None;
                ModuleID = new Guid("02C4E7C5-1B4F-43DB-AC6C-CD36BBE428B7");
                DeleteOnDeactivate = false;
                PKName = "PK_3D7DBFE8FF9E4BFEA7CB613BE945F907";
                FaceField = Fase;
                IsCached = true;
                DisplayField = Fase;
            }
            protected override void LoadDefaultData(XDataSet pDataSet)
            {
                base.LoadDefaultData(pDataSet);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)1, @"Bezerro"}), (Int16)1);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)4, @"Garrote"}), (Int16)4);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)0, @"NI"}), (Int16)0);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)5, @"Vaca"}), (Int16)5);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)6, @"Touro"}), (Int16)6);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)2, @"Bezerra"}), (Int16)2);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)3, @"Novilha"}), (Int16)3);
            }
        }

        #endregion PCRxAnimalFase

        #region PCRxAnimalFiliacao

        [XRegister(typeof(PCRxAnimalFiliacao), sCID)]
        public class PCRxAnimalFiliacao : XORMTable
        {
            public const String sCID = "E38A3583-0F50-4223-9C50-9F5E3786A591";
            public static Guid gCID = new Guid(sCID);
            #region XTuple
            public class XTuple : XDataTuple
            {
                public XTuple()
                {
                }
                public XTuple(Object[] pSource)
                    : base(pSource)
                {
                }
                public XTuple(Int32 pColCount)
                   : this(new Object[pColCount])
                {
                }
                #nullable enable
                public Guid PCRxAnimalFiliacaoID
                {
                    get
                    {
                        return (Guid)Value[PCRxAnimalFiliacao.PCRxAnimalFiliacaoID];
                    }
                    set
                    {
                        this[PCRxAnimalFiliacao.PCRxAnimalFiliacaoID] = value;
                    }
                }
                public Guid? oPCRxAnimalFiliacaoID
                {
                    get
                    {
                        GetOldValue(PCRxAnimalFiliacao.PCRxAnimalFiliacaoID, out Object ovlr);
                        return (Guid?)ovlr;
                    }
                }
                public Guid PCRxMaeID
                {
                    get
                    {
                        return (Guid)Value[PCRxAnimalFiliacao.PCRxMaeID];
                    }
                    set
                    {
                        this[PCRxAnimalFiliacao.PCRxMaeID] = value;
                    }
                }
                public Guid? oPCRxMaeID
                {
                    get
                    {
                        GetOldValue(PCRxAnimalFiliacao.PCRxMaeID, out Object ovlr);
                        return (Guid?)ovlr;
                    }
                }
                public Guid PCRxPaiID
                {
                    get
                    {
                        return (Guid)Value[PCRxAnimalFiliacao.PCRxPaiID];
                    }
                    set
                    {
                        this[PCRxAnimalFiliacao.PCRxPaiID] = value;
                    }
                }
                public Guid? oPCRxPaiID
                {
                    get
                    {
                        GetOldValue(PCRxAnimalFiliacao.PCRxPaiID, out Object ovlr);
                        return (Guid?)ovlr;
                    }
                }
                #nullable disable
            }
            #endregion XTuple
            private static PCRxAnimalFiliacao _Instance;
            public static PCRxAnimalFiliacao Instance
            {
                get
                {
                    if (_Instance == null)
                        _Instance = XTypeCache.CreateInstanceNP<PCRxAnimalFiliacao>(gCID);
                    return _Instance;
                }
            }
            public static XORMPKField PCRxAnimalFiliacaoID = new XORMPKField(new Guid("855BEB4A-F987-41B3-B6FA-FA1D9E63B54A"), "PCRxAnimalFiliacaoID", "Filiação", XGuid.CID, 0, 0, false, gCID, new Guid("00000000-0000-0000-0000-000000000000"));
            public static XORMFKField PCRxMaeID = new XORMFKField(new Guid("6631D8C1-BA42-4791-AB59-A48158786D47"), "PCRxMaeID", "Animal", XGuid.CID, 0, 0, false, gCID, new Guid("00000000-0000-0000-0000-000000000000"));
            public static XORMFKField PCRxPaiID = new XORMFKField(new Guid("C833B67E-AF70-48EB-B6D6-E6A3D506E091"), "PCRxPaiID", "Animal", XGuid.CID, 0, 0, false, gCID, new Guid("00000000-0000-0000-0000-000000000000"));
            public static readonly XORMReference FK_680F8C76272A4B48A4792235A4BB0E25 = new XORMReference(new Guid("680F8C76-272A-4B48-A479-2235A4BB0E25"), "FK_680F8C76272A4B48A4792235A4BB0E25", gCID, PCRxMaeID.ID, PCRxAnimal.gCID, PCRxAnimal.PCRxAnimalID.ID);
            public static readonly XORMReference FK_4DF1247FF4724EB99C6B346BA83FDB8A = new XORMReference(new Guid("4DF1247F-F472-4EB9-9C6B-346BA83FDB8A"), "FK_4DF1247FF4724EB99C6B346BA83FDB8A", gCID, PCRxPaiID.ID, PCRxReprodutor.gCID, PCRxReprodutor.PCRxReprodutorID.ID);
            public static readonly XORMReference FK_B8FE8346CB5A4E1E9E873BD6401619B6 = new XORMReference(new Guid("B8FE8346-CB5A-4E1E-9E87-3BD6401619B6"), "FK_B8FE8346CB5A4E1E9E873BD6401619B6", gCID, PCRxAnimalFiliacaoID.ID, PCRxAnimal.gCID, PCRxAnimal.PCRxAnimalID.ID);
            public static readonly XORMIndex IX_259610BB8148405A882F8232DB0EB56D = new XORMIndex();
            public static readonly XORMIndex IX_680F8C76272A4B48A4792235A4BB0E25 = new XORMIndex();
            public static readonly XORMIndex IX_4DF1247FF4724EB99C6B346BA83FDB8A = new XORMIndex();
            static PCRxAnimalFiliacao()
            {
                PCRxAnimalFiliacaoID.PKID = new Guid("6EF32914186B42CA8818BFFE97D5CCDD");
                PCRxAnimalFiliacaoID.UpdateStatic = true;
                PCRxAnimalFiliacaoID.InsertOnly = false;
                PCRxAnimalFiliacaoID.TableName = "PCRxAnimalFiliacao";
                PCRxAnimalFiliacaoID.SourceTableID = new Guid("E38A3583-0F50-4223-9C50-9F5E3786A591");
                PCRxAnimalFiliacaoID.Index = 0;
                PCRxMaeID.UpdateStatic = true;
                PCRxMaeID.InsertOnly = false;
                PCRxMaeID.TableName = "PCRxAnimalFiliacao";
                PCRxMaeID.SourceTableID = new Guid("E38A3583-0F50-4223-9C50-9F5E3786A591");
                PCRxMaeID.Index = 1;
                PCRxPaiID.UpdateStatic = true;
                PCRxPaiID.InsertOnly = false;
                PCRxPaiID.TableName = "PCRxAnimalFiliacao";
                PCRxPaiID.SourceTableID = new Guid("E38A3583-0F50-4223-9C50-9F5E3786A591");
                PCRxPaiID.Index = 2;
                IX_259610BB8148405A882F8232DB0EB56D.Name = "IX_259610BB8148405A882F8232DB0EB56D";
                IX_259610BB8148405A882F8232DB0EB56D.ID = new Guid("259610BB-8148-405A-882F-8232DB0EB56D");
                IX_259610BB8148405A882F8232DB0EB56D.IsUnique = false;
                IX_259610BB8148405A882F8232DB0EB56D.Description = "";
                IX_259610BB8148405A882F8232DB0EB56D.AddItem(PCRxAnimalFiliacaoID);
                IX_259610BB8148405A882F8232DB0EB56D.AddItem(PCRxMaeID);
                IX_259610BB8148405A882F8232DB0EB56D.AddItem(PCRxPaiID);
                IX_680F8C76272A4B48A4792235A4BB0E25.Name = "IX_680F8C76272A4B48A4792235A4BB0E25";
                IX_680F8C76272A4B48A4792235A4BB0E25.ID = new Guid("EE45312C-666B-4140-A94A-4415BD3FE683");
                IX_680F8C76272A4B48A4792235A4BB0E25.IsUnique = false;
                IX_680F8C76272A4B48A4792235A4BB0E25.Description = "";
                IX_680F8C76272A4B48A4792235A4BB0E25.AddItem(PCRxMaeID);
                IX_4DF1247FF4724EB99C6B346BA83FDB8A.Name = "IX_4DF1247FF4724EB99C6B346BA83FDB8A";
                IX_4DF1247FF4724EB99C6B346BA83FDB8A.ID = new Guid("932513F1-485F-450C-BA26-E93C10EAD6E3");
                IX_4DF1247FF4724EB99C6B346BA83FDB8A.IsUnique = false;
                IX_4DF1247FF4724EB99C6B346BA83FDB8A.Description = "";
                IX_4DF1247FF4724EB99C6B346BA83FDB8A.AddItem(PCRxPaiID);
                PCRxMaeID.AllowZero = true;
                FK_680F8C76272A4B48A4792235A4BB0E25.AllowZero = true;
                PCRxPaiID.AllowZero = true;
                FK_4DF1247FF4724EB99C6B346BA83FDB8A.AllowZero = true;
                PCRxAnimalFiliacaoID.AllowZero = true;
                FK_B8FE8346CB5A4E1E9E873BD6401619B6.AllowZero = true;
            }
            protected PCRxAnimalFiliacao()
            {
                TupleType = typeof(XTuple);
                PersistenceType = typeof(__PCRxAnimalFiliacao);
                ID = new Guid("E38A3583-0F50-4223-9C50-9F5E3786A591");
                Name = "PCRxAnimalFiliacao";
                Title = "Filiação";
                CompanyControlType = XCompanyControlType.None;
                ModuleID = new Guid("02C4E7C5-1B4F-43DB-AC6C-CD36BBE428B7");
                DeleteOnDeactivate = false;
                PKName = "PK_855BEB4AF98741B3B6FAFA1D9E63B54A";
                InheritanceID = new Guid("01BC341A-0142-4C60-87A7-9228AD3A73E9");
            }
            protected override void LoadDefaultData(XDataSet pDataSet)
            {
                base.LoadDefaultData(pDataSet);
            }
        }

        #endregion PCRxAnimalFiliacao

        #region PCRxAnimalLote

        [XRegister(typeof(PCRxAnimalLote), sCID)]
        public class PCRxAnimalLote : XORMTable
        {
            public const String sCID = "0C08D035-CD77-4C4F-BC61-30A984D669BD";
            public static Guid gCID = new Guid(sCID);
            #region XDefault
            public class XDefault
            {
                public static String s_00000000000000000000000000000000 => _Titles[new Guid("00000000-0000-0000-0000-000000000000")];
                public static Guid _00000000000000000000000000000000 = new Guid("00000000-0000-0000-0000-000000000000");
                private static Dictionary<Guid, String> _Titles = new Dictionary<Guid, String>()
                {
                [new Guid("00000000-0000-0000-0000-000000000000")] = "00000000-0000-0000-0000-000000000000"
                };
                public static String GetTitle(Guid pIndex)
                {
                    if (!_Titles.ContainsKey(pIndex))
                        return "";
                    return _Titles[pIndex];
                }
            }
            #endregion XDefault
            #region XTuple
            public class XTuple : XDataTuple
            {
                public XTuple()
                {
                }
                public XTuple(Object[] pSource)
                    : base(pSource)
                {
                }
                public XTuple(Int32 pColCount)
                   : this(new Object[pColCount])
                {
                }
                #nullable enable
                public Int32 Ano
                {
                    get
                    {
                        return (Int32)Value[PCRxAnimalLote.Ano];
                    }
                    set
                    {
                        this[PCRxAnimalLote.Ano] = value;
                    }
                }
                public Int32? oAno
                {
                    get
                    {
                        GetOldValue(PCRxAnimalLote.Ano, out Object ovlr);
                        return (Int32?)ovlr;
                    }
                }
                public DateTime DataCriacao
                {
                    get
                    {
                        return (DateTime)Value[PCRxAnimalLote.DataCriacao];
                    }
                    set
                    {
                        this[PCRxAnimalLote.DataCriacao] = value;
                    }
                }
                public DateTime? oDataCriacao
                {
                    get
                    {
                        GetOldValue(PCRxAnimalLote.DataCriacao, out Object ovlr);
                        return (DateTime?)ovlr;
                    }
                }
                public String Lote
                {
                    get
                    {
                        return (String)Value[PCRxAnimalLote.Lote];
                    }
                    set
                    {
                        this[PCRxAnimalLote.Lote] = value;
                    }
                }
                public String? oLote
                {
                    get
                    {
                        GetOldValue(PCRxAnimalLote.Lote, out Object ovlr);
                        return (String?)ovlr;
                    }
                }
                public Guid PCRxAnimalLoteID
                {
                    get
                    {
                        return (Guid)Value[PCRxAnimalLote.PCRxAnimalLoteID];
                    }
                    set
                    {
                        this[PCRxAnimalLote.PCRxAnimalLoteID] = value;
                    }
                }
                public Guid? oPCRxAnimalLoteID
                {
                    get
                    {
                        GetOldValue(PCRxAnimalLote.PCRxAnimalLoteID, out Object ovlr);
                        return (Guid?)ovlr;
                    }
                }
                #nullable disable
            }
            #endregion XTuple
            private static PCRxAnimalLote _Instance;
            public static PCRxAnimalLote Instance
            {
                get
                {
                    if (_Instance == null)
                        _Instance = XTypeCache.CreateInstanceNP<PCRxAnimalLote>(gCID);
                    return _Instance;
                }
            }
            public static XORMField Ano = new XORMField(new Guid("5C7F48BA-8B1D-4ABA-A3A5-D34B29DAD009"), "Ano", "Ano", XInt32.CID, 0, 0, false, gCID, 0);
            public static XORMDateTimeField DataCriacao = new XORMDateTimeField(new Guid("032BB537-C3F1-4A19-A7E3-1AA8D151667A"), "DataCriacao", "da de Criação", XDateTime.CID, 0, 0, false, gCID, TFX.Core.XDefault.NullDateTime);
            public static XORMFaceField Lote = new XORMFaceField(new Guid("08013FED-EC0C-4475-A947-8B3E7FA19160"), "Lote", "Lote", XString.CID, 12, 0, false, gCID, null);
            public static XORMPKField PCRxAnimalLoteID = new XORMPKField(new Guid("944AA331-E956-48EF-8283-039E98C54E3E"), "PCRxAnimalLoteID", "Lote de Animais", XGuid.CID, 0, 0, false, gCID, new Guid("00000000-0000-0000-0000-000000000000"));
            public static readonly XORMIndex IX_BDF8A12E766F4CF4B55CA15E01CF90B4 = new XORMIndex();
            static PCRxAnimalLote()
            {
                PCRxAnimalLoteID.PKID = new Guid("7A028227C201498CB1185770E2DCAD70");
                PCRxAnimalLoteID.UpdateStatic = true;
                PCRxAnimalLoteID.InsertOnly = false;
                PCRxAnimalLoteID.TableName = "PCRxAnimalLote";
                PCRxAnimalLoteID.SourceTableID = new Guid("0C08D035-CD77-4C4F-BC61-30A984D669BD");
                PCRxAnimalLoteID.Index = 0;
                PCRxAnimalLoteID.IsFaceField = true;
                Lote.UpdateStatic = true;
                Lote.InsertOnly = false;
                Lote.TableName = "PCRxAnimalLote";
                Lote.SourceTableID = new Guid("0C08D035-CD77-4C4F-BC61-30A984D669BD");
                Lote.Index = 1;
                Lote.IsFaceField = true;
                DataCriacao.UpdateStatic = true;
                DataCriacao.InsertOnly = false;
                DataCriacao.TableName = "PCRxAnimalLote";
                DataCriacao.SourceTableID = new Guid("0C08D035-CD77-4C4F-BC61-30A984D669BD");
                DataCriacao.Index = 2;
                Ano.UpdateStatic = true;
                Ano.InsertOnly = false;
                Ano.TableName = "PCRxAnimalLote";
                Ano.SourceTableID = new Guid("0C08D035-CD77-4C4F-BC61-30A984D669BD");
                Ano.Min = -2147483648;
                Ano.Max = 2147483647;
                Ano.Index = 3;
                IX_BDF8A12E766F4CF4B55CA15E01CF90B4.Name = "IX_BDF8A12E766F4CF4B55CA15E01CF90B4";
                IX_BDF8A12E766F4CF4B55CA15E01CF90B4.ID = new Guid("BDF8A12E-766F-4CF4-B55C-A15E01CF90B4");
                IX_BDF8A12E766F4CF4B55CA15E01CF90B4.IsUnique = true;
                IX_BDF8A12E766F4CF4B55CA15E01CF90B4.Description = "";
                IX_BDF8A12E766F4CF4B55CA15E01CF90B4.AddItem(Lote);
                IX_BDF8A12E766F4CF4B55CA15E01CF90B4.AddItem(Ano);
            }
            protected PCRxAnimalLote()
            {
                TupleType = typeof(XTuple);
                PersistenceType = typeof(__PCRxAnimalLote);
                ID = new Guid("0C08D035-CD77-4C4F-BC61-30A984D669BD");
                Name = "PCRxAnimalLote";
                Title = "Lote de Animais";
                CompanyControlType = XCompanyControlType.None;
                ModuleID = new Guid("02C4E7C5-1B4F-43DB-AC6C-CD36BBE428B7");
                DeleteOnDeactivate = false;
                PKName = "PK_944AA331E95648EF8283039E98C54E3E";
                FaceField = PCRxAnimalLoteID;
                DisplayField = PCRxAnimalLoteID;
            }
            protected override void LoadDefaultData(XDataSet pDataSet)
            {
                base.LoadDefaultData(pDataSet);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {new Guid("00000000-0000-0000-0000-000000000000"), @"NA", TFX.Core.XDefault.NullDateTime, 0}), new Guid("00000000-0000-0000-0000-000000000000"));
            }
        }

        #endregion PCRxAnimalLote

        #region PCRxAnimalPasto

        [XRegister(typeof(PCRxAnimalPasto), sCID)]
        public class PCRxAnimalPasto : XORMTable
        {
            public const String sCID = "1AB30889-F04B-4649-B33B-1134F1D4BF37";
            public static Guid gCID = new Guid(sCID);
            #region XTuple
            public class XTuple : XDataTuple
            {
                public XTuple()
                {
                }
                public XTuple(Object[] pSource)
                    : base(pSource)
                {
                }
                public XTuple(Int32 pColCount)
                   : this(new Object[pColCount])
                {
                }
                #nullable enable
                public Guid PCRxAnimalPastoID
                {
                    get
                    {
                        return (Guid)Value[PCRxAnimalPasto.PCRxAnimalPastoID];
                    }
                    set
                    {
                        this[PCRxAnimalPasto.PCRxAnimalPastoID] = value;
                    }
                }
                public Guid? oPCRxAnimalPastoID
                {
                    get
                    {
                        GetOldValue(PCRxAnimalPasto.PCRxAnimalPastoID, out Object ovlr);
                        return (Guid?)ovlr;
                    }
                }
                public Int32 PCRxPastoID
                {
                    get
                    {
                        return (Int32)Value[PCRxAnimalPasto.PCRxPastoID];
                    }
                    set
                    {
                        this[PCRxAnimalPasto.PCRxPastoID] = value;
                    }
                }
                public Int32? oPCRxPastoID
                {
                    get
                    {
                        GetOldValue(PCRxAnimalPasto.PCRxPastoID, out Object ovlr);
                        return (Int32?)ovlr;
                    }
                }
                #nullable disable
            }
            #endregion XTuple
            private static PCRxAnimalPasto _Instance;
            public static PCRxAnimalPasto Instance
            {
                get
                {
                    if (_Instance == null)
                        _Instance = XTypeCache.CreateInstanceNP<PCRxAnimalPasto>(gCID);
                    return _Instance;
                }
            }
            public static XORMPKField PCRxAnimalPastoID = new XORMPKField(new Guid("9D6CD9CE-6535-4208-AC60-44459FD86D63"), "PCRxAnimalPastoID", "Pasto por Animal", XGuid.CID, 0, 0, false, gCID, new Guid("00000000-0000-0000-0000-000000000000"));
            public static XORMFKField PCRxPastoID = new XORMFKField(new Guid("33D4169C-D9DC-4816-AECC-18495CD5B444"), "PCRxPastoID", "Pasto", XInt32.CID, 0, 0, false, gCID, 0);
            public static readonly XORMReference FK_C82DEEB143B54FF4BD3AF4C43335348C = new XORMReference(new Guid("C82DEEB1-43B5-4FF4-BD3A-F4C43335348C"), "FK_C82DEEB143B54FF4BD3AF4C43335348C", gCID, PCRxPastoID.ID, PCRxPasto.gCID, PCRxPasto.PCRxPastoID.ID);
            public static readonly XORMReference FK_394C5CF83BBE42A98CB8E7E8431C7B1D = new XORMReference(new Guid("394C5CF8-3BBE-42A9-8CB8-E7E8431C7B1D"), "FK_394C5CF83BBE42A98CB8E7E8431C7B1D", gCID, PCRxAnimalPastoID.ID, PCRxAnimal.gCID, PCRxAnimal.PCRxAnimalID.ID);
            public static readonly XORMIndex IX_C82DEEB143B54FF4BD3AF4C43335348C = new XORMIndex();
            static PCRxAnimalPasto()
            {
                PCRxAnimalPastoID.PKID = new Guid("2F6BB1B35D0A4DB7938994B6BAABEB72");
                PCRxAnimalPastoID.UpdateStatic = true;
                PCRxAnimalPastoID.InsertOnly = false;
                PCRxAnimalPastoID.TableName = "PCRxAnimalPasto";
                PCRxAnimalPastoID.SourceTableID = new Guid("1AB30889-F04B-4649-B33B-1134F1D4BF37");
                PCRxAnimalPastoID.Index = 0;
                PCRxPastoID.UpdateStatic = true;
                PCRxPastoID.InsertOnly = false;
                PCRxPastoID.TableName = "PCRxAnimalPasto";
                PCRxPastoID.SourceTableID = new Guid("1AB30889-F04B-4649-B33B-1134F1D4BF37");
                PCRxPastoID.Index = 1;
                IX_C82DEEB143B54FF4BD3AF4C43335348C.Name = "IX_C82DEEB143B54FF4BD3AF4C43335348C";
                IX_C82DEEB143B54FF4BD3AF4C43335348C.ID = new Guid("FFDCC473-BCDD-4C56-A4F7-8BED6266A26F");
                IX_C82DEEB143B54FF4BD3AF4C43335348C.IsUnique = false;
                IX_C82DEEB143B54FF4BD3AF4C43335348C.Description = "";
                IX_C82DEEB143B54FF4BD3AF4C43335348C.AddItem(PCRxPastoID);
                PCRxPastoID.AllowZero = true;
                FK_C82DEEB143B54FF4BD3AF4C43335348C.AllowZero = true;
                PCRxAnimalPastoID.AllowZero = true;
                FK_394C5CF83BBE42A98CB8E7E8431C7B1D.AllowZero = true;
            }
            protected PCRxAnimalPasto()
            {
                TupleType = typeof(XTuple);
                PersistenceType = typeof(__PCRxAnimalPasto);
                ID = new Guid("1AB30889-F04B-4649-B33B-1134F1D4BF37");
                Name = "PCRxAnimalPasto";
                Title = "Pasto por Animal";
                CompanyControlType = XCompanyControlType.None;
                ModuleID = new Guid("02C4E7C5-1B4F-43DB-AC6C-CD36BBE428B7");
                DeleteOnDeactivate = false;
                PKName = "PK_9D6CD9CE65354208AC6044459FD86D63";
                InheritanceID = new Guid("01BC341A-0142-4C60-87A7-9228AD3A73E9");
            }
            protected override void LoadDefaultData(XDataSet pDataSet)
            {
                base.LoadDefaultData(pDataSet);
            }
        }

        #endregion PCRxAnimalPasto

        #region PCRxDocumento

        [XRegister(typeof(PCRxDocumento), sCID)]
        public class PCRxDocumento : XORMTable
        {
            public const String sCID = "60F40C15-AA72-4D88-BCCD-CED08AC3C7FF";
            public static Guid gCID = new Guid(sCID);
            #region XTuple
            public class XTuple : XDataTuple
            {
                public XTuple()
                {
                }
                public XTuple(Object[] pSource)
                    : base(pSource)
                {
                }
                public XTuple(Int32 pColCount)
                   : this(new Object[pColCount])
                {
                }
                #nullable enable
                public Byte[] Certificado
                {
                    get
                    {
                        return (Byte[])Value[PCRxDocumento.Certificado];
                    }
                    set
                    {
                        this[PCRxDocumento.Certificado] = value;
                    }
                }
                public Byte[]? oCertificado
                {
                    get
                    {
                        GetOldValue(PCRxDocumento.Certificado, out Object ovlr);
                        return (Byte[]?)ovlr;
                    }
                }
                public Guid PCRxDocumentoID
                {
                    get
                    {
                        return (Guid)Value[PCRxDocumento.PCRxDocumentoID];
                    }
                    set
                    {
                        this[PCRxDocumento.PCRxDocumentoID] = value;
                    }
                }
                public Guid? oPCRxDocumentoID
                {
                    get
                    {
                        GetOldValue(PCRxDocumento.PCRxDocumentoID, out Object ovlr);
                        return (Guid?)ovlr;
                    }
                }
                #nullable disable
            }
            #endregion XTuple
            private static PCRxDocumento _Instance;
            public static PCRxDocumento Instance
            {
                get
                {
                    if (_Instance == null)
                        _Instance = XTypeCache.CreateInstanceNP<PCRxDocumento>(gCID);
                    return _Instance;
                }
            }
            public static XORMField Certificado = new XORMField(new Guid("7F9DC666-FEFE-44E9-B345-E657A982CC3B"), "Certificado", "Certificado", XBinary.CID, 0, 0, true, gCID, null);
            public static XORMPKField PCRxDocumentoID = new XORMPKField(new Guid("1FD96B85-842C-4798-BF5B-4A8319D5A345"), "PCRxDocumentoID", "Documento", XGuid.CID, 0, 0, false, gCID, new Guid("00000000-0000-0000-0000-000000000000"));
            public static readonly XORMReference FK_19B1F0ECBD0F445BA14BEC858395F90C = new XORMReference(new Guid("19B1F0EC-BD0F-445B-A14B-EC858395F90C"), "FK_19B1F0ECBD0F445BA14BEC858395F90C", gCID, PCRxDocumentoID.ID, PCRxReprodutor.gCID, PCRxReprodutor.PCRxReprodutorID.ID);
            static PCRxDocumento()
            {
                PCRxDocumentoID.PKID = new Guid("4149709A4EB841C3BDB73AD349EB4F88");
                PCRxDocumentoID.UpdateStatic = true;
                PCRxDocumentoID.InsertOnly = false;
                PCRxDocumentoID.TableName = "PCRxDocumento";
                PCRxDocumentoID.SourceTableID = new Guid("60F40C15-AA72-4D88-BCCD-CED08AC3C7FF");
                PCRxDocumentoID.Index = 0;
                Certificado.UpdateStatic = true;
                Certificado.InsertOnly = false;
                Certificado.TableName = "PCRxDocumento";
                Certificado.SourceTableID = new Guid("60F40C15-AA72-4D88-BCCD-CED08AC3C7FF");
                Certificado.Index = 1;
                PCRxDocumentoID.AllowZero = true;
                FK_19B1F0ECBD0F445BA14BEC858395F90C.AllowZero = true;
            }
            protected PCRxDocumento()
            {
                TupleType = typeof(XTuple);
                PersistenceType = typeof(__PCRxDocumento);
                ID = new Guid("60F40C15-AA72-4D88-BCCD-CED08AC3C7FF");
                Name = "PCRxDocumento";
                Title = "Documento";
                CompanyControlType = XCompanyControlType.None;
                ModuleID = new Guid("02C4E7C5-1B4F-43DB-AC6C-CD36BBE428B7");
                DeleteOnDeactivate = false;
                PKName = "PK_1FD96B85842C4798BF5B4A8319D5A345";
                InheritanceID = new Guid("611399CF-967F-4E1F-96DB-C42F42C7A5A6");
            }
            protected override void LoadDefaultData(XDataSet pDataSet)
            {
                base.LoadDefaultData(pDataSet);
            }
        }

        #endregion PCRxDocumento

        #region PCRxElemento

        [XRegister(typeof(PCRxElemento), sCID)]
        public class PCRxElemento : XORMTable
        {
            public const String sCID = "BF9E5FD3-798E-4C18-85B2-CD3B90535A56";
            public static Guid gCID = new Guid(sCID);
            #region XTuple
            public class XTuple : XDataTuple
            {
                public XTuple()
                {
                }
                public XTuple(Object[] pSource)
                    : base(pSource)
                {
                }
                public XTuple(Int32 pColCount)
                   : this(new Object[pColCount])
                {
                }
                #nullable enable
                public Decimal Latitude
                {
                    get
                    {
                        return (Decimal)Value[PCRxElemento.Latitude];
                    }
                    set
                    {
                        this[PCRxElemento.Latitude] = value;
                    }
                }
                public Decimal? oLatitude
                {
                    get
                    {
                        GetOldValue(PCRxElemento.Latitude, out Object ovlr);
                        return (Decimal?)ovlr;
                    }
                }
                public Decimal Longitude
                {
                    get
                    {
                        return (Decimal)Value[PCRxElemento.Longitude];
                    }
                    set
                    {
                        this[PCRxElemento.Longitude] = value;
                    }
                }
                public Decimal? oLongitude
                {
                    get
                    {
                        GetOldValue(PCRxElemento.Longitude, out Object ovlr);
                        return (Decimal?)ovlr;
                    }
                }
                public String Nome
                {
                    get
                    {
                        return (String)Value[PCRxElemento.Nome];
                    }
                    set
                    {
                        this[PCRxElemento.Nome] = value;
                    }
                }
                public String? oNome
                {
                    get
                    {
                        GetOldValue(PCRxElemento.Nome, out Object ovlr);
                        return (String?)ovlr;
                    }
                }
                public Int32 PCRxElementoID
                {
                    get
                    {
                        return (Int32)Value[PCRxElemento.PCRxElementoID];
                    }
                    set
                    {
                        this[PCRxElemento.PCRxElementoID] = value;
                    }
                }
                public Int32? oPCRxElementoID
                {
                    get
                    {
                        GetOldValue(PCRxElemento.PCRxElementoID, out Object ovlr);
                        return (Int32?)ovlr;
                    }
                }
                public Int16 PCRxElementoTipoID
                {
                    get
                    {
                        return (Int16)Value[PCRxElemento.PCRxElementoTipoID];
                    }
                    set
                    {
                        this[PCRxElemento.PCRxElementoTipoID] = value;
                    }
                }
                public Int16? oPCRxElementoTipoID
                {
                    get
                    {
                        GetOldValue(PCRxElemento.PCRxElementoTipoID, out Object ovlr);
                        return (Int16?)ovlr;
                    }
                }
                public Int32 PCRxPastoID
                {
                    get
                    {
                        return (Int32)Value[PCRxElemento.PCRxPastoID];
                    }
                    set
                    {
                        this[PCRxElemento.PCRxPastoID] = value;
                    }
                }
                public Int32? oPCRxPastoID
                {
                    get
                    {
                        GetOldValue(PCRxElemento.PCRxPastoID, out Object ovlr);
                        return (Int32?)ovlr;
                    }
                }
                #nullable disable
            }
            #endregion XTuple
            private static PCRxElemento _Instance;
            public static PCRxElemento Instance
            {
                get
                {
                    if (_Instance == null)
                        _Instance = XTypeCache.CreateInstanceNP<PCRxElemento>(gCID);
                    return _Instance;
                }
            }
            public static XORMDecimalField Latitude = new XORMDecimalField(new Guid("39D75911-C37A-480E-A9CC-BB260E6D4067"), "Latitude", "Latitude", XDecimal.CID, 20, 10, false, gCID, 0);
            public static XORMDecimalField Longitude = new XORMDecimalField(new Guid("21F336AA-EC2E-4F7E-9D51-FA053B9B530F"), "Longitude", "Longitude", XDecimal.CID, 20, 10, false, gCID, 0);
            public static XORMField Nome = new XORMField(new Guid("727E76C5-7DA3-4B4A-BAC1-5675999A6300"), "Nome", "Nome", XString.CID, 25, 0, false, gCID, null);
            public static XORMPKField PCRxElementoID = new XORMPKField(new Guid("CCFDE4F7-3A3C-4069-8260-94EF22403A0F"), "PCRxElementoID", "Elemento", XInt32.CID, 0, 0, false, gCID, 0);
            public static XORMFKField PCRxElementoTipoID = new XORMFKField(new Guid("E8E7B321-58AB-44E7-8C30-3C8E76C994C2"), "PCRxElementoTipoID", "Tipo de Elemento", XInt16.CID, 0, 0, false, gCID, (Int16)0);
            public static XORMFKField PCRxPastoID = new XORMFKField(new Guid("6C20B03E-E259-4D8B-8510-1E53645E3D56"), "PCRxPastoID", "Pasto", XInt32.CID, 0, 0, false, gCID, 0);
            public static readonly XORMReference FK_315DCE122A9E44AB9095F463F0315DAB = new XORMReference(new Guid("315DCE12-2A9E-44AB-9095-F463F0315DAB"), "FK_315DCE122A9E44AB9095F463F0315DAB", gCID, PCRxPastoID.ID, PCRxPasto.gCID, PCRxPasto.PCRxPastoID.ID);
            public static readonly XORMReference FK_956182C3E2C545BCB540192B716959FE = new XORMReference(new Guid("956182C3-E2C5-45BC-B540-192B716959FE"), "FK_956182C3E2C545BCB540192B716959FE", gCID, PCRxElementoTipoID.ID, PCRxElementoTipo.gCID, PCRxElementoTipo.PCRxElementoTipoID.ID);
            public static readonly XORMIndex IX_315DCE122A9E44AB9095F463F0315DAB = new XORMIndex();
            public static readonly XORMIndex IX_956182C3E2C545BCB540192B716959FE = new XORMIndex();
            static PCRxElemento()
            {
                PCRxElementoID.PKID = new Guid("3B8ACB941CD34E5CB703B33926A58048");
                PCRxElementoID.UpdateStatic = true;
                PCRxElementoID.InsertOnly = false;
                PCRxElementoID.TableName = "PCRxElemento";
                PCRxElementoID.SourceTableID = new Guid("BF9E5FD3-798E-4C18-85B2-CD3B90535A56");
                PCRxElementoID.Index = 0;
                PCRxPastoID.UpdateStatic = true;
                PCRxPastoID.InsertOnly = false;
                PCRxPastoID.TableName = "PCRxElemento";
                PCRxPastoID.SourceTableID = new Guid("BF9E5FD3-798E-4C18-85B2-CD3B90535A56");
                PCRxPastoID.Index = 1;
                PCRxElementoTipoID.UpdateStatic = true;
                PCRxElementoTipoID.InsertOnly = false;
                PCRxElementoTipoID.TableName = "PCRxElemento";
                PCRxElementoTipoID.SourceTableID = new Guid("BF9E5FD3-798E-4C18-85B2-CD3B90535A56");
                PCRxElementoTipoID.Index = 2;
                Nome.UpdateStatic = true;
                Nome.InsertOnly = false;
                Nome.TableName = "PCRxElemento";
                Nome.SourceTableID = new Guid("BF9E5FD3-798E-4C18-85B2-CD3B90535A56");
                Nome.Index = 3;
                Latitude.UpdateStatic = true;
                Latitude.InsertOnly = false;
                Latitude.TableName = "PCRxElemento";
                Latitude.SourceTableID = new Guid("BF9E5FD3-798E-4C18-85B2-CD3B90535A56");
                Latitude.Min = -79228162514264337593543950335M;
                Latitude.Max = 79228162514264337593543950335M;
                Latitude.Index = 4;
                Longitude.UpdateStatic = true;
                Longitude.InsertOnly = false;
                Longitude.TableName = "PCRxElemento";
                Longitude.SourceTableID = new Guid("BF9E5FD3-798E-4C18-85B2-CD3B90535A56");
                Longitude.Min = -79228162514264337593543950335M;
                Longitude.Max = 79228162514264337593543950335M;
                Longitude.Index = 5;
                IX_315DCE122A9E44AB9095F463F0315DAB.Name = "IX_315DCE122A9E44AB9095F463F0315DAB";
                IX_315DCE122A9E44AB9095F463F0315DAB.ID = new Guid("86CB8427-D3B1-47D5-A71E-6A9F6C8C6C5F");
                IX_315DCE122A9E44AB9095F463F0315DAB.IsUnique = false;
                IX_315DCE122A9E44AB9095F463F0315DAB.Description = "";
                IX_315DCE122A9E44AB9095F463F0315DAB.AddItem(PCRxPastoID);
                IX_956182C3E2C545BCB540192B716959FE.Name = "IX_956182C3E2C545BCB540192B716959FE";
                IX_956182C3E2C545BCB540192B716959FE.ID = new Guid("274561B0-6D70-4025-AAF1-51AD7F0EF17E");
                IX_956182C3E2C545BCB540192B716959FE.IsUnique = false;
                IX_956182C3E2C545BCB540192B716959FE.Description = "";
                IX_956182C3E2C545BCB540192B716959FE.AddItem(PCRxElementoTipoID);
                PCRxPastoID.AllowZero = true;
                FK_315DCE122A9E44AB9095F463F0315DAB.AllowZero = true;
                PCRxElementoTipoID.AllowZero = true;
                FK_956182C3E2C545BCB540192B716959FE.AllowZero = true;
            }
            protected PCRxElemento()
            {
                TupleType = typeof(XTuple);
                PersistenceType = typeof(__PCRxElemento);
                ID = new Guid("BF9E5FD3-798E-4C18-85B2-CD3B90535A56");
                Name = "PCRxElemento";
                Title = "Elemento";
                CompanyControlType = XCompanyControlType.None;
                ModuleID = new Guid("02C4E7C5-1B4F-43DB-AC6C-CD36BBE428B7");
                DeleteOnDeactivate = false;
                PKName = "PK_CCFDE4F73A3C4069826094EF22403A0F";
            }
            protected override void LoadDefaultData(XDataSet pDataSet)
            {
                base.LoadDefaultData(pDataSet);
            }
        }

        #endregion PCRxElemento

        #region PCRxElementoTipo

        [XRegister(typeof(PCRxElementoTipo), sCID)]
        public class PCRxElementoTipo : XORMTable
        {
            public const String sCID = "BEC995EF-7AEF-4C95-BEE6-7177EC9C300D";
            public static Guid gCID = new Guid(sCID);
            #region XDefault
            public class XDefault
            {
                public static String sBebedouro => _Titles[(Int16)1];
                public const Int16 Bebedouro = (Int16)1;
                public static String sReservatorio_de_Agua => _Titles[(Int16)2];
                public const Int16 Reservatorio_de_Agua = (Int16)2;
                public static String sCocheira => _Titles[(Int16)3];
                public const Int16 Cocheira = (Int16)3;
                private static Dictionary<Int16, String> _Titles = new Dictionary<Int16, String>()
                {
                [(Int16)1] = "Bebedouro",
                [(Int16)2] = "Reservatório de Água",
                [(Int16)3] = "Cocheira"
                };
                public static String GetTitle(Int16 pIndex)
                {
                    if (!_Titles.ContainsKey(pIndex))
                        return "";
                    return _Titles[pIndex];
                }
            }
            #endregion XDefault
            #region XTuple
            public class XTuple : XDataTuple
            {
                public XTuple()
                {
                }
                public XTuple(Object[] pSource)
                    : base(pSource)
                {
                }
                public XTuple(Int32 pColCount)
                   : this(new Object[pColCount])
                {
                }
                #nullable enable
                public Int16 PCRxElementoTipoID
                {
                    get
                    {
                        return (Int16)Value[PCRxElementoTipo.PCRxElementoTipoID];
                    }
                    set
                    {
                        this[PCRxElementoTipo.PCRxElementoTipoID] = value;
                    }
                }
                public Int16? oPCRxElementoTipoID
                {
                    get
                    {
                        GetOldValue(PCRxElementoTipo.PCRxElementoTipoID, out Object ovlr);
                        return (Int16?)ovlr;
                    }
                }
                public String Tipo
                {
                    get
                    {
                        return (String)Value[PCRxElementoTipo.Tipo];
                    }
                    set
                    {
                        this[PCRxElementoTipo.Tipo] = value;
                    }
                }
                public String? oTipo
                {
                    get
                    {
                        GetOldValue(PCRxElementoTipo.Tipo, out Object ovlr);
                        return (String?)ovlr;
                    }
                }
                #nullable disable
            }
            #endregion XTuple
            private static PCRxElementoTipo _Instance;
            public static PCRxElementoTipo Instance
            {
                get
                {
                    if (_Instance == null)
                        _Instance = XTypeCache.CreateInstanceNP<PCRxElementoTipo>(gCID);
                    return _Instance;
                }
            }
            public static XORMPKField PCRxElementoTipoID = new XORMPKField(new Guid("DD4C55FC-9C78-4E13-9B65-52AAB9BE11DD"), "PCRxElementoTipoID", "Tipo de Elemento", XInt16.CID, 0, 0, false, gCID, (Int16)0);
            public static XORMFaceField Tipo = new XORMFaceField(new Guid("B8BDDFA4-0CF1-48B2-ADFC-98AA915D6DBF"), "Tipo", "Tipo de Elemento", XString.CID, 25, 0, false, gCID, null);
            static PCRxElementoTipo()
            {
                PCRxElementoTipoID.PKID = new Guid("58E66EC2665E4BDBB555D3122C6AFE2D");
                PCRxElementoTipoID.UpdateStatic = true;
                PCRxElementoTipoID.InsertOnly = false;
                PCRxElementoTipoID.TableName = "PCRxElementoTipo";
                PCRxElementoTipoID.SourceTableID = new Guid("BEC995EF-7AEF-4C95-BEE6-7177EC9C300D");
                PCRxElementoTipoID.Index = 0;
                Tipo.UpdateStatic = true;
                Tipo.InsertOnly = false;
                Tipo.TableName = "PCRxElementoTipo";
                Tipo.SourceTableID = new Guid("BEC995EF-7AEF-4C95-BEE6-7177EC9C300D");
                Tipo.Index = 1;
                Tipo.IsFaceField = true;
            }
            protected PCRxElementoTipo()
            {
                TupleType = typeof(XTuple);
                PersistenceType = typeof(__PCRxElementoTipo);
                ID = new Guid("BEC995EF-7AEF-4C95-BEE6-7177EC9C300D");
                Name = "PCRxElementoTipo";
                Title = "Tipo de Elemento";
                CompanyControlType = XCompanyControlType.None;
                ModuleID = new Guid("02C4E7C5-1B4F-43DB-AC6C-CD36BBE428B7");
                DeleteOnDeactivate = false;
                PKName = "PK_DD4C55FC9C784E139B6552AAB9BE11DD";
                FaceField = Tipo;
                IsCached = true;
                DisplayField = Tipo;
            }
            protected override void LoadDefaultData(XDataSet pDataSet)
            {
                base.LoadDefaultData(pDataSet);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)1, @"Bebedouro"}), (Int16)1);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)2, @"Reservatório de Água"}), (Int16)2);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)3, @"Cocheira"}), (Int16)3);
            }
        }

        #endregion PCRxElementoTipo

        #region PCRxEstoque

        [XRegister(typeof(PCRxEstoque), sCID)]
        public class PCRxEstoque : XORMTable
        {
            public const String sCID = "772F258A-3D76-406E-A0C8-C9DA2D9B5495";
            public static Guid gCID = new Guid(sCID);
            #region XTuple
            public class XTuple : XDataTuple
            {
                public XTuple()
                {
                }
                public XTuple(Object[] pSource)
                    : base(pSource)
                {
                }
                public XTuple(Int32 pColCount)
                   : this(new Object[pColCount])
                {
                }
                #nullable enable
                public DateTime DataMovimento
                {
                    get
                    {
                        return (DateTime)Value[PCRxEstoque.DataMovimento];
                    }
                    set
                    {
                        this[PCRxEstoque.DataMovimento] = value;
                    }
                }
                public DateTime? oDataMovimento
                {
                    get
                    {
                        GetOldValue(PCRxEstoque.DataMovimento, out Object ovlr);
                        return (DateTime?)ovlr;
                    }
                }
                public Boolean Entrada
                {
                    get
                    {
                        return (Boolean)Value[PCRxEstoque.Entrada];
                    }
                    set
                    {
                        this[PCRxEstoque.Entrada] = value;
                    }
                }
                public Boolean? oEntrada
                {
                    get
                    {
                        GetOldValue(PCRxEstoque.Entrada, out Object ovlr);
                        return (Boolean?)ovlr;
                    }
                }
                public Int32 PCRxEstoqueID
                {
                    get
                    {
                        return (Int32)Value[PCRxEstoque.PCRxEstoqueID];
                    }
                    set
                    {
                        this[PCRxEstoque.PCRxEstoqueID] = value;
                    }
                }
                public Int32? oPCRxEstoqueID
                {
                    get
                    {
                        GetOldValue(PCRxEstoque.PCRxEstoqueID, out Object ovlr);
                        return (Int32?)ovlr;
                    }
                }
                public Int32 PCRxPastoID
                {
                    get
                    {
                        return (Int32)Value[PCRxEstoque.PCRxPastoID];
                    }
                    set
                    {
                        this[PCRxEstoque.PCRxPastoID] = value;
                    }
                }
                public Int32? oPCRxPastoID
                {
                    get
                    {
                        GetOldValue(PCRxEstoque.PCRxPastoID, out Object ovlr);
                        return (Int32?)ovlr;
                    }
                }
                public Int32 Quantidade
                {
                    get
                    {
                        return (Int32)Value[PCRxEstoque.Quantidade];
                    }
                    set
                    {
                        this[PCRxEstoque.Quantidade] = value;
                    }
                }
                public Int32? oQuantidade
                {
                    get
                    {
                        GetOldValue(PCRxEstoque.Quantidade, out Object ovlr);
                        return (Int32?)ovlr;
                    }
                }
                #nullable disable
            }
            #endregion XTuple
            private static PCRxEstoque _Instance;
            public static PCRxEstoque Instance
            {
                get
                {
                    if (_Instance == null)
                        _Instance = XTypeCache.CreateInstanceNP<PCRxEstoque>(gCID);
                    return _Instance;
                }
            }
            public static XORMDateField DataMovimento = new XORMDateField(new Guid("03BA5EC7-8DD9-4322-93F5-DA5930BA5E7F"), "DataMovimento", "Data do Movimento", XDate.CID, 0, 0, false, gCID, TFX.Core.XDefault.NullDateTime);
            public static XORMField Entrada = new XORMField(new Guid("DAD35614-8DF7-4AE5-B3E1-AEDB15579656"), "Entrada", "Entrada", XBoolean.CID, 0, 0, false, gCID, false);
            public static XORMPKField PCRxEstoqueID = new XORMPKField(new Guid("CCCEAF26-8189-467C-B054-F252B2800AD6"), "PCRxEstoqueID", "Estoque por Pasto", XInt32.CID, 0, 0, false, gCID, 0);
            public static XORMFKField PCRxPastoID = new XORMFKField(new Guid("C012A5BC-E1DC-46F3-AD5D-16BD38797164"), "PCRxPastoID", "Pasto", XInt32.CID, 0, 0, false, gCID, 0);
            public static XORMField Quantidade = new XORMField(new Guid("8EDB6B14-4476-4F67-898E-A4552D1C0E3B"), "Quantidade", "Quantidade", XInt32.CID, 0, 0, false, gCID, 0);
            public static readonly XORMReference FK_00082A8E22F04966873E27B9CECB74CC = new XORMReference(new Guid("00082A8E-22F0-4966-873E-27B9CECB74CC"), "FK_00082A8E22F04966873E27B9CECB74CC", gCID, PCRxPastoID.ID, PCRxPasto.gCID, PCRxPasto.PCRxPastoID.ID);
            public static readonly XORMIndex IX_00082A8E22F04966873E27B9CECB74CC = new XORMIndex();
            static PCRxEstoque()
            {
                PCRxEstoqueID.PKID = new Guid("4FEF0AB8B660423FB2F22816BB5C17FE");
                PCRxEstoqueID.UpdateStatic = true;
                PCRxEstoqueID.InsertOnly = false;
                PCRxEstoqueID.TableName = "PCRxEstoque";
                PCRxEstoqueID.SourceTableID = new Guid("772F258A-3D76-406E-A0C8-C9DA2D9B5495");
                PCRxEstoqueID.Index = 0;
                Quantidade.UpdateStatic = true;
                Quantidade.InsertOnly = false;
                Quantidade.TableName = "PCRxEstoque";
                Quantidade.SourceTableID = new Guid("772F258A-3D76-406E-A0C8-C9DA2D9B5495");
                Quantidade.Min = -2147483648;
                Quantidade.Max = 2147483647;
                Quantidade.Index = 1;
                Entrada.UpdateStatic = true;
                Entrada.InsertOnly = false;
                Entrada.TableName = "PCRxEstoque";
                Entrada.SourceTableID = new Guid("772F258A-3D76-406E-A0C8-C9DA2D9B5495");
                Entrada.Index = 2;
                PCRxPastoID.UpdateStatic = true;
                PCRxPastoID.InsertOnly = false;
                PCRxPastoID.TableName = "PCRxEstoque";
                PCRxPastoID.SourceTableID = new Guid("772F258A-3D76-406E-A0C8-C9DA2D9B5495");
                PCRxPastoID.Index = 3;
                DataMovimento.UpdateStatic = true;
                DataMovimento.InsertOnly = false;
                DataMovimento.TableName = "PCRxEstoque";
                DataMovimento.SourceTableID = new Guid("772F258A-3D76-406E-A0C8-C9DA2D9B5495");
                DataMovimento.Index = 4;
                IX_00082A8E22F04966873E27B9CECB74CC.Name = "IX_00082A8E22F04966873E27B9CECB74CC";
                IX_00082A8E22F04966873E27B9CECB74CC.ID = new Guid("A99BC5A6-6C8A-4FA6-AA15-7C7EB51FE2E9");
                IX_00082A8E22F04966873E27B9CECB74CC.IsUnique = false;
                IX_00082A8E22F04966873E27B9CECB74CC.Description = "";
                IX_00082A8E22F04966873E27B9CECB74CC.AddItem(PCRxPastoID);
                PCRxPastoID.AllowZero = true;
                FK_00082A8E22F04966873E27B9CECB74CC.AllowZero = true;
            }
            protected PCRxEstoque()
            {
                TupleType = typeof(XTuple);
                PersistenceType = typeof(__PCRxEstoque);
                ID = new Guid("772F258A-3D76-406E-A0C8-C9DA2D9B5495");
                Name = "PCRxEstoque";
                Title = "Estoque por Pasto";
                CompanyControlType = XCompanyControlType.None;
                ModuleID = new Guid("02C4E7C5-1B4F-43DB-AC6C-CD36BBE428B7");
                DeleteOnDeactivate = false;
                PKName = "PK_CCCEAF268189467CB054F252B2800AD6";
            }
            protected override void LoadDefaultData(XDataSet pDataSet)
            {
                base.LoadDefaultData(pDataSet);
            }
        }

        #endregion PCRxEstoque

        #region PCRxEvento

        [XRegister(typeof(PCRxEvento), sCID)]
        public class PCRxEvento : XORMTable
        {
            public const String sCID = "9C81F109-A48B-4008-92F3-F5E06E46099F";
            public static Guid gCID = new Guid(sCID);
            #region XDefault
            public class XDefault
            {
                public static String s_00000000000000000000000000000000 => _Titles[new Guid("00000000-0000-0000-0000-000000000000")];
                public static Guid _00000000000000000000000000000000 = new Guid("00000000-0000-0000-0000-000000000000");
                private static Dictionary<Guid, String> _Titles = new Dictionary<Guid, String>()
                {
                [new Guid("00000000-0000-0000-0000-000000000000")] = "00000000-0000-0000-0000-000000000000"
                };
                public static String GetTitle(Guid pIndex)
                {
                    if (!_Titles.ContainsKey(pIndex))
                        return "";
                    return _Titles[pIndex];
                }
            }
            #endregion XDefault
            #region XTuple
            public class XTuple : XDataTuple
            {
                public XTuple()
                {
                }
                public XTuple(Object[] pSource)
                    : base(pSource)
                {
                }
                public XTuple(Int32 pColCount)
                   : this(new Object[pColCount])
                {
                }
                #nullable enable
                public Guid CTLxUsuarioID
                {
                    get
                    {
                        return (Guid)Value[PCRxEvento.CTLxUsuarioID];
                    }
                    set
                    {
                        this[PCRxEvento.CTLxUsuarioID] = value;
                    }
                }
                public Guid? oCTLxUsuarioID
                {
                    get
                    {
                        GetOldValue(PCRxEvento.CTLxUsuarioID, out Object ovlr);
                        return (Guid?)ovlr;
                    }
                }
                public DateTime Data
                {
                    get
                    {
                        return (DateTime)Value[PCRxEvento.Data];
                    }
                    set
                    {
                        this[PCRxEvento.Data] = value;
                    }
                }
                public DateTime? oData
                {
                    get
                    {
                        GetOldValue(PCRxEvento.Data, out Object ovlr);
                        return (DateTime?)ovlr;
                    }
                }
                public Decimal Latitude
                {
                    get
                    {
                        return (Decimal)Value[PCRxEvento.Latitude];
                    }
                    set
                    {
                        this[PCRxEvento.Latitude] = value;
                    }
                }
                public Decimal? oLatitude
                {
                    get
                    {
                        GetOldValue(PCRxEvento.Latitude, out Object ovlr);
                        return (Decimal?)ovlr;
                    }
                }
                public Decimal Longitude
                {
                    get
                    {
                        return (Decimal)Value[PCRxEvento.Longitude];
                    }
                    set
                    {
                        this[PCRxEvento.Longitude] = value;
                    }
                }
                public Decimal? oLongitude
                {
                    get
                    {
                        GetOldValue(PCRxEvento.Longitude, out Object ovlr);
                        return (Decimal?)ovlr;
                    }
                }
                public Guid NTRxMobilePontoDestaqueID
                {
                    get
                    {
                        return (Guid)Value[PCRxEvento.NTRxMobilePontoDestaqueID];
                    }
                    set
                    {
                        this[PCRxEvento.NTRxMobilePontoDestaqueID] = value;
                    }
                }
                public Guid? oNTRxMobilePontoDestaqueID
                {
                    get
                    {
                        GetOldValue(PCRxEvento.NTRxMobilePontoDestaqueID, out Object ovlr);
                        return (Guid?)ovlr;
                    }
                }
                public String Observacao
                {
                    get
                    {
                        return (String)Value[PCRxEvento.Observacao];
                    }
                    set
                    {
                        this[PCRxEvento.Observacao] = value;
                    }
                }
                public String? oObservacao
                {
                    get
                    {
                        GetOldValue(PCRxEvento.Observacao, out Object ovlr);
                        return (String?)ovlr;
                    }
                }
                public Guid PCRxEventoID
                {
                    get
                    {
                        return (Guid)Value[PCRxEvento.PCRxEventoID];
                    }
                    set
                    {
                        this[PCRxEvento.PCRxEventoID] = value;
                    }
                }
                public Guid? oPCRxEventoID
                {
                    get
                    {
                        GetOldValue(PCRxEvento.PCRxEventoID, out Object ovlr);
                        return (Guid?)ovlr;
                    }
                }
                public Int16 PCRxEventoTipoID
                {
                    get
                    {
                        return (Int16)Value[PCRxEvento.PCRxEventoTipoID];
                    }
                    set
                    {
                        this[PCRxEvento.PCRxEventoTipoID] = value;
                    }
                }
                public Int16? oPCRxEventoTipoID
                {
                    get
                    {
                        GetOldValue(PCRxEvento.PCRxEventoTipoID, out Object ovlr);
                        return (Int16?)ovlr;
                    }
                }
                #nullable disable
            }
            #endregion XTuple
            private static PCRxEvento _Instance;
            public static PCRxEvento Instance
            {
                get
                {
                    if (_Instance == null)
                        _Instance = XTypeCache.CreateInstanceNP<PCRxEvento>(gCID);
                    return _Instance;
                }
            }
            public static XORMFKField CTLxUsuarioID = new XORMFKField(new Guid("6DD4E655-CDD9-464B-BE29-B525547751FB"), "CTLxUsuarioID", "Usuário", XGuid.CID, 0, 0, false, gCID, new Guid("00000000-0000-0000-0000-000000000000"));
            public static XORMDateField Data = new XORMDateField(new Guid("DDAE67BA-0FE6-47A8-B760-3A9EFFDD3B58"), "Data", "Data", XDate.CID, 0, 0, false, gCID, TFX.Core.XDefault.NullDateTime);
            public static XORMDecimalField Latitude = new XORMDecimalField(new Guid("2B75D9C3-3FB8-48D6-BDDA-400EB55889EC"), "Latitude", "Latitude", XDecimal.CID, 20, 10, false, gCID, 0);
            public static XORMDecimalField Longitude = new XORMDecimalField(new Guid("302684A2-6D01-43FF-B2B3-51656840D0D7"), "Longitude", "Longitude", XDecimal.CID, 20, 10, false, gCID, 0);
            public static XORMFKField NTRxMobilePontoDestaqueID = new XORMFKField(new Guid("52F1C8D8-31CD-4485-9229-39A65CA84782"), "NTRxMobilePontoDestaqueID", "Ponto de Destaque", XGuid.CID, 0, 0, false, gCID, new Guid("00000000-0000-0000-0000-000000000000"));
            public static XORMField Observacao = new XORMField(new Guid("EFD68A4F-FEDA-4093-A13F-75336E3F3F9E"), "Observacao", "Observação", XString.CID, 200, 0, true, gCID, null);
            public static XORMPKField PCRxEventoID = new XORMPKField(new Guid("2B3F599C-7D2C-44C1-AF32-F197175205AB"), "PCRxEventoID", "Evento", XGuid.CID, 0, 0, false, gCID, new Guid("00000000-0000-0000-0000-000000000000"));
            public static XORMFKField PCRxEventoTipoID = new XORMFKField(new Guid("63B87CAB-F110-4C99-B948-8B9A15CBA6EF"), "PCRxEventoTipoID", "Tipo de Evento", XInt16.CID, 0, 0, false, gCID, (Int16)0);
            public static readonly XORMReference FK_9516187FED294CDDA7234B9B78FB205E = new XORMReference(new Guid("9516187F-ED29-4CDD-A723-4B9B78FB205E"), "FK_9516187FED294CDDA7234B9B78FB205E", gCID, PCRxEventoTipoID.ID, PCRxEventoTipo.gCID, PCRxEventoTipo.PCRxEventoTipoID.ID);
            public static readonly XORMReference FK_2632977C96F849D5B518450CFF1B938D = new XORMReference(new Guid("2632977C-96F8-49D5-B518-450CFF1B938D"), "FK_2632977C96F849D5B518450CFF1B938D", gCID, NTRxMobilePontoDestaqueID.ID, global::Projecao.Core.NTR.DB.NTRx.NTRxMobilePontoDestaque.gCID, global::Projecao.Core.NTR.DB.NTRx.NTRxMobilePontoDestaque.NTRxMobilePontoDestaqueID.ID);
            public static readonly XORMReference FK_BBCB86C69DE84C5CAB5FD3FE8D00D4F9 = new XORMReference(new Guid("BBCB86C6-9DE8-4C5C-AB5F-D3FE8D00D4F9"), "FK_BBCB86C69DE84C5CAB5FD3FE8D00D4F9", gCID, CTLxUsuarioID.ID, global::TFX.Core.Service.Apps.SYSx.SYSxPessoa.gCID, global::TFX.Core.Service.Apps.SYSx.SYSxPessoa.SYSxPessoaID.ID);
            public static readonly XORMIndex IX_773E89A0B34940B48EDCB7E5B302138F = new XORMIndex();
            public static readonly XORMIndex IX_9516187FED294CDDA7234B9B78FB205E = new XORMIndex();
            public static readonly XORMIndex IX_2632977C96F849D5B518450CFF1B938D = new XORMIndex();
            public static readonly XORMIndex IX_BBCB86C69DE84C5CAB5FD3FE8D00D4F9 = new XORMIndex();
            static PCRxEvento()
            {
                PCRxEventoID.PKID = new Guid("15ABC5072A0843AF850E51D756374F00");
                PCRxEventoID.UpdateStatic = true;
                PCRxEventoID.InsertOnly = false;
                PCRxEventoID.TableName = "PCRxEvento";
                PCRxEventoID.SourceTableID = new Guid("9C81F109-A48B-4008-92F3-F5E06E46099F");
                PCRxEventoID.Index = 0;
                PCRxEventoID.IsFaceField = true;
                PCRxEventoTipoID.UpdateStatic = true;
                PCRxEventoTipoID.InsertOnly = false;
                PCRxEventoTipoID.TableName = "PCRxEvento";
                PCRxEventoTipoID.SourceTableID = new Guid("9C81F109-A48B-4008-92F3-F5E06E46099F");
                PCRxEventoTipoID.Index = 1;
                Data.UpdateStatic = true;
                Data.InsertOnly = false;
                Data.TableName = "PCRxEvento";
                Data.SourceTableID = new Guid("9C81F109-A48B-4008-92F3-F5E06E46099F");
                Data.Index = 2;
                Observacao.UpdateStatic = true;
                Observacao.InsertOnly = false;
                Observacao.TableName = "PCRxEvento";
                Observacao.SourceTableID = new Guid("9C81F109-A48B-4008-92F3-F5E06E46099F");
                Observacao.Index = 3;
                NTRxMobilePontoDestaqueID.UpdateStatic = true;
                NTRxMobilePontoDestaqueID.InsertOnly = false;
                NTRxMobilePontoDestaqueID.TableName = "PCRxEvento";
                NTRxMobilePontoDestaqueID.SourceTableID = new Guid("9C81F109-A48B-4008-92F3-F5E06E46099F");
                NTRxMobilePontoDestaqueID.Index = 4;
                Latitude.UpdateStatic = true;
                Latitude.InsertOnly = false;
                Latitude.TableName = "PCRxEvento";
                Latitude.SourceTableID = new Guid("9C81F109-A48B-4008-92F3-F5E06E46099F");
                Latitude.Min = -79228162514264337593543950335M;
                Latitude.Max = 79228162514264337593543950335M;
                Latitude.Index = 5;
                Longitude.UpdateStatic = true;
                Longitude.InsertOnly = false;
                Longitude.TableName = "PCRxEvento";
                Longitude.SourceTableID = new Guid("9C81F109-A48B-4008-92F3-F5E06E46099F");
                Longitude.Min = -79228162514264337593543950335M;
                Longitude.Max = 79228162514264337593543950335M;
                Longitude.Index = 6;
                CTLxUsuarioID.UpdateStatic = true;
                CTLxUsuarioID.InsertOnly = false;
                CTLxUsuarioID.TableName = "PCRxEvento";
                CTLxUsuarioID.SourceTableID = new Guid("9C81F109-A48B-4008-92F3-F5E06E46099F");
                CTLxUsuarioID.Index = 7;
                IX_773E89A0B34940B48EDCB7E5B302138F.Name = "IX_773E89A0B34940B48EDCB7E5B302138F";
                IX_773E89A0B34940B48EDCB7E5B302138F.ID = new Guid("773E89A0-B349-40B4-8EDC-B7E5B302138F");
                IX_773E89A0B34940B48EDCB7E5B302138F.IsUnique = false;
                IX_773E89A0B34940B48EDCB7E5B302138F.Description = "";
                IX_773E89A0B34940B48EDCB7E5B302138F.AddItem(Data);
                IX_773E89A0B34940B48EDCB7E5B302138F.AddItem(PCRxEventoID);
                IX_9516187FED294CDDA7234B9B78FB205E.Name = "IX_9516187FED294CDDA7234B9B78FB205E";
                IX_9516187FED294CDDA7234B9B78FB205E.ID = new Guid("123EFE01-4D43-4641-981D-DD7E956CC774");
                IX_9516187FED294CDDA7234B9B78FB205E.IsUnique = false;
                IX_9516187FED294CDDA7234B9B78FB205E.Description = "";
                IX_9516187FED294CDDA7234B9B78FB205E.AddItem(PCRxEventoTipoID);
                IX_2632977C96F849D5B518450CFF1B938D.Name = "IX_2632977C96F849D5B518450CFF1B938D";
                IX_2632977C96F849D5B518450CFF1B938D.ID = new Guid("B2A171C5-A60A-4501-861E-1654D8A298C4");
                IX_2632977C96F849D5B518450CFF1B938D.IsUnique = false;
                IX_2632977C96F849D5B518450CFF1B938D.Description = "";
                IX_2632977C96F849D5B518450CFF1B938D.AddItem(NTRxMobilePontoDestaqueID);
                IX_BBCB86C69DE84C5CAB5FD3FE8D00D4F9.Name = "IX_BBCB86C69DE84C5CAB5FD3FE8D00D4F9";
                IX_BBCB86C69DE84C5CAB5FD3FE8D00D4F9.ID = new Guid("F44C053B-08AE-4C8C-B7DC-E96F8A53F467");
                IX_BBCB86C69DE84C5CAB5FD3FE8D00D4F9.IsUnique = false;
                IX_BBCB86C69DE84C5CAB5FD3FE8D00D4F9.Description = "";
                IX_BBCB86C69DE84C5CAB5FD3FE8D00D4F9.AddItem(CTLxUsuarioID);
                PCRxEventoTipoID.AllowZero = true;
                FK_9516187FED294CDDA7234B9B78FB205E.AllowZero = true;
                NTRxMobilePontoDestaqueID.AllowZero = true;
                FK_2632977C96F849D5B518450CFF1B938D.AllowZero = true;
                CTLxUsuarioID.AllowZero = true;
                FK_BBCB86C69DE84C5CAB5FD3FE8D00D4F9.AllowZero = true;
            }
            protected PCRxEvento()
            {
                TupleType = typeof(XTuple);
                PersistenceType = typeof(__PCRxEvento);
                ID = new Guid("9C81F109-A48B-4008-92F3-F5E06E46099F");
                Name = "PCRxEvento";
                Title = "Evento";
                CompanyControlType = XCompanyControlType.None;
                ModuleID = new Guid("02C4E7C5-1B4F-43DB-AC6C-CD36BBE428B7");
                DeleteOnDeactivate = false;
                PKName = "PK_2B3F599C7D2C44C1AF32F197175205AB";
                FaceField = PCRxEventoID;
                DisplayField = PCRxEventoID;
            }
            protected override void LoadDefaultData(XDataSet pDataSet)
            {
                base.LoadDefaultData(pDataSet);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {new Guid("00000000-0000-0000-0000-000000000000"), (Int16)0, TFX.Core.XDefault.NullDateTime, @"", new Guid("00000000-0000-0000-0000-000000000000"), 0, 0, new Guid("00000000-0000-0000-0000-000000000000")}), new Guid("00000000-0000-0000-0000-000000000000"));
            }
        }

        #endregion PCRxEvento

        #region PCRxEventoFazenda

        [XRegister(typeof(PCRxEventoFazenda), sCID)]
        public class PCRxEventoFazenda : XORMTable
        {
            public const String sCID = "289810F6-5C81-4856-95BC-8E37FEA91A92";
            public static Guid gCID = new Guid(sCID);
            #region XTuple
            public class XTuple : XDataTuple
            {
                public XTuple()
                {
                }
                public XTuple(Object[] pSource)
                    : base(pSource)
                {
                }
                public XTuple(Int32 pColCount)
                   : this(new Object[pColCount])
                {
                }
                #nullable enable
                public Guid PCRxEventoFazendaID
                {
                    get
                    {
                        return (Guid)Value[PCRxEventoFazenda.PCRxEventoFazendaID];
                    }
                    set
                    {
                        this[PCRxEventoFazenda.PCRxEventoFazendaID] = value;
                    }
                }
                public Guid? oPCRxEventoFazendaID
                {
                    get
                    {
                        GetOldValue(PCRxEventoFazenda.PCRxEventoFazendaID, out Object ovlr);
                        return (Guid?)ovlr;
                    }
                }
                public Boolean Resolvido
                {
                    get
                    {
                        return (Boolean)Value[PCRxEventoFazenda.Resolvido];
                    }
                    set
                    {
                        this[PCRxEventoFazenda.Resolvido] = value;
                    }
                }
                public Boolean? oResolvido
                {
                    get
                    {
                        GetOldValue(PCRxEventoFazenda.Resolvido, out Object ovlr);
                        return (Boolean?)ovlr;
                    }
                }
                #nullable disable
            }
            #endregion XTuple
            private static PCRxEventoFazenda _Instance;
            public static PCRxEventoFazenda Instance
            {
                get
                {
                    if (_Instance == null)
                        _Instance = XTypeCache.CreateInstanceNP<PCRxEventoFazenda>(gCID);
                    return _Instance;
                }
            }
            public static XORMPKField PCRxEventoFazendaID = new XORMPKField(new Guid("5A767A6A-8DB2-4DE2-8960-BA333FD71371"), "PCRxEventoFazendaID", "Evento da Fazenda", XGuid.CID, 0, 0, false, gCID, new Guid("00000000-0000-0000-0000-000000000000"));
            public static XORMField Resolvido = new XORMField(new Guid("E99D7E72-425A-4B4F-94F4-1ED4FD90CE55"), "Resolvido", "Resolvido", XBoolean.CID, 0, 0, false, gCID, false);
            public static readonly XORMReference FK_B50A3E12661B40DF8E1047CFFD6825DA = new XORMReference(new Guid("B50A3E12-661B-40DF-8E10-47CFFD6825DA"), "FK_B50A3E12661B40DF8E1047CFFD6825DA", gCID, PCRxEventoFazendaID.ID, PCRxEvento.gCID, PCRxEvento.PCRxEventoID.ID);
            static PCRxEventoFazenda()
            {
                PCRxEventoFazendaID.PKID = new Guid("3A2CCF5278EB4739A030617B9CE62F58");
                PCRxEventoFazendaID.UpdateStatic = true;
                PCRxEventoFazendaID.InsertOnly = false;
                PCRxEventoFazendaID.TableName = "PCRxEventoFazenda";
                PCRxEventoFazendaID.SourceTableID = new Guid("289810F6-5C81-4856-95BC-8E37FEA91A92");
                PCRxEventoFazendaID.Index = 0;
                Resolvido.UpdateStatic = true;
                Resolvido.InsertOnly = false;
                Resolvido.TableName = "PCRxEventoFazenda";
                Resolvido.SourceTableID = new Guid("289810F6-5C81-4856-95BC-8E37FEA91A92");
                Resolvido.Index = 1;
                PCRxEventoFazendaID.AllowZero = true;
                FK_B50A3E12661B40DF8E1047CFFD6825DA.AllowZero = true;
            }
            protected PCRxEventoFazenda()
            {
                TupleType = typeof(XTuple);
                PersistenceType = typeof(__PCRxEventoFazenda);
                ID = new Guid("289810F6-5C81-4856-95BC-8E37FEA91A92");
                Name = "PCRxEventoFazenda";
                Title = "Evento da Fazenda";
                CompanyControlType = XCompanyControlType.None;
                ModuleID = new Guid("02C4E7C5-1B4F-43DB-AC6C-CD36BBE428B7");
                DeleteOnDeactivate = false;
                PKName = "PK_5A767A6A8DB24DE28960BA333FD71371";
                InheritanceID = new Guid("9C81F109-A48B-4008-92F3-F5E06E46099F");
            }
            protected override void LoadDefaultData(XDataSet pDataSet)
            {
                base.LoadDefaultData(pDataSet);
            }
        }

        #endregion PCRxEventoFazenda

        #region PCRxEventoTipo

        [XRegister(typeof(PCRxEventoTipo), sCID)]
        public class PCRxEventoTipo : XORMTable
        {
            public const String sCID = "7A5C8BC8-4F6D-453B-A04F-BC3B02A918E6";
            public static Guid gCID = new Guid(sCID);
            #region XDefault
            public class XDefault
            {
                public static String sCampeio => _Titles[(Int16)12];
                public const Int16 Campeio = (Int16)12;
                public static String sArvore_Caida => _Titles[(Int16)19];
                public const Int16 Arvore_Caida = (Int16)19;
                public static String sDesmama => _Titles[(Int16)2];
                public const Int16 Desmama = (Int16)2;
                public static String sMudanca_de_Fase => _Titles[(Int16)10];
                public const Int16 Mudanca_de_Fase = (Int16)10;
                public static String sIATF => _Titles[(Int16)7];
                public const Int16 IATF = (Int16)7;
                public static String sCerca_Quebrada => _Titles[(Int16)15];
                public const Int16 Cerca_Quebrada = (Int16)15;
                public static String sOutros => _Titles[(Int16)14];
                public const Int16 Outros = (Int16)14;
                public static String sPonte_com_Problema => _Titles[(Int16)17];
                public const Int16 Ponte_com_Problema = (Int16)17;
                public static String sAborto => _Titles[(Int16)11];
                public const Int16 Aborto = (Int16)11;
                public static String sPesagem => _Titles[(Int16)9];
                public const Int16 Pesagem = (Int16)9;
                public static String sNA => _Titles[(Int16)0];
                public const Int16 NA = (Int16)0;
                public static String sNatimorto => _Titles[(Int16)22];
                public const Int16 Natimorto = (Int16)22;
                public static String sAtoleiro => _Titles[(Int16)18];
                public const Int16 Atoleiro = (Int16)18;
                public static String sMorte => _Titles[(Int16)5];
                public const Int16 Morte = (Int16)5;
                public static String sVenda => _Titles[(Int16)6];
                public const Int16 Venda = (Int16)6;
                public static String sNascimento => _Titles[(Int16)1];
                public const Int16 Nascimento = (Int16)1;
                public static String sParto => _Titles[(Int16)20];
                public const Int16 Parto = (Int16)20;
                public static String sDoenca => _Titles[(Int16)4];
                public const Int16 Doenca = (Int16)4;
                public static String sVala_Enxurrada => _Titles[(Int16)16];
                public const Int16 Vala_Enxurrada = (Int16)16;
                public static String sInclusao => _Titles[(Int16)21];
                public const Int16 Inclusao = (Int16)21;
                public static String sVacinacao => _Titles[(Int16)3];
                public const Int16 Vacinacao = (Int16)3;
                private static Dictionary<Int16, String> _Titles = new Dictionary<Int16, String>()
                {
                [(Int16)12] = "Campeio",
                [(Int16)19] = "Árvore Caída",
                [(Int16)2] = "Desmama",
                [(Int16)10] = "Mudança de Fase",
                [(Int16)7] = "IATF",
                [(Int16)15] = "Cerca Quebrada",
                [(Int16)14] = "Outros",
                [(Int16)17] = "Ponte com Problema",
                [(Int16)11] = "Aborto",
                [(Int16)9] = "Pesagem",
                [(Int16)0] = "NA",
                [(Int16)22] = "Natimorto",
                [(Int16)18] = "Atoleiro",
                [(Int16)5] = "Morte",
                [(Int16)6] = "Venda",
                [(Int16)1] = "Nascimento",
                [(Int16)20] = "Parto",
                [(Int16)4] = "Doença",
                [(Int16)16] = "Vala Enxurrada",
                [(Int16)21] = "Inclusão",
                [(Int16)3] = "Vacinação"
                };
                public static String GetTitle(Int16 pIndex)
                {
                    if (!_Titles.ContainsKey(pIndex))
                        return "";
                    return _Titles[pIndex];
                }
            }
            #endregion XDefault
            #region XTuple
            public class XTuple : XDataTuple
            {
                public XTuple()
                {
                }
                public XTuple(Object[] pSource)
                    : base(pSource)
                {
                }
                public XTuple(Int32 pColCount)
                   : this(new Object[pColCount])
                {
                }
                #nullable enable
                public Boolean Animal
                {
                    get
                    {
                        return (Boolean)Value[PCRxEventoTipo.Animal];
                    }
                    set
                    {
                        this[PCRxEventoTipo.Animal] = value;
                    }
                }
                public Boolean? oAnimal
                {
                    get
                    {
                        GetOldValue(PCRxEventoTipo.Animal, out Object ovlr);
                        return (Boolean?)ovlr;
                    }
                }
                public String Evento
                {
                    get
                    {
                        return (String)Value[PCRxEventoTipo.Evento];
                    }
                    set
                    {
                        this[PCRxEventoTipo.Evento] = value;
                    }
                }
                public String? oEvento
                {
                    get
                    {
                        GetOldValue(PCRxEventoTipo.Evento, out Object ovlr);
                        return (String?)ovlr;
                    }
                }
                public Int16 PCRxEventoTipoID
                {
                    get
                    {
                        return (Int16)Value[PCRxEventoTipo.PCRxEventoTipoID];
                    }
                    set
                    {
                        this[PCRxEventoTipo.PCRxEventoTipoID] = value;
                    }
                }
                public Int16? oPCRxEventoTipoID
                {
                    get
                    {
                        GetOldValue(PCRxEventoTipo.PCRxEventoTipoID, out Object ovlr);
                        return (Int16?)ovlr;
                    }
                }
                public Boolean Reproducao
                {
                    get
                    {
                        return (Boolean)Value[PCRxEventoTipo.Reproducao];
                    }
                    set
                    {
                        this[PCRxEventoTipo.Reproducao] = value;
                    }
                }
                public Boolean? oReproducao
                {
                    get
                    {
                        GetOldValue(PCRxEventoTipo.Reproducao, out Object ovlr);
                        return (Boolean?)ovlr;
                    }
                }
                #nullable disable
            }
            #endregion XTuple
            private static PCRxEventoTipo _Instance;
            public static PCRxEventoTipo Instance
            {
                get
                {
                    if (_Instance == null)
                        _Instance = XTypeCache.CreateInstanceNP<PCRxEventoTipo>(gCID);
                    return _Instance;
                }
            }
            public static XORMField Animal = new XORMField(new Guid("272EC218-0B84-4353-99B7-3D4CA4D04926"), "Animal", "Animal", XBoolean.CID, 0, 0, false, gCID, false);
            public static XORMFaceField Evento = new XORMFaceField(new Guid("177F0AFB-E517-4ABF-8E46-CAC05525D1BC"), "Evento", "Evento", XString.CID, 25, 0, false, gCID, null);
            public static XORMPKField PCRxEventoTipoID = new XORMPKField(new Guid("1EBF363F-6209-4E7A-8BF7-328616F6BBBF"), "PCRxEventoTipoID", "Tipo de Evento", XInt16.CID, 0, 0, false, gCID, (Int16)0);
            public static XORMField Reproducao = new XORMField(new Guid("201C10E2-0FCB-4AB1-BC11-8DE5571275F2"), "Reproducao", "Reprodução", XBoolean.CID, 0, 0, false, gCID, false);
            static PCRxEventoTipo()
            {
                PCRxEventoTipoID.PKID = new Guid("34052BADA373429997904D27DC4B283A");
                PCRxEventoTipoID.UpdateStatic = true;
                PCRxEventoTipoID.InsertOnly = false;
                PCRxEventoTipoID.TableName = "PCRxEventoTipo";
                PCRxEventoTipoID.SourceTableID = new Guid("7A5C8BC8-4F6D-453B-A04F-BC3B02A918E6");
                PCRxEventoTipoID.Index = 0;
                Evento.UpdateStatic = true;
                Evento.InsertOnly = false;
                Evento.TableName = "PCRxEventoTipo";
                Evento.SourceTableID = new Guid("7A5C8BC8-4F6D-453B-A04F-BC3B02A918E6");
                Evento.Index = 1;
                Evento.IsFaceField = true;
                Animal.UpdateStatic = true;
                Animal.InsertOnly = false;
                Animal.TableName = "PCRxEventoTipo";
                Animal.SourceTableID = new Guid("7A5C8BC8-4F6D-453B-A04F-BC3B02A918E6");
                Animal.Index = 2;
                Reproducao.UpdateStatic = true;
                Reproducao.InsertOnly = false;
                Reproducao.TableName = "PCRxEventoTipo";
                Reproducao.SourceTableID = new Guid("7A5C8BC8-4F6D-453B-A04F-BC3B02A918E6");
                Reproducao.Index = 3;
            }
            protected PCRxEventoTipo()
            {
                TupleType = typeof(XTuple);
                PersistenceType = typeof(__PCRxEventoTipo);
                ID = new Guid("7A5C8BC8-4F6D-453B-A04F-BC3B02A918E6");
                Name = "PCRxEventoTipo";
                Title = "Tipo de Evento";
                CompanyControlType = XCompanyControlType.None;
                ModuleID = new Guid("02C4E7C5-1B4F-43DB-AC6C-CD36BBE428B7");
                DeleteOnDeactivate = false;
                PKName = "PK_1EBF363F62094E7A8BF7328616F6BBBF";
                FaceField = Evento;
                IsCached = true;
                DisplayField = Evento;
            }
            protected override void LoadDefaultData(XDataSet pDataSet)
            {
                base.LoadDefaultData(pDataSet);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)12, @"Campeio", false, false}), (Int16)12);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)19, @"Árvore Caída", false, false}), (Int16)19);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)2, @"Desmama", true, true}), (Int16)2);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)10, @"Mudança de Fase", true, false}), (Int16)10);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)7, @"IATF", true, true}), (Int16)7);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)15, @"Cerca Quebrada", false, false}), (Int16)15);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)14, @"Outros", false, false}), (Int16)14);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)17, @"Ponte com Problema", false, false}), (Int16)17);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)11, @"Aborto", true, true}), (Int16)11);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)9, @"Pesagem", true, false}), (Int16)9);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)0, @"NA", false, false}), (Int16)0);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)22, @"Natimorto", true, true}), (Int16)22);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)18, @"Atoleiro", false, false}), (Int16)18);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)5, @"Morte", true, true}), (Int16)5);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)6, @"Venda", true, true}), (Int16)6);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)1, @"Nascimento", true, true}), (Int16)1);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)20, @"Parto", true, true}), (Int16)20);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)4, @"Doença", true, false}), (Int16)4);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)16, @"Vala Enxurrada", false, false}), (Int16)16);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)21, @"Inclusão", true, false}), (Int16)21);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)3, @"Vacinação", true, false}), (Int16)3);
            }
        }

        #endregion PCRxEventoTipo

        #region PCRxFazenda

        [XRegister(typeof(PCRxFazenda), sCID)]
        public class PCRxFazenda : XORMTable
        {
            public const String sCID = "D2945FAE-04F8-439E-9F42-7B1326DC55CF";
            public static Guid gCID = new Guid(sCID);
            #region XDefault
            public class XDefault : global::Projecao.Core.ERP.DB.ERPx.ERPxPessoaJuridica.XDefault
            {
            }
            #endregion XDefault
            #region XTuple
            public class XTuple : XDataTuple
            {
                public XTuple()
                {
                }
                public XTuple(Object[] pSource)
                    : base(pSource)
                {
                }
                public XTuple(Int32 pColCount)
                   : this(new Object[pColCount])
                {
                }
                #nullable enable
                public Int32 CEPxLocalidadeID
                {
                    get
                    {
                        return (Int32)Value[PCRxFazenda.CEPxLocalidadeID];
                    }
                    set
                    {
                        this[PCRxFazenda.CEPxLocalidadeID] = value;
                    }
                }
                public Int32? oCEPxLocalidadeID
                {
                    get
                    {
                        GetOldValue(PCRxFazenda.CEPxLocalidadeID, out Object ovlr);
                        return (Int32?)ovlr;
                    }
                }
                public String CoordenadasArea
                {
                    get
                    {
                        return (String)Value[PCRxFazenda.CoordenadasArea];
                    }
                    set
                    {
                        this[PCRxFazenda.CoordenadasArea] = value;
                    }
                }
                public String? oCoordenadasArea
                {
                    get
                    {
                        GetOldValue(PCRxFazenda.CoordenadasArea, out Object ovlr);
                        return (String?)ovlr;
                    }
                }
                public Guid PCRxFazendaID
                {
                    get
                    {
                        return (Guid)Value[PCRxFazenda.PCRxFazendaID];
                    }
                    set
                    {
                        this[PCRxFazenda.PCRxFazendaID] = value;
                    }
                }
                public Guid? oPCRxFazendaID
                {
                    get
                    {
                        GetOldValue(PCRxFazenda.PCRxFazendaID, out Object ovlr);
                        return (Guid?)ovlr;
                    }
                }
                public Guid SYSxEmpresaID
                {
                    get
                    {
                        return (Guid)Value[PCRxFazenda.SYSxEmpresaID];
                    }
                    set
                    {
                        this[PCRxFazenda.SYSxEmpresaID] = value;
                    }
                }
                public Guid? oSYSxEmpresaID
                {
                    get
                    {
                        GetOldValue(PCRxFazenda.SYSxEmpresaID, out Object ovlr);
                        return (Guid?)ovlr;
                    }
                }
                public Int16 SYSxEstadoID
                {
                    get
                    {
                        return (Int16)Value[PCRxFazenda.SYSxEstadoID];
                    }
                    set
                    {
                        this[PCRxFazenda.SYSxEstadoID] = value;
                    }
                }
                public Int16? oSYSxEstadoID
                {
                    get
                    {
                        GetOldValue(PCRxFazenda.SYSxEstadoID, out Object ovlr);
                        return (Int16?)ovlr;
                    }
                }
                #nullable disable
            }
            #endregion XTuple
            private static PCRxFazenda _Instance;
            public static PCRxFazenda Instance
            {
                get
                {
                    if (_Instance == null)
                        _Instance = XTypeCache.CreateInstanceNP<PCRxFazenda>(gCID);
                    return _Instance;
                }
            }
            public static XORMFKField CEPxLocalidadeID = new XORMFKField(new Guid("D8043504-5F33-4BB3-A3A9-4A73F147191D"), "CEPxLocalidadeID", "Localidade", XInt32.CID, 0, 0, false, gCID, 0);
            public static XORMField CoordenadasArea = new XORMField(new Guid("A3DB3126-D743-40AE-A8DE-24B0EF167BDF"), "CoordenadasArea", "Coordenadas da Área", XString.CID, 0, 0, true, gCID, null);
            public static XORMPKField PCRxFazendaID = new XORMPKField(new Guid("F0F50A4C-38FE-40A4-BABC-34C80F059B29"), "PCRxFazendaID", "Fazenda", XGuid.CID, 0, 0, false, gCID, new Guid("00000000-0000-0000-0000-000000000000"));
            public static XORMFKField SYSxEmpresaID = new XORMFKField(new Guid("A3B48921-C397-47C3-9D6C-AF8A567F9146"), "SYSxEmpresaID", "Empresa", XGuid.CID, 0, 0, false, gCID, new Guid("00000000-0000-0000-0000-000000000000"));
            public static XORMStateField SYSxEstadoID = new XORMStateField(new Guid("AE675034-0795-47EE-880E-23064505A6C4"), "SYSxEstadoID", "Estado", XInt16.CID, 0, 0, false, gCID, (Int16)0);
            public static readonly XORMReference FK_E6553A8747704885B7BB4A443D12FEB0 = new XORMReference(new Guid("E6553A87-4770-4885-B7BB-4A443D12FEB0"), "FK_E6553A8747704885B7BB4A443D12FEB0", gCID, PCRxFazendaID.ID, global::Projecao.Core.ERP.DB.ERPx.ERPxPessoaJuridica.gCID, global::Projecao.Core.ERP.DB.ERPx.ERPxPessoaJuridica.ERPxPessoaJuridicaID.ID);
            public static readonly XORMReference FK_4B282A5C56A944E8B7CBF22DDCD41BFC = new XORMReference(new Guid("4B282A5C-56A9-44E8-B7CB-F22DDCD41BFC"), "FK_4B282A5C56A944E8B7CBF22DDCD41BFC", gCID, CEPxLocalidadeID.ID, global::Projecao.Core.CEP.DB.CEPx.CEPxLocalidade.gCID, global::Projecao.Core.CEP.DB.CEPx.CEPxLocalidade.CEPxLocalidadeID.ID);
            public static readonly XORMReference FK_9556B152B9524270944AEB49AD5D85E7 = new XORMReference(new Guid("9556B152-B952-4270-944A-EB49AD5D85E7"), "FK_9556B152B9524270944AEB49AD5D85E7", gCID, SYSxEstadoID.ID, global::TFX.Core.Service.Apps.SYSx.SYSxEstado.gCID, global::TFX.Core.Service.Apps.SYSx.SYSxEstado.SYSxEstadoID.ID);
            public static readonly XORMReference FK_0FA5C8DE490046E18795D2C3C25845DC = new XORMReference(new Guid("0FA5C8DE-4900-46E1-8795-D2C3C25845DC"), "FK_0FA5C8DE490046E18795D2C3C25845DC", gCID, SYSxEmpresaID.ID, global::TFX.Core.Service.Apps.SYSx.SYSxEmpresa.gCID, global::TFX.Core.Service.Apps.SYSx.SYSxEmpresa.SYSxEmpresaID.ID);
            public static readonly XORMIndex IX_4B282A5C56A944E8B7CBF22DDCD41BFC = new XORMIndex();
            public static readonly XORMIndex IX_9556B152B9524270944AEB49AD5D85E7 = new XORMIndex();
            public static readonly XORMIndex IX_0FA5C8DE490046E18795D2C3C25845DC = new XORMIndex();
            static PCRxFazenda()
            {
                PCRxFazendaID.PKID = new Guid("3F31267FBF4D42F4A0D2ACFBBCF51DB0");
                PCRxFazendaID.UpdateStatic = true;
                PCRxFazendaID.InsertOnly = false;
                PCRxFazendaID.TableName = "PCRxFazenda";
                PCRxFazendaID.SourceTableID = new Guid("D2945FAE-04F8-439E-9F42-7B1326DC55CF");
                PCRxFazendaID.Index = 0;
                PCRxFazendaID.IsFaceField = true;
                CEPxLocalidadeID.UpdateStatic = true;
                CEPxLocalidadeID.InsertOnly = false;
                CEPxLocalidadeID.TableName = "PCRxFazenda";
                CEPxLocalidadeID.SourceTableID = new Guid("D2945FAE-04F8-439E-9F42-7B1326DC55CF");
                CEPxLocalidadeID.Index = 1;
                SYSxEstadoID.UpdateStatic = true;
                SYSxEstadoID.InsertOnly = false;
                SYSxEstadoID.TableName = "PCRxFazenda";
                SYSxEstadoID.SourceTableID = new Guid("D2945FAE-04F8-439E-9F42-7B1326DC55CF");
                SYSxEstadoID.Index = 2;
                SYSxEmpresaID.UpdateStatic = true;
                SYSxEmpresaID.InsertOnly = false;
                SYSxEmpresaID.TableName = "PCRxFazenda";
                SYSxEmpresaID.SourceTableID = new Guid("D2945FAE-04F8-439E-9F42-7B1326DC55CF");
                SYSxEmpresaID.Index = 3;
                CoordenadasArea.UpdateStatic = true;
                CoordenadasArea.InsertOnly = false;
                CoordenadasArea.TableName = "PCRxFazenda";
                CoordenadasArea.SourceTableID = new Guid("D2945FAE-04F8-439E-9F42-7B1326DC55CF");
                CoordenadasArea.Index = 4;
                IX_4B282A5C56A944E8B7CBF22DDCD41BFC.Name = "IX_4B282A5C56A944E8B7CBF22DDCD41BFC";
                IX_4B282A5C56A944E8B7CBF22DDCD41BFC.ID = new Guid("80676F49-BF06-4F07-920D-4643560108C7");
                IX_4B282A5C56A944E8B7CBF22DDCD41BFC.IsUnique = false;
                IX_4B282A5C56A944E8B7CBF22DDCD41BFC.Description = "";
                IX_4B282A5C56A944E8B7CBF22DDCD41BFC.AddItem(CEPxLocalidadeID);
                IX_9556B152B9524270944AEB49AD5D85E7.Name = "IX_9556B152B9524270944AEB49AD5D85E7";
                IX_9556B152B9524270944AEB49AD5D85E7.ID = new Guid("12007A08-D7DC-4EEE-A1DC-350DDC0691E8");
                IX_9556B152B9524270944AEB49AD5D85E7.IsUnique = false;
                IX_9556B152B9524270944AEB49AD5D85E7.Description = "";
                IX_9556B152B9524270944AEB49AD5D85E7.AddItem(SYSxEstadoID);
                IX_0FA5C8DE490046E18795D2C3C25845DC.Name = "IX_0FA5C8DE490046E18795D2C3C25845DC";
                IX_0FA5C8DE490046E18795D2C3C25845DC.ID = new Guid("E241854C-7246-47FC-A075-9985E10D8C2F");
                IX_0FA5C8DE490046E18795D2C3C25845DC.IsUnique = false;
                IX_0FA5C8DE490046E18795D2C3C25845DC.Description = "";
                IX_0FA5C8DE490046E18795D2C3C25845DC.AddItem(SYSxEmpresaID);
                PCRxFazendaID.AllowZero = true;
                FK_E6553A8747704885B7BB4A443D12FEB0.AllowZero = true;
                CEPxLocalidadeID.AllowZero = true;
                FK_4B282A5C56A944E8B7CBF22DDCD41BFC.AllowZero = true;
                SYSxEstadoID.AllowZero = true;
                FK_9556B152B9524270944AEB49AD5D85E7.AllowZero = true;
                SYSxEmpresaID.AllowZero = true;
                FK_0FA5C8DE490046E18795D2C3C25845DC.AllowZero = true;
            }
            protected PCRxFazenda()
            {
                TupleType = typeof(XTuple);
                PersistenceType = typeof(__PCRxFazenda);
                ID = new Guid("D2945FAE-04F8-439E-9F42-7B1326DC55CF");
                Name = "PCRxFazenda";
                Title = "Fazenda";
                CompanyControlType = XCompanyControlType.CurrentCompany;
                ModuleID = new Guid("02C4E7C5-1B4F-43DB-AC6C-CD36BBE428B7");
                DeleteOnDeactivate = false;
                PKName = "PK_F0F50A4C38FE40A4BABC34C80F059B29";
                FaceField = PCRxFazendaID;
                StateField = SYSxEstadoID;
                DisplayField = PCRxFazendaID;
                InheritanceID = new Guid("CADE0A69-A787-4BFE-8DC5-A3F3E89C68ED");
            }
            protected override void LoadDefaultData(XDataSet pDataSet)
            {
                base.LoadDefaultData(pDataSet);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {new Guid("00000000-0000-0000-0000-000000000000"), 0, (Int16)0, new Guid("00000000-0000-0000-0000-000000000000"), @""}), new Guid("00000000-0000-0000-0000-000000000000"));
            }
        }

        #endregion PCRxFazenda

        #region PCRxIATF

        [XRegister(typeof(PCRxIATF), sCID)]
        public class PCRxIATF : XORMTable
        {
            public const String sCID = "1E640A17-14F3-4D24-ACF6-FE224C1EF1E0";
            public static Guid gCID = new Guid(sCID);
            #region XDefault
            public class XDefault
            {
                public static String s_0 => _Titles[0];
                public const Int32 _0 = 0;
                private static Dictionary<Int32, String> _Titles = new Dictionary<Int32, String>()
                {
                [0] = "0"
                };
                public static String GetTitle(Int32 pIndex)
                {
                    if (!_Titles.ContainsKey(pIndex))
                        return "";
                    return _Titles[pIndex];
                }
            }
            #endregion XDefault
            #region XTuple
            public class XTuple : XDataTuple
            {
                public XTuple()
                {
                }
                public XTuple(Object[] pSource)
                    : base(pSource)
                {
                }
                public XTuple(Int32 pColCount)
                   : this(new Object[pColCount])
                {
                }
                #nullable enable
                public Int32 Duracao
                {
                    get
                    {
                        return (Int32)Value[PCRxIATF.Duracao];
                    }
                    set
                    {
                        this[PCRxIATF.Duracao] = value;
                    }
                }
                public Int32? oDuracao
                {
                    get
                    {
                        GetOldValue(PCRxIATF.Duracao, out Object ovlr);
                        return (Int32?)ovlr;
                    }
                }
                public Int32 Fases
                {
                    get
                    {
                        return (Int32)Value[PCRxIATF.Fases];
                    }
                    set
                    {
                        this[PCRxIATF.Fases] = value;
                    }
                }
                public Int32? oFases
                {
                    get
                    {
                        GetOldValue(PCRxIATF.Fases, out Object ovlr);
                        return (Int32?)ovlr;
                    }
                }
                public String Nome
                {
                    get
                    {
                        return (String)Value[PCRxIATF.Nome];
                    }
                    set
                    {
                        this[PCRxIATF.Nome] = value;
                    }
                }
                public String? oNome
                {
                    get
                    {
                        GetOldValue(PCRxIATF.Nome, out Object ovlr);
                        return (String?)ovlr;
                    }
                }
                public Int32 PCRxIATFID
                {
                    get
                    {
                        return (Int32)Value[PCRxIATF.PCRxIATFID];
                    }
                    set
                    {
                        this[PCRxIATF.PCRxIATFID] = value;
                    }
                }
                public Int32? oPCRxIATFID
                {
                    get
                    {
                        GetOldValue(PCRxIATF.PCRxIATFID, out Object ovlr);
                        return (Int32?)ovlr;
                    }
                }
                public Int16 SYSxEstadoID
                {
                    get
                    {
                        return (Int16)Value[PCRxIATF.SYSxEstadoID];
                    }
                    set
                    {
                        this[PCRxIATF.SYSxEstadoID] = value;
                    }
                }
                public Int16? oSYSxEstadoID
                {
                    get
                    {
                        GetOldValue(PCRxIATF.SYSxEstadoID, out Object ovlr);
                        return (Int16?)ovlr;
                    }
                }
                #nullable disable
            }
            #endregion XTuple
            private static PCRxIATF _Instance;
            public static PCRxIATF Instance
            {
                get
                {
                    if (_Instance == null)
                        _Instance = XTypeCache.CreateInstanceNP<PCRxIATF>(gCID);
                    return _Instance;
                }
            }
            public static XORMField Duracao = new XORMField(new Guid("2C99B0D5-6010-4F7C-97B0-2554E7979855"), "Duracao", "Duração (dias)", XInt32.CID, 0, 0, false, gCID, 0);
            public static XORMField Fases = new XORMField(new Guid("50E6215F-A2A1-4EC9-9578-CE6488BCF0F4"), "Fases", "Fases", XInt32.CID, 0, 0, false, gCID, 0);
            public static XORMField Nome = new XORMField(new Guid("C90E21AB-F99F-4D4B-B28F-D003E990327E"), "Nome", "Nome", XString.CID, 50, 0, false, gCID, null);
            public static XORMPKField PCRxIATFID = new XORMPKField(new Guid("37838740-575D-4EC1-AB77-37F1240A391D"), "PCRxIATFID", "Inseminação Artificial em Tempo Fixo", XInt32.CID, 0, 0, false, gCID, 0);
            public static XORMStateField SYSxEstadoID = new XORMStateField(new Guid("93946C77-CEA1-4EBC-97BD-E913792A9912"), "SYSxEstadoID", "Estado", XInt16.CID, 0, 0, false, gCID, (Int16)0);
            public static readonly XORMReference FK_2788CC535FA44573A8705834A74551DC = new XORMReference(new Guid("2788CC53-5FA4-4573-A870-5834A74551DC"), "FK_2788CC535FA44573A8705834A74551DC", gCID, SYSxEstadoID.ID, global::TFX.Core.Service.Apps.SYSx.SYSxEstado.gCID, global::TFX.Core.Service.Apps.SYSx.SYSxEstado.SYSxEstadoID.ID);
            public static readonly XORMIndex IX_2788CC535FA44573A8705834A74551DC = new XORMIndex();
            static PCRxIATF()
            {
                PCRxIATFID.PKID = new Guid("6F021DE96FC84E8FA91A0C7697EEE40E");
                PCRxIATFID.UpdateStatic = true;
                PCRxIATFID.InsertOnly = false;
                PCRxIATFID.TableName = "PCRxIATF";
                PCRxIATFID.SourceTableID = new Guid("1E640A17-14F3-4D24-ACF6-FE224C1EF1E0");
                PCRxIATFID.Index = 0;
                PCRxIATFID.IsFaceField = true;
                Nome.UpdateStatic = true;
                Nome.InsertOnly = false;
                Nome.TableName = "PCRxIATF";
                Nome.SourceTableID = new Guid("1E640A17-14F3-4D24-ACF6-FE224C1EF1E0");
                Nome.Index = 1;
                Duracao.UpdateStatic = true;
                Duracao.InsertOnly = false;
                Duracao.TableName = "PCRxIATF";
                Duracao.SourceTableID = new Guid("1E640A17-14F3-4D24-ACF6-FE224C1EF1E0");
                Duracao.Min = -2147483648;
                Duracao.Max = 2147483647;
                Duracao.Index = 2;
                Fases.UpdateStatic = true;
                Fases.InsertOnly = false;
                Fases.TableName = "PCRxIATF";
                Fases.SourceTableID = new Guid("1E640A17-14F3-4D24-ACF6-FE224C1EF1E0");
                Fases.Min = -2147483648;
                Fases.Max = 2147483647;
                Fases.Index = 3;
                SYSxEstadoID.UpdateStatic = true;
                SYSxEstadoID.InsertOnly = false;
                SYSxEstadoID.TableName = "PCRxIATF";
                SYSxEstadoID.SourceTableID = new Guid("1E640A17-14F3-4D24-ACF6-FE224C1EF1E0");
                SYSxEstadoID.Index = 4;
                IX_2788CC535FA44573A8705834A74551DC.Name = "IX_2788CC535FA44573A8705834A74551DC";
                IX_2788CC535FA44573A8705834A74551DC.ID = new Guid("6433D344-3FAD-41D3-828A-DB7BA97EE5FA");
                IX_2788CC535FA44573A8705834A74551DC.IsUnique = false;
                IX_2788CC535FA44573A8705834A74551DC.Description = "";
                IX_2788CC535FA44573A8705834A74551DC.AddItem(SYSxEstadoID);
                SYSxEstadoID.AllowZero = true;
                FK_2788CC535FA44573A8705834A74551DC.AllowZero = true;
            }
            protected PCRxIATF()
            {
                TupleType = typeof(XTuple);
                PersistenceType = typeof(__PCRxIATF);
                ID = new Guid("1E640A17-14F3-4D24-ACF6-FE224C1EF1E0");
                Name = "PCRxIATF";
                Title = "Inseminação Artificial em Tempo Fixo";
                CompanyControlType = XCompanyControlType.None;
                ModuleID = new Guid("02C4E7C5-1B4F-43DB-AC6C-CD36BBE428B7");
                DeleteOnDeactivate = false;
                PKName = "PK_37838740575D4EC1AB7737F1240A391D";
                FaceField = PCRxIATFID;
                StateField = SYSxEstadoID;
                DisplayField = PCRxIATFID;
            }
            protected override void LoadDefaultData(XDataSet pDataSet)
            {
                base.LoadDefaultData(pDataSet);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {0, @"NA", 0, 0, (Int16)0}), 0);
            }
        }

        #endregion PCRxIATF

        #region PCRxIATFFase

        [XRegister(typeof(PCRxIATFFase), sCID)]
        public class PCRxIATFFase : XORMTable
        {
            public const String sCID = "670F813A-9295-4E31-B597-EDB9EFCC29BC";
            public static Guid gCID = new Guid(sCID);
            #region XDefault
            public class XDefault
            {
                public static String s_00000000000000000000000000000000 => _Titles[new Guid("00000000-0000-0000-0000-000000000000")];
                public static Guid _00000000000000000000000000000000 = new Guid("00000000-0000-0000-0000-000000000000");
                private static Dictionary<Guid, String> _Titles = new Dictionary<Guid, String>()
                {
                [new Guid("00000000-0000-0000-0000-000000000000")] = "00000000-0000-0000-0000-000000000000"
                };
                public static String GetTitle(Guid pIndex)
                {
                    if (!_Titles.ContainsKey(pIndex))
                        return "";
                    return _Titles[pIndex];
                }
            }
            #endregion XDefault
            #region XTuple
            public class XTuple : XDataTuple
            {
                public XTuple()
                {
                }
                public XTuple(Object[] pSource)
                    : base(pSource)
                {
                }
                public XTuple(Int32 pColCount)
                   : this(new Object[pColCount])
                {
                }
                #nullable enable
                public Int32 Duracao
                {
                    get
                    {
                        return (Int32)Value[PCRxIATFFase.Duracao];
                    }
                    set
                    {
                        this[PCRxIATFFase.Duracao] = value;
                    }
                }
                public Int32? oDuracao
                {
                    get
                    {
                        GetOldValue(PCRxIATFFase.Duracao, out Object ovlr);
                        return (Int32?)ovlr;
                    }
                }
                public Int16 Ordem
                {
                    get
                    {
                        return (Int16)Value[PCRxIATFFase.Ordem];
                    }
                    set
                    {
                        this[PCRxIATFFase.Ordem] = value;
                    }
                }
                public Int16? oOrdem
                {
                    get
                    {
                        GetOldValue(PCRxIATFFase.Ordem, out Object ovlr);
                        return (Int16?)ovlr;
                    }
                }
                public Guid PCRxIATFFaseAnteriorID
                {
                    get
                    {
                        return (Guid)Value[PCRxIATFFase.PCRxIATFFaseAnteriorID];
                    }
                    set
                    {
                        this[PCRxIATFFase.PCRxIATFFaseAnteriorID] = value;
                    }
                }
                public Guid? oPCRxIATFFaseAnteriorID
                {
                    get
                    {
                        GetOldValue(PCRxIATFFase.PCRxIATFFaseAnteriorID, out Object ovlr);
                        return (Guid?)ovlr;
                    }
                }
                public Guid PCRxIATFFaseID
                {
                    get
                    {
                        return (Guid)Value[PCRxIATFFase.PCRxIATFFaseID];
                    }
                    set
                    {
                        this[PCRxIATFFase.PCRxIATFFaseID] = value;
                    }
                }
                public Guid? oPCRxIATFFaseID
                {
                    get
                    {
                        GetOldValue(PCRxIATFFase.PCRxIATFFaseID, out Object ovlr);
                        return (Guid?)ovlr;
                    }
                }
                public Guid PCRxIATFFaseProximaID
                {
                    get
                    {
                        return (Guid)Value[PCRxIATFFase.PCRxIATFFaseProximaID];
                    }
                    set
                    {
                        this[PCRxIATFFase.PCRxIATFFaseProximaID] = value;
                    }
                }
                public Guid? oPCRxIATFFaseProximaID
                {
                    get
                    {
                        GetOldValue(PCRxIATFFase.PCRxIATFFaseProximaID, out Object ovlr);
                        return (Guid?)ovlr;
                    }
                }
                public Int16 PCRxIATFFaseTipoID
                {
                    get
                    {
                        return (Int16)Value[PCRxIATFFase.PCRxIATFFaseTipoID];
                    }
                    set
                    {
                        this[PCRxIATFFase.PCRxIATFFaseTipoID] = value;
                    }
                }
                public Int16? oPCRxIATFFaseTipoID
                {
                    get
                    {
                        GetOldValue(PCRxIATFFase.PCRxIATFFaseTipoID, out Object ovlr);
                        return (Int16?)ovlr;
                    }
                }
                public Int32 PCRxIATFID
                {
                    get
                    {
                        return (Int32)Value[PCRxIATFFase.PCRxIATFID];
                    }
                    set
                    {
                        this[PCRxIATFFase.PCRxIATFID] = value;
                    }
                }
                public Int32? oPCRxIATFID
                {
                    get
                    {
                        GetOldValue(PCRxIATFFase.PCRxIATFID, out Object ovlr);
                        return (Int32?)ovlr;
                    }
                }
                public Int16 SYSxEstadoID
                {
                    get
                    {
                        return (Int16)Value[PCRxIATFFase.SYSxEstadoID];
                    }
                    set
                    {
                        this[PCRxIATFFase.SYSxEstadoID] = value;
                    }
                }
                public Int16? oSYSxEstadoID
                {
                    get
                    {
                        GetOldValue(PCRxIATFFase.SYSxEstadoID, out Object ovlr);
                        return (Int16?)ovlr;
                    }
                }
                #nullable disable
            }
            #endregion XTuple
            private static PCRxIATFFase _Instance;
            public static PCRxIATFFase Instance
            {
                get
                {
                    if (_Instance == null)
                        _Instance = XTypeCache.CreateInstanceNP<PCRxIATFFase>(gCID);
                    return _Instance;
                }
            }
            public static XORMField Duracao = new XORMField(new Guid("FBF1E12C-886C-488E-AFBB-69C6F1795C99"), "Duracao", "Duração (dias)", XInt32.CID, 0, 0, false, gCID, 0);
            public static XORMField Ordem = new XORMField(new Guid("9E0D8F09-427E-42D7-AB01-A5658A920000"), "Ordem", "Ordem", XInt16.CID, 0, 0, false, gCID, (Int16)0);
            public static XORMFKField PCRxIATFFaseAnteriorID = new XORMFKField(new Guid("36476003-31D0-465B-B08D-BC13743C99EC"), "PCRxIATFFaseAnteriorID", "Fase Anterior da IATF", XGuid.CID, 0, 0, false, gCID, new Guid("00000000-0000-0000-0000-000000000000"));
            public static XORMPKField PCRxIATFFaseID = new XORMPKField(new Guid("C943AB82-5CB1-4F15-83A1-0EC08186EA65"), "PCRxIATFFaseID", "Fases da IATF", XGuid.CID, 0, 0, false, gCID, new Guid("00000000-0000-0000-0000-000000000000"));
            public static XORMFKField PCRxIATFFaseProximaID = new XORMFKField(new Guid("2130D5A8-FFFB-449F-B5B0-FE47F5C7917B"), "PCRxIATFFaseProximaID", "Próxima Fases da IATF", XGuid.CID, 0, 0, false, gCID, new Guid("00000000-0000-0000-0000-000000000000"));
            public static XORMFKField PCRxIATFFaseTipoID = new XORMFKField(new Guid("2C3AFE3B-E12A-444A-87AF-A4686B3FC793"), "PCRxIATFFaseTipoID", "Tipo de Fase", XInt16.CID, 0, 0, false, gCID, (Int16)0);
            public static XORMFKField PCRxIATFID = new XORMFKField(new Guid("B36C7730-0428-41AE-9614-E1C9D3C6F704"), "PCRxIATFID", "Inseminação Artificial em Tempo Fixo", XInt32.CID, 0, 0, false, gCID, 0);
            public static XORMStateField SYSxEstadoID = new XORMStateField(new Guid("16F11877-0562-4134-9072-59C46F8EE3C0"), "SYSxEstadoID", "Estado", XInt16.CID, 0, 0, false, gCID, (Int16)0);
            public static readonly XORMReference FK_485D8583847448828CE35EF8558255FE = new XORMReference(new Guid("485D8583-8474-4882-8CE3-5EF8558255FE"), "FK_485D8583847448828CE35EF8558255FE", gCID, PCRxIATFID.ID, PCRxIATF.gCID, PCRxIATF.PCRxIATFID.ID);
            public static readonly XORMReference FK_913E86DF785E4E208A59A71907B75BB2 = new XORMReference(new Guid("913E86DF-785E-4E20-8A59-A71907B75BB2"), "FK_913E86DF785E4E208A59A71907B75BB2", gCID, PCRxIATFFaseAnteriorID.ID, PCRxIATFFase.gCID, PCRxIATFFase.PCRxIATFFaseID.ID);
            public static readonly XORMReference FK_287CD4AAC55D457BAA506106213839A6 = new XORMReference(new Guid("287CD4AA-C55D-457B-AA50-6106213839A6"), "FK_287CD4AAC55D457BAA506106213839A6", gCID, PCRxIATFFaseTipoID.ID, PCRxIATFFaseTipo.gCID, PCRxIATFFaseTipo.PCRxIATFFaseTipoID.ID);
            public static readonly XORMReference FK_6BF70513A18442C98B804798D160948D = new XORMReference(new Guid("6BF70513-A184-42C9-8B80-4798D160948D"), "FK_6BF70513A18442C98B804798D160948D", gCID, PCRxIATFFaseProximaID.ID, PCRxIATFFase.gCID, PCRxIATFFase.PCRxIATFFaseID.ID);
            public static readonly XORMReference FK_4051749195084CCC839FD5F3B9A861AE = new XORMReference(new Guid("40517491-9508-4CCC-839F-D5F3B9A861AE"), "FK_4051749195084CCC839FD5F3B9A861AE", gCID, SYSxEstadoID.ID, global::TFX.Core.Service.Apps.SYSx.SYSxEstado.gCID, global::TFX.Core.Service.Apps.SYSx.SYSxEstado.SYSxEstadoID.ID);
            public static readonly XORMIndex IX_485D8583847448828CE35EF8558255FE = new XORMIndex();
            public static readonly XORMIndex IX_913E86DF785E4E208A59A71907B75BB2 = new XORMIndex();
            public static readonly XORMIndex IX_287CD4AAC55D457BAA506106213839A6 = new XORMIndex();
            public static readonly XORMIndex IX_6BF70513A18442C98B804798D160948D = new XORMIndex();
            public static readonly XORMIndex IX_4051749195084CCC839FD5F3B9A861AE = new XORMIndex();
            static PCRxIATFFase()
            {
                PCRxIATFFaseID.PKID = new Guid("A348830CD63F4508A03C46EB35E8CC88");
                PCRxIATFFaseID.UpdateStatic = true;
                PCRxIATFFaseID.InsertOnly = false;
                PCRxIATFFaseID.TableName = "PCRxIATFFase";
                PCRxIATFFaseID.SourceTableID = new Guid("670F813A-9295-4E31-B597-EDB9EFCC29BC");
                PCRxIATFFaseID.Index = 0;
                PCRxIATFFaseID.IsFaceField = true;
                PCRxIATFID.UpdateStatic = true;
                PCRxIATFID.InsertOnly = false;
                PCRxIATFID.TableName = "PCRxIATFFase";
                PCRxIATFID.SourceTableID = new Guid("670F813A-9295-4E31-B597-EDB9EFCC29BC");
                PCRxIATFID.Index = 1;
                Ordem.UpdateStatic = true;
                Ordem.InsertOnly = false;
                Ordem.TableName = "PCRxIATFFase";
                Ordem.SourceTableID = new Guid("670F813A-9295-4E31-B597-EDB9EFCC29BC");
                Ordem.Min = -32768;
                Ordem.Max = 32767;
                Ordem.Index = 2;
                Duracao.UpdateStatic = true;
                Duracao.InsertOnly = false;
                Duracao.TableName = "PCRxIATFFase";
                Duracao.SourceTableID = new Guid("670F813A-9295-4E31-B597-EDB9EFCC29BC");
                Duracao.Min = -2147483648;
                Duracao.Max = 2147483647;
                Duracao.Index = 3;
                PCRxIATFFaseAnteriorID.UpdateStatic = true;
                PCRxIATFFaseAnteriorID.InsertOnly = false;
                PCRxIATFFaseAnteriorID.TableName = "PCRxIATFFase";
                PCRxIATFFaseAnteriorID.SourceTableID = new Guid("670F813A-9295-4E31-B597-EDB9EFCC29BC");
                PCRxIATFFaseAnteriorID.Index = 4;
                PCRxIATFFaseProximaID.UpdateStatic = true;
                PCRxIATFFaseProximaID.InsertOnly = false;
                PCRxIATFFaseProximaID.TableName = "PCRxIATFFase";
                PCRxIATFFaseProximaID.SourceTableID = new Guid("670F813A-9295-4E31-B597-EDB9EFCC29BC");
                PCRxIATFFaseProximaID.Index = 5;
                PCRxIATFFaseTipoID.UpdateStatic = true;
                PCRxIATFFaseTipoID.InsertOnly = false;
                PCRxIATFFaseTipoID.TableName = "PCRxIATFFase";
                PCRxIATFFaseTipoID.SourceTableID = new Guid("670F813A-9295-4E31-B597-EDB9EFCC29BC");
                PCRxIATFFaseTipoID.Index = 6;
                SYSxEstadoID.UpdateStatic = true;
                SYSxEstadoID.InsertOnly = false;
                SYSxEstadoID.TableName = "PCRxIATFFase";
                SYSxEstadoID.SourceTableID = new Guid("670F813A-9295-4E31-B597-EDB9EFCC29BC");
                SYSxEstadoID.Index = 7;
                IX_485D8583847448828CE35EF8558255FE.Name = "IX_485D8583847448828CE35EF8558255FE";
                IX_485D8583847448828CE35EF8558255FE.ID = new Guid("A1B3B79F-8D19-4ACA-8557-9F89DC497B79");
                IX_485D8583847448828CE35EF8558255FE.IsUnique = false;
                IX_485D8583847448828CE35EF8558255FE.Description = "";
                IX_485D8583847448828CE35EF8558255FE.AddItem(PCRxIATFID);
                IX_913E86DF785E4E208A59A71907B75BB2.Name = "IX_913E86DF785E4E208A59A71907B75BB2";
                IX_913E86DF785E4E208A59A71907B75BB2.ID = new Guid("8F7CE58E-2E3C-4ABE-B5A4-9F645904BD9E");
                IX_913E86DF785E4E208A59A71907B75BB2.IsUnique = false;
                IX_913E86DF785E4E208A59A71907B75BB2.Description = "";
                IX_913E86DF785E4E208A59A71907B75BB2.AddItem(PCRxIATFFaseAnteriorID);
                IX_287CD4AAC55D457BAA506106213839A6.Name = "IX_287CD4AAC55D457BAA506106213839A6";
                IX_287CD4AAC55D457BAA506106213839A6.ID = new Guid("CD0476E4-6317-4ED8-9E55-B1A654014769");
                IX_287CD4AAC55D457BAA506106213839A6.IsUnique = false;
                IX_287CD4AAC55D457BAA506106213839A6.Description = "";
                IX_287CD4AAC55D457BAA506106213839A6.AddItem(PCRxIATFFaseTipoID);
                IX_6BF70513A18442C98B804798D160948D.Name = "IX_6BF70513A18442C98B804798D160948D";
                IX_6BF70513A18442C98B804798D160948D.ID = new Guid("8C8FBBE6-8004-42BD-86CF-750A9B55E6BC");
                IX_6BF70513A18442C98B804798D160948D.IsUnique = false;
                IX_6BF70513A18442C98B804798D160948D.Description = "";
                IX_6BF70513A18442C98B804798D160948D.AddItem(PCRxIATFFaseProximaID);
                IX_4051749195084CCC839FD5F3B9A861AE.Name = "IX_4051749195084CCC839FD5F3B9A861AE";
                IX_4051749195084CCC839FD5F3B9A861AE.ID = new Guid("97D7858B-F9AC-4F7C-ACA5-DB8162E24F80");
                IX_4051749195084CCC839FD5F3B9A861AE.IsUnique = false;
                IX_4051749195084CCC839FD5F3B9A861AE.Description = "";
                IX_4051749195084CCC839FD5F3B9A861AE.AddItem(SYSxEstadoID);
                PCRxIATFID.AllowZero = true;
                FK_485D8583847448828CE35EF8558255FE.AllowZero = true;
                PCRxIATFFaseAnteriorID.AllowZero = true;
                FK_913E86DF785E4E208A59A71907B75BB2.AllowZero = true;
                PCRxIATFFaseTipoID.AllowZero = true;
                FK_287CD4AAC55D457BAA506106213839A6.AllowZero = true;
                PCRxIATFFaseProximaID.AllowZero = true;
                FK_6BF70513A18442C98B804798D160948D.AllowZero = true;
                SYSxEstadoID.AllowZero = true;
                FK_4051749195084CCC839FD5F3B9A861AE.AllowZero = true;
            }
            protected PCRxIATFFase()
            {
                TupleType = typeof(XTuple);
                PersistenceType = typeof(__PCRxIATFFase);
                ID = new Guid("670F813A-9295-4E31-B597-EDB9EFCC29BC");
                Name = "PCRxIATFFase";
                Title = "Fases da IATF";
                CompanyControlType = XCompanyControlType.None;
                ModuleID = new Guid("02C4E7C5-1B4F-43DB-AC6C-CD36BBE428B7");
                DeleteOnDeactivate = false;
                PKName = "PK_C943AB825CB14F1583A10EC08186EA65";
                FaceField = PCRxIATFFaseID;
                StateField = SYSxEstadoID;
                DisplayField = PCRxIATFFaseID;
            }
            protected override void LoadDefaultData(XDataSet pDataSet)
            {
                base.LoadDefaultData(pDataSet);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {new Guid("00000000-0000-0000-0000-000000000000"), 0, (Int16)0, 0, new Guid("00000000-0000-0000-0000-000000000000"), new Guid("00000000-0000-0000-0000-000000000000"), (Int16)0, (Int16)0}), new Guid("00000000-0000-0000-0000-000000000000"));
            }
        }

        #endregion PCRxIATFFase

        #region PCRxIATFFaseTipo

        [XRegister(typeof(PCRxIATFFaseTipo), sCID)]
        public class PCRxIATFFaseTipo : XORMTable
        {
            public const String sCID = "D2ECB9D2-BDB4-4D0A-9343-9BDD2099045D";
            public static Guid gCID = new Guid(sCID);
            #region XDefault
            public class XDefault
            {
                public static String sNA => _Titles[(Int16)0];
                public const Int16 NA = (Int16)0;
                public static String sDG3 => _Titles[(Int16)16];
                public const Int16 DG3 = (Int16)16;
                public static String sIntervalo => _Titles[(Int16)1];
                public const Int16 Intervalo = (Int16)1;
                public static String sDG_Final => _Titles[(Int16)17];
                public const Int16 DG_Final = (Int16)17;
                public static String sAplicacao_de_Hormonio => _Titles[(Int16)4];
                public const Int16 Aplicacao_de_Hormonio = (Int16)4;
                public static String sDG1 => _Titles[(Int16)12];
                public const Int16 DG1 = (Int16)12;
                public static String sIATF1 => _Titles[(Int16)11];
                public const Int16 IATF1 = (Int16)11;
                public static String sImplante_Dispositivo => _Titles[(Int16)2];
                public const Int16 Implante_Dispositivo = (Int16)2;
                public static String sIATF3 => _Titles[(Int16)15];
                public const Int16 IATF3 = (Int16)15;
                public static String sIATF2 => _Titles[(Int16)13];
                public const Int16 IATF2 = (Int16)13;
                public static String sRetirada_do_Implante => _Titles[(Int16)3];
                public const Int16 Retirada_do_Implante = (Int16)3;
                public static String sDG2 => _Titles[(Int16)14];
                public const Int16 DG2 = (Int16)14;
                private static Dictionary<Int16, String> _Titles = new Dictionary<Int16, String>()
                {
                [(Int16)0] = "NA",
                [(Int16)16] = "DG-3",
                [(Int16)1] = "Intervalo",
                [(Int16)17] = "DG Final",
                [(Int16)4] = "Aplicação de Hormônio",
                [(Int16)12] = "DG-1",
                [(Int16)11] = "IATF-1",
                [(Int16)2] = "Implante Dispositivo",
                [(Int16)15] = "IATF-3",
                [(Int16)13] = "IATF-2",
                [(Int16)3] = "Retirada do Implante",
                [(Int16)14] = "DG-2"
                };
                public static String GetTitle(Int16 pIndex)
                {
                    if (!_Titles.ContainsKey(pIndex))
                        return "";
                    return _Titles[pIndex];
                }
            }
            #endregion XDefault
            #region XTuple
            public class XTuple : XDataTuple
            {
                public XTuple()
                {
                }
                public XTuple(Object[] pSource)
                    : base(pSource)
                {
                }
                public XTuple(Int32 pColCount)
                   : this(new Object[pColCount])
                {
                }
                #nullable enable
                public Boolean Operacional
                {
                    get
                    {
                        return (Boolean)Value[PCRxIATFFaseTipo.Operacional];
                    }
                    set
                    {
                        this[PCRxIATFFaseTipo.Operacional] = value;
                    }
                }
                public Boolean? oOperacional
                {
                    get
                    {
                        GetOldValue(PCRxIATFFaseTipo.Operacional, out Object ovlr);
                        return (Boolean?)ovlr;
                    }
                }
                public Int16 PCRxIATFFaseTipoID
                {
                    get
                    {
                        return (Int16)Value[PCRxIATFFaseTipo.PCRxIATFFaseTipoID];
                    }
                    set
                    {
                        this[PCRxIATFFaseTipo.PCRxIATFFaseTipoID] = value;
                    }
                }
                public Int16? oPCRxIATFFaseTipoID
                {
                    get
                    {
                        GetOldValue(PCRxIATFFaseTipo.PCRxIATFFaseTipoID, out Object ovlr);
                        return (Int16?)ovlr;
                    }
                }
                public String Tipo
                {
                    get
                    {
                        return (String)Value[PCRxIATFFaseTipo.Tipo];
                    }
                    set
                    {
                        this[PCRxIATFFaseTipo.Tipo] = value;
                    }
                }
                public String? oTipo
                {
                    get
                    {
                        GetOldValue(PCRxIATFFaseTipo.Tipo, out Object ovlr);
                        return (String?)ovlr;
                    }
                }
                #nullable disable
            }
            #endregion XTuple
            private static PCRxIATFFaseTipo _Instance;
            public static PCRxIATFFaseTipo Instance
            {
                get
                {
                    if (_Instance == null)
                        _Instance = XTypeCache.CreateInstanceNP<PCRxIATFFaseTipo>(gCID);
                    return _Instance;
                }
            }
            public static XORMField Operacional = new XORMField(new Guid("71EE1208-0D0F-49E4-9EDE-527ABF442C26"), "Operacional", "Operacional", XBoolean.CID, 0, 0, false, gCID, false);
            public static XORMPKField PCRxIATFFaseTipoID = new XORMPKField(new Guid("195170BD-963F-4F13-9B20-A43511E9AB80"), "PCRxIATFFaseTipoID", "Tipo de Fase", XInt16.CID, 0, 0, false, gCID, (Int16)0);
            public static XORMFaceField Tipo = new XORMFaceField(new Guid("49DEAF8B-44AE-429B-AEF0-C25E28193F34"), "Tipo", "Nome da Fase", XString.CID, 35, 0, false, gCID, null);
            static PCRxIATFFaseTipo()
            {
                PCRxIATFFaseTipoID.PKID = new Guid("12B369FF55964B01A2FA6E8B972A08EC");
                PCRxIATFFaseTipoID.UpdateStatic = true;
                PCRxIATFFaseTipoID.InsertOnly = false;
                PCRxIATFFaseTipoID.TableName = "PCRxIATFFaseTipo";
                PCRxIATFFaseTipoID.SourceTableID = new Guid("D2ECB9D2-BDB4-4D0A-9343-9BDD2099045D");
                PCRxIATFFaseTipoID.Index = 0;
                Tipo.UpdateStatic = true;
                Tipo.InsertOnly = false;
                Tipo.TableName = "PCRxIATFFaseTipo";
                Tipo.SourceTableID = new Guid("D2ECB9D2-BDB4-4D0A-9343-9BDD2099045D");
                Tipo.Index = 1;
                Tipo.IsFaceField = true;
                Operacional.UpdateStatic = true;
                Operacional.InsertOnly = false;
                Operacional.TableName = "PCRxIATFFaseTipo";
                Operacional.SourceTableID = new Guid("D2ECB9D2-BDB4-4D0A-9343-9BDD2099045D");
                Operacional.Index = 2;
            }
            protected PCRxIATFFaseTipo()
            {
                TupleType = typeof(XTuple);
                PersistenceType = typeof(__PCRxIATFFaseTipo);
                ID = new Guid("D2ECB9D2-BDB4-4D0A-9343-9BDD2099045D");
                Name = "PCRxIATFFaseTipo";
                Title = "Tipo de Fase";
                CompanyControlType = XCompanyControlType.None;
                ModuleID = new Guid("02C4E7C5-1B4F-43DB-AC6C-CD36BBE428B7");
                DeleteOnDeactivate = false;
                PKName = "PK_195170BD963F4F139B20A43511E9AB80";
                FaceField = Tipo;
                IsCached = true;
                DisplayField = Tipo;
            }
            protected override void LoadDefaultData(XDataSet pDataSet)
            {
                base.LoadDefaultData(pDataSet);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)0, @"NA", false}), (Int16)0);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)16, @"DG-3", true}), (Int16)16);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)1, @"Intervalo", false}), (Int16)1);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)17, @"DG Final", true}), (Int16)17);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)4, @"Aplicação de Hormônio", true}), (Int16)4);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)12, @"DG-1", true}), (Int16)12);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)11, @"IATF-1", true}), (Int16)11);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)2, @"Implante Dispositivo", true}), (Int16)2);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)15, @"IATF-3", true}), (Int16)15);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)13, @"IATF-2", true}), (Int16)13);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)3, @"Retirada do Implante", true}), (Int16)3);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)14, @"DG-2", true}), (Int16)14);
            }
        }

        #endregion PCRxIATFFaseTipo

        #region PCRxPasto

        [XRegister(typeof(PCRxPasto), sCID)]
        public class PCRxPasto : XORMTable
        {
            public const String sCID = "9E612729-ECC6-47BA-938E-E3B80F180157";
            public static Guid gCID = new Guid(sCID);
            #region XTuple
            public class XTuple : XDataTuple
            {
                public XTuple()
                {
                }
                public XTuple(Object[] pSource)
                    : base(pSource)
                {
                }
                public XTuple(Int32 pColCount)
                   : this(new Object[pColCount])
                {
                }
                #nullable enable
                public Int32 Area
                {
                    get
                    {
                        return (Int32)Value[PCRxPasto.Area];
                    }
                    set
                    {
                        this[PCRxPasto.Area] = value;
                    }
                }
                public Int32? oArea
                {
                    get
                    {
                        GetOldValue(PCRxPasto.Area, out Object ovlr);
                        return (Int32?)ovlr;
                    }
                }
                public String CoordenadasArea
                {
                    get
                    {
                        return (String)Value[PCRxPasto.CoordenadasArea];
                    }
                    set
                    {
                        this[PCRxPasto.CoordenadasArea] = value;
                    }
                }
                public String? oCoordenadasArea
                {
                    get
                    {
                        GetOldValue(PCRxPasto.CoordenadasArea, out Object ovlr);
                        return (String?)ovlr;
                    }
                }
                public Decimal Latitude
                {
                    get
                    {
                        return (Decimal)Value[PCRxPasto.Latitude];
                    }
                    set
                    {
                        this[PCRxPasto.Latitude] = value;
                    }
                }
                public Decimal? oLatitude
                {
                    get
                    {
                        GetOldValue(PCRxPasto.Latitude, out Object ovlr);
                        return (Decimal?)ovlr;
                    }
                }
                public Decimal Longitude
                {
                    get
                    {
                        return (Decimal)Value[PCRxPasto.Longitude];
                    }
                    set
                    {
                        this[PCRxPasto.Longitude] = value;
                    }
                }
                public Decimal? oLongitude
                {
                    get
                    {
                        GetOldValue(PCRxPasto.Longitude, out Object ovlr);
                        return (Decimal?)ovlr;
                    }
                }
                public String Nome
                {
                    get
                    {
                        return (String)Value[PCRxPasto.Nome];
                    }
                    set
                    {
                        this[PCRxPasto.Nome] = value;
                    }
                }
                public String? oNome
                {
                    get
                    {
                        GetOldValue(PCRxPasto.Nome, out Object ovlr);
                        return (String?)ovlr;
                    }
                }
                public Int32 PCRxPastoID
                {
                    get
                    {
                        return (Int32)Value[PCRxPasto.PCRxPastoID];
                    }
                    set
                    {
                        this[PCRxPasto.PCRxPastoID] = value;
                    }
                }
                public Int32? oPCRxPastoID
                {
                    get
                    {
                        GetOldValue(PCRxPasto.PCRxPastoID, out Object ovlr);
                        return (Int32?)ovlr;
                    }
                }
                public Int32 PCRxRetiroID
                {
                    get
                    {
                        return (Int32)Value[PCRxPasto.PCRxRetiroID];
                    }
                    set
                    {
                        this[PCRxPasto.PCRxRetiroID] = value;
                    }
                }
                public Int32? oPCRxRetiroID
                {
                    get
                    {
                        GetOldValue(PCRxPasto.PCRxRetiroID, out Object ovlr);
                        return (Int32?)ovlr;
                    }
                }
                #nullable disable
            }
            #endregion XTuple
            private static PCRxPasto _Instance;
            public static PCRxPasto Instance
            {
                get
                {
                    if (_Instance == null)
                        _Instance = XTypeCache.CreateInstanceNP<PCRxPasto>(gCID);
                    return _Instance;
                }
            }
            public static XORMField Area = new XORMField(new Guid("31B43F3A-DBA7-4759-B261-6DA766582039"), "Area", "Área (ha)", XInt32.CID, 0, 0, false, gCID, 0);
            public static XORMField CoordenadasArea = new XORMField(new Guid("780E7222-75F5-40E4-B05A-7E1E0CAD78D9"), "CoordenadasArea", "Coordenadas da Área", XString.CID, 0, 0, true, gCID, null);
            public static XORMDecimalField Latitude = new XORMDecimalField(new Guid("C4F7B41B-7540-48DC-BE5C-165D070DEB37"), "Latitude", "Latitude", XDecimal.CID, 20, 10, false, gCID, 0);
            public static XORMDecimalField Longitude = new XORMDecimalField(new Guid("04839B18-C774-433B-A6B8-280E05871376"), "Longitude", "Longitude", XDecimal.CID, 20, 10, false, gCID, 0);
            public static XORMField Nome = new XORMField(new Guid("16756E1D-7806-4A62-B14B-AF7002505840"), "Nome", "Nome", XString.CID, 50, 0, false, gCID, null);
            public static XORMPKField PCRxPastoID = new XORMPKField(new Guid("384DB1BD-7E17-4464-8AA5-59CECD759DB0"), "PCRxPastoID", "Pasto", XInt32.CID, 0, 0, false, gCID, 0);
            public static XORMFKField PCRxRetiroID = new XORMFKField(new Guid("5E15C177-B68F-4917-95BB-0814A946F064"), "PCRxRetiroID", "Retiro", XInt32.CID, 0, 0, false, gCID, 0);
            public static readonly XORMReference FK_878333C1A3A84957B0093D7BBF0C14CC = new XORMReference(new Guid("878333C1-A3A8-4957-B009-3D7BBF0C14CC"), "FK_878333C1A3A84957B0093D7BBF0C14CC", gCID, PCRxRetiroID.ID, PCRxRetiro.gCID, PCRxRetiro.PCRxRetiroID.ID);
            public static readonly XORMIndex IX_878333C1A3A84957B0093D7BBF0C14CC = new XORMIndex();
            static PCRxPasto()
            {
                PCRxPastoID.PKID = new Guid("F9640002523446C3906C3D6B39DAFD4A");
                PCRxPastoID.UpdateStatic = true;
                PCRxPastoID.InsertOnly = false;
                PCRxPastoID.TableName = "PCRxPasto";
                PCRxPastoID.SourceTableID = new Guid("9E612729-ECC6-47BA-938E-E3B80F180157");
                PCRxPastoID.Index = 0;
                Nome.UpdateStatic = true;
                Nome.InsertOnly = false;
                Nome.TableName = "PCRxPasto";
                Nome.SourceTableID = new Guid("9E612729-ECC6-47BA-938E-E3B80F180157");
                Nome.Index = 1;
                Area.UpdateStatic = true;
                Area.InsertOnly = false;
                Area.TableName = "PCRxPasto";
                Area.SourceTableID = new Guid("9E612729-ECC6-47BA-938E-E3B80F180157");
                Area.Min = -2147483648;
                Area.Max = 2147483647;
                Area.Index = 2;
                PCRxRetiroID.UpdateStatic = true;
                PCRxRetiroID.InsertOnly = false;
                PCRxRetiroID.TableName = "PCRxPasto";
                PCRxRetiroID.SourceTableID = new Guid("9E612729-ECC6-47BA-938E-E3B80F180157");
                PCRxRetiroID.Index = 3;
                Latitude.UpdateStatic = true;
                Latitude.InsertOnly = false;
                Latitude.TableName = "PCRxPasto";
                Latitude.SourceTableID = new Guid("9E612729-ECC6-47BA-938E-E3B80F180157");
                Latitude.Min = -79228162514264337593543950335M;
                Latitude.Max = 79228162514264337593543950335M;
                Latitude.Index = 4;
                Longitude.UpdateStatic = true;
                Longitude.InsertOnly = false;
                Longitude.TableName = "PCRxPasto";
                Longitude.SourceTableID = new Guid("9E612729-ECC6-47BA-938E-E3B80F180157");
                Longitude.Min = -79228162514264337593543950335M;
                Longitude.Max = 79228162514264337593543950335M;
                Longitude.Index = 5;
                CoordenadasArea.UpdateStatic = true;
                CoordenadasArea.InsertOnly = false;
                CoordenadasArea.TableName = "PCRxPasto";
                CoordenadasArea.SourceTableID = new Guid("9E612729-ECC6-47BA-938E-E3B80F180157");
                CoordenadasArea.Index = 6;
                IX_878333C1A3A84957B0093D7BBF0C14CC.Name = "IX_878333C1A3A84957B0093D7BBF0C14CC";
                IX_878333C1A3A84957B0093D7BBF0C14CC.ID = new Guid("4937E351-066A-4E37-BAA1-06845DAD2A76");
                IX_878333C1A3A84957B0093D7BBF0C14CC.IsUnique = false;
                IX_878333C1A3A84957B0093D7BBF0C14CC.Description = "";
                IX_878333C1A3A84957B0093D7BBF0C14CC.AddItem(PCRxRetiroID);
                PCRxRetiroID.AllowZero = true;
                FK_878333C1A3A84957B0093D7BBF0C14CC.AllowZero = true;
            }
            protected PCRxPasto()
            {
                TupleType = typeof(XTuple);
                PersistenceType = typeof(__PCRxPasto);
                ID = new Guid("9E612729-ECC6-47BA-938E-E3B80F180157");
                Name = "PCRxPasto";
                Title = "Pasto";
                CompanyControlType = XCompanyControlType.None;
                ModuleID = new Guid("02C4E7C5-1B4F-43DB-AC6C-CD36BBE428B7");
                DeleteOnDeactivate = false;
                PKName = "PK_384DB1BD7E1744648AA559CECD759DB0";
            }
            protected override void LoadDefaultData(XDataSet pDataSet)
            {
                base.LoadDefaultData(pDataSet);
            }
        }

        #endregion PCRxPasto

        #region PCRxRaca

        [XRegister(typeof(PCRxRaca), sCID)]
        public class PCRxRaca : XORMTable
        {
            public const String sCID = "5AFF5A0E-CD1F-4F87-9292-188C51E49554";
            public static Guid gCID = new Guid(sCID);
            #region XDefault
            public class XDefault
            {
                public static String sAngus => _Titles[(Int16)1];
                public const Int16 Angus = (Int16)1;
                public static String sAberdeen => _Titles[(Int16)3];
                public const Int16 Aberdeen = (Int16)3;
                public static String sNelore => _Titles[(Int16)2];
                public const Int16 Nelore = (Int16)2;
                public static String sNelore_Colorida => _Titles[(Int16)4];
                public const Int16 Nelore_Colorida = (Int16)4;
                public static String sNI => _Titles[(Int16)0];
                public const Int16 NI = (Int16)0;
                private static Dictionary<Int16, String> _Titles = new Dictionary<Int16, String>()
                {
                [(Int16)1] = "Angus",
                [(Int16)3] = "Aberdeen",
                [(Int16)2] = "Nelore",
                [(Int16)4] = "Nelore (Colorida)",
                [(Int16)0] = "NI"
                };
                public static String GetTitle(Int16 pIndex)
                {
                    if (!_Titles.ContainsKey(pIndex))
                        return "";
                    return _Titles[pIndex];
                }
            }
            #endregion XDefault
            #region XTuple
            public class XTuple : XDataTuple
            {
                public XTuple()
                {
                }
                public XTuple(Object[] pSource)
                    : base(pSource)
                {
                }
                public XTuple(Int32 pColCount)
                   : this(new Object[pColCount])
                {
                }
                #nullable enable
                public Int16 PCRxRacaID
                {
                    get
                    {
                        return (Int16)Value[PCRxRaca.PCRxRacaID];
                    }
                    set
                    {
                        this[PCRxRaca.PCRxRacaID] = value;
                    }
                }
                public Int16? oPCRxRacaID
                {
                    get
                    {
                        GetOldValue(PCRxRaca.PCRxRacaID, out Object ovlr);
                        return (Int16?)ovlr;
                    }
                }
                public String Raca
                {
                    get
                    {
                        return (String)Value[PCRxRaca.Raca];
                    }
                    set
                    {
                        this[PCRxRaca.Raca] = value;
                    }
                }
                public String? oRaca
                {
                    get
                    {
                        GetOldValue(PCRxRaca.Raca, out Object ovlr);
                        return (String?)ovlr;
                    }
                }
                #nullable disable
            }
            #endregion XTuple
            private static PCRxRaca _Instance;
            public static PCRxRaca Instance
            {
                get
                {
                    if (_Instance == null)
                        _Instance = XTypeCache.CreateInstanceNP<PCRxRaca>(gCID);
                    return _Instance;
                }
            }
            public static XORMPKField PCRxRacaID = new XORMPKField(new Guid("E0899D45-B8AD-471B-98E6-F1445A68BCAD"), "PCRxRacaID", "Raça", XInt16.CID, 0, 0, false, gCID, (Int16)0);
            public static XORMFaceField Raca = new XORMFaceField(new Guid("E7887B37-DA1A-4A3B-98E1-6434906A1E27"), "Raca", "Raça", XString.CID, 25, 0, false, gCID, null);
            static PCRxRaca()
            {
                PCRxRacaID.PKID = new Guid("7BEC39489A7E4A0EBB6D917CB7E14438");
                PCRxRacaID.UpdateStatic = true;
                PCRxRacaID.InsertOnly = false;
                PCRxRacaID.TableName = "PCRxRaca";
                PCRxRacaID.SourceTableID = new Guid("5AFF5A0E-CD1F-4F87-9292-188C51E49554");
                PCRxRacaID.Index = 0;
                Raca.UpdateStatic = true;
                Raca.InsertOnly = false;
                Raca.TableName = "PCRxRaca";
                Raca.SourceTableID = new Guid("5AFF5A0E-CD1F-4F87-9292-188C51E49554");
                Raca.Index = 1;
                Raca.IsFaceField = true;
            }
            protected PCRxRaca()
            {
                TupleType = typeof(XTuple);
                PersistenceType = typeof(__PCRxRaca);
                ID = new Guid("5AFF5A0E-CD1F-4F87-9292-188C51E49554");
                Name = "PCRxRaca";
                Title = "Raça";
                CompanyControlType = XCompanyControlType.None;
                ModuleID = new Guid("02C4E7C5-1B4F-43DB-AC6C-CD36BBE428B7");
                DeleteOnDeactivate = false;
                PKName = "PK_E0899D45B8AD471B98E6F1445A68BCAD";
                FaceField = Raca;
                IsCached = true;
                DisplayField = Raca;
            }
            protected override void LoadDefaultData(XDataSet pDataSet)
            {
                base.LoadDefaultData(pDataSet);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)1, @"Angus"}), (Int16)1);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)3, @"Aberdeen"}), (Int16)3);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)2, @"Nelore"}), (Int16)2);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)4, @"Nelore (Colorida)"}), (Int16)4);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {(Int16)0, @"NI"}), (Int16)0);
            }
        }

        #endregion PCRxRaca

        #region PCRxReprodutor

        [XRegister(typeof(PCRxReprodutor), sCID)]
        public class PCRxReprodutor : XORMTable
        {
            public const String sCID = "611399CF-967F-4E1F-96DB-C42F42C7A5A6";
            public static Guid gCID = new Guid(sCID);
            #region XDefault
            public class XDefault
            {
                public static String s_00000000000000000000000000000000 => _Titles[new Guid("00000000-0000-0000-0000-000000000000")];
                public static Guid _00000000000000000000000000000000 = new Guid("00000000-0000-0000-0000-000000000000");
                private static Dictionary<Guid, String> _Titles = new Dictionary<Guid, String>()
                {
                [new Guid("00000000-0000-0000-0000-000000000000")] = "00000000-0000-0000-0000-000000000000"
                };
                public static String GetTitle(Guid pIndex)
                {
                    if (!_Titles.ContainsKey(pIndex))
                        return "";
                    return _Titles[pIndex];
                }
            }
            #endregion XDefault
            #region XTuple
            public class XTuple : XDataTuple
            {
                public XTuple()
                {
                }
                public XTuple(Object[] pSource)
                    : base(pSource)
                {
                }
                public XTuple(Int32 pColCount)
                   : this(new Object[pColCount])
                {
                }
                #nullable enable
                public Boolean ApenasSemem
                {
                    get
                    {
                        return (Boolean)Value[PCRxReprodutor.ApenasSemem];
                    }
                    set
                    {
                        this[PCRxReprodutor.ApenasSemem] = value;
                    }
                }
                public Boolean? oApenasSemem
                {
                    get
                    {
                        GetOldValue(PCRxReprodutor.ApenasSemem, out Object ovlr);
                        return (Boolean?)ovlr;
                    }
                }
                public Guid PCRxReprodutorID
                {
                    get
                    {
                        return (Guid)Value[PCRxReprodutor.PCRxReprodutorID];
                    }
                    set
                    {
                        this[PCRxReprodutor.PCRxReprodutorID] = value;
                    }
                }
                public Guid? oPCRxReprodutorID
                {
                    get
                    {
                        GetOldValue(PCRxReprodutor.PCRxReprodutorID, out Object ovlr);
                        return (Guid?)ovlr;
                    }
                }
                #nullable disable
            }
            #endregion XTuple
            private static PCRxReprodutor _Instance;
            public static PCRxReprodutor Instance
            {
                get
                {
                    if (_Instance == null)
                        _Instance = XTypeCache.CreateInstanceNP<PCRxReprodutor>(gCID);
                    return _Instance;
                }
            }
            public static XORMField ApenasSemem = new XORMField(new Guid("295316C0-54DD-4051-AF0F-B215E95DBE04"), "ApenasSemem", "Apenas Sêmem", XBoolean.CID, 0, 0, false, gCID, false);
            public static XORMPKField PCRxReprodutorID = new XORMPKField(new Guid("DB57C945-EFDE-4B09-B2D6-404E0D4516C0"), "PCRxReprodutorID", "Reprodutor", XGuid.CID, 0, 0, false, gCID, new Guid("00000000-0000-0000-0000-000000000000"));
            public static readonly XORMReference FK_9037CFCDE3804D91AB532677A2A1348F = new XORMReference(new Guid("9037CFCD-E380-4D91-AB53-2677A2A1348F"), "FK_9037CFCDE3804D91AB532677A2A1348F", gCID, PCRxReprodutorID.ID, PCRxAnimal.gCID, PCRxAnimal.PCRxAnimalID.ID);
            static PCRxReprodutor()
            {
                PCRxReprodutorID.PKID = new Guid("CC8C299D032349F8AF649FF412612962");
                PCRxReprodutorID.UpdateStatic = true;
                PCRxReprodutorID.InsertOnly = false;
                PCRxReprodutorID.TableName = "PCRxReprodutor";
                PCRxReprodutorID.SourceTableID = new Guid("611399CF-967F-4E1F-96DB-C42F42C7A5A6");
                PCRxReprodutorID.Index = 0;
                PCRxReprodutorID.IsFaceField = true;
                ApenasSemem.UpdateStatic = true;
                ApenasSemem.InsertOnly = false;
                ApenasSemem.TableName = "PCRxReprodutor";
                ApenasSemem.SourceTableID = new Guid("611399CF-967F-4E1F-96DB-C42F42C7A5A6");
                ApenasSemem.Index = 1;
                PCRxReprodutorID.AllowZero = true;
                FK_9037CFCDE3804D91AB532677A2A1348F.AllowZero = true;
            }
            protected PCRxReprodutor()
            {
                TupleType = typeof(XTuple);
                PersistenceType = typeof(__PCRxReprodutor);
                ID = new Guid("611399CF-967F-4E1F-96DB-C42F42C7A5A6");
                Name = "PCRxReprodutor";
                Title = "Reprodutor";
                CompanyControlType = XCompanyControlType.None;
                ModuleID = new Guid("02C4E7C5-1B4F-43DB-AC6C-CD36BBE428B7");
                DeleteOnDeactivate = false;
                PKName = "PK_DB57C945EFDE4B09B2D6404E0D4516C0";
                FaceField = PCRxReprodutorID;
                DisplayField = PCRxReprodutorID;
                InheritanceID = new Guid("01BC341A-0142-4C60-87A7-9228AD3A73E9");
            }
            protected override void LoadDefaultData(XDataSet pDataSet)
            {
                base.LoadDefaultData(pDataSet);
                pDataSet.AddDefaultTuple(new XTuple(new Object[] {new Guid("00000000-0000-0000-0000-000000000000"), false}), new Guid("00000000-0000-0000-0000-000000000000"));
            }
        }

        #endregion PCRxReprodutor

        #region PCRxRetiro

        [XRegister(typeof(PCRxRetiro), sCID)]
        public class PCRxRetiro : XORMTable
        {
            public const String sCID = "9D362636-A0DF-402C-8691-C3A229AC7935";
            public static Guid gCID = new Guid(sCID);
            #region XTuple
            public class XTuple : XDataTuple
            {
                public XTuple()
                {
                }
                public XTuple(Object[] pSource)
                    : base(pSource)
                {
                }
                public XTuple(Int32 pColCount)
                   : this(new Object[pColCount])
                {
                }
                #nullable enable
                public String CoordenadasArea
                {
                    get
                    {
                        return (String)Value[PCRxRetiro.CoordenadasArea];
                    }
                    set
                    {
                        this[PCRxRetiro.CoordenadasArea] = value;
                    }
                }
                public String? oCoordenadasArea
                {
                    get
                    {
                        GetOldValue(PCRxRetiro.CoordenadasArea, out Object ovlr);
                        return (String?)ovlr;
                    }
                }
                public Decimal Latitude
                {
                    get
                    {
                        return (Decimal)Value[PCRxRetiro.Latitude];
                    }
                    set
                    {
                        this[PCRxRetiro.Latitude] = value;
                    }
                }
                public Decimal? oLatitude
                {
                    get
                    {
                        GetOldValue(PCRxRetiro.Latitude, out Object ovlr);
                        return (Decimal?)ovlr;
                    }
                }
                public Decimal Longitude
                {
                    get
                    {
                        return (Decimal)Value[PCRxRetiro.Longitude];
                    }
                    set
                    {
                        this[PCRxRetiro.Longitude] = value;
                    }
                }
                public Decimal? oLongitude
                {
                    get
                    {
                        GetOldValue(PCRxRetiro.Longitude, out Object ovlr);
                        return (Decimal?)ovlr;
                    }
                }
                public String Nome
                {
                    get
                    {
                        return (String)Value[PCRxRetiro.Nome];
                    }
                    set
                    {
                        this[PCRxRetiro.Nome] = value;
                    }
                }
                public String? oNome
                {
                    get
                    {
                        GetOldValue(PCRxRetiro.Nome, out Object ovlr);
                        return (String?)ovlr;
                    }
                }
                public Int32 PCRxRetiroID
                {
                    get
                    {
                        return (Int32)Value[PCRxRetiro.PCRxRetiroID];
                    }
                    set
                    {
                        this[PCRxRetiro.PCRxRetiroID] = value;
                    }
                }
                public Int32? oPCRxRetiroID
                {
                    get
                    {
                        GetOldValue(PCRxRetiro.PCRxRetiroID, out Object ovlr);
                        return (Int32?)ovlr;
                    }
                }
                public Guid SYSxEmpresaID
                {
                    get
                    {
                        return (Guid)Value[PCRxRetiro.SYSxEmpresaID];
                    }
                    set
                    {
                        this[PCRxRetiro.SYSxEmpresaID] = value;
                    }
                }
                public Guid? oSYSxEmpresaID
                {
                    get
                    {
                        GetOldValue(PCRxRetiro.SYSxEmpresaID, out Object ovlr);
                        return (Guid?)ovlr;
                    }
                }
                #nullable disable
            }
            #endregion XTuple
            private static PCRxRetiro _Instance;
            public static PCRxRetiro Instance
            {
                get
                {
                    if (_Instance == null)
                        _Instance = XTypeCache.CreateInstanceNP<PCRxRetiro>(gCID);
                    return _Instance;
                }
            }
            public static XORMField CoordenadasArea = new XORMField(new Guid("01C22E3B-3864-4245-AAB8-72C25443C322"), "CoordenadasArea", "Coordenadas da Área", XString.CID, 0, 0, false, gCID, null);
            public static XORMDecimalField Latitude = new XORMDecimalField(new Guid("619E880A-05D3-4622-ABA8-4368F54CB970"), "Latitude", "Latitude", XDecimal.CID, 20, 10, false, gCID, 0);
            public static XORMDecimalField Longitude = new XORMDecimalField(new Guid("616A1852-B599-4362-832C-C45A87B4CE72"), "Longitude", "Longitude", XDecimal.CID, 20, 10, false, gCID, 0);
            public static XORMField Nome = new XORMField(new Guid("8145625E-3D08-4D4A-BBE4-040DCCAB0A02"), "Nome", "Nome", XString.CID, 30, 0, false, gCID, null);
            public static XORMPKField PCRxRetiroID = new XORMPKField(new Guid("DEBBFD42-2D22-442B-AE1F-74BAE34BF36E"), "PCRxRetiroID", "Retiro", XInt32.CID, 0, 0, false, gCID, 0);
            public static XORMFKField SYSxEmpresaID = new XORMFKField(new Guid("EBDF566D-04ED-44F4-8736-C222013401CB"), "SYSxEmpresaID", "Empresa", XGuid.CID, 0, 0, false, gCID, new Guid("00000000-0000-0000-0000-000000000000"));
            public static readonly XORMReference FK_8F5544DC16734F7DAFAB5237475434F1 = new XORMReference(new Guid("8F5544DC-1673-4F7D-AFAB-5237475434F1"), "FK_8F5544DC16734F7DAFAB5237475434F1", gCID, SYSxEmpresaID.ID, global::TFX.Core.Service.Apps.SYSx.SYSxEmpresa.gCID, global::TFX.Core.Service.Apps.SYSx.SYSxEmpresa.SYSxEmpresaID.ID);
            public static readonly XORMIndex IX_8F5544DC16734F7DAFAB5237475434F1 = new XORMIndex();
            static PCRxRetiro()
            {
                PCRxRetiroID.PKID = new Guid("821BA74ECB1A4BB4AF31DCCF5960894E");
                PCRxRetiroID.UpdateStatic = true;
                PCRxRetiroID.InsertOnly = false;
                PCRxRetiroID.TableName = "PCRxRetiro";
                PCRxRetiroID.SourceTableID = new Guid("9D362636-A0DF-402C-8691-C3A229AC7935");
                PCRxRetiroID.Index = 0;
                Nome.UpdateStatic = true;
                Nome.InsertOnly = false;
                Nome.TableName = "PCRxRetiro";
                Nome.SourceTableID = new Guid("9D362636-A0DF-402C-8691-C3A229AC7935");
                Nome.Index = 1;
                SYSxEmpresaID.UpdateStatic = true;
                SYSxEmpresaID.InsertOnly = false;
                SYSxEmpresaID.TableName = "PCRxRetiro";
                SYSxEmpresaID.SourceTableID = new Guid("9D362636-A0DF-402C-8691-C3A229AC7935");
                SYSxEmpresaID.Index = 2;
                Latitude.UpdateStatic = true;
                Latitude.InsertOnly = false;
                Latitude.TableName = "PCRxRetiro";
                Latitude.SourceTableID = new Guid("9D362636-A0DF-402C-8691-C3A229AC7935");
                Latitude.Min = -79228162514264337593543950335M;
                Latitude.Max = 79228162514264337593543950335M;
                Latitude.Index = 3;
                Longitude.UpdateStatic = true;
                Longitude.InsertOnly = false;
                Longitude.TableName = "PCRxRetiro";
                Longitude.SourceTableID = new Guid("9D362636-A0DF-402C-8691-C3A229AC7935");
                Longitude.Min = -79228162514264337593543950335M;
                Longitude.Max = 79228162514264337593543950335M;
                Longitude.Index = 4;
                CoordenadasArea.UpdateStatic = true;
                CoordenadasArea.InsertOnly = false;
                CoordenadasArea.TableName = "PCRxRetiro";
                CoordenadasArea.SourceTableID = new Guid("9D362636-A0DF-402C-8691-C3A229AC7935");
                CoordenadasArea.Index = 5;
                IX_8F5544DC16734F7DAFAB5237475434F1.Name = "IX_8F5544DC16734F7DAFAB5237475434F1";
                IX_8F5544DC16734F7DAFAB5237475434F1.ID = new Guid("88263BDA-7B4A-4254-B8F5-E0EC92716FB5");
                IX_8F5544DC16734F7DAFAB5237475434F1.IsUnique = false;
                IX_8F5544DC16734F7DAFAB5237475434F1.Description = "";
                IX_8F5544DC16734F7DAFAB5237475434F1.AddItem(SYSxEmpresaID);
                SYSxEmpresaID.AllowZero = true;
                FK_8F5544DC16734F7DAFAB5237475434F1.AllowZero = true;
            }
            protected PCRxRetiro()
            {
                TupleType = typeof(XTuple);
                PersistenceType = typeof(__PCRxRetiro);
                ID = new Guid("9D362636-A0DF-402C-8691-C3A229AC7935");
                Name = "PCRxRetiro";
                Title = "Retiro";
                CompanyControlType = XCompanyControlType.CurrentCompany;
                ModuleID = new Guid("02C4E7C5-1B4F-43DB-AC6C-CD36BBE428B7");
                DeleteOnDeactivate = false;
                PKName = "PK_DEBBFD422D22442BAE1F74BAE34BF36E";
            }
            protected override void LoadDefaultData(XDataSet pDataSet)
            {
                base.LoadDefaultData(pDataSet);
            }
        }

        #endregion PCRxRetiro

        #region SYSxRecursoModulo

        [XRegister(typeof(SYSxRecursoModulo), sCID, typeof(global::TFX.Core.Service.Apps.SYSx.SYSxRecursoModulo))]
        public class SYSxRecursoModulo : XORMShadowTable
        {
            public const String sCID = "820804E0-41D9-4785-9846-966B2076C256";
            #region XDefault
            public class XDefault : global::TFX.Core.Service.Apps.SYSx.SYSxRecursoModulo.XDefault
            {
                public static String sControle_de_Rebanho => _Titles[(Int16)19];
                public const Int16 Controle_de_Rebanho = (Int16)19;
                private static Dictionary<Int16, String> _Titles = new Dictionary<Int16, String>()
                {
                [(Int16)19] = "Controle de Rebanho"
                };
                public new static String GetTitle(Int16 pIndex)
                {
                    if (!_Titles.ContainsKey(pIndex))
                        return global::TFX.Core.Service.Apps.SYSx.SYSxRecursoModulo.XDefault.GetTitle(pIndex);
                    return _Titles[pIndex];
                }
            }
            #endregion XDefault
            public override void LoadDefaultData(XDataSet pDataSet)
            {
                pDataSet.AddDefaultTuple(new global::TFX.Core.Service.Apps.SYSx.SYSxRecursoModulo.XTuple(new Object[] {@"Controle de Rebanho", @"pequaria.svg", (Int16)19, @"Controle de Rebanho"}), (Int16)19);
            }
        }

        #endregion SYSxRecursoModulo

        #region _PCRxAnimal

        [Guid(__PCRxAnimal.sCID)]
        public interface _PCRxAnimal : XIBasePersistence, IEnumerable<PCRxAnimal.XTuple>
        {
            PCRxAnimal.XTuple NewTuple();

            new PCRxAnimal.XTuple NewTuple(Object pPKValue);

            new PCRxAnimal.XTuple FindTuple(params Object[] pFieldValuePar);

            new PCRxAnimal.XTuple FindTupleByPK(Object pPKValue);

            PCRxAnimal.XTuple this[Int32 pInex]
            {
                get;
            }


            new PCRxAnimal.XTuple Current
            {
                get;
            }

            IEnumerable<PCRxAnimal.XTuple> Tuples
            {
                get;
            }

            PCRxAnimal.XTuple FindByIndex(String pIndexName, params Object[] pValues);
        }

        #endregion _PCRxAnimal

        #region _PCRxAnimal<TModel, TTuple>

        public class _PCRxAnimal<TModel, TTuple> : XBasePersistence<TModel, TTuple>, _PCRxAnimal where TModel : PCRxAnimal where TTuple : PCRxAnimal.XTuple 
        {
            protected _PCRxAnimal()
            {
            }
            PCRxAnimal.XTuple _PCRxAnimal.this[Int32 pInex] => (PCRxAnimal.XTuple)base[pInex];

            IEnumerable<PCRxAnimal.XTuple> _PCRxAnimal.Tuples => (IEnumerable<PCRxAnimal.XTuple>)base.Tuples;

            PCRxAnimal.XTuple _PCRxAnimal.FindByIndex(String pIndexName, params Object[] pValues)
            {
                return (PCRxAnimal.XTuple)base.FindByIndex(pIndexName, pValues);
            }

            PCRxAnimal.XTuple _PCRxAnimal.FindTuple(params Object[] pFieldValuePar)
            {
                return (PCRxAnimal.XTuple)base.FindTuple(pFieldValuePar);
            }

            PCRxAnimal.XTuple _PCRxAnimal.FindTupleByPK(Object pPKValue)
            {
                return (PCRxAnimal.XTuple)base.FindTupleByPK(pPKValue);
            }

            PCRxAnimal.XTuple _PCRxAnimal.NewTuple()
            {
                return (PCRxAnimal.XTuple)NewTuple();
            }

            PCRxAnimal.XTuple _PCRxAnimal.NewTuple(Object pPKValue)
            {
                return (PCRxAnimal.XTuple)base.NewTuple(pPKValue);
            }
            IEnumerator<PCRxAnimal.XTuple> IEnumerable<PCRxAnimal.XTuple>.GetEnumerator()
            {
            return Tuples.GetEnumerator();
            }
            PCRxAnimal.XTuple _PCRxAnimal.Current => base.Current;
        }

        #endregion _PCRxAnimal<TModel, TTuple>

        #region __PCRxAnimal

        [XRegister(typeof(__PCRxAnimal), sCID, typeof(PCRxAnimal))]
        public class __PCRxAnimal : _PCRxAnimal<PCRxAnimal, PCRxAnimal.XTuple>
        {
            public const String sCID = "853A1E6A-C549-49D4-AA1A-694EDB63117D";
            public static Guid gCID = new Guid(sCID);
            protected __PCRxAnimal()
            {
                TupleType = typeof(PCRxAnimal.XTuple);
            }
        }

        #endregion __PCRxAnimal

        #region _PCRxAnimalEstado

        [Guid(__PCRxAnimalEstado.sCID)]
        public interface _PCRxAnimalEstado : XIBasePersistence, IEnumerable<PCRxAnimalEstado.XTuple>
        {
            PCRxAnimalEstado.XTuple NewTuple();

            new PCRxAnimalEstado.XTuple NewTuple(Object pPKValue);

            new PCRxAnimalEstado.XTuple FindTuple(params Object[] pFieldValuePar);

            new PCRxAnimalEstado.XTuple FindTupleByPK(Object pPKValue);

            PCRxAnimalEstado.XTuple this[Int32 pInex]
            {
                get;
            }


            new PCRxAnimalEstado.XTuple Current
            {
                get;
            }

            IEnumerable<PCRxAnimalEstado.XTuple> Tuples
            {
                get;
            }

            PCRxAnimalEstado.XTuple FindByIndex(String pIndexName, params Object[] pValues);
        }

        #endregion _PCRxAnimalEstado

        #region _PCRxAnimalEstado<TModel, TTuple>

        public class _PCRxAnimalEstado<TModel, TTuple> : XBasePersistence<TModel, TTuple>, _PCRxAnimalEstado where TModel : PCRxAnimalEstado where TTuple : PCRxAnimalEstado.XTuple 
        {
            protected _PCRxAnimalEstado()
            {
            }
            PCRxAnimalEstado.XTuple _PCRxAnimalEstado.this[Int32 pInex] => (PCRxAnimalEstado.XTuple)base[pInex];

            IEnumerable<PCRxAnimalEstado.XTuple> _PCRxAnimalEstado.Tuples => (IEnumerable<PCRxAnimalEstado.XTuple>)base.Tuples;

            PCRxAnimalEstado.XTuple _PCRxAnimalEstado.FindByIndex(String pIndexName, params Object[] pValues)
            {
                return (PCRxAnimalEstado.XTuple)base.FindByIndex(pIndexName, pValues);
            }

            PCRxAnimalEstado.XTuple _PCRxAnimalEstado.FindTuple(params Object[] pFieldValuePar)
            {
                return (PCRxAnimalEstado.XTuple)base.FindTuple(pFieldValuePar);
            }

            PCRxAnimalEstado.XTuple _PCRxAnimalEstado.FindTupleByPK(Object pPKValue)
            {
                return (PCRxAnimalEstado.XTuple)base.FindTupleByPK(pPKValue);
            }

            PCRxAnimalEstado.XTuple _PCRxAnimalEstado.NewTuple()
            {
                return (PCRxAnimalEstado.XTuple)NewTuple();
            }

            PCRxAnimalEstado.XTuple _PCRxAnimalEstado.NewTuple(Object pPKValue)
            {
                return (PCRxAnimalEstado.XTuple)base.NewTuple(pPKValue);
            }
            IEnumerator<PCRxAnimalEstado.XTuple> IEnumerable<PCRxAnimalEstado.XTuple>.GetEnumerator()
            {
            return Tuples.GetEnumerator();
            }
            PCRxAnimalEstado.XTuple _PCRxAnimalEstado.Current => base.Current;
        }

        #endregion _PCRxAnimalEstado<TModel, TTuple>

        #region __PCRxAnimalEstado

        [XRegister(typeof(__PCRxAnimalEstado), sCID, typeof(PCRxAnimalEstado))]
        public class __PCRxAnimalEstado : _PCRxAnimalEstado<PCRxAnimalEstado, PCRxAnimalEstado.XTuple>
        {
            public const String sCID = "17E06155-71F1-430E-9639-B2D7CD69E464";
            public static Guid gCID = new Guid(sCID);
            protected __PCRxAnimalEstado()
            {
                TupleType = typeof(PCRxAnimalEstado.XTuple);
            }
        }

        #endregion __PCRxAnimalEstado

        #region _PCRxAnimalEvento

        [Guid(__PCRxAnimalEvento.sCID)]
        public interface _PCRxAnimalEvento : XIBasePersistence, IEnumerable<PCRxAnimalEvento.XTuple>
        {
            PCRxAnimalEvento.XTuple NewTuple();

            new PCRxAnimalEvento.XTuple NewTuple(Object pPKValue);

            new PCRxAnimalEvento.XTuple FindTuple(params Object[] pFieldValuePar);

            new PCRxAnimalEvento.XTuple FindTupleByPK(Object pPKValue);

            PCRxAnimalEvento.XTuple this[Int32 pInex]
            {
                get;
            }


            new PCRxAnimalEvento.XTuple Current
            {
                get;
            }

            IEnumerable<PCRxAnimalEvento.XTuple> Tuples
            {
                get;
            }

            PCRxAnimalEvento.XTuple FindByIndex(String pIndexName, params Object[] pValues);
        }

        #endregion _PCRxAnimalEvento

        #region _PCRxAnimalEvento<TModel, TTuple>

        public class _PCRxAnimalEvento<TModel, TTuple> : XBasePersistence<TModel, TTuple>, _PCRxAnimalEvento where TModel : PCRxAnimalEvento where TTuple : PCRxAnimalEvento.XTuple 
        {
            protected _PCRxAnimalEvento()
            {
            }
            PCRxAnimalEvento.XTuple _PCRxAnimalEvento.this[Int32 pInex] => (PCRxAnimalEvento.XTuple)base[pInex];

            IEnumerable<PCRxAnimalEvento.XTuple> _PCRxAnimalEvento.Tuples => (IEnumerable<PCRxAnimalEvento.XTuple>)base.Tuples;

            PCRxAnimalEvento.XTuple _PCRxAnimalEvento.FindByIndex(String pIndexName, params Object[] pValues)
            {
                return (PCRxAnimalEvento.XTuple)base.FindByIndex(pIndexName, pValues);
            }

            PCRxAnimalEvento.XTuple _PCRxAnimalEvento.FindTuple(params Object[] pFieldValuePar)
            {
                return (PCRxAnimalEvento.XTuple)base.FindTuple(pFieldValuePar);
            }

            PCRxAnimalEvento.XTuple _PCRxAnimalEvento.FindTupleByPK(Object pPKValue)
            {
                return (PCRxAnimalEvento.XTuple)base.FindTupleByPK(pPKValue);
            }

            PCRxAnimalEvento.XTuple _PCRxAnimalEvento.NewTuple()
            {
                return (PCRxAnimalEvento.XTuple)NewTuple();
            }

            PCRxAnimalEvento.XTuple _PCRxAnimalEvento.NewTuple(Object pPKValue)
            {
                return (PCRxAnimalEvento.XTuple)base.NewTuple(pPKValue);
            }
            IEnumerator<PCRxAnimalEvento.XTuple> IEnumerable<PCRxAnimalEvento.XTuple>.GetEnumerator()
            {
            return Tuples.GetEnumerator();
            }
            PCRxAnimalEvento.XTuple _PCRxAnimalEvento.Current => base.Current;
        }

        #endregion _PCRxAnimalEvento<TModel, TTuple>

        #region __PCRxAnimalEvento

        [XRegister(typeof(__PCRxAnimalEvento), sCID, typeof(PCRxAnimalEvento))]
        public class __PCRxAnimalEvento : _PCRxAnimalEvento<PCRxAnimalEvento, PCRxAnimalEvento.XTuple>
        {
            public const String sCID = "E3086224-FB5F-4261-B75F-FEF1B1A72376";
            public static Guid gCID = new Guid(sCID);
            protected __PCRxAnimalEvento()
            {
                TupleType = typeof(PCRxAnimalEvento.XTuple);
            }
        }

        #endregion __PCRxAnimalEvento

        #region _PCRxAnimalFase

        [Guid(__PCRxAnimalFase.sCID)]
        public interface _PCRxAnimalFase : XIBasePersistence, IEnumerable<PCRxAnimalFase.XTuple>
        {
            PCRxAnimalFase.XTuple NewTuple();

            new PCRxAnimalFase.XTuple NewTuple(Object pPKValue);

            new PCRxAnimalFase.XTuple FindTuple(params Object[] pFieldValuePar);

            new PCRxAnimalFase.XTuple FindTupleByPK(Object pPKValue);

            PCRxAnimalFase.XTuple this[Int32 pInex]
            {
                get;
            }


            new PCRxAnimalFase.XTuple Current
            {
                get;
            }

            IEnumerable<PCRxAnimalFase.XTuple> Tuples
            {
                get;
            }

            PCRxAnimalFase.XTuple FindByIndex(String pIndexName, params Object[] pValues);
        }

        #endregion _PCRxAnimalFase

        #region _PCRxAnimalFase<TModel, TTuple>

        public class _PCRxAnimalFase<TModel, TTuple> : XBasePersistence<TModel, TTuple>, _PCRxAnimalFase where TModel : PCRxAnimalFase where TTuple : PCRxAnimalFase.XTuple 
        {
            protected _PCRxAnimalFase()
            {
            }
            PCRxAnimalFase.XTuple _PCRxAnimalFase.this[Int32 pInex] => (PCRxAnimalFase.XTuple)base[pInex];

            IEnumerable<PCRxAnimalFase.XTuple> _PCRxAnimalFase.Tuples => (IEnumerable<PCRxAnimalFase.XTuple>)base.Tuples;

            PCRxAnimalFase.XTuple _PCRxAnimalFase.FindByIndex(String pIndexName, params Object[] pValues)
            {
                return (PCRxAnimalFase.XTuple)base.FindByIndex(pIndexName, pValues);
            }

            PCRxAnimalFase.XTuple _PCRxAnimalFase.FindTuple(params Object[] pFieldValuePar)
            {
                return (PCRxAnimalFase.XTuple)base.FindTuple(pFieldValuePar);
            }

            PCRxAnimalFase.XTuple _PCRxAnimalFase.FindTupleByPK(Object pPKValue)
            {
                return (PCRxAnimalFase.XTuple)base.FindTupleByPK(pPKValue);
            }

            PCRxAnimalFase.XTuple _PCRxAnimalFase.NewTuple()
            {
                return (PCRxAnimalFase.XTuple)NewTuple();
            }

            PCRxAnimalFase.XTuple _PCRxAnimalFase.NewTuple(Object pPKValue)
            {
                return (PCRxAnimalFase.XTuple)base.NewTuple(pPKValue);
            }
            IEnumerator<PCRxAnimalFase.XTuple> IEnumerable<PCRxAnimalFase.XTuple>.GetEnumerator()
            {
            return Tuples.GetEnumerator();
            }
            PCRxAnimalFase.XTuple _PCRxAnimalFase.Current => base.Current;
        }

        #endregion _PCRxAnimalFase<TModel, TTuple>

        #region __PCRxAnimalFase

        [XRegister(typeof(__PCRxAnimalFase), sCID, typeof(PCRxAnimalFase))]
        public class __PCRxAnimalFase : _PCRxAnimalFase<PCRxAnimalFase, PCRxAnimalFase.XTuple>
        {
            public const String sCID = "FC48AB9D-C397-47F0-9305-F0817C2708CC";
            public static Guid gCID = new Guid(sCID);
            protected __PCRxAnimalFase()
            {
                TupleType = typeof(PCRxAnimalFase.XTuple);
            }
        }

        #endregion __PCRxAnimalFase

        #region _PCRxAnimalFiliacao

        [Guid(__PCRxAnimalFiliacao.sCID)]
        public interface _PCRxAnimalFiliacao : XIBasePersistence, IEnumerable<PCRxAnimalFiliacao.XTuple>
        {
            PCRxAnimalFiliacao.XTuple NewTuple();

            new PCRxAnimalFiliacao.XTuple NewTuple(Object pPKValue);

            new PCRxAnimalFiliacao.XTuple FindTuple(params Object[] pFieldValuePar);

            new PCRxAnimalFiliacao.XTuple FindTupleByPK(Object pPKValue);

            PCRxAnimalFiliacao.XTuple this[Int32 pInex]
            {
                get;
            }


            new PCRxAnimalFiliacao.XTuple Current
            {
                get;
            }

            IEnumerable<PCRxAnimalFiliacao.XTuple> Tuples
            {
                get;
            }

            PCRxAnimalFiliacao.XTuple FindByIndex(String pIndexName, params Object[] pValues);
        }

        #endregion _PCRxAnimalFiliacao

        #region _PCRxAnimalFiliacao<TModel, TTuple>

        public class _PCRxAnimalFiliacao<TModel, TTuple> : XBasePersistence<TModel, TTuple>, _PCRxAnimalFiliacao where TModel : PCRxAnimalFiliacao where TTuple : PCRxAnimalFiliacao.XTuple 
        {
            protected _PCRxAnimalFiliacao()
            {
            }
            PCRxAnimalFiliacao.XTuple _PCRxAnimalFiliacao.this[Int32 pInex] => (PCRxAnimalFiliacao.XTuple)base[pInex];

            IEnumerable<PCRxAnimalFiliacao.XTuple> _PCRxAnimalFiliacao.Tuples => (IEnumerable<PCRxAnimalFiliacao.XTuple>)base.Tuples;

            PCRxAnimalFiliacao.XTuple _PCRxAnimalFiliacao.FindByIndex(String pIndexName, params Object[] pValues)
            {
                return (PCRxAnimalFiliacao.XTuple)base.FindByIndex(pIndexName, pValues);
            }

            PCRxAnimalFiliacao.XTuple _PCRxAnimalFiliacao.FindTuple(params Object[] pFieldValuePar)
            {
                return (PCRxAnimalFiliacao.XTuple)base.FindTuple(pFieldValuePar);
            }

            PCRxAnimalFiliacao.XTuple _PCRxAnimalFiliacao.FindTupleByPK(Object pPKValue)
            {
                return (PCRxAnimalFiliacao.XTuple)base.FindTupleByPK(pPKValue);
            }

            PCRxAnimalFiliacao.XTuple _PCRxAnimalFiliacao.NewTuple()
            {
                return (PCRxAnimalFiliacao.XTuple)NewTuple();
            }

            PCRxAnimalFiliacao.XTuple _PCRxAnimalFiliacao.NewTuple(Object pPKValue)
            {
                return (PCRxAnimalFiliacao.XTuple)base.NewTuple(pPKValue);
            }
            IEnumerator<PCRxAnimalFiliacao.XTuple> IEnumerable<PCRxAnimalFiliacao.XTuple>.GetEnumerator()
            {
            return Tuples.GetEnumerator();
            }
            PCRxAnimalFiliacao.XTuple _PCRxAnimalFiliacao.Current => base.Current;
        }

        #endregion _PCRxAnimalFiliacao<TModel, TTuple>

        #region __PCRxAnimalFiliacao

        [XRegister(typeof(__PCRxAnimalFiliacao), sCID, typeof(PCRxAnimalFiliacao))]
        public class __PCRxAnimalFiliacao : _PCRxAnimalFiliacao<PCRxAnimalFiliacao, PCRxAnimalFiliacao.XTuple>
        {
            public const String sCID = "206B3FDC-6BE9-4D00-BB6A-352797840E90";
            public static Guid gCID = new Guid(sCID);
            protected __PCRxAnimalFiliacao()
            {
                TupleType = typeof(PCRxAnimalFiliacao.XTuple);
            }
        }

        #endregion __PCRxAnimalFiliacao

        #region _PCRxAnimalLote

        [Guid(__PCRxAnimalLote.sCID)]
        public interface _PCRxAnimalLote : XIBasePersistence, IEnumerable<PCRxAnimalLote.XTuple>
        {
            PCRxAnimalLote.XTuple NewTuple();

            new PCRxAnimalLote.XTuple NewTuple(Object pPKValue);

            new PCRxAnimalLote.XTuple FindTuple(params Object[] pFieldValuePar);

            new PCRxAnimalLote.XTuple FindTupleByPK(Object pPKValue);

            PCRxAnimalLote.XTuple this[Int32 pInex]
            {
                get;
            }


            new PCRxAnimalLote.XTuple Current
            {
                get;
            }

            IEnumerable<PCRxAnimalLote.XTuple> Tuples
            {
                get;
            }

            PCRxAnimalLote.XTuple FindByIndex(String pIndexName, params Object[] pValues);
        }

        #endregion _PCRxAnimalLote

        #region _PCRxAnimalLote<TModel, TTuple>

        public class _PCRxAnimalLote<TModel, TTuple> : XBasePersistence<TModel, TTuple>, _PCRxAnimalLote where TModel : PCRxAnimalLote where TTuple : PCRxAnimalLote.XTuple 
        {
            protected _PCRxAnimalLote()
            {
            }
            PCRxAnimalLote.XTuple _PCRxAnimalLote.this[Int32 pInex] => (PCRxAnimalLote.XTuple)base[pInex];

            IEnumerable<PCRxAnimalLote.XTuple> _PCRxAnimalLote.Tuples => (IEnumerable<PCRxAnimalLote.XTuple>)base.Tuples;

            PCRxAnimalLote.XTuple _PCRxAnimalLote.FindByIndex(String pIndexName, params Object[] pValues)
            {
                return (PCRxAnimalLote.XTuple)base.FindByIndex(pIndexName, pValues);
            }

            PCRxAnimalLote.XTuple _PCRxAnimalLote.FindTuple(params Object[] pFieldValuePar)
            {
                return (PCRxAnimalLote.XTuple)base.FindTuple(pFieldValuePar);
            }

            PCRxAnimalLote.XTuple _PCRxAnimalLote.FindTupleByPK(Object pPKValue)
            {
                return (PCRxAnimalLote.XTuple)base.FindTupleByPK(pPKValue);
            }

            PCRxAnimalLote.XTuple _PCRxAnimalLote.NewTuple()
            {
                return (PCRxAnimalLote.XTuple)NewTuple();
            }

            PCRxAnimalLote.XTuple _PCRxAnimalLote.NewTuple(Object pPKValue)
            {
                return (PCRxAnimalLote.XTuple)base.NewTuple(pPKValue);
            }
            IEnumerator<PCRxAnimalLote.XTuple> IEnumerable<PCRxAnimalLote.XTuple>.GetEnumerator()
            {
            return Tuples.GetEnumerator();
            }
            PCRxAnimalLote.XTuple _PCRxAnimalLote.Current => base.Current;
        }

        #endregion _PCRxAnimalLote<TModel, TTuple>

        #region __PCRxAnimalLote

        [XRegister(typeof(__PCRxAnimalLote), sCID, typeof(PCRxAnimalLote))]
        public class __PCRxAnimalLote : _PCRxAnimalLote<PCRxAnimalLote, PCRxAnimalLote.XTuple>
        {
            public const String sCID = "0261CBAA-0558-44C7-B1B5-6A9961A3391C";
            public static Guid gCID = new Guid(sCID);
            protected __PCRxAnimalLote()
            {
                TupleType = typeof(PCRxAnimalLote.XTuple);
            }
        }

        #endregion __PCRxAnimalLote

        #region _PCRxAnimalPasto

        [Guid(__PCRxAnimalPasto.sCID)]
        public interface _PCRxAnimalPasto : XIBasePersistence, IEnumerable<PCRxAnimalPasto.XTuple>
        {
            PCRxAnimalPasto.XTuple NewTuple();

            new PCRxAnimalPasto.XTuple NewTuple(Object pPKValue);

            new PCRxAnimalPasto.XTuple FindTuple(params Object[] pFieldValuePar);

            new PCRxAnimalPasto.XTuple FindTupleByPK(Object pPKValue);

            PCRxAnimalPasto.XTuple this[Int32 pInex]
            {
                get;
            }


            new PCRxAnimalPasto.XTuple Current
            {
                get;
            }

            IEnumerable<PCRxAnimalPasto.XTuple> Tuples
            {
                get;
            }

            PCRxAnimalPasto.XTuple FindByIndex(String pIndexName, params Object[] pValues);
        }

        #endregion _PCRxAnimalPasto

        #region _PCRxAnimalPasto<TModel, TTuple>

        public class _PCRxAnimalPasto<TModel, TTuple> : XBasePersistence<TModel, TTuple>, _PCRxAnimalPasto where TModel : PCRxAnimalPasto where TTuple : PCRxAnimalPasto.XTuple 
        {
            protected _PCRxAnimalPasto()
            {
            }
            PCRxAnimalPasto.XTuple _PCRxAnimalPasto.this[Int32 pInex] => (PCRxAnimalPasto.XTuple)base[pInex];

            IEnumerable<PCRxAnimalPasto.XTuple> _PCRxAnimalPasto.Tuples => (IEnumerable<PCRxAnimalPasto.XTuple>)base.Tuples;

            PCRxAnimalPasto.XTuple _PCRxAnimalPasto.FindByIndex(String pIndexName, params Object[] pValues)
            {
                return (PCRxAnimalPasto.XTuple)base.FindByIndex(pIndexName, pValues);
            }

            PCRxAnimalPasto.XTuple _PCRxAnimalPasto.FindTuple(params Object[] pFieldValuePar)
            {
                return (PCRxAnimalPasto.XTuple)base.FindTuple(pFieldValuePar);
            }

            PCRxAnimalPasto.XTuple _PCRxAnimalPasto.FindTupleByPK(Object pPKValue)
            {
                return (PCRxAnimalPasto.XTuple)base.FindTupleByPK(pPKValue);
            }

            PCRxAnimalPasto.XTuple _PCRxAnimalPasto.NewTuple()
            {
                return (PCRxAnimalPasto.XTuple)NewTuple();
            }

            PCRxAnimalPasto.XTuple _PCRxAnimalPasto.NewTuple(Object pPKValue)
            {
                return (PCRxAnimalPasto.XTuple)base.NewTuple(pPKValue);
            }
            IEnumerator<PCRxAnimalPasto.XTuple> IEnumerable<PCRxAnimalPasto.XTuple>.GetEnumerator()
            {
            return Tuples.GetEnumerator();
            }
            PCRxAnimalPasto.XTuple _PCRxAnimalPasto.Current => base.Current;
        }

        #endregion _PCRxAnimalPasto<TModel, TTuple>

        #region __PCRxAnimalPasto

        [XRegister(typeof(__PCRxAnimalPasto), sCID, typeof(PCRxAnimalPasto))]
        public class __PCRxAnimalPasto : _PCRxAnimalPasto<PCRxAnimalPasto, PCRxAnimalPasto.XTuple>
        {
            public const String sCID = "32487CF5-D822-4EEB-9110-F5CCC7CF7C10";
            public static Guid gCID = new Guid(sCID);
            protected __PCRxAnimalPasto()
            {
                TupleType = typeof(PCRxAnimalPasto.XTuple);
            }
        }

        #endregion __PCRxAnimalPasto

        #region _PCRxDocumento

        [Guid(__PCRxDocumento.sCID)]
        public interface _PCRxDocumento : XIBasePersistence, IEnumerable<PCRxDocumento.XTuple>
        {
            PCRxDocumento.XTuple NewTuple();

            new PCRxDocumento.XTuple NewTuple(Object pPKValue);

            new PCRxDocumento.XTuple FindTuple(params Object[] pFieldValuePar);

            new PCRxDocumento.XTuple FindTupleByPK(Object pPKValue);

            PCRxDocumento.XTuple this[Int32 pInex]
            {
                get;
            }


            new PCRxDocumento.XTuple Current
            {
                get;
            }

            IEnumerable<PCRxDocumento.XTuple> Tuples
            {
                get;
            }

            PCRxDocumento.XTuple FindByIndex(String pIndexName, params Object[] pValues);
        }

        #endregion _PCRxDocumento

        #region _PCRxDocumento<TModel, TTuple>

        public class _PCRxDocumento<TModel, TTuple> : XBasePersistence<TModel, TTuple>, _PCRxDocumento where TModel : PCRxDocumento where TTuple : PCRxDocumento.XTuple 
        {
            protected _PCRxDocumento()
            {
            }
            PCRxDocumento.XTuple _PCRxDocumento.this[Int32 pInex] => (PCRxDocumento.XTuple)base[pInex];

            IEnumerable<PCRxDocumento.XTuple> _PCRxDocumento.Tuples => (IEnumerable<PCRxDocumento.XTuple>)base.Tuples;

            PCRxDocumento.XTuple _PCRxDocumento.FindByIndex(String pIndexName, params Object[] pValues)
            {
                return (PCRxDocumento.XTuple)base.FindByIndex(pIndexName, pValues);
            }

            PCRxDocumento.XTuple _PCRxDocumento.FindTuple(params Object[] pFieldValuePar)
            {
                return (PCRxDocumento.XTuple)base.FindTuple(pFieldValuePar);
            }

            PCRxDocumento.XTuple _PCRxDocumento.FindTupleByPK(Object pPKValue)
            {
                return (PCRxDocumento.XTuple)base.FindTupleByPK(pPKValue);
            }

            PCRxDocumento.XTuple _PCRxDocumento.NewTuple()
            {
                return (PCRxDocumento.XTuple)NewTuple();
            }

            PCRxDocumento.XTuple _PCRxDocumento.NewTuple(Object pPKValue)
            {
                return (PCRxDocumento.XTuple)base.NewTuple(pPKValue);
            }
            IEnumerator<PCRxDocumento.XTuple> IEnumerable<PCRxDocumento.XTuple>.GetEnumerator()
            {
            return Tuples.GetEnumerator();
            }
            PCRxDocumento.XTuple _PCRxDocumento.Current => base.Current;
        }

        #endregion _PCRxDocumento<TModel, TTuple>

        #region __PCRxDocumento

        [XRegister(typeof(__PCRxDocumento), sCID, typeof(PCRxDocumento))]
        public class __PCRxDocumento : _PCRxDocumento<PCRxDocumento, PCRxDocumento.XTuple>
        {
            public const String sCID = "E643D4FB-BCDC-473A-A38C-5AE70EF01F6A";
            public static Guid gCID = new Guid(sCID);
            protected __PCRxDocumento()
            {
                TupleType = typeof(PCRxDocumento.XTuple);
            }
        }

        #endregion __PCRxDocumento

        #region _PCRxElemento

        [Guid(__PCRxElemento.sCID)]
        public interface _PCRxElemento : XIBasePersistence, IEnumerable<PCRxElemento.XTuple>
        {
            PCRxElemento.XTuple NewTuple();

            new PCRxElemento.XTuple NewTuple(Object pPKValue);

            new PCRxElemento.XTuple FindTuple(params Object[] pFieldValuePar);

            new PCRxElemento.XTuple FindTupleByPK(Object pPKValue);

            PCRxElemento.XTuple this[Int32 pInex]
            {
                get;
            }


            new PCRxElemento.XTuple Current
            {
                get;
            }

            IEnumerable<PCRxElemento.XTuple> Tuples
            {
                get;
            }

            PCRxElemento.XTuple FindByIndex(String pIndexName, params Object[] pValues);
        }

        #endregion _PCRxElemento

        #region _PCRxElemento<TModel, TTuple>

        public class _PCRxElemento<TModel, TTuple> : XBasePersistence<TModel, TTuple>, _PCRxElemento where TModel : PCRxElemento where TTuple : PCRxElemento.XTuple 
        {
            protected _PCRxElemento()
            {
            }
            PCRxElemento.XTuple _PCRxElemento.this[Int32 pInex] => (PCRxElemento.XTuple)base[pInex];

            IEnumerable<PCRxElemento.XTuple> _PCRxElemento.Tuples => (IEnumerable<PCRxElemento.XTuple>)base.Tuples;

            PCRxElemento.XTuple _PCRxElemento.FindByIndex(String pIndexName, params Object[] pValues)
            {
                return (PCRxElemento.XTuple)base.FindByIndex(pIndexName, pValues);
            }

            PCRxElemento.XTuple _PCRxElemento.FindTuple(params Object[] pFieldValuePar)
            {
                return (PCRxElemento.XTuple)base.FindTuple(pFieldValuePar);
            }

            PCRxElemento.XTuple _PCRxElemento.FindTupleByPK(Object pPKValue)
            {
                return (PCRxElemento.XTuple)base.FindTupleByPK(pPKValue);
            }

            PCRxElemento.XTuple _PCRxElemento.NewTuple()
            {
                return (PCRxElemento.XTuple)NewTuple();
            }

            PCRxElemento.XTuple _PCRxElemento.NewTuple(Object pPKValue)
            {
                return (PCRxElemento.XTuple)base.NewTuple(pPKValue);
            }
            IEnumerator<PCRxElemento.XTuple> IEnumerable<PCRxElemento.XTuple>.GetEnumerator()
            {
            return Tuples.GetEnumerator();
            }
            PCRxElemento.XTuple _PCRxElemento.Current => base.Current;
        }

        #endregion _PCRxElemento<TModel, TTuple>

        #region __PCRxElemento

        [XRegister(typeof(__PCRxElemento), sCID, typeof(PCRxElemento))]
        public class __PCRxElemento : _PCRxElemento<PCRxElemento, PCRxElemento.XTuple>
        {
            public const String sCID = "A5919ECB-89E9-48F2-827F-0D68BABB7002";
            public static Guid gCID = new Guid(sCID);
            protected __PCRxElemento()
            {
                TupleType = typeof(PCRxElemento.XTuple);
            }
        }

        #endregion __PCRxElemento

        #region _PCRxElementoTipo

        [Guid(__PCRxElementoTipo.sCID)]
        public interface _PCRxElementoTipo : XIBasePersistence, IEnumerable<PCRxElementoTipo.XTuple>
        {
            PCRxElementoTipo.XTuple NewTuple();

            new PCRxElementoTipo.XTuple NewTuple(Object pPKValue);

            new PCRxElementoTipo.XTuple FindTuple(params Object[] pFieldValuePar);

            new PCRxElementoTipo.XTuple FindTupleByPK(Object pPKValue);

            PCRxElementoTipo.XTuple this[Int32 pInex]
            {
                get;
            }


            new PCRxElementoTipo.XTuple Current
            {
                get;
            }

            IEnumerable<PCRxElementoTipo.XTuple> Tuples
            {
                get;
            }

            PCRxElementoTipo.XTuple FindByIndex(String pIndexName, params Object[] pValues);
        }

        #endregion _PCRxElementoTipo

        #region _PCRxElementoTipo<TModel, TTuple>

        public class _PCRxElementoTipo<TModel, TTuple> : XBasePersistence<TModel, TTuple>, _PCRxElementoTipo where TModel : PCRxElementoTipo where TTuple : PCRxElementoTipo.XTuple 
        {
            protected _PCRxElementoTipo()
            {
            }
            PCRxElementoTipo.XTuple _PCRxElementoTipo.this[Int32 pInex] => (PCRxElementoTipo.XTuple)base[pInex];

            IEnumerable<PCRxElementoTipo.XTuple> _PCRxElementoTipo.Tuples => (IEnumerable<PCRxElementoTipo.XTuple>)base.Tuples;

            PCRxElementoTipo.XTuple _PCRxElementoTipo.FindByIndex(String pIndexName, params Object[] pValues)
            {
                return (PCRxElementoTipo.XTuple)base.FindByIndex(pIndexName, pValues);
            }

            PCRxElementoTipo.XTuple _PCRxElementoTipo.FindTuple(params Object[] pFieldValuePar)
            {
                return (PCRxElementoTipo.XTuple)base.FindTuple(pFieldValuePar);
            }

            PCRxElementoTipo.XTuple _PCRxElementoTipo.FindTupleByPK(Object pPKValue)
            {
                return (PCRxElementoTipo.XTuple)base.FindTupleByPK(pPKValue);
            }

            PCRxElementoTipo.XTuple _PCRxElementoTipo.NewTuple()
            {
                return (PCRxElementoTipo.XTuple)NewTuple();
            }

            PCRxElementoTipo.XTuple _PCRxElementoTipo.NewTuple(Object pPKValue)
            {
                return (PCRxElementoTipo.XTuple)base.NewTuple(pPKValue);
            }
            IEnumerator<PCRxElementoTipo.XTuple> IEnumerable<PCRxElementoTipo.XTuple>.GetEnumerator()
            {
            return Tuples.GetEnumerator();
            }
            PCRxElementoTipo.XTuple _PCRxElementoTipo.Current => base.Current;
        }

        #endregion _PCRxElementoTipo<TModel, TTuple>

        #region __PCRxElementoTipo

        [XRegister(typeof(__PCRxElementoTipo), sCID, typeof(PCRxElementoTipo))]
        public class __PCRxElementoTipo : _PCRxElementoTipo<PCRxElementoTipo, PCRxElementoTipo.XTuple>
        {
            public const String sCID = "995342BB-8FD7-4F95-BAC0-D792C8589236";
            public static Guid gCID = new Guid(sCID);
            protected __PCRxElementoTipo()
            {
                TupleType = typeof(PCRxElementoTipo.XTuple);
            }
        }

        #endregion __PCRxElementoTipo

        #region _PCRxEstoque

        [Guid(__PCRxEstoque.sCID)]
        public interface _PCRxEstoque : XIBasePersistence, IEnumerable<PCRxEstoque.XTuple>
        {
            PCRxEstoque.XTuple NewTuple();

            new PCRxEstoque.XTuple NewTuple(Object pPKValue);

            new PCRxEstoque.XTuple FindTuple(params Object[] pFieldValuePar);

            new PCRxEstoque.XTuple FindTupleByPK(Object pPKValue);

            PCRxEstoque.XTuple this[Int32 pInex]
            {
                get;
            }


            new PCRxEstoque.XTuple Current
            {
                get;
            }

            IEnumerable<PCRxEstoque.XTuple> Tuples
            {
                get;
            }

            PCRxEstoque.XTuple FindByIndex(String pIndexName, params Object[] pValues);
        }

        #endregion _PCRxEstoque

        #region _PCRxEstoque<TModel, TTuple>

        public class _PCRxEstoque<TModel, TTuple> : XBasePersistence<TModel, TTuple>, _PCRxEstoque where TModel : PCRxEstoque where TTuple : PCRxEstoque.XTuple 
        {
            protected _PCRxEstoque()
            {
            }
            PCRxEstoque.XTuple _PCRxEstoque.this[Int32 pInex] => (PCRxEstoque.XTuple)base[pInex];

            IEnumerable<PCRxEstoque.XTuple> _PCRxEstoque.Tuples => (IEnumerable<PCRxEstoque.XTuple>)base.Tuples;

            PCRxEstoque.XTuple _PCRxEstoque.FindByIndex(String pIndexName, params Object[] pValues)
            {
                return (PCRxEstoque.XTuple)base.FindByIndex(pIndexName, pValues);
            }

            PCRxEstoque.XTuple _PCRxEstoque.FindTuple(params Object[] pFieldValuePar)
            {
                return (PCRxEstoque.XTuple)base.FindTuple(pFieldValuePar);
            }

            PCRxEstoque.XTuple _PCRxEstoque.FindTupleByPK(Object pPKValue)
            {
                return (PCRxEstoque.XTuple)base.FindTupleByPK(pPKValue);
            }

            PCRxEstoque.XTuple _PCRxEstoque.NewTuple()
            {
                return (PCRxEstoque.XTuple)NewTuple();
            }

            PCRxEstoque.XTuple _PCRxEstoque.NewTuple(Object pPKValue)
            {
                return (PCRxEstoque.XTuple)base.NewTuple(pPKValue);
            }
            IEnumerator<PCRxEstoque.XTuple> IEnumerable<PCRxEstoque.XTuple>.GetEnumerator()
            {
            return Tuples.GetEnumerator();
            }
            PCRxEstoque.XTuple _PCRxEstoque.Current => base.Current;
        }

        #endregion _PCRxEstoque<TModel, TTuple>

        #region __PCRxEstoque

        [XRegister(typeof(__PCRxEstoque), sCID, typeof(PCRxEstoque))]
        public class __PCRxEstoque : _PCRxEstoque<PCRxEstoque, PCRxEstoque.XTuple>
        {
            public const String sCID = "64FCCC18-C1F6-4679-AC48-5A24ECA2BAC5";
            public static Guid gCID = new Guid(sCID);
            protected __PCRxEstoque()
            {
                TupleType = typeof(PCRxEstoque.XTuple);
            }
        }

        #endregion __PCRxEstoque

        #region _PCRxEvento

        [Guid(__PCRxEvento.sCID)]
        public interface _PCRxEvento : XIBasePersistence, IEnumerable<PCRxEvento.XTuple>
        {
            PCRxEvento.XTuple NewTuple();

            new PCRxEvento.XTuple NewTuple(Object pPKValue);

            new PCRxEvento.XTuple FindTuple(params Object[] pFieldValuePar);

            new PCRxEvento.XTuple FindTupleByPK(Object pPKValue);

            PCRxEvento.XTuple this[Int32 pInex]
            {
                get;
            }


            new PCRxEvento.XTuple Current
            {
                get;
            }

            IEnumerable<PCRxEvento.XTuple> Tuples
            {
                get;
            }

            PCRxEvento.XTuple FindByIndex(String pIndexName, params Object[] pValues);
        }

        #endregion _PCRxEvento

        #region _PCRxEvento<TModel, TTuple>

        public class _PCRxEvento<TModel, TTuple> : XBasePersistence<TModel, TTuple>, _PCRxEvento where TModel : PCRxEvento where TTuple : PCRxEvento.XTuple 
        {
            protected _PCRxEvento()
            {
            }
            PCRxEvento.XTuple _PCRxEvento.this[Int32 pInex] => (PCRxEvento.XTuple)base[pInex];

            IEnumerable<PCRxEvento.XTuple> _PCRxEvento.Tuples => (IEnumerable<PCRxEvento.XTuple>)base.Tuples;

            PCRxEvento.XTuple _PCRxEvento.FindByIndex(String pIndexName, params Object[] pValues)
            {
                return (PCRxEvento.XTuple)base.FindByIndex(pIndexName, pValues);
            }

            PCRxEvento.XTuple _PCRxEvento.FindTuple(params Object[] pFieldValuePar)
            {
                return (PCRxEvento.XTuple)base.FindTuple(pFieldValuePar);
            }

            PCRxEvento.XTuple _PCRxEvento.FindTupleByPK(Object pPKValue)
            {
                return (PCRxEvento.XTuple)base.FindTupleByPK(pPKValue);
            }

            PCRxEvento.XTuple _PCRxEvento.NewTuple()
            {
                return (PCRxEvento.XTuple)NewTuple();
            }

            PCRxEvento.XTuple _PCRxEvento.NewTuple(Object pPKValue)
            {
                return (PCRxEvento.XTuple)base.NewTuple(pPKValue);
            }
            IEnumerator<PCRxEvento.XTuple> IEnumerable<PCRxEvento.XTuple>.GetEnumerator()
            {
            return Tuples.GetEnumerator();
            }
            PCRxEvento.XTuple _PCRxEvento.Current => base.Current;
        }

        #endregion _PCRxEvento<TModel, TTuple>

        #region __PCRxEvento

        [XRegister(typeof(__PCRxEvento), sCID, typeof(PCRxEvento))]
        public class __PCRxEvento : _PCRxEvento<PCRxEvento, PCRxEvento.XTuple>
        {
            public const String sCID = "0319A331-7BC4-49C6-9594-F8D86C2E0472";
            public static Guid gCID = new Guid(sCID);
            protected __PCRxEvento()
            {
                TupleType = typeof(PCRxEvento.XTuple);
            }
        }

        #endregion __PCRxEvento

        #region _PCRxEventoFazenda

        [Guid(__PCRxEventoFazenda.sCID)]
        public interface _PCRxEventoFazenda : XIBasePersistence, IEnumerable<PCRxEventoFazenda.XTuple>
        {
            PCRxEventoFazenda.XTuple NewTuple();

            new PCRxEventoFazenda.XTuple NewTuple(Object pPKValue);

            new PCRxEventoFazenda.XTuple FindTuple(params Object[] pFieldValuePar);

            new PCRxEventoFazenda.XTuple FindTupleByPK(Object pPKValue);

            PCRxEventoFazenda.XTuple this[Int32 pInex]
            {
                get;
            }


            new PCRxEventoFazenda.XTuple Current
            {
                get;
            }

            IEnumerable<PCRxEventoFazenda.XTuple> Tuples
            {
                get;
            }

            PCRxEventoFazenda.XTuple FindByIndex(String pIndexName, params Object[] pValues);
        }

        #endregion _PCRxEventoFazenda

        #region _PCRxEventoFazenda<TModel, TTuple>

        public class _PCRxEventoFazenda<TModel, TTuple> : XBasePersistence<TModel, TTuple>, _PCRxEventoFazenda where TModel : PCRxEventoFazenda where TTuple : PCRxEventoFazenda.XTuple 
        {
            protected _PCRxEventoFazenda()
            {
            }
            PCRxEventoFazenda.XTuple _PCRxEventoFazenda.this[Int32 pInex] => (PCRxEventoFazenda.XTuple)base[pInex];

            IEnumerable<PCRxEventoFazenda.XTuple> _PCRxEventoFazenda.Tuples => (IEnumerable<PCRxEventoFazenda.XTuple>)base.Tuples;

            PCRxEventoFazenda.XTuple _PCRxEventoFazenda.FindByIndex(String pIndexName, params Object[] pValues)
            {
                return (PCRxEventoFazenda.XTuple)base.FindByIndex(pIndexName, pValues);
            }

            PCRxEventoFazenda.XTuple _PCRxEventoFazenda.FindTuple(params Object[] pFieldValuePar)
            {
                return (PCRxEventoFazenda.XTuple)base.FindTuple(pFieldValuePar);
            }

            PCRxEventoFazenda.XTuple _PCRxEventoFazenda.FindTupleByPK(Object pPKValue)
            {
                return (PCRxEventoFazenda.XTuple)base.FindTupleByPK(pPKValue);
            }

            PCRxEventoFazenda.XTuple _PCRxEventoFazenda.NewTuple()
            {
                return (PCRxEventoFazenda.XTuple)NewTuple();
            }

            PCRxEventoFazenda.XTuple _PCRxEventoFazenda.NewTuple(Object pPKValue)
            {
                return (PCRxEventoFazenda.XTuple)base.NewTuple(pPKValue);
            }
            IEnumerator<PCRxEventoFazenda.XTuple> IEnumerable<PCRxEventoFazenda.XTuple>.GetEnumerator()
            {
            return Tuples.GetEnumerator();
            }
            PCRxEventoFazenda.XTuple _PCRxEventoFazenda.Current => base.Current;
        }

        #endregion _PCRxEventoFazenda<TModel, TTuple>

        #region __PCRxEventoFazenda

        [XRegister(typeof(__PCRxEventoFazenda), sCID, typeof(PCRxEventoFazenda))]
        public class __PCRxEventoFazenda : _PCRxEventoFazenda<PCRxEventoFazenda, PCRxEventoFazenda.XTuple>
        {
            public const String sCID = "F62C80BD-388C-4D41-83BB-7E7AA8A00106";
            public static Guid gCID = new Guid(sCID);
            protected __PCRxEventoFazenda()
            {
                TupleType = typeof(PCRxEventoFazenda.XTuple);
            }
        }

        #endregion __PCRxEventoFazenda

        #region _PCRxEventoTipo

        [Guid(__PCRxEventoTipo.sCID)]
        public interface _PCRxEventoTipo : XIBasePersistence, IEnumerable<PCRxEventoTipo.XTuple>
        {
            PCRxEventoTipo.XTuple NewTuple();

            new PCRxEventoTipo.XTuple NewTuple(Object pPKValue);

            new PCRxEventoTipo.XTuple FindTuple(params Object[] pFieldValuePar);

            new PCRxEventoTipo.XTuple FindTupleByPK(Object pPKValue);

            PCRxEventoTipo.XTuple this[Int32 pInex]
            {
                get;
            }


            new PCRxEventoTipo.XTuple Current
            {
                get;
            }

            IEnumerable<PCRxEventoTipo.XTuple> Tuples
            {
                get;
            }

            PCRxEventoTipo.XTuple FindByIndex(String pIndexName, params Object[] pValues);
        }

        #endregion _PCRxEventoTipo

        #region _PCRxEventoTipo<TModel, TTuple>

        public class _PCRxEventoTipo<TModel, TTuple> : XBasePersistence<TModel, TTuple>, _PCRxEventoTipo where TModel : PCRxEventoTipo where TTuple : PCRxEventoTipo.XTuple 
        {
            protected _PCRxEventoTipo()
            {
            }
            PCRxEventoTipo.XTuple _PCRxEventoTipo.this[Int32 pInex] => (PCRxEventoTipo.XTuple)base[pInex];

            IEnumerable<PCRxEventoTipo.XTuple> _PCRxEventoTipo.Tuples => (IEnumerable<PCRxEventoTipo.XTuple>)base.Tuples;

            PCRxEventoTipo.XTuple _PCRxEventoTipo.FindByIndex(String pIndexName, params Object[] pValues)
            {
                return (PCRxEventoTipo.XTuple)base.FindByIndex(pIndexName, pValues);
            }

            PCRxEventoTipo.XTuple _PCRxEventoTipo.FindTuple(params Object[] pFieldValuePar)
            {
                return (PCRxEventoTipo.XTuple)base.FindTuple(pFieldValuePar);
            }

            PCRxEventoTipo.XTuple _PCRxEventoTipo.FindTupleByPK(Object pPKValue)
            {
                return (PCRxEventoTipo.XTuple)base.FindTupleByPK(pPKValue);
            }

            PCRxEventoTipo.XTuple _PCRxEventoTipo.NewTuple()
            {
                return (PCRxEventoTipo.XTuple)NewTuple();
            }

            PCRxEventoTipo.XTuple _PCRxEventoTipo.NewTuple(Object pPKValue)
            {
                return (PCRxEventoTipo.XTuple)base.NewTuple(pPKValue);
            }
            IEnumerator<PCRxEventoTipo.XTuple> IEnumerable<PCRxEventoTipo.XTuple>.GetEnumerator()
            {
            return Tuples.GetEnumerator();
            }
            PCRxEventoTipo.XTuple _PCRxEventoTipo.Current => base.Current;
        }

        #endregion _PCRxEventoTipo<TModel, TTuple>

        #region __PCRxEventoTipo

        [XRegister(typeof(__PCRxEventoTipo), sCID, typeof(PCRxEventoTipo))]
        public class __PCRxEventoTipo : _PCRxEventoTipo<PCRxEventoTipo, PCRxEventoTipo.XTuple>
        {
            public const String sCID = "7D9E1F2C-09AB-4391-A9D4-4BB437AC27A9";
            public static Guid gCID = new Guid(sCID);
            protected __PCRxEventoTipo()
            {
                TupleType = typeof(PCRxEventoTipo.XTuple);
            }
        }

        #endregion __PCRxEventoTipo

        #region _PCRxFazenda

        [Guid(__PCRxFazenda.sCID)]
        public interface _PCRxFazenda : XIBasePersistence, IEnumerable<PCRxFazenda.XTuple>
        {
            PCRxFazenda.XTuple NewTuple();

            new PCRxFazenda.XTuple NewTuple(Object pPKValue);

            new PCRxFazenda.XTuple FindTuple(params Object[] pFieldValuePar);

            new PCRxFazenda.XTuple FindTupleByPK(Object pPKValue);

            PCRxFazenda.XTuple this[Int32 pInex]
            {
                get;
            }


            new PCRxFazenda.XTuple Current
            {
                get;
            }

            IEnumerable<PCRxFazenda.XTuple> Tuples
            {
                get;
            }

            PCRxFazenda.XTuple FindByIndex(String pIndexName, params Object[] pValues);
        }

        #endregion _PCRxFazenda

        #region _PCRxFazenda<TModel, TTuple>

        public class _PCRxFazenda<TModel, TTuple> : XBasePersistence<TModel, TTuple>, _PCRxFazenda where TModel : PCRxFazenda where TTuple : PCRxFazenda.XTuple 
        {
            protected _PCRxFazenda()
            {
            }
            PCRxFazenda.XTuple _PCRxFazenda.this[Int32 pInex] => (PCRxFazenda.XTuple)base[pInex];

            IEnumerable<PCRxFazenda.XTuple> _PCRxFazenda.Tuples => (IEnumerable<PCRxFazenda.XTuple>)base.Tuples;

            PCRxFazenda.XTuple _PCRxFazenda.FindByIndex(String pIndexName, params Object[] pValues)
            {
                return (PCRxFazenda.XTuple)base.FindByIndex(pIndexName, pValues);
            }

            PCRxFazenda.XTuple _PCRxFazenda.FindTuple(params Object[] pFieldValuePar)
            {
                return (PCRxFazenda.XTuple)base.FindTuple(pFieldValuePar);
            }

            PCRxFazenda.XTuple _PCRxFazenda.FindTupleByPK(Object pPKValue)
            {
                return (PCRxFazenda.XTuple)base.FindTupleByPK(pPKValue);
            }

            PCRxFazenda.XTuple _PCRxFazenda.NewTuple()
            {
                return (PCRxFazenda.XTuple)NewTuple();
            }

            PCRxFazenda.XTuple _PCRxFazenda.NewTuple(Object pPKValue)
            {
                return (PCRxFazenda.XTuple)base.NewTuple(pPKValue);
            }
            IEnumerator<PCRxFazenda.XTuple> IEnumerable<PCRxFazenda.XTuple>.GetEnumerator()
            {
            return Tuples.GetEnumerator();
            }
            PCRxFazenda.XTuple _PCRxFazenda.Current => base.Current;
        }

        #endregion _PCRxFazenda<TModel, TTuple>

        #region __PCRxFazenda

        [XRegister(typeof(__PCRxFazenda), sCID, typeof(PCRxFazenda))]
        public class __PCRxFazenda : _PCRxFazenda<PCRxFazenda, PCRxFazenda.XTuple>
        {
            public const String sCID = "5499A8BF-A6D2-407A-B6D1-F0283CDA662D";
            public static Guid gCID = new Guid(sCID);
            protected __PCRxFazenda()
            {
                TupleType = typeof(PCRxFazenda.XTuple);
            }
        }

        #endregion __PCRxFazenda

        #region _PCRxIATF

        [Guid(__PCRxIATF.sCID)]
        public interface _PCRxIATF : XIBasePersistence, IEnumerable<PCRxIATF.XTuple>
        {
            PCRxIATF.XTuple NewTuple();

            new PCRxIATF.XTuple NewTuple(Object pPKValue);

            new PCRxIATF.XTuple FindTuple(params Object[] pFieldValuePar);

            new PCRxIATF.XTuple FindTupleByPK(Object pPKValue);

            PCRxIATF.XTuple this[Int32 pInex]
            {
                get;
            }


            new PCRxIATF.XTuple Current
            {
                get;
            }

            IEnumerable<PCRxIATF.XTuple> Tuples
            {
                get;
            }

            PCRxIATF.XTuple FindByIndex(String pIndexName, params Object[] pValues);
        }

        #endregion _PCRxIATF

        #region _PCRxIATF<TModel, TTuple>

        public class _PCRxIATF<TModel, TTuple> : XBasePersistence<TModel, TTuple>, _PCRxIATF where TModel : PCRxIATF where TTuple : PCRxIATF.XTuple 
        {
            protected _PCRxIATF()
            {
            }
            PCRxIATF.XTuple _PCRxIATF.this[Int32 pInex] => (PCRxIATF.XTuple)base[pInex];

            IEnumerable<PCRxIATF.XTuple> _PCRxIATF.Tuples => (IEnumerable<PCRxIATF.XTuple>)base.Tuples;

            PCRxIATF.XTuple _PCRxIATF.FindByIndex(String pIndexName, params Object[] pValues)
            {
                return (PCRxIATF.XTuple)base.FindByIndex(pIndexName, pValues);
            }

            PCRxIATF.XTuple _PCRxIATF.FindTuple(params Object[] pFieldValuePar)
            {
                return (PCRxIATF.XTuple)base.FindTuple(pFieldValuePar);
            }

            PCRxIATF.XTuple _PCRxIATF.FindTupleByPK(Object pPKValue)
            {
                return (PCRxIATF.XTuple)base.FindTupleByPK(pPKValue);
            }

            PCRxIATF.XTuple _PCRxIATF.NewTuple()
            {
                return (PCRxIATF.XTuple)NewTuple();
            }

            PCRxIATF.XTuple _PCRxIATF.NewTuple(Object pPKValue)
            {
                return (PCRxIATF.XTuple)base.NewTuple(pPKValue);
            }
            IEnumerator<PCRxIATF.XTuple> IEnumerable<PCRxIATF.XTuple>.GetEnumerator()
            {
            return Tuples.GetEnumerator();
            }
            PCRxIATF.XTuple _PCRxIATF.Current => base.Current;
        }

        #endregion _PCRxIATF<TModel, TTuple>

        #region __PCRxIATF

        [XRegister(typeof(__PCRxIATF), sCID, typeof(PCRxIATF))]
        public class __PCRxIATF : _PCRxIATF<PCRxIATF, PCRxIATF.XTuple>
        {
            public const String sCID = "1D5DF9F1-BEF2-4034-B473-52568C9F6ADD";
            public static Guid gCID = new Guid(sCID);
            protected __PCRxIATF()
            {
                TupleType = typeof(PCRxIATF.XTuple);
            }
        }

        #endregion __PCRxIATF

        #region _PCRxIATFFase

        [Guid(__PCRxIATFFase.sCID)]
        public interface _PCRxIATFFase : XIBasePersistence, IEnumerable<PCRxIATFFase.XTuple>
        {
            PCRxIATFFase.XTuple NewTuple();

            new PCRxIATFFase.XTuple NewTuple(Object pPKValue);

            new PCRxIATFFase.XTuple FindTuple(params Object[] pFieldValuePar);

            new PCRxIATFFase.XTuple FindTupleByPK(Object pPKValue);

            PCRxIATFFase.XTuple this[Int32 pInex]
            {
                get;
            }


            new PCRxIATFFase.XTuple Current
            {
                get;
            }

            IEnumerable<PCRxIATFFase.XTuple> Tuples
            {
                get;
            }

            PCRxIATFFase.XTuple FindByIndex(String pIndexName, params Object[] pValues);
        }

        #endregion _PCRxIATFFase

        #region _PCRxIATFFase<TModel, TTuple>

        public class _PCRxIATFFase<TModel, TTuple> : XBasePersistence<TModel, TTuple>, _PCRxIATFFase where TModel : PCRxIATFFase where TTuple : PCRxIATFFase.XTuple 
        {
            protected _PCRxIATFFase()
            {
            }
            PCRxIATFFase.XTuple _PCRxIATFFase.this[Int32 pInex] => (PCRxIATFFase.XTuple)base[pInex];

            IEnumerable<PCRxIATFFase.XTuple> _PCRxIATFFase.Tuples => (IEnumerable<PCRxIATFFase.XTuple>)base.Tuples;

            PCRxIATFFase.XTuple _PCRxIATFFase.FindByIndex(String pIndexName, params Object[] pValues)
            {
                return (PCRxIATFFase.XTuple)base.FindByIndex(pIndexName, pValues);
            }

            PCRxIATFFase.XTuple _PCRxIATFFase.FindTuple(params Object[] pFieldValuePar)
            {
                return (PCRxIATFFase.XTuple)base.FindTuple(pFieldValuePar);
            }

            PCRxIATFFase.XTuple _PCRxIATFFase.FindTupleByPK(Object pPKValue)
            {
                return (PCRxIATFFase.XTuple)base.FindTupleByPK(pPKValue);
            }

            PCRxIATFFase.XTuple _PCRxIATFFase.NewTuple()
            {
                return (PCRxIATFFase.XTuple)NewTuple();
            }

            PCRxIATFFase.XTuple _PCRxIATFFase.NewTuple(Object pPKValue)
            {
                return (PCRxIATFFase.XTuple)base.NewTuple(pPKValue);
            }
            IEnumerator<PCRxIATFFase.XTuple> IEnumerable<PCRxIATFFase.XTuple>.GetEnumerator()
            {
            return Tuples.GetEnumerator();
            }
            PCRxIATFFase.XTuple _PCRxIATFFase.Current => base.Current;
        }

        #endregion _PCRxIATFFase<TModel, TTuple>

        #region __PCRxIATFFase

        [XRegister(typeof(__PCRxIATFFase), sCID, typeof(PCRxIATFFase))]
        public class __PCRxIATFFase : _PCRxIATFFase<PCRxIATFFase, PCRxIATFFase.XTuple>
        {
            public const String sCID = "AF53297D-ED12-438C-9A4A-39B53615BD29";
            public static Guid gCID = new Guid(sCID);
            protected __PCRxIATFFase()
            {
                TupleType = typeof(PCRxIATFFase.XTuple);
            }
        }

        #endregion __PCRxIATFFase

        #region _PCRxIATFFaseTipo

        [Guid(__PCRxIATFFaseTipo.sCID)]
        public interface _PCRxIATFFaseTipo : XIBasePersistence, IEnumerable<PCRxIATFFaseTipo.XTuple>
        {
            PCRxIATFFaseTipo.XTuple NewTuple();

            new PCRxIATFFaseTipo.XTuple NewTuple(Object pPKValue);

            new PCRxIATFFaseTipo.XTuple FindTuple(params Object[] pFieldValuePar);

            new PCRxIATFFaseTipo.XTuple FindTupleByPK(Object pPKValue);

            PCRxIATFFaseTipo.XTuple this[Int32 pInex]
            {
                get;
            }


            new PCRxIATFFaseTipo.XTuple Current
            {
                get;
            }

            IEnumerable<PCRxIATFFaseTipo.XTuple> Tuples
            {
                get;
            }

            PCRxIATFFaseTipo.XTuple FindByIndex(String pIndexName, params Object[] pValues);
        }

        #endregion _PCRxIATFFaseTipo

        #region _PCRxIATFFaseTipo<TModel, TTuple>

        public class _PCRxIATFFaseTipo<TModel, TTuple> : XBasePersistence<TModel, TTuple>, _PCRxIATFFaseTipo where TModel : PCRxIATFFaseTipo where TTuple : PCRxIATFFaseTipo.XTuple 
        {
            protected _PCRxIATFFaseTipo()
            {
            }
            PCRxIATFFaseTipo.XTuple _PCRxIATFFaseTipo.this[Int32 pInex] => (PCRxIATFFaseTipo.XTuple)base[pInex];

            IEnumerable<PCRxIATFFaseTipo.XTuple> _PCRxIATFFaseTipo.Tuples => (IEnumerable<PCRxIATFFaseTipo.XTuple>)base.Tuples;

            PCRxIATFFaseTipo.XTuple _PCRxIATFFaseTipo.FindByIndex(String pIndexName, params Object[] pValues)
            {
                return (PCRxIATFFaseTipo.XTuple)base.FindByIndex(pIndexName, pValues);
            }

            PCRxIATFFaseTipo.XTuple _PCRxIATFFaseTipo.FindTuple(params Object[] pFieldValuePar)
            {
                return (PCRxIATFFaseTipo.XTuple)base.FindTuple(pFieldValuePar);
            }

            PCRxIATFFaseTipo.XTuple _PCRxIATFFaseTipo.FindTupleByPK(Object pPKValue)
            {
                return (PCRxIATFFaseTipo.XTuple)base.FindTupleByPK(pPKValue);
            }

            PCRxIATFFaseTipo.XTuple _PCRxIATFFaseTipo.NewTuple()
            {
                return (PCRxIATFFaseTipo.XTuple)NewTuple();
            }

            PCRxIATFFaseTipo.XTuple _PCRxIATFFaseTipo.NewTuple(Object pPKValue)
            {
                return (PCRxIATFFaseTipo.XTuple)base.NewTuple(pPKValue);
            }
            IEnumerator<PCRxIATFFaseTipo.XTuple> IEnumerable<PCRxIATFFaseTipo.XTuple>.GetEnumerator()
            {
            return Tuples.GetEnumerator();
            }
            PCRxIATFFaseTipo.XTuple _PCRxIATFFaseTipo.Current => base.Current;
        }

        #endregion _PCRxIATFFaseTipo<TModel, TTuple>

        #region __PCRxIATFFaseTipo

        [XRegister(typeof(__PCRxIATFFaseTipo), sCID, typeof(PCRxIATFFaseTipo))]
        public class __PCRxIATFFaseTipo : _PCRxIATFFaseTipo<PCRxIATFFaseTipo, PCRxIATFFaseTipo.XTuple>
        {
            public const String sCID = "159971AF-3947-4B1D-BB0D-70AE7A898A27";
            public static Guid gCID = new Guid(sCID);
            protected __PCRxIATFFaseTipo()
            {
                TupleType = typeof(PCRxIATFFaseTipo.XTuple);
            }
        }

        #endregion __PCRxIATFFaseTipo

        #region _PCRxPasto

        [Guid(__PCRxPasto.sCID)]
        public interface _PCRxPasto : XIBasePersistence, IEnumerable<PCRxPasto.XTuple>
        {
            PCRxPasto.XTuple NewTuple();

            new PCRxPasto.XTuple NewTuple(Object pPKValue);

            new PCRxPasto.XTuple FindTuple(params Object[] pFieldValuePar);

            new PCRxPasto.XTuple FindTupleByPK(Object pPKValue);

            PCRxPasto.XTuple this[Int32 pInex]
            {
                get;
            }


            new PCRxPasto.XTuple Current
            {
                get;
            }

            IEnumerable<PCRxPasto.XTuple> Tuples
            {
                get;
            }

            PCRxPasto.XTuple FindByIndex(String pIndexName, params Object[] pValues);
        }

        #endregion _PCRxPasto

        #region _PCRxPasto<TModel, TTuple>

        public class _PCRxPasto<TModel, TTuple> : XBasePersistence<TModel, TTuple>, _PCRxPasto where TModel : PCRxPasto where TTuple : PCRxPasto.XTuple 
        {
            protected _PCRxPasto()
            {
            }
            PCRxPasto.XTuple _PCRxPasto.this[Int32 pInex] => (PCRxPasto.XTuple)base[pInex];

            IEnumerable<PCRxPasto.XTuple> _PCRxPasto.Tuples => (IEnumerable<PCRxPasto.XTuple>)base.Tuples;

            PCRxPasto.XTuple _PCRxPasto.FindByIndex(String pIndexName, params Object[] pValues)
            {
                return (PCRxPasto.XTuple)base.FindByIndex(pIndexName, pValues);
            }

            PCRxPasto.XTuple _PCRxPasto.FindTuple(params Object[] pFieldValuePar)
            {
                return (PCRxPasto.XTuple)base.FindTuple(pFieldValuePar);
            }

            PCRxPasto.XTuple _PCRxPasto.FindTupleByPK(Object pPKValue)
            {
                return (PCRxPasto.XTuple)base.FindTupleByPK(pPKValue);
            }

            PCRxPasto.XTuple _PCRxPasto.NewTuple()
            {
                return (PCRxPasto.XTuple)NewTuple();
            }

            PCRxPasto.XTuple _PCRxPasto.NewTuple(Object pPKValue)
            {
                return (PCRxPasto.XTuple)base.NewTuple(pPKValue);
            }
            IEnumerator<PCRxPasto.XTuple> IEnumerable<PCRxPasto.XTuple>.GetEnumerator()
            {
            return Tuples.GetEnumerator();
            }
            PCRxPasto.XTuple _PCRxPasto.Current => base.Current;
        }

        #endregion _PCRxPasto<TModel, TTuple>

        #region __PCRxPasto

        [XRegister(typeof(__PCRxPasto), sCID, typeof(PCRxPasto))]
        public class __PCRxPasto : _PCRxPasto<PCRxPasto, PCRxPasto.XTuple>
        {
            public const String sCID = "E6D7CFCF-3C67-4D7F-85B4-1864ECD3EAF0";
            public static Guid gCID = new Guid(sCID);
            protected __PCRxPasto()
            {
                TupleType = typeof(PCRxPasto.XTuple);
            }
        }

        #endregion __PCRxPasto

        #region _PCRxRaca

        [Guid(__PCRxRaca.sCID)]
        public interface _PCRxRaca : XIBasePersistence, IEnumerable<PCRxRaca.XTuple>
        {
            PCRxRaca.XTuple NewTuple();

            new PCRxRaca.XTuple NewTuple(Object pPKValue);

            new PCRxRaca.XTuple FindTuple(params Object[] pFieldValuePar);

            new PCRxRaca.XTuple FindTupleByPK(Object pPKValue);

            PCRxRaca.XTuple this[Int32 pInex]
            {
                get;
            }


            new PCRxRaca.XTuple Current
            {
                get;
            }

            IEnumerable<PCRxRaca.XTuple> Tuples
            {
                get;
            }

            PCRxRaca.XTuple FindByIndex(String pIndexName, params Object[] pValues);
        }

        #endregion _PCRxRaca

        #region _PCRxRaca<TModel, TTuple>

        public class _PCRxRaca<TModel, TTuple> : XBasePersistence<TModel, TTuple>, _PCRxRaca where TModel : PCRxRaca where TTuple : PCRxRaca.XTuple 
        {
            protected _PCRxRaca()
            {
            }
            PCRxRaca.XTuple _PCRxRaca.this[Int32 pInex] => (PCRxRaca.XTuple)base[pInex];

            IEnumerable<PCRxRaca.XTuple> _PCRxRaca.Tuples => (IEnumerable<PCRxRaca.XTuple>)base.Tuples;

            PCRxRaca.XTuple _PCRxRaca.FindByIndex(String pIndexName, params Object[] pValues)
            {
                return (PCRxRaca.XTuple)base.FindByIndex(pIndexName, pValues);
            }

            PCRxRaca.XTuple _PCRxRaca.FindTuple(params Object[] pFieldValuePar)
            {
                return (PCRxRaca.XTuple)base.FindTuple(pFieldValuePar);
            }

            PCRxRaca.XTuple _PCRxRaca.FindTupleByPK(Object pPKValue)
            {
                return (PCRxRaca.XTuple)base.FindTupleByPK(pPKValue);
            }

            PCRxRaca.XTuple _PCRxRaca.NewTuple()
            {
                return (PCRxRaca.XTuple)NewTuple();
            }

            PCRxRaca.XTuple _PCRxRaca.NewTuple(Object pPKValue)
            {
                return (PCRxRaca.XTuple)base.NewTuple(pPKValue);
            }
            IEnumerator<PCRxRaca.XTuple> IEnumerable<PCRxRaca.XTuple>.GetEnumerator()
            {
            return Tuples.GetEnumerator();
            }
            PCRxRaca.XTuple _PCRxRaca.Current => base.Current;
        }

        #endregion _PCRxRaca<TModel, TTuple>

        #region __PCRxRaca

        [XRegister(typeof(__PCRxRaca), sCID, typeof(PCRxRaca))]
        public class __PCRxRaca : _PCRxRaca<PCRxRaca, PCRxRaca.XTuple>
        {
            public const String sCID = "3EBEC051-DB50-44B4-9E57-CA1374B4911E";
            public static Guid gCID = new Guid(sCID);
            protected __PCRxRaca()
            {
                TupleType = typeof(PCRxRaca.XTuple);
            }
        }

        #endregion __PCRxRaca

        #region _PCRxReprodutor

        [Guid(__PCRxReprodutor.sCID)]
        public interface _PCRxReprodutor : XIBasePersistence, IEnumerable<PCRxReprodutor.XTuple>
        {
            PCRxReprodutor.XTuple NewTuple();

            new PCRxReprodutor.XTuple NewTuple(Object pPKValue);

            new PCRxReprodutor.XTuple FindTuple(params Object[] pFieldValuePar);

            new PCRxReprodutor.XTuple FindTupleByPK(Object pPKValue);

            PCRxReprodutor.XTuple this[Int32 pInex]
            {
                get;
            }


            new PCRxReprodutor.XTuple Current
            {
                get;
            }

            IEnumerable<PCRxReprodutor.XTuple> Tuples
            {
                get;
            }

            PCRxReprodutor.XTuple FindByIndex(String pIndexName, params Object[] pValues);
        }

        #endregion _PCRxReprodutor

        #region _PCRxReprodutor<TModel, TTuple>

        public class _PCRxReprodutor<TModel, TTuple> : XBasePersistence<TModel, TTuple>, _PCRxReprodutor where TModel : PCRxReprodutor where TTuple : PCRxReprodutor.XTuple 
        {
            protected _PCRxReprodutor()
            {
            }
            PCRxReprodutor.XTuple _PCRxReprodutor.this[Int32 pInex] => (PCRxReprodutor.XTuple)base[pInex];

            IEnumerable<PCRxReprodutor.XTuple> _PCRxReprodutor.Tuples => (IEnumerable<PCRxReprodutor.XTuple>)base.Tuples;

            PCRxReprodutor.XTuple _PCRxReprodutor.FindByIndex(String pIndexName, params Object[] pValues)
            {
                return (PCRxReprodutor.XTuple)base.FindByIndex(pIndexName, pValues);
            }

            PCRxReprodutor.XTuple _PCRxReprodutor.FindTuple(params Object[] pFieldValuePar)
            {
                return (PCRxReprodutor.XTuple)base.FindTuple(pFieldValuePar);
            }

            PCRxReprodutor.XTuple _PCRxReprodutor.FindTupleByPK(Object pPKValue)
            {
                return (PCRxReprodutor.XTuple)base.FindTupleByPK(pPKValue);
            }

            PCRxReprodutor.XTuple _PCRxReprodutor.NewTuple()
            {
                return (PCRxReprodutor.XTuple)NewTuple();
            }

            PCRxReprodutor.XTuple _PCRxReprodutor.NewTuple(Object pPKValue)
            {
                return (PCRxReprodutor.XTuple)base.NewTuple(pPKValue);
            }
            IEnumerator<PCRxReprodutor.XTuple> IEnumerable<PCRxReprodutor.XTuple>.GetEnumerator()
            {
            return Tuples.GetEnumerator();
            }
            PCRxReprodutor.XTuple _PCRxReprodutor.Current => base.Current;
        }

        #endregion _PCRxReprodutor<TModel, TTuple>

        #region __PCRxReprodutor

        [XRegister(typeof(__PCRxReprodutor), sCID, typeof(PCRxReprodutor))]
        public class __PCRxReprodutor : _PCRxReprodutor<PCRxReprodutor, PCRxReprodutor.XTuple>
        {
            public const String sCID = "9A8372A8-B361-4F4A-AE9B-573D9DC305E1";
            public static Guid gCID = new Guid(sCID);
            protected __PCRxReprodutor()
            {
                TupleType = typeof(PCRxReprodutor.XTuple);
            }
        }

        #endregion __PCRxReprodutor

        #region _PCRxRetiro

        [Guid(__PCRxRetiro.sCID)]
        public interface _PCRxRetiro : XIBasePersistence, IEnumerable<PCRxRetiro.XTuple>
        {
            PCRxRetiro.XTuple NewTuple();

            new PCRxRetiro.XTuple NewTuple(Object pPKValue);

            new PCRxRetiro.XTuple FindTuple(params Object[] pFieldValuePar);

            new PCRxRetiro.XTuple FindTupleByPK(Object pPKValue);

            PCRxRetiro.XTuple this[Int32 pInex]
            {
                get;
            }


            new PCRxRetiro.XTuple Current
            {
                get;
            }

            IEnumerable<PCRxRetiro.XTuple> Tuples
            {
                get;
            }

            PCRxRetiro.XTuple FindByIndex(String pIndexName, params Object[] pValues);
        }

        #endregion _PCRxRetiro

        #region _PCRxRetiro<TModel, TTuple>

        public class _PCRxRetiro<TModel, TTuple> : XBasePersistence<TModel, TTuple>, _PCRxRetiro where TModel : PCRxRetiro where TTuple : PCRxRetiro.XTuple 
        {
            protected _PCRxRetiro()
            {
            }
            PCRxRetiro.XTuple _PCRxRetiro.this[Int32 pInex] => (PCRxRetiro.XTuple)base[pInex];

            IEnumerable<PCRxRetiro.XTuple> _PCRxRetiro.Tuples => (IEnumerable<PCRxRetiro.XTuple>)base.Tuples;

            PCRxRetiro.XTuple _PCRxRetiro.FindByIndex(String pIndexName, params Object[] pValues)
            {
                return (PCRxRetiro.XTuple)base.FindByIndex(pIndexName, pValues);
            }

            PCRxRetiro.XTuple _PCRxRetiro.FindTuple(params Object[] pFieldValuePar)
            {
                return (PCRxRetiro.XTuple)base.FindTuple(pFieldValuePar);
            }

            PCRxRetiro.XTuple _PCRxRetiro.FindTupleByPK(Object pPKValue)
            {
                return (PCRxRetiro.XTuple)base.FindTupleByPK(pPKValue);
            }

            PCRxRetiro.XTuple _PCRxRetiro.NewTuple()
            {
                return (PCRxRetiro.XTuple)NewTuple();
            }

            PCRxRetiro.XTuple _PCRxRetiro.NewTuple(Object pPKValue)
            {
                return (PCRxRetiro.XTuple)base.NewTuple(pPKValue);
            }
            IEnumerator<PCRxRetiro.XTuple> IEnumerable<PCRxRetiro.XTuple>.GetEnumerator()
            {
            return Tuples.GetEnumerator();
            }
            PCRxRetiro.XTuple _PCRxRetiro.Current => base.Current;
        }

        #endregion _PCRxRetiro<TModel, TTuple>

        #region __PCRxRetiro

        [XRegister(typeof(__PCRxRetiro), sCID, typeof(PCRxRetiro))]
        public class __PCRxRetiro : _PCRxRetiro<PCRxRetiro, PCRxRetiro.XTuple>
        {
            public const String sCID = "0595F45E-A97C-4DED-B9DB-0A2E56597E62";
            public static Guid gCID = new Guid(sCID);
            protected __PCRxRetiro()
            {
                TupleType = typeof(PCRxRetiro.XTuple);
            }
        }

        #endregion __PCRxRetiro

        static PCRx()
        {
        }

        public PCRx(XModelCache pInstance)
            :base(pInstance)
        {
            ID = new Guid("6DBB562A-5705-4031-BFEF-ED55908FB5F4");
            Solution = "Projecao.Core.PCR";
            Project = "Projecao.Core.PCR";
            Name = "PCRx";
            Title = "Pecuária";
            AddTable(PCRxAnimal.Instance);
            AddTable(PCRxAnimalEstado.Instance);
            AddTable(PCRxAnimalEvento.Instance);
            AddTable(PCRxAnimalFase.Instance);
            AddTable(PCRxAnimalFiliacao.Instance);
            AddTable(PCRxAnimalLote.Instance);
            AddTable(PCRxAnimalPasto.Instance);
            AddTable(PCRxDocumento.Instance);
            AddTable(PCRxElemento.Instance);
            AddTable(PCRxElementoTipo.Instance);
            AddTable(PCRxEstoque.Instance);
            AddTable(PCRxEvento.Instance);
            AddTable(PCRxEventoFazenda.Instance);
            AddTable(PCRxEventoTipo.Instance);
            AddTable(PCRxFazenda.Instance);
            AddTable(PCRxIATF.Instance);
            AddTable(PCRxIATFFase.Instance);
            AddTable(PCRxIATFFaseTipo.Instance);
            AddTable(PCRxPasto.Instance);
            AddTable(PCRxRaca.Instance);
            AddTable(PCRxReprodutor.Instance);
            AddTable(PCRxRetiro.Instance);
        }

        public override Int32 SortedBy
        {
            get
            {
                return 0;
            }
        }
    }
}