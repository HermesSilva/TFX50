//<auto-generated/>
using System;
using System.Linq;
using Newtonsoft.Json;
using TFX.Core.Objects;
using TFX.Core.Model.Data;
using TFX.Core.Model.Cache;
using TFX.Core.Reflections;
using TFX.Core.Service.Job;
using TFX.Core.Service.SVC;
using Projecao.Core.PCR.DB;
using TFX.Core.Model.DIC.SVC;
using TFX.Core.Model.DIC.ORM;
using TFX.Core.Model.Services;
using TFX.Core.Model.DIC.Types;
using TFX.Core.Model.Interfaces;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Projecao.Core.PCR.Pasto
{
    [XRegister(typeof(ElementoSVC), sCID)]
    [XDASESource(@"D:\Tootega\Source\TFX20\Modules\Projecao.Core.PCR\Projecao.Core.PCR.csproj", @"D:\Tootega\Source\TFX20\Modules\Projecao.Core.PCR\Pasto\Elemento.dssvc")]
    public class ElementoSVC : XSVCModel
    {
        public const String sCID = "3BBE0FC3-E07C-40F6-8F17-19D1778822C1";
        public static Guid gCID = new Guid(sCID);
        public static XSVCReference PCRxElementoTipo_PCRxElementoTipoID_PCRxElemento_PCRxElementoTipoID; // PCRxElementoTipo.PCRxElementoTipoID --> PCRxElemento.PCRxElementoTipoID

        #region xPCRxElemento 
        public class xPCRxElemento : XSVCTable
        {

            public static Guid gCID => new Guid("19380496-87B7-4DF0-8ECD-7276DC49851E");

            public xPCRxElemento()
            {
                Name = "PCRxElemento";
                Alias = "PCRxElemento";
                ID = gCID;
                ParentID =  global::Projecao.Core.PCR.DB.PCRx.PCRxElemento.gCID;

                Items.Add(PCRxElementoID, PCRxElementoID.ID);
                PCRxElementoID.Owner = this;
                PCRxElementoID.OwnerID = ID;
                PCRxElementoID.TableName = Name;
                PCRxElementoID.Alias = "PCRxElementoID";
                Items.Add(PCRxPastoID, PCRxPastoID.ID);
                PCRxPastoID.Owner = this;
                PCRxPastoID.OwnerID = ID;
                PCRxPastoID.TableName = Name;
                PCRxPastoID.Alias = "PCRxPastoID";
                Items.Add(PCRxElementoTipoID, PCRxElementoTipoID.ID);
                PCRxElementoTipoID.Owner = this;
                PCRxElementoTipoID.OwnerID = ID;
                PCRxElementoTipoID.TableName = Name;
                PCRxElementoTipoID.Alias = "PCRxElementoTipoID";
                Items.Add(Latitude, Latitude.ID);
                Latitude.Owner = this;
                Latitude.OwnerID = ID;
                Latitude.TableName = Name;
                Latitude.Alias = "Latitude";
                Items.Add(Longitude, Longitude.ID);
                Longitude.Owner = this;
                Longitude.OwnerID = ID;
                Longitude.TableName = Name;
                Longitude.Alias = "Longitude";
                Items.Add(Nome, Nome.ID);
                Nome.Owner = this;
                Nome.OwnerID = ID;
                Nome.TableName = Name;
                Nome.Alias = "Nome";
            }

            public static XORMPKField PCRxElementoID = new XORMPKField(global::Projecao.Core.PCR.DB.PCRx.PCRxElemento.PCRxElementoID, new Guid("0E2D9D55-C136-4603-B5C9-95DD6841C30F"), "PCRxElementoID", "Elemento");
            public static XORMFKField PCRxPastoID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxElemento.PCRxPastoID, new Guid("E17022D9-1DB0-4491-9C7A-64451F3C8B53"), "PCRxPastoID", "Pasto");
            public static XORMFKField PCRxElementoTipoID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxElemento.PCRxElementoTipoID, new Guid("27745653-2185-41BA-850A-5971C35EA31A"), "PCRxElementoTipoID", "Tipo de Elemento");
            public static XORMDecimalField Latitude = new XORMDecimalField(global::Projecao.Core.PCR.DB.PCRx.PCRxElemento.Latitude, new Guid("452239A8-3D95-4DFD-934A-DADB820CCDA2"), "Latitude", "Latitude");
            public static XORMDecimalField Longitude = new XORMDecimalField(global::Projecao.Core.PCR.DB.PCRx.PCRxElemento.Longitude, new Guid("29E70E4A-8945-415D-AC14-E82D2C8FD7F0"), "Longitude", "Longitude");
            public static XORMField Nome = new XORMField(global::Projecao.Core.PCR.DB.PCRx.PCRxElemento.Nome, new Guid("C8C4A6FB-0362-4371-92D4-773AF0C659F5"), "Nome", "Nome");
        }
        #endregion xPCRxElemento 


        #region xPCRxElementoTipo 
        public class xPCRxElementoTipo : XSVCTable
        {

            public static Guid gCID => new Guid("FFF767A0-3A8F-4683-A825-902EDF25DFE7");

            public xPCRxElementoTipo()
            {
                Name = "PCRxElementoTipo";
                Alias = "PCRxElementoTipo";
                ID = gCID;
                ParentID =  global::Projecao.Core.PCR.DB.PCRx.PCRxElementoTipo.gCID;

                Items.Add(PCRxElementoTipoID, PCRxElementoTipoID.ID);
                PCRxElementoTipoID.Owner = this;
                PCRxElementoTipoID.OwnerID = ID;
                PCRxElementoTipoID.TableName = Name;
                Items.Add(Tipo, Tipo.ID);
                Tipo.Owner = this;
                Tipo.OwnerID = ID;
                Tipo.TableName = Name;
                Tipo.Alias = "Tipo";
            }

            public static XORMPKField PCRxElementoTipoID = new XORMPKField(global::Projecao.Core.PCR.DB.PCRx.PCRxElementoTipo.PCRxElementoTipoID, new Guid("41B4B876-584D-4B49-9104-11236F4B024C"), "PCRxElementoTipoID", "Tipo de Elemento");
            public static XORMFaceField Tipo = new XORMFaceField(global::Projecao.Core.PCR.DB.PCRx.PCRxElementoTipo.Tipo, new Guid("6AC47F98-23A2-4B0D-9E57-09641CC57CDC"), "Tipo", "Tipo de Elemento");
        }
        #endregion xPCRxElementoTipo 


        public xPCRxElemento PCRxElemento;
        public xPCRxElementoTipo PCRxElementoTipo;

        public ElementoSVC()
        {
            TupleType = typeof(ElementoSVC.XTuple);
            DataSetType = typeof(ElementoSVC.XDataSet);
            ServiceRuleCID = new Guid("C092B284-2256-46D2-A6AC-D1C9372F32BC");
            OnlyActives = false;
            Actions = XSVCAction.All;
            Type = XServiceType.Default;
            ID = new Guid("3BBE0FC3-E07C-40F6-8F17-19D1778822C1");
            Name = "Elemento";
            Title = "";
            IsCacheable = false;
            CompanyControl = false;
            IsJob = false;
            AutoLoad = true;
            FreeForUsers = false;
            ServerSideNewRecord = false;
            UseDistinct = false;
            JobType = XJobType.Default;
            CanExport = false;
            ModuleID = new Guid("02C4E7C5-1B4F-43DB-AC6C-CD36BBE428B7");
            Rights = new Int16[] { 1, 2, 3, 4, 5, 6, 7 }; 
            IsReadOnly = false;
            ClientScript = "Projecao.Core.PCR.js";
            GridFields = new Guid[] { xPCRxElemento.Nome.ID, xPCRxElementoTipo.Tipo.ID };
            OrderByFields = new Guid[] { xPCRxElementoTipo.Tipo.ID };
            DataSetFields = new Guid[] { xPCRxElementoTipo.Tipo.ID, xPCRxElemento.Longitude.ID, xPCRxElemento.Latitude.ID, xPCRxElemento.PCRxElementoTipoID.ID, xPCRxElemento.PCRxPastoID.ID, xPCRxElemento.PCRxElementoID.ID, xPCRxElemento.Nome.ID };
            PKField = xPCRxElemento.PCRxElementoID.ID;
            ConfigTableID = new Guid("BF9E5FD3-798E-4C18-85B2-CD3B90535A56");
            MasterRuleCID = new Guid("C092B284-2256-46D2-A6AC-D1C9372F32BC");
            PCRxElemento = new xPCRxElemento();
            PCRxElemento.IsReadOnly = false;
            AddTable(PCRxElemento);
            PCRxElementoTipo = new xPCRxElementoTipo();
            PCRxElementoTipo.IsReadOnly = true;
            AddTable(PCRxElementoTipo);
            MasterTableID = PCRxElemento.ID;
            PCRxElementoTipo_PCRxElementoTipoID_PCRxElemento_PCRxElementoTipoID = AddReference(new XSVCReference(new Guid("7826D6F5-490F-4A49-95AA-E51E87FF53EA"), "FK_7826D6F5490F4A4995AAE51E87FF53EA", ElementoSVC.xPCRxElementoTipo.gCID, xPCRxElementoTipo.PCRxElementoTipoID.ID, ElementoSVC.xPCRxElemento.gCID, xPCRxElemento.PCRxElementoTipoID.ID, XJoinType.Inner)); // PCRxElementoTipo.PCRxElementoTipoID --> PCRxElemento.PCRxElementoTipoID
            xPCRxElemento.Latitude.Length = 20;
            xPCRxElemento.Latitude.Scale = 10;
            xPCRxElemento.Latitude.IsDataField = true;
            xPCRxElemento.Latitude.AllowEmpty = true;
            xPCRxElemento.Longitude.Length = 20;
            xPCRxElemento.Longitude.Scale = 10;
            xPCRxElemento.Longitude.IsDataField = true;
            xPCRxElemento.Longitude.AllowEmpty = true;
            xPCRxElemento.Nome.Length = 25;
            xPCRxElemento.Nome.IsDataField = true;
            xPCRxElemento.Nome.AllowEmpty = true;
            xPCRxElemento.PCRxElementoID.GeneratePK = true;
            xPCRxElemento.PCRxElementoID.IsDataField = true;
            xPCRxElemento.PCRxElementoID.AllowEmpty = true;
            xPCRxElemento.PCRxElementoTipoID.IsDataField = true;
            xPCRxElemento.PCRxElementoTipoID.AllowEmpty = true;
            xPCRxElemento.PCRxPastoID.IsDataField = true;
            xPCRxElemento.PCRxPastoID.AllowEmpty = true;
            xPCRxElementoTipo.Tipo.IsReadOnly = true;
            xPCRxElementoTipo.Tipo.OrderType = XOrderType.Asc;
            xPCRxElementoTipo.Tipo.Length = 25;
            xPCRxElementoTipo.Tipo.IsDataField = true;
            xPCRxElementoTipo.Tipo.AllowEmpty = true;
        }

        #region XFields

        public class XFields
        {
        public XORMField Latitude => xPCRxElemento.Latitude;
        public XORMField Longitude => xPCRxElemento.Longitude;
        public XORMField Nome => xPCRxElemento.Nome;
        public XORMField PCRxElementoID => xPCRxElemento.PCRxElementoID;
        public XORMField PCRxElementoTipoID => xPCRxElemento.PCRxElementoTipoID;
        public XORMField PCRxPastoID => xPCRxElemento.PCRxPastoID;
        public XORMField Tipo => xPCRxElementoTipo.Tipo;
        }
        #endregion XFields
        #region ElementoSVC.XTuple

        public  class XTuple : XDataTuple
        {

            public XTuple()
            {
            }

            public XTuple(Object[] pSource)
                : base(pSource)
            {
            }

            public XTuple(Int32 pColCount)
               : this(new Object[pColCount])
            {
            }

            public readonly XFields Fields = new XFields();

            #nullable enable

        public Decimal Latitude
        {
            get
            {
                return (Decimal)Value[ElementoSVC.xPCRxElemento.Latitude.ID];
            }
            set
            {
                Value[ElementoSVC.xPCRxElemento.Latitude.ID] = value;
            }
        }
        public Decimal? oLatitude
        {
            get
            {
                GetOldValue(ElementoSVC.xPCRxElemento.Latitude, out Object ovlr);
                return (Decimal?)ovlr;
            }
        }

        public Decimal Longitude
        {
            get
            {
                return (Decimal)Value[ElementoSVC.xPCRxElemento.Longitude.ID];
            }
            set
            {
                Value[ElementoSVC.xPCRxElemento.Longitude.ID] = value;
            }
        }
        public Decimal? oLongitude
        {
            get
            {
                GetOldValue(ElementoSVC.xPCRxElemento.Longitude, out Object ovlr);
                return (Decimal?)ovlr;
            }
        }

        public String Nome
        {
            get
            {
                return (String)Value[ElementoSVC.xPCRxElemento.Nome.ID];
            }
            set
            {
                Value[ElementoSVC.xPCRxElemento.Nome.ID] = value;
            }
        }
        public String? oNome
        {
            get
            {
                GetOldValue(ElementoSVC.xPCRxElemento.Nome, out Object ovlr);
                return (String?)ovlr;
            }
        }

        public Int32 PCRxElementoID
        {
            get
            {
                return (Int32)Value[ElementoSVC.xPCRxElemento.PCRxElementoID.ID];
            }
            set
            {
                Value[ElementoSVC.xPCRxElemento.PCRxElementoID.ID] = value;
            }
        }
        public Int32? oPCRxElementoID
        {
            get
            {
                GetOldValue(ElementoSVC.xPCRxElemento.PCRxElementoID, out Object ovlr);
                return (Int32?)ovlr;
            }
        }

        public Int16 PCRxElementoTipoID
        {
            get
            {
                return (Int16)Value[ElementoSVC.xPCRxElemento.PCRxElementoTipoID.ID];
            }
            set
            {
                Value[ElementoSVC.xPCRxElemento.PCRxElementoTipoID.ID] = value;
            }
        }
        public Int16? oPCRxElementoTipoID
        {
            get
            {
                GetOldValue(ElementoSVC.xPCRxElemento.PCRxElementoTipoID, out Object ovlr);
                return (Int16?)ovlr;
            }
        }

        public Int32 PCRxPastoID
        {
            get
            {
                return (Int32)Value[ElementoSVC.xPCRxElemento.PCRxPastoID.ID];
            }
            set
            {
                Value[ElementoSVC.xPCRxElemento.PCRxPastoID.ID] = value;
            }
        }
        public Int32? oPCRxPastoID
        {
            get
            {
                GetOldValue(ElementoSVC.xPCRxElemento.PCRxPastoID, out Object ovlr);
                return (Int32?)ovlr;
            }
        }

        public String Tipo
        {
            get
            {
                return (String)Value[ElementoSVC.xPCRxElementoTipo.Tipo.ID];
            }
            set
            {
                Value[ElementoSVC.xPCRxElementoTipo.Tipo.ID] = value;
            }
        }
        public String? oTipo
        {
            get
            {
                GetOldValue(ElementoSVC.xPCRxElementoTipo.Tipo, out Object ovlr);
                return (String?)ovlr;
            }
        }

            #nullable disable
        }
        #endregion ElementoSVC.XTuple

        #region ElementoSVC.XRule
        public abstract class XRule : XServiceRule<ElementoSVC.XDataSet, ElementoSVC, ElementoSVC.XTuple>
        {
        }
        #endregion ElementoSVC.XRule

        #region ElementoSVC.XDataSet

        public class XDataSet : XDataSet<ElementoSVC.XTuple>
        {
            public XDataSet()
            {
                DataSetType = typeof(ElementoSVC.XDataSet);
            }
        }

        public class XDataSet<T> : XServiceDataSet<ElementoSVC.XTuple> where T : XDataTuple
        {

            public Guid Latitude => ElementoSVC.xPCRxElemento.Latitude.ID;
            public Guid Longitude => ElementoSVC.xPCRxElemento.Longitude.ID;
            public Guid Nome => ElementoSVC.xPCRxElemento.Nome.ID;
            public Guid PCRxElementoID => ElementoSVC.xPCRxElemento.PCRxElementoID.ID;
            public Guid PCRxElementoTipoID => ElementoSVC.xPCRxElemento.PCRxElementoTipoID.ID;
            public Guid PCRxPastoID => ElementoSVC.xPCRxElemento.PCRxPastoID.ID;
            public Guid Tipo => ElementoSVC.xPCRxElementoTipo.Tipo.ID;

            public XDataSet()
            {
                DataSetType = typeof(ElementoSVC.XDataSet);
            }

        }
        #endregion ElementoSVC.XDataSet

        [Guid(ElementoSVC.sCID)]
        public  interface XService : XIBaseService
        {
            new XDataSet DataSet
            {
                get;
            }
            new XTuple NewTuple(Object pPKValue = null);
             IEnumerable<XTuple> Tuples
            {
                get;
            }
             XTuple Current
            {
                get;
            }
            new XDataSet Get(XServiceData pData);
             XDataSet Get(params Object[] pWhere);
        }
        [XRegister(typeof(_Service), _Service.sCID, typeof(ElementoSVC))]
        protected class _Service : Service<ElementoSVC, XDataSet, XTuple>
        {
            public const String sCID = "898EE2D5-D28E-42CE-BC1F-7EDBACA04B07";
            public Guid gCID = new Guid(sCID);
        }

        public class Service<TModel, TDataSet, TTuple> : XBaseService<ElementoSVC, XDataSet, XTuple>, XService
             where TModel : ElementoSVC, new()
             where TDataSet : XDataSet, new()
             where TTuple : XTuple
        {
            XDataSet XService.DataSet => (XDataSet)DataSet;
            XTuple XService.NewTuple(Object pPKValue)
            {
                return (XTuple)NewTuple(pPKValue);
            }
            public new XDataTuple NewTuple(Object pPKValue = null)
            {
                return (XTuple)base.NewTuple(pPKValue);
            }
            IEnumerable<XTuple> XService.Tuples => (IEnumerable<XTuple>)Tuples;
            XTuple XService.Current => (XTuple )Current;
            XDataSet XService.Get(XServiceData pData)
            {
                return (XDataSet)Get(pData);
            }
            XDataSet XService.Get(params Object[] pWhere)
            {
                return (XDataSet)Get(pWhere);
            }
            public Service()
            {
                ID = gCID;
            }
        }
    }

}