//<auto-generated/>
using System;
using System.Linq;
using Newtonsoft.Json;
using TFX.Core.Objects;
using TFX.Core.Model.Data;
using TFX.Core.Model.Cache;
using TFX.Core.Reflections;
using TFX.Core.Service.Job;
using TFX.Core.Service.SVC;
using Projecao.Core.PCR.DB;
using TFX.Core.Model.DIC.SVC;
using TFX.Core.Model.DIC.ORM;
using TFX.Core.Model.DIC.FRM;
using TFX.Core.Model.DIC.APP;
using TFX.Core.Model.DIC.RPT;
using TFX.Core.Model.Services;
using Projecao.Core.PCR.Pasto;
using TFX.Core.Model.DIC.Types;
using TFX.Core.Model.Interfaces;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Projecao.Core.PCR.Pasto
{
    [XRegister(typeof(PastoSVC), sCID)]
    [XDASESource(@"D:\Tootega\Source\TFX20\Modules\Projecao.Core.PCR\Projecao.Core.PCR.csproj", @"D:\Tootega\Source\TFX20\Modules\Projecao.Core.PCR\Pasto\Pasto.dssvc")]
    public class PastoSVC : XSVCModel
    {
        #region PastoFilterFRM

        [XRegister(typeof(PastoFilterFRM), sCID)]
        public class PastoFilterFRM : XFRMModel
        {
            public const String sCID = "8FDB388B-F349-4182-96AB-2691BF8970D2";
            static PastoFilterFRM()
            {
                gCID = new Guid(sCID);
            }
            public PastoFilterFRM()
            {
                ID = gCID;
                Name = "PastoFilter";
                Title = "";
                MinRows = 1;
                ConfigCID = new Guid("00000000-0000-0000-0000-000000000000");
                ConfigPKFilter = false;
                Rect = new XRect(20, 20, 965, 678);
                Style = XFRMStyle.Normal;
                ActionContext = XActionContext.All;
                AddItem(Nome);
                Nome.ForceRW = true;
                Nome.CanInsert = true;
                Nome.CanUpdate = true;
                Nome.RowCount = 1;
                Nome.ColCount = 32;
                Nome.RowCountSmall = 1;
                Nome.ColCountSmall = 32;
                Nome.IsHidden = false;
                Nome.IsHiddenSmall = false;
                Nome.AdditionalTitle = "";
                Nome.Location = 1;
                Nome.EditorCID = new Guid("AA2A0DB9-2C59-4833-994D-3DBF2AA0CB3C");
                Nome.FormImplace = true;
                Nome.Operator = XOperator.EqualTo;
                Nome.JustifyHeight = false;
                Nome.AllowEmpty = true;
                Nome.FontColor = "#000000";
                Nome.FontStyle = XFontStyle.Normal;
                Nome.ShowFooter = false;
                Nome.ViewSAM = new Guid("00000000-0000-0000-0000-000000000000");
                Nome.Scale = 0;
                Nome.Length = 50;
                Nome.SearchAction = XSearchAction.Default;
                Nome.TypeID = XString.CID;
                Nome.AdditionalFieldsID = new Guid[] {  };
                Nome.AdditionalDataFieldsID = new Guid[] {  };
                Nome.TargetFilterFieldID = new Guid[] {  };
                Nome.SourceFilterFieldID = new Guid[] {  };
                Nome.TargetDisplayFieldID = new Guid[] {  };
                Nome.SourceDisplayFieldID = new Guid[] {  };
                Nome.AutoLoad = false;
                Nome.ApplicationID = new Guid("00000000-0000-0000-0000-000000000000");
                Nome.FilterInative = true;
                Nome.IsAnswer = false;
                Nome.AllowMultiSelect = false;
            }
            public XFRMField Nome = new XFRMField(new Guid("DDF9E09C-484D-4A6D-97EE-A39B4E18CD17"), "Nome", "Nome", XString.CID, 1, 32, false, gCID, null, new Guid("18867553-BF9B-4125-91C2-2EFBBA250307")); // String;
            public static class Fields
            {
                public static XFieldInfo Nome = new XFieldInfo(new Guid("DDF9E09C-484D-4A6D-97EE-A39B4E18CD17"), "Nome", "Nome", typeof(String));
            }
        }

        #endregion PastoFilterFRM

        public const String sCID = "DE279D40-A909-421A-9A8B-BA77DD13A0CD";
        public static Guid gCID = new Guid(sCID);
        public static XSVCReference PCRxRetiro_PCRxRetiroID_PCRxPasto_PCRxRetiroID; // PCRxRetiro.PCRxRetiroID --> PCRxPasto.PCRxRetiroID

        #region xPCRxRetiro 
        public class xPCRxRetiro : XSVCTable
        {

            public static Guid gCID => new Guid("53A934DF-E1F2-4164-BEC4-B58F07B0CA82");

            public xPCRxRetiro()
            {
                Name = "PCRxRetiro";
                Alias = "PCRxRetiro";
                ID = gCID;
                ParentID =  global::Projecao.Core.PCR.DB.PCRx.PCRxRetiro.gCID;

                Items.Add(PCRxRetiroID, PCRxRetiroID.ID);
                PCRxRetiroID.Owner = this;
                PCRxRetiroID.OwnerID = ID;
                PCRxRetiroID.TableName = Name;
                Items.Add(Nome, Nome.ID);
                Nome.Owner = this;
                Nome.OwnerID = ID;
                Nome.TableName = Name;
                Nome.Alias = "NomeRetiro";
                Items.Add(SYSxEmpresaID, SYSxEmpresaID.ID);
                SYSxEmpresaID.Owner = this;
                SYSxEmpresaID.OwnerID = ID;
                SYSxEmpresaID.TableName = Name;
                Items.Add(Latitude, Latitude.ID);
                Latitude.Owner = this;
                Latitude.OwnerID = ID;
                Latitude.TableName = Name;
                Items.Add(Longitude, Longitude.ID);
                Longitude.Owner = this;
                Longitude.OwnerID = ID;
                Longitude.TableName = Name;
                Items.Add(CoordenadasArea, CoordenadasArea.ID);
                CoordenadasArea.Owner = this;
                CoordenadasArea.OwnerID = ID;
                CoordenadasArea.TableName = Name;
            }

            public static XORMPKField PCRxRetiroID = new XORMPKField(global::Projecao.Core.PCR.DB.PCRx.PCRxRetiro.PCRxRetiroID, new Guid("256F3FB4-4F17-4CEA-8D33-3CD1BD95A9A9"), "PCRxRetiroID", "Retiro");
            public static XORMField Nome = new XORMField(global::Projecao.Core.PCR.DB.PCRx.PCRxRetiro.Nome, new Guid("88790478-FBDE-41C0-8194-60344EF1823A"), "Nome", "Retiro");
            public static XORMFKField SYSxEmpresaID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxRetiro.SYSxEmpresaID, new Guid("CD2CA885-83C4-40B6-B02B-D2D49D08C7C0"), "SYSxEmpresaID", "Empresa");
            public static XORMDecimalField Latitude = new XORMDecimalField(global::Projecao.Core.PCR.DB.PCRx.PCRxRetiro.Latitude, new Guid("404441EE-21A7-45E2-9391-17D0E1268B7C"), "Latitude", "Latitude");
            public static XORMDecimalField Longitude = new XORMDecimalField(global::Projecao.Core.PCR.DB.PCRx.PCRxRetiro.Longitude, new Guid("C377B88F-BA23-4113-97FE-FFB17DF48BEE"), "Longitude", "Longitude");
            public static XORMField CoordenadasArea = new XORMField(global::Projecao.Core.PCR.DB.PCRx.PCRxRetiro.CoordenadasArea, new Guid("4A94BEDC-309A-439D-A1DE-C999E8B54CFA"), "CoordenadasArea", "Coordenadas da Área");
        }
        #endregion xPCRxRetiro 


        #region xPCRxPasto 
        public class xPCRxPasto : XSVCTable
        {

            public static Guid gCID => new Guid("D4804627-64A1-4026-BD5A-E00F2FBE8621");

            public xPCRxPasto()
            {
                Name = "PCRxPasto";
                Alias = "PCRxPasto";
                ID = gCID;
                ParentID =  global::Projecao.Core.PCR.DB.PCRx.PCRxPasto.gCID;

                Items.Add(PCRxPastoID, PCRxPastoID.ID);
                PCRxPastoID.Owner = this;
                PCRxPastoID.OwnerID = ID;
                PCRxPastoID.TableName = Name;
                PCRxPastoID.Alias = "PCRxPastoID";
                Items.Add(Nome, Nome.ID);
                Nome.Owner = this;
                Nome.OwnerID = ID;
                Nome.TableName = Name;
                Nome.Alias = "Nome";
                Items.Add(Area, Area.ID);
                Area.Owner = this;
                Area.OwnerID = ID;
                Area.TableName = Name;
                Area.Alias = "Area";
                Items.Add(PCRxRetiroID, PCRxRetiroID.ID);
                PCRxRetiroID.Owner = this;
                PCRxRetiroID.OwnerID = ID;
                PCRxRetiroID.TableName = Name;
                PCRxRetiroID.Alias = "PCRxRetiroID";
                Items.Add(Latitude, Latitude.ID);
                Latitude.Owner = this;
                Latitude.OwnerID = ID;
                Latitude.TableName = Name;
                Latitude.Alias = "Latitude";
                Items.Add(Longitude, Longitude.ID);
                Longitude.Owner = this;
                Longitude.OwnerID = ID;
                Longitude.TableName = Name;
                Longitude.Alias = "Longitude";
                Items.Add(CoordenadasArea, CoordenadasArea.ID);
                CoordenadasArea.Owner = this;
                CoordenadasArea.OwnerID = ID;
                CoordenadasArea.TableName = Name;
                CoordenadasArea.Alias = "CoordenadasArea";
            }

            public static XORMPKField PCRxPastoID = new XORMPKField(global::Projecao.Core.PCR.DB.PCRx.PCRxPasto.PCRxPastoID, new Guid("580C2106-D474-4C9A-9DE0-FD7BDA844667"), "PCRxPastoID", "Pasto");
            public static XORMField Nome = new XORMField(global::Projecao.Core.PCR.DB.PCRx.PCRxPasto.Nome, new Guid("18867553-BF9B-4125-91C2-2EFBBA250307"), "Nome", "Nome");
            public static XORMField Area = new XORMField(global::Projecao.Core.PCR.DB.PCRx.PCRxPasto.Area, new Guid("93E61B41-FD37-4C26-B162-A07FD8A438E5"), "Area", "Área (ha)");
            public static XORMFKField PCRxRetiroID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxPasto.PCRxRetiroID, new Guid("172AF8B9-25A3-4724-B4F0-4D9FC076C1C9"), "PCRxRetiroID", "Retiro");
            public static XORMDecimalField Latitude = new XORMDecimalField(global::Projecao.Core.PCR.DB.PCRx.PCRxPasto.Latitude, new Guid("BBEFC6FC-6D03-4207-98E6-68140DED3C8A"), "Latitude", "Latitude");
            public static XORMDecimalField Longitude = new XORMDecimalField(global::Projecao.Core.PCR.DB.PCRx.PCRxPasto.Longitude, new Guid("1F86C29A-692F-4E13-8EEB-551A115780F1"), "Longitude", "Longitude");
            public static XORMField CoordenadasArea = new XORMField(global::Projecao.Core.PCR.DB.PCRx.PCRxPasto.CoordenadasArea, new Guid("A66127F4-83B9-4485-9C3C-9BB40B7DF5DA"), "CoordenadasArea", "Coordenadas da Área");
        }
        #endregion xPCRxPasto 


        public xPCRxPasto PCRxPasto;
        public xPCRxRetiro PCRxRetiro;
        public static readonly XORMParameterField Animais = new XORMParameterField(new Guid("AF166731-FF1C-4D63-ACC1-0C35C2F95E6B"), "Animais", "Animais", XInt32.CID, 0, 0, false, gCID, null);

        public PastoSVC()
        {
            TupleType = typeof(PastoSVC.XTuple);
            DataSetType = typeof(PastoSVC.XDataSet);
            ServiceRuleCID = new Guid("D3C94C87-233C-4412-B02A-0CF87F53AB3B");
            OnlyActives = false;
            Actions = XSVCAction.All;
            Type = XServiceType.Default;
            ID = new Guid("DE279D40-A909-421A-9A8B-BA77DD13A0CD");
            Name = "Pasto";
            Title = "";
            IsCacheable = false;
            CompanyControl = false;
            IsJob = false;
            AutoLoad = true;
            FreeForUsers = false;
            ServerSideNewRecord = false;
            UseDistinct = false;
            JobType = XJobType.Default;
            CanExport = false;
            ModuleID = new Guid("02C4E7C5-1B4F-43DB-AC6C-CD36BBE428B7");
            Rights = new Int16[] { 1, 2, 3, 4, 5, 6, 7 }; 
            FilterFormID = new Guid("8FDB388B-F349-4182-96AB-2691BF8970D2");
            IsReadOnly = false;
            ClientScript = "Projecao.Core.PCR.js";
            GridFields = new Guid[] { xPCRxPasto.Nome.ID, xPCRxPasto.Area.ID, Animais.ID, xPCRxRetiro.Nome.ID };
            OrderByFields = new Guid[] { xPCRxPasto.Nome.ID, xPCRxPasto.Area.ID };
            DataSetFields = new Guid[] { xPCRxPasto.Area.ID, xPCRxPasto.Nome.ID, xPCRxPasto.PCRxRetiroID.ID, xPCRxPasto.PCRxPastoID.ID, xPCRxRetiro.Nome.ID, Animais.ID, xPCRxPasto.Longitude.ID, xPCRxPasto.Latitude.ID, xPCRxPasto.CoordenadasArea.ID };
            PKField = xPCRxPasto.PCRxPastoID.ID;
            ConfigTableID = new Guid("9E612729-ECC6-47BA-938E-E3B80F180157");
            MasterRuleCID = new Guid("D3C94C87-233C-4412-B02A-0CF87F53AB3B");
            XSubServiceItem ss96173E7009C24007825120741180EC69 = new XSubServiceItem(ElementoSVC.gCID, ElementoSVC.xPCRxElemento.PCRxPastoID.ID, PastoSVC.gCID, xPCRxPasto.PCRxPastoID.ID, false, XSubSeviceType.Default);
            ss96173E7009C24007825120741180EC69.Rights = new Int16[] { 1, 2, 3, 4, 5, 6, 7 }; 
            ss96173E7009C24007825120741180EC69.LateLoad = false;
            SubServices.Add(ss96173E7009C24007825120741180EC69);
            PCRxPasto = new xPCRxPasto();
            PCRxPasto.IsReadOnly = false;
            AddTable(PCRxPasto);
            PCRxRetiro = new xPCRxRetiro();
            PCRxRetiro.IsReadOnly = true;
            AddTable(PCRxRetiro);
            MasterTableID = PCRxPasto.ID;
            PCRxRetiro_PCRxRetiroID_PCRxPasto_PCRxRetiroID = AddReference(new XSVCReference(new Guid("23F7E0AB-6378-46E4-A736-872DD5347474"), "FK_23F7E0AB637846E4A736872DD5347474", PastoSVC.xPCRxRetiro.gCID, xPCRxRetiro.PCRxRetiroID.ID, PastoSVC.xPCRxPasto.gCID, xPCRxPasto.PCRxRetiroID.ID, XJoinType.Inner)); // PCRxRetiro.PCRxRetiroID --> PCRxPasto.PCRxRetiroID
            XSVCReference FK_987538AEF8554039970BFAF6B49B87F3 = new XSVCReference(new Guid("987538AE-F855-4039-970B-FAF6B49B87F3"), "FK_987538AEF8554039970BFAF6B49B87F3", ElementoSVC.gCID, ElementoSVC.xPCRxElemento.PCRxPastoID.ID, PCRxPasto.ID, PastoSVC.xPCRxPasto.PCRxPastoID.ID, XJoinType.SubService); // ElementoSVC.PCRxPastoID --> Pasto.PCRxPastoID
            FK_987538AEF8554039970BFAF6B49B87F3.IsLowRelevance = false;
            AddReference(FK_987538AEF8554039970BFAF6B49B87F3);
            AddField(Animais);
            Animais.IsParam = true;
            Animais.IsReadOnly = false;
            Animais.Length = 0;
            Animais.Scale = 0;
            Animais.IsDataField = true;
            Animais.AllowEmpty = true;
            xPCRxPasto.Area.OrderType = XOrderType.Asc;
            xPCRxPasto.Area.IsDataField = true;
            xPCRxPasto.Area.AllowEmpty = true;
            xPCRxPasto.CoordenadasArea.IsDataField = true;
            xPCRxPasto.CoordenadasArea.AllowEmpty = true;
            xPCRxPasto.Latitude.Length = 20;
            xPCRxPasto.Latitude.Scale = 10;
            xPCRxPasto.Latitude.IsDataField = true;
            xPCRxPasto.Latitude.AllowEmpty = true;
            xPCRxPasto.Longitude.Length = 20;
            xPCRxPasto.Longitude.Scale = 10;
            xPCRxPasto.Longitude.IsDataField = true;
            xPCRxPasto.Longitude.AllowEmpty = true;
            xPCRxPasto.Nome.OrderType = XOrderType.Asc;
            xPCRxPasto.Nome.Length = 50;
            xPCRxPasto.Nome.IsDataField = true;
            xPCRxPasto.Nome.FilterUse = true;
            xPCRxPasto.Nome.AllowEmpty = true;
            xPCRxRetiro.Nome.IsReadOnly = true;
            xPCRxRetiro.Nome.Length = 30;
            xPCRxRetiro.Nome.IsDataField = true;
            xPCRxRetiro.Nome.FilterUse = true;
            xPCRxRetiro.Nome.AllowEmpty = true;
            xPCRxPasto.PCRxPastoID.GeneratePK = true;
            xPCRxPasto.PCRxPastoID.IsDataField = true;
            xPCRxPasto.PCRxPastoID.AllowEmpty = true;
            xPCRxPasto.PCRxRetiroID.IsDataField = true;
            xPCRxPasto.PCRxRetiroID.AllowEmpty = true;
        }

        #region XFields

        public class XFields
        {
        public XORMField Animais => PastoSVC.Animais;
        public XORMField Area => xPCRxPasto.Area;
        public XORMField CoordenadasArea => xPCRxPasto.CoordenadasArea;
        public XORMField Latitude => xPCRxPasto.Latitude;
        public XORMField Longitude => xPCRxPasto.Longitude;
        public XORMField Nome => xPCRxPasto.Nome;
        public XORMField NomeRetiro => xPCRxRetiro.Nome;
        public XORMField PCRxPastoID => xPCRxPasto.PCRxPastoID;
        public XORMField PCRxRetiroID => xPCRxPasto.PCRxRetiroID;
        }
        #endregion XFields
        #region PastoSVC.XTuple

        public  class XTuple : XDataTuple
        {

            public XTuple()
            {
            }

            public XTuple(Object[] pSource)
                : base(pSource)
            {
            }

            public XTuple(Int32 pColCount)
               : this(new Object[pColCount])
            {
            }

            public readonly XFields Fields = new XFields();

            #nullable enable

        public Int32 Animais
        {
            get
            {
                return (Int32)Value[PastoSVC.Animais.ID];
            }
            set
            {
                Value[PastoSVC.Animais.ID] = value;
            }
        }
        public Int32? oAnimais
        {
            get
            {
                GetOldValue(PastoSVC.Animais, out Object ovlr);
                return (Int32?)ovlr;
            }
        }

        public Int32 Area
        {
            get
            {
                return (Int32)Value[PastoSVC.xPCRxPasto.Area.ID];
            }
            set
            {
                Value[PastoSVC.xPCRxPasto.Area.ID] = value;
            }
        }
        public Int32? oArea
        {
            get
            {
                GetOldValue(PastoSVC.xPCRxPasto.Area, out Object ovlr);
                return (Int32?)ovlr;
            }
        }

        public String CoordenadasArea
        {
            get
            {
                return (String)Value[PastoSVC.xPCRxPasto.CoordenadasArea.ID];
            }
            set
            {
                Value[PastoSVC.xPCRxPasto.CoordenadasArea.ID] = value;
            }
        }
        public String? oCoordenadasArea
        {
            get
            {
                GetOldValue(PastoSVC.xPCRxPasto.CoordenadasArea, out Object ovlr);
                return (String?)ovlr;
            }
        }

        public Decimal Latitude
        {
            get
            {
                return (Decimal)Value[PastoSVC.xPCRxPasto.Latitude.ID];
            }
            set
            {
                Value[PastoSVC.xPCRxPasto.Latitude.ID] = value;
            }
        }
        public Decimal? oLatitude
        {
            get
            {
                GetOldValue(PastoSVC.xPCRxPasto.Latitude, out Object ovlr);
                return (Decimal?)ovlr;
            }
        }

        public Decimal Longitude
        {
            get
            {
                return (Decimal)Value[PastoSVC.xPCRxPasto.Longitude.ID];
            }
            set
            {
                Value[PastoSVC.xPCRxPasto.Longitude.ID] = value;
            }
        }
        public Decimal? oLongitude
        {
            get
            {
                GetOldValue(PastoSVC.xPCRxPasto.Longitude, out Object ovlr);
                return (Decimal?)ovlr;
            }
        }

        public String Nome
        {
            get
            {
                return (String)Value[PastoSVC.xPCRxPasto.Nome.ID];
            }
            set
            {
                Value[PastoSVC.xPCRxPasto.Nome.ID] = value;
            }
        }
        public String? oNome
        {
            get
            {
                GetOldValue(PastoSVC.xPCRxPasto.Nome, out Object ovlr);
                return (String?)ovlr;
            }
        }

        public String NomeRetiro
        {
            get
            {
                return (String)Value[PastoSVC.xPCRxRetiro.Nome.ID];
            }
            set
            {
                Value[PastoSVC.xPCRxRetiro.Nome.ID] = value;
            }
        }
        public String? oNomeRetiro
        {
            get
            {
                GetOldValue(PastoSVC.xPCRxRetiro.Nome, out Object ovlr);
                return (String?)ovlr;
            }
        }

        public Int32 PCRxPastoID
        {
            get
            {
                return (Int32)Value[PastoSVC.xPCRxPasto.PCRxPastoID.ID];
            }
            set
            {
                Value[PastoSVC.xPCRxPasto.PCRxPastoID.ID] = value;
            }
        }
        public Int32? oPCRxPastoID
        {
            get
            {
                GetOldValue(PastoSVC.xPCRxPasto.PCRxPastoID, out Object ovlr);
                return (Int32?)ovlr;
            }
        }

        public Int32 PCRxRetiroID
        {
            get
            {
                return (Int32)Value[PastoSVC.xPCRxPasto.PCRxRetiroID.ID];
            }
            set
            {
                Value[PastoSVC.xPCRxPasto.PCRxRetiroID.ID] = value;
            }
        }
        public Int32? oPCRxRetiroID
        {
            get
            {
                GetOldValue(PastoSVC.xPCRxPasto.PCRxRetiroID, out Object ovlr);
                return (Int32?)ovlr;
            }
        }

            #nullable disable
        }
        #endregion PastoSVC.XTuple

        #region PastoSVC.XRule
        public abstract class XRule : XServiceRule<PastoSVC.XDataSet, PastoSVC, PastoSVC.XTuple>
        {
        }
        #endregion PastoSVC.XRule

        #region PastoSVC.XDataSet

        public class XDataSet : XDataSet<PastoSVC.XTuple>
        {
            public XDataSet()
            {
                DataSetType = typeof(PastoSVC.XDataSet);
            }
        }

        public class XDataSet<T> : XServiceDataSet<PastoSVC.XTuple> where T : XDataTuple
        {

            public Guid Animais => PastoSVC.Animais.ID;
            public Guid Area => PastoSVC.xPCRxPasto.Area.ID;
            public Guid CoordenadasArea => PastoSVC.xPCRxPasto.CoordenadasArea.ID;
            public Guid Latitude => PastoSVC.xPCRxPasto.Latitude.ID;
            public Guid Longitude => PastoSVC.xPCRxPasto.Longitude.ID;
            public Guid Nome => PastoSVC.xPCRxPasto.Nome.ID;
            public Guid NomeRetiro => PastoSVC.xPCRxRetiro.Nome.ID;
            public Guid PCRxPastoID => PastoSVC.xPCRxPasto.PCRxPastoID.ID;
            public Guid PCRxRetiroID => PastoSVC.xPCRxPasto.PCRxRetiroID.ID;

            public XDataSet()
            {
                DataSetType = typeof(PastoSVC.XDataSet);
            }

            private Projecao.Core.PCR.Pasto.ElementoSVC.XDataSet _ElementoDataSet;

            public Projecao.Core.PCR.Pasto.ElementoSVC.XDataSet ElementoDataSet
            {
                get
                {
                    if (_ElementoDataSet == null)
                    {
                        _ElementoDataSet = (Projecao.Core.PCR.Pasto.ElementoSVC.XDataSet)Children.Get(Projecao.Core.PCR.Pasto.ElementoSVC.gCID);
                    }
                    return  _ElementoDataSet;
                }
            }

        }
        #endregion PastoSVC.XDataSet

        [Guid(PastoSVC.sCID)]
        public  interface XService : XIBaseService
        {
            new XDataSet DataSet
            {
                get;
            }
            new XTuple NewTuple(Object pPKValue = null);
             IEnumerable<XTuple> Tuples
            {
                get;
            }
             XTuple Current
            {
                get;
            }
            new XDataSet Get(XServiceData pData);
             XDataSet Get(params Object[] pWhere);
        }
        [XRegister(typeof(_Service), _Service.sCID, typeof(PastoSVC))]
        protected class _Service : Service<PastoSVC, XDataSet, XTuple>
        {
            public const String sCID = "35885D8E-DCC2-4408-9729-22CB2B5A5DD0";
            public Guid gCID = new Guid(sCID);
        }

        public class Service<TModel, TDataSet, TTuple> : XBaseService<PastoSVC, XDataSet, XTuple>, XService
             where TModel : PastoSVC, new()
             where TDataSet : XDataSet, new()
             where TTuple : XTuple
        {
            XDataSet XService.DataSet => (XDataSet)DataSet;
            XTuple XService.NewTuple(Object pPKValue)
            {
                return (XTuple)NewTuple(pPKValue);
            }
            public new XDataTuple NewTuple(Object pPKValue = null)
            {
                return (XTuple)base.NewTuple(pPKValue);
            }
            IEnumerable<XTuple> XService.Tuples => (IEnumerable<XTuple>)Tuples;
            XTuple XService.Current => (XTuple )Current;
            XDataSet XService.Get(XServiceData pData)
            {
                return (XDataSet)Get(pData);
            }
            XDataSet XService.Get(params Object[] pWhere)
            {
                return (XDataSet)Get(pWhere);
            }
            public Service()
            {
                ID = gCID;
            }
        }
    }

}