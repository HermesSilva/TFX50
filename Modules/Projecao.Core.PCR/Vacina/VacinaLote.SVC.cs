//<auto-generated/>
using System;
using System.Linq;
using Newtonsoft.Json;
using TFX.Core.Objects;
using TFX.Core.Model.Data;
using TFX.Core.Model.Cache;
using TFX.Core.Reflections;
using TFX.Core.Service.Job;
using TFX.Core.Service.SVC;
using Projecao.Core.ISE.DB;
using TFX.Core.Model.DIC.SVC;
using TFX.Core.Model.DIC.ORM;
using TFX.Core.Model.Services;
using TFX.Core.Model.DIC.Types;
using TFX.Core.Model.Interfaces;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Projecao.Core.PCR.Vacina
{
    [XRegister(typeof(VacinaLoteSVC), sCID)]
    [XDASESource(@"D:\Tootega\Source\TFX20\Modules\Projecao.Core.PCR\Projecao.Core.PCR.csproj", @"D:\Tootega\Source\TFX20\Modules\Projecao.Core.PCR\Vacina\VacinaLote.dssvc")]
    public class VacinaLoteSVC : XSVCModel
    {
        public const String sCID = "816D853E-C65F-48D6-BE72-C0DABC7DC0CB";
        public static Guid gCID = new Guid(sCID);

        #region xISExLote 
        public class xISExLote : XSVCTable
        {

            public static Guid gCID => new Guid("3AD2FEFA-2D10-437F-A048-F6C580CD920D");

            public xISExLote()
            {
                Name = "ISExLote";
                Alias = "ISExLote";
                ID = gCID;
                ParentID =  global::Projecao.Core.ISE.DB.ISEx.ISExLote.gCID;

                Items.Add(ISExLoteID, ISExLoteID.ID);
                ISExLoteID.Owner = this;
                ISExLoteID.OwnerID = ID;
                ISExLoteID.TableName = Name;
                ISExLoteID.Alias = "ISExLoteID";
                Items.Add(Numero, Numero.ID);
                Numero.Owner = this;
                Numero.OwnerID = ID;
                Numero.TableName = Name;
                Numero.Alias = "Numero";
                Items.Add(Fabricacao, Fabricacao.ID);
                Fabricacao.Owner = this;
                Fabricacao.OwnerID = ID;
                Fabricacao.TableName = Name;
                Fabricacao.Alias = "Fabricacao";
                Items.Add(Validade, Validade.ID);
                Validade.Owner = this;
                Validade.OwnerID = ID;
                Validade.TableName = Name;
                Validade.Alias = "Validade";
                Items.Add(ISExItemID, ISExItemID.ID);
                ISExItemID.Owner = this;
                ISExItemID.OwnerID = ID;
                ISExItemID.TableName = Name;
                ISExItemID.Alias = "ISExItemID";
            }

            public static XORMPKField ISExLoteID = new XORMPKField(global::Projecao.Core.ISE.DB.ISEx.ISExLote.ISExLoteID, new Guid("2FD56F0B-2AD7-48A7-B04A-469B97A81A65"), "ISExLoteID", "Lote");
            public static XORMField Numero = new XORMField(global::Projecao.Core.ISE.DB.ISEx.ISExLote.Numero, new Guid("0FEB1D9C-70F2-4EC6-B269-C21DA3EF9B0E"), "Numero", "Número do Lote");
            public static XORMDateField Fabricacao = new XORMDateField(global::Projecao.Core.ISE.DB.ISEx.ISExLote.Fabricacao, new Guid("A2315082-1BEA-424C-BE37-72808DCB8243"), "Fabricacao", "Fabricação");
            public static XORMDateField Validade = new XORMDateField(global::Projecao.Core.ISE.DB.ISEx.ISExLote.Validade, new Guid("29A2DFFC-1D47-4443-A607-C2599D68CF8F"), "Validade", "Validade");
            public static XORMFKField ISExItemID = new XORMFKField(global::Projecao.Core.ISE.DB.ISEx.ISExLote.ISExItemID, new Guid("78AB2DD8-7FAE-41E9-A9C0-5FD8A54CD3D0"), "ISExItemID", "Item");
        }
        #endregion xISExLote 


        public xISExLote ISExLote;

        public VacinaLoteSVC()
        {
            TupleType = typeof(VacinaLoteSVC.XTuple);
            DataSetType = typeof(VacinaLoteSVC.XDataSet);
            ServiceRuleCID = new Guid("BAF5114F-BDEF-4E0B-9B63-545C6E439252");
            OnlyActives = false;
            Actions = XSVCAction.All;
            Type = XServiceType.Default;
            ID = new Guid("816D853E-C65F-48D6-BE72-C0DABC7DC0CB");
            Name = "VacinaLote";
            Title = "";
            IsCacheable = false;
            CompanyControl = false;
            IsJob = false;
            AutoLoad = true;
            FreeForUsers = false;
            ServerSideNewRecord = false;
            UseDistinct = false;
            JobType = XJobType.Default;
            CanExport = false;
            ModuleID = new Guid("02C4E7C5-1B4F-43DB-AC6C-CD36BBE428B7");
            Rights = new Int16[] { 1, 2, 3, 4, 5, 6, 7 }; 
            IsReadOnly = false;
            ClientScript = "Projecao.Core.PCR.js";
            GridFields = new Guid[] { xISExLote.Numero.ID, xISExLote.Fabricacao.ID, xISExLote.Validade.ID };
            DataSetFields = new Guid[] { xISExLote.ISExLoteID.ID, xISExLote.Numero.ID, xISExLote.Fabricacao.ID, xISExLote.Validade.ID, xISExLote.ISExItemID.ID };
            PKField = xISExLote.ISExLoteID.ID;
            ConfigTableID = new Guid("B3297762-79BA-42E9-B066-64594E92A572");
            MasterRuleCID = new Guid("BAF5114F-BDEF-4E0B-9B63-545C6E439252");
            ISExLote = new xISExLote();
            ISExLote.IsReadOnly = false;
            AddTable(ISExLote);
            MasterTableID = ISExLote.ID;
            xISExLote.Fabricacao.IsDataField = true;
            xISExLote.Fabricacao.AllowEmpty = true;
            xISExLote.ISExItemID.IsDataField = true;
            xISExLote.ISExItemID.AllowEmpty = true;
            xISExLote.ISExLoteID.GeneratePK = true;
            xISExLote.ISExLoteID.IsDataField = true;
            xISExLote.ISExLoteID.AllowEmpty = true;
            xISExLote.Numero.Length = 20;
            xISExLote.Numero.IsDataField = true;
            xISExLote.Numero.AllowEmpty = true;
            xISExLote.Validade.IsDataField = true;
            xISExLote.Validade.AllowEmpty = true;
        }

        #region XFields

        public class XFields
        {
        public XORMField Fabricacao => xISExLote.Fabricacao;
        public XORMField ISExItemID => xISExLote.ISExItemID;
        public XORMField ISExLoteID => xISExLote.ISExLoteID;
        public XORMField Numero => xISExLote.Numero;
        public XORMField Validade => xISExLote.Validade;
        }
        #endregion XFields
        #region VacinaLoteSVC.XTuple

        public  class XTuple : XDataTuple
        {

            public XTuple()
            {
            }

            public XTuple(Object[] pSource)
                : base(pSource)
            {
            }

            public XTuple(Int32 pColCount)
               : this(new Object[pColCount])
            {
            }

            public readonly XFields Fields = new XFields();

            #nullable enable

        public DateTime Fabricacao
        {
            get
            {
                return (DateTime)Value[VacinaLoteSVC.xISExLote.Fabricacao.ID];
            }
            set
            {
                Value[VacinaLoteSVC.xISExLote.Fabricacao.ID] = value;
            }
        }
        public DateTime? oFabricacao
        {
            get
            {
                GetOldValue(VacinaLoteSVC.xISExLote.Fabricacao, out Object ovlr);
                return (DateTime?)ovlr;
            }
        }

        public Guid ISExItemID
        {
            get
            {
                return (Guid)Value[VacinaLoteSVC.xISExLote.ISExItemID.ID];
            }
            set
            {
                Value[VacinaLoteSVC.xISExLote.ISExItemID.ID] = value;
            }
        }
        public Guid? oISExItemID
        {
            get
            {
                GetOldValue(VacinaLoteSVC.xISExLote.ISExItemID, out Object ovlr);
                return (Guid?)ovlr;
            }
        }

        public Guid ISExLoteID
        {
            get
            {
                return (Guid)Value[VacinaLoteSVC.xISExLote.ISExLoteID.ID];
            }
            set
            {
                Value[VacinaLoteSVC.xISExLote.ISExLoteID.ID] = value;
            }
        }
        public Guid? oISExLoteID
        {
            get
            {
                GetOldValue(VacinaLoteSVC.xISExLote.ISExLoteID, out Object ovlr);
                return (Guid?)ovlr;
            }
        }

        public String Numero
        {
            get
            {
                return (String)Value[VacinaLoteSVC.xISExLote.Numero.ID];
            }
            set
            {
                Value[VacinaLoteSVC.xISExLote.Numero.ID] = value;
            }
        }
        public String? oNumero
        {
            get
            {
                GetOldValue(VacinaLoteSVC.xISExLote.Numero, out Object ovlr);
                return (String?)ovlr;
            }
        }

        public DateTime Validade
        {
            get
            {
                return (DateTime)Value[VacinaLoteSVC.xISExLote.Validade.ID];
            }
            set
            {
                Value[VacinaLoteSVC.xISExLote.Validade.ID] = value;
            }
        }
        public DateTime? oValidade
        {
            get
            {
                GetOldValue(VacinaLoteSVC.xISExLote.Validade, out Object ovlr);
                return (DateTime?)ovlr;
            }
        }

            #nullable disable
        }
        #endregion VacinaLoteSVC.XTuple

        #region VacinaLoteSVC.XRule
        public abstract class XRule : XServiceRule<VacinaLoteSVC.XDataSet, VacinaLoteSVC, VacinaLoteSVC.XTuple>
        {
        }
        #endregion VacinaLoteSVC.XRule

        #region VacinaLoteSVC.XDataSet

        public class XDataSet : XDataSet<VacinaLoteSVC.XTuple>
        {
            public XDataSet()
            {
                DataSetType = typeof(VacinaLoteSVC.XDataSet);
            }
        }

        public class XDataSet<T> : XServiceDataSet<VacinaLoteSVC.XTuple> where T : XDataTuple
        {

            public Guid Fabricacao => VacinaLoteSVC.xISExLote.Fabricacao.ID;
            public Guid ISExItemID => VacinaLoteSVC.xISExLote.ISExItemID.ID;
            public Guid ISExLoteID => VacinaLoteSVC.xISExLote.ISExLoteID.ID;
            public Guid Numero => VacinaLoteSVC.xISExLote.Numero.ID;
            public Guid Validade => VacinaLoteSVC.xISExLote.Validade.ID;

            public XDataSet()
            {
                DataSetType = typeof(VacinaLoteSVC.XDataSet);
            }

        }
        #endregion VacinaLoteSVC.XDataSet

        [Guid(VacinaLoteSVC.sCID)]
        public  interface XService : XIBaseService
        {
            new XDataSet DataSet
            {
                get;
            }
            new XTuple NewTuple(Object pPKValue = null);
             IEnumerable<XTuple> Tuples
            {
                get;
            }
             XTuple Current
            {
                get;
            }
            new XDataSet Get(XServiceData pData);
             XDataSet Get(params Object[] pWhere);
        }
        [XRegister(typeof(_Service), _Service.sCID, typeof(VacinaLoteSVC))]
        protected class _Service : Service<VacinaLoteSVC, XDataSet, XTuple>
        {
            public const String sCID = "F21922EF-9A43-40A8-BFEA-9862866B632F";
            public Guid gCID = new Guid(sCID);
        }

        public class Service<TModel, TDataSet, TTuple> : XBaseService<VacinaLoteSVC, XDataSet, XTuple>, XService
             where TModel : VacinaLoteSVC, new()
             where TDataSet : XDataSet, new()
             where TTuple : XTuple
        {
            XDataSet XService.DataSet => (XDataSet)DataSet;
            XTuple XService.NewTuple(Object pPKValue)
            {
                return (XTuple)NewTuple(pPKValue);
            }
            public new XDataTuple NewTuple(Object pPKValue = null)
            {
                return (XTuple)base.NewTuple(pPKValue);
            }
            IEnumerable<XTuple> XService.Tuples => (IEnumerable<XTuple>)Tuples;
            XTuple XService.Current => (XTuple )Current;
            XDataSet XService.Get(XServiceData pData)
            {
                return (XDataSet)Get(pData);
            }
            XDataSet XService.Get(params Object[] pWhere)
            {
                return (XDataSet)Get(pWhere);
            }
            public Service()
            {
                ID = gCID;
            }
        }
    }

}