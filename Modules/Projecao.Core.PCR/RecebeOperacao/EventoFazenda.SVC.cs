//<auto-generated/>
using System;
using System.Linq;
using Newtonsoft.Json;
using TFX.Core.Objects;
using TFX.Core.Model.Data;
using TFX.Core.Model.Cache;
using TFX.Core.Reflections;
using TFX.Core.Service.Job;
using TFX.Core.Service.SVC;
using Projecao.Core.PCR.DB;
using TFX.Core.Model.DIC.SVC;
using TFX.Core.Model.DIC.ORM;
using TFX.Core.Model.Services;
using TFX.Core.Model.DIC.Types;
using TFX.Core.Model.Interfaces;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Projecao.Core.PCR.RecebeOperacao
{
    [XRegister(typeof(EventoFazendaSVC), sCID)]
    [XDASESource(@"D:\Tootega\Source\TFX20\Modules\Projecao.Core.PCR\Projecao.Core.PCR.csproj", @"D:\Tootega\Source\TFX20\Modules\Projecao.Core.PCR\RecebeOperacao\EventoFazenda.dssvc")]
    public class EventoFazendaSVC : XSVCModel
    {
        public const String sCID = "9F40B65B-ABE4-48FC-A61F-DC6846FC561B";
        public static Guid gCID = new Guid(sCID);
        public static XSVCReference PCRxEventoFazenda_PCRxEventoFazendaID_PCRxEvento_PCRxEventoID; // PCRxEventoFazenda.PCRxEventoFazendaID --> PCRxEvento.PCRxEventoID

        #region xPCRxEvento 
        public class xPCRxEvento : XSVCTable
        {

            public static Guid gCID => new Guid("2C452226-5F62-46EF-877C-DF077DB82351");

            public xPCRxEvento()
            {
                Name = "PCRxEvento";
                Alias = "PCRxEvento";
                ID = gCID;
                ParentID =  global::Projecao.Core.PCR.DB.PCRx.PCRxEvento.gCID;

                Items.Add(PCRxEventoID, PCRxEventoID.ID);
                PCRxEventoID.Owner = this;
                PCRxEventoID.OwnerID = ID;
                PCRxEventoID.TableName = Name;
                PCRxEventoID.Alias = "PCRxEventoID";
                Items.Add(Data, Data.ID);
                Data.Owner = this;
                Data.OwnerID = ID;
                Data.TableName = Name;
                Data.Alias = "Data";
                Items.Add(Observacao, Observacao.ID);
                Observacao.Owner = this;
                Observacao.OwnerID = ID;
                Observacao.TableName = Name;
                Observacao.Alias = "Observacao";
                Items.Add(PCRxEventoTipoID, PCRxEventoTipoID.ID);
                PCRxEventoTipoID.Owner = this;
                PCRxEventoTipoID.OwnerID = ID;
                PCRxEventoTipoID.TableName = Name;
                PCRxEventoTipoID.Alias = "PCRxEventoTipoID";
                Items.Add(NTRxMobilePontoDestaqueID, NTRxMobilePontoDestaqueID.ID);
                NTRxMobilePontoDestaqueID.Owner = this;
                NTRxMobilePontoDestaqueID.OwnerID = ID;
                NTRxMobilePontoDestaqueID.TableName = Name;
                NTRxMobilePontoDestaqueID.Alias = "NTRxMobilePontoDestaqueID";
                Items.Add(Latitude, Latitude.ID);
                Latitude.Owner = this;
                Latitude.OwnerID = ID;
                Latitude.TableName = Name;
                Latitude.Alias = "Latitude";
                Items.Add(Longitude, Longitude.ID);
                Longitude.Owner = this;
                Longitude.OwnerID = ID;
                Longitude.TableName = Name;
                Longitude.Alias = "Longitude";
                Items.Add(CTLxUsuarioID, CTLxUsuarioID.ID);
                CTLxUsuarioID.Owner = this;
                CTLxUsuarioID.OwnerID = ID;
                CTLxUsuarioID.TableName = Name;
                CTLxUsuarioID.Alias = "CTLxUsuarioID";
            }

            public static XORMFaceField PCRxEventoID = new XORMFaceField(global::Projecao.Core.PCR.DB.PCRx.PCRxEvento.PCRxEventoID, new Guid("2BF02824-3568-4B73-8A3C-E05E48A191E9"), "PCRxEventoID", "Evento");
            public static XORMDateField Data = new XORMDateField(global::Projecao.Core.PCR.DB.PCRx.PCRxEvento.Data, new Guid("B8896098-C452-4C15-AB2B-4EF99E9935A8"), "Data", "Data");
            public static XORMField Observacao = new XORMField(global::Projecao.Core.PCR.DB.PCRx.PCRxEvento.Observacao, new Guid("0001050C-53BD-4773-8F8D-809D7083C4B3"), "Observacao", "Observação");
            public static XORMFKField PCRxEventoTipoID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxEvento.PCRxEventoTipoID, new Guid("28DCB57D-F204-4407-A829-5BFF0569F11F"), "PCRxEventoTipoID", "Tipo de Evento");
            public static XORMFKField NTRxMobilePontoDestaqueID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxEvento.NTRxMobilePontoDestaqueID, new Guid("617BC4F5-7C5F-4ADD-9A16-F981BDF8C4A6"), "NTRxMobilePontoDestaqueID", "Ponto de Destaque");
            public static XORMDecimalField Latitude = new XORMDecimalField(global::Projecao.Core.PCR.DB.PCRx.PCRxEvento.Latitude, new Guid("897F0EBC-AD15-4B08-8EC7-657684D7945E"), "Latitude", "Latitude");
            public static XORMDecimalField Longitude = new XORMDecimalField(global::Projecao.Core.PCR.DB.PCRx.PCRxEvento.Longitude, new Guid("E6CA0E31-AFCA-4C55-A94D-26CB2106A549"), "Longitude", "Longitude");
            public static XORMFKField CTLxUsuarioID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxEvento.CTLxUsuarioID, new Guid("0E752375-B88B-42CF-B835-D3F9DC99CF6A"), "CTLxUsuarioID", "Usuário");
        }
        #endregion xPCRxEvento 


        #region xPCRxEventoFazenda 
        public class xPCRxEventoFazenda : XSVCTable
        {

            public static Guid gCID => new Guid("E1636517-1FAE-4C15-86F5-FA0B8B1A4C00");

            public xPCRxEventoFazenda()
            {
                Name = "PCRxEventoFazenda";
                Alias = "PCRxEventoFazenda";
                ID = gCID;
                ParentID =  global::Projecao.Core.PCR.DB.PCRx.PCRxEventoFazenda.gCID;

                Items.Add(PCRxEventoFazendaID, PCRxEventoFazendaID.ID);
                PCRxEventoFazendaID.Owner = this;
                PCRxEventoFazendaID.OwnerID = ID;
                PCRxEventoFazendaID.TableName = Name;
                Items.Add(Resolvido, Resolvido.ID);
                Resolvido.Owner = this;
                Resolvido.OwnerID = ID;
                Resolvido.TableName = Name;
                Resolvido.Alias = "Resolvido";
            }

            public static XORMPKField PCRxEventoFazendaID = new XORMPKField(global::Projecao.Core.PCR.DB.PCRx.PCRxEventoFazenda.PCRxEventoFazendaID, new Guid("97310097-EC7E-40B6-97A3-0DD675D4942A"), "PCRxEventoFazendaID", "Evento da Fazenda");
            public static XORMField Resolvido = new XORMField(global::Projecao.Core.PCR.DB.PCRx.PCRxEventoFazenda.Resolvido, new Guid("EB6DBE9C-6372-43B7-8C8E-5EEFDD9446CD"), "Resolvido", "Resolvido");
        }
        #endregion xPCRxEventoFazenda 


        public xPCRxEvento PCRxEvento;
        public xPCRxEventoFazenda PCRxEventoFazenda;

        public EventoFazendaSVC()
        {
            TupleType = typeof(EventoFazendaSVC.XTuple);
            DataSetType = typeof(EventoFazendaSVC.XDataSet);
            ServiceRuleCID = new Guid("7165F858-E723-4C57-BC2B-20AB85A1D1F4");
            OnlyActives = false;
            Actions = XSVCAction.All;
            Type = XServiceType.Default;
            ID = new Guid("9F40B65B-ABE4-48FC-A61F-DC6846FC561B");
            Name = "EventoFazenda";
            Title = "";
            IsCacheable = false;
            CompanyControl = false;
            IsJob = false;
            AutoLoad = true;
            FreeForUsers = false;
            ServerSideNewRecord = false;
            UseDistinct = false;
            JobType = XJobType.Default;
            CanExport = false;
            ModuleID = new Guid("02C4E7C5-1B4F-43DB-AC6C-CD36BBE428B7");
            Rights = new Int16[] { 1, 2, 3, 4, 5, 6, 7 }; 
            IsReadOnly = false;
            ClientScript = "Projecao.Core.PCR.js";
            DataSetFields = new Guid[] { xPCRxEventoFazenda.Resolvido.ID, xPCRxEvento.Longitude.ID, xPCRxEvento.Latitude.ID, xPCRxEvento.NTRxMobilePontoDestaqueID.ID, xPCRxEvento.PCRxEventoTipoID.ID, xPCRxEvento.Observacao.ID, xPCRxEvento.Data.ID, xPCRxEvento.PCRxEventoID.ID, xPCRxEvento.CTLxUsuarioID.ID };
            PKField = xPCRxEvento.PCRxEventoID.ID;
            ConfigTableID = new Guid("9C81F109-A48B-4008-92F3-F5E06E46099F");
            MasterRuleCID = new Guid("7165F858-E723-4C57-BC2B-20AB85A1D1F4");
            PCRxEvento = new xPCRxEvento();
            PCRxEvento.IsReadOnly = false;
            AddTable(PCRxEvento);
            PCRxEventoFazenda = new xPCRxEventoFazenda();
            PCRxEventoFazenda.IsReadOnly = false;
            AddTable(PCRxEventoFazenda);
            MasterTableID = PCRxEvento.ID;
            PCRxEventoFazenda_PCRxEventoFazendaID_PCRxEvento_PCRxEventoID = AddReference(new XSVCReference(new Guid("E087F546-AB51-426B-A19B-13625F86C43B"), "FK_E087F546AB51426BA19B13625F86C43B", EventoFazendaSVC.xPCRxEventoFazenda.gCID, xPCRxEventoFazenda.PCRxEventoFazendaID.ID, EventoFazendaSVC.xPCRxEvento.gCID, xPCRxEvento.PCRxEventoID.ID, XJoinType.Inner)); // PCRxEventoFazenda.PCRxEventoFazendaID --> PCRxEvento.PCRxEventoID
            xPCRxEvento.CTLxUsuarioID.IsDataField = true;
            xPCRxEvento.CTLxUsuarioID.AllowEmpty = true;
            xPCRxEvento.Data.IsDataField = true;
            xPCRxEvento.Data.AllowEmpty = true;
            xPCRxEvento.Latitude.Length = 20;
            xPCRxEvento.Latitude.Scale = 10;
            xPCRxEvento.Latitude.IsDataField = true;
            xPCRxEvento.Latitude.AllowEmpty = true;
            xPCRxEvento.Longitude.Length = 20;
            xPCRxEvento.Longitude.Scale = 10;
            xPCRxEvento.Longitude.IsDataField = true;
            xPCRxEvento.Longitude.AllowEmpty = true;
            xPCRxEvento.NTRxMobilePontoDestaqueID.IsDataField = true;
            xPCRxEvento.NTRxMobilePontoDestaqueID.AllowEmpty = true;
            xPCRxEvento.Observacao.Length = 200;
            xPCRxEvento.Observacao.IsDataField = true;
            xPCRxEvento.Observacao.AllowEmpty = true;
            xPCRxEvento.PCRxEventoID.GeneratePK = true;
            xPCRxEvento.PCRxEventoID.IsDataField = true;
            xPCRxEvento.PCRxEventoID.AllowEmpty = true;
            xPCRxEvento.PCRxEventoTipoID.IsDataField = true;
            xPCRxEvento.PCRxEventoTipoID.AllowEmpty = true;
            xPCRxEventoFazenda.Resolvido.IsDataField = true;
            xPCRxEventoFazenda.Resolvido.AllowEmpty = true;
        }

        #region XFields

        public class XFields
        {
        public XORMField CTLxUsuarioID => xPCRxEvento.CTLxUsuarioID;
        public XORMField Data => xPCRxEvento.Data;
        public XORMField Latitude => xPCRxEvento.Latitude;
        public XORMField Longitude => xPCRxEvento.Longitude;
        public XORMField NTRxMobilePontoDestaqueID => xPCRxEvento.NTRxMobilePontoDestaqueID;
        public XORMField Observacao => xPCRxEvento.Observacao;
        public XORMField PCRxEventoID => xPCRxEvento.PCRxEventoID;
        public XORMField PCRxEventoTipoID => xPCRxEvento.PCRxEventoTipoID;
        public XORMField Resolvido => xPCRxEventoFazenda.Resolvido;
        }
        #endregion XFields
        #region EventoFazendaSVC.XTuple

        public  class XTuple : XDataTuple
        {

            public XTuple()
            {
            }

            public XTuple(Object[] pSource)
                : base(pSource)
            {
            }

            public XTuple(Int32 pColCount)
               : this(new Object[pColCount])
            {
            }

            public readonly XFields Fields = new XFields();

            #nullable enable

        public Guid CTLxUsuarioID
        {
            get
            {
                return (Guid)Value[EventoFazendaSVC.xPCRxEvento.CTLxUsuarioID.ID];
            }
            set
            {
                Value[EventoFazendaSVC.xPCRxEvento.CTLxUsuarioID.ID] = value;
            }
        }
        public Guid? oCTLxUsuarioID
        {
            get
            {
                GetOldValue(EventoFazendaSVC.xPCRxEvento.CTLxUsuarioID, out Object ovlr);
                return (Guid?)ovlr;
            }
        }

        public DateTime Data
        {
            get
            {
                return (DateTime)Value[EventoFazendaSVC.xPCRxEvento.Data.ID];
            }
            set
            {
                Value[EventoFazendaSVC.xPCRxEvento.Data.ID] = value;
            }
        }
        public DateTime? oData
        {
            get
            {
                GetOldValue(EventoFazendaSVC.xPCRxEvento.Data, out Object ovlr);
                return (DateTime?)ovlr;
            }
        }

        public Decimal Latitude
        {
            get
            {
                return (Decimal)Value[EventoFazendaSVC.xPCRxEvento.Latitude.ID];
            }
            set
            {
                Value[EventoFazendaSVC.xPCRxEvento.Latitude.ID] = value;
            }
        }
        public Decimal? oLatitude
        {
            get
            {
                GetOldValue(EventoFazendaSVC.xPCRxEvento.Latitude, out Object ovlr);
                return (Decimal?)ovlr;
            }
        }

        public Decimal Longitude
        {
            get
            {
                return (Decimal)Value[EventoFazendaSVC.xPCRxEvento.Longitude.ID];
            }
            set
            {
                Value[EventoFazendaSVC.xPCRxEvento.Longitude.ID] = value;
            }
        }
        public Decimal? oLongitude
        {
            get
            {
                GetOldValue(EventoFazendaSVC.xPCRxEvento.Longitude, out Object ovlr);
                return (Decimal?)ovlr;
            }
        }

        public Guid NTRxMobilePontoDestaqueID
        {
            get
            {
                return (Guid)Value[EventoFazendaSVC.xPCRxEvento.NTRxMobilePontoDestaqueID.ID];
            }
            set
            {
                Value[EventoFazendaSVC.xPCRxEvento.NTRxMobilePontoDestaqueID.ID] = value;
            }
        }
        public Guid? oNTRxMobilePontoDestaqueID
        {
            get
            {
                GetOldValue(EventoFazendaSVC.xPCRxEvento.NTRxMobilePontoDestaqueID, out Object ovlr);
                return (Guid?)ovlr;
            }
        }

        public String Observacao
        {
            get
            {
                return (String)Value[EventoFazendaSVC.xPCRxEvento.Observacao.ID];
            }
            set
            {
                Value[EventoFazendaSVC.xPCRxEvento.Observacao.ID] = value;
            }
        }
        public String? oObservacao
        {
            get
            {
                GetOldValue(EventoFazendaSVC.xPCRxEvento.Observacao, out Object ovlr);
                return (String?)ovlr;
            }
        }

        public Guid PCRxEventoID
        {
            get
            {
                return (Guid)Value[EventoFazendaSVC.xPCRxEvento.PCRxEventoID.ID];
            }
            set
            {
                Value[EventoFazendaSVC.xPCRxEvento.PCRxEventoID.ID] = value;
            }
        }
        public Guid? oPCRxEventoID
        {
            get
            {
                GetOldValue(EventoFazendaSVC.xPCRxEvento.PCRxEventoID, out Object ovlr);
                return (Guid?)ovlr;
            }
        }

        public Int16 PCRxEventoTipoID
        {
            get
            {
                return (Int16)Value[EventoFazendaSVC.xPCRxEvento.PCRxEventoTipoID.ID];
            }
            set
            {
                Value[EventoFazendaSVC.xPCRxEvento.PCRxEventoTipoID.ID] = value;
            }
        }
        public Int16? oPCRxEventoTipoID
        {
            get
            {
                GetOldValue(EventoFazendaSVC.xPCRxEvento.PCRxEventoTipoID, out Object ovlr);
                return (Int16?)ovlr;
            }
        }

        public Boolean Resolvido
        {
            get
            {
                return (Boolean)Value[EventoFazendaSVC.xPCRxEventoFazenda.Resolvido.ID];
            }
            set
            {
                Value[EventoFazendaSVC.xPCRxEventoFazenda.Resolvido.ID] = value;
            }
        }
        public Boolean? oResolvido
        {
            get
            {
                GetOldValue(EventoFazendaSVC.xPCRxEventoFazenda.Resolvido, out Object ovlr);
                return (Boolean?)ovlr;
            }
        }

            #nullable disable
        }
        #endregion EventoFazendaSVC.XTuple

        #region EventoFazendaSVC.XRule
        public abstract class XRule : XServiceRule<EventoFazendaSVC.XDataSet, EventoFazendaSVC, EventoFazendaSVC.XTuple>
        {
        }
        #endregion EventoFazendaSVC.XRule

        #region EventoFazendaSVC.XDataSet

        public class XDataSet : XDataSet<EventoFazendaSVC.XTuple>
        {
            public XDataSet()
            {
                DataSetType = typeof(EventoFazendaSVC.XDataSet);
            }
        }

        public class XDataSet<T> : XServiceDataSet<EventoFazendaSVC.XTuple> where T : XDataTuple
        {

            public Guid CTLxUsuarioID => EventoFazendaSVC.xPCRxEvento.CTLxUsuarioID.ID;
            public Guid Data => EventoFazendaSVC.xPCRxEvento.Data.ID;
            public Guid Latitude => EventoFazendaSVC.xPCRxEvento.Latitude.ID;
            public Guid Longitude => EventoFazendaSVC.xPCRxEvento.Longitude.ID;
            public Guid NTRxMobilePontoDestaqueID => EventoFazendaSVC.xPCRxEvento.NTRxMobilePontoDestaqueID.ID;
            public Guid Observacao => EventoFazendaSVC.xPCRxEvento.Observacao.ID;
            public Guid PCRxEventoID => EventoFazendaSVC.xPCRxEvento.PCRxEventoID.ID;
            public Guid PCRxEventoTipoID => EventoFazendaSVC.xPCRxEvento.PCRxEventoTipoID.ID;
            public Guid Resolvido => EventoFazendaSVC.xPCRxEventoFazenda.Resolvido.ID;

            public XDataSet()
            {
                DataSetType = typeof(EventoFazendaSVC.XDataSet);
            }

        }
        #endregion EventoFazendaSVC.XDataSet

        [Guid(EventoFazendaSVC.sCID)]
        public  interface XService : XIBaseService
        {
            new XDataSet DataSet
            {
                get;
            }
            new XTuple NewTuple(Object pPKValue = null);
             IEnumerable<XTuple> Tuples
            {
                get;
            }
             XTuple Current
            {
                get;
            }
            new XDataSet Get(XServiceData pData);
             XDataSet Get(params Object[] pWhere);
        }
        [XRegister(typeof(_Service), _Service.sCID, typeof(EventoFazendaSVC))]
        protected class _Service : Service<EventoFazendaSVC, XDataSet, XTuple>
        {
            public const String sCID = "1E116940-7725-486B-B6AC-418D25D0DEDB";
            public Guid gCID = new Guid(sCID);
        }

        public class Service<TModel, TDataSet, TTuple> : XBaseService<EventoFazendaSVC, XDataSet, XTuple>, XService
             where TModel : EventoFazendaSVC, new()
             where TDataSet : XDataSet, new()
             where TTuple : XTuple
        {
            XDataSet XService.DataSet => (XDataSet)DataSet;
            XTuple XService.NewTuple(Object pPKValue)
            {
                return (XTuple)NewTuple(pPKValue);
            }
            public new XDataTuple NewTuple(Object pPKValue = null)
            {
                return (XTuple)base.NewTuple(pPKValue);
            }
            IEnumerable<XTuple> XService.Tuples => (IEnumerable<XTuple>)Tuples;
            XTuple XService.Current => (XTuple )Current;
            XDataSet XService.Get(XServiceData pData)
            {
                return (XDataSet)Get(pData);
            }
            XDataSet XService.Get(params Object[] pWhere)
            {
                return (XDataSet)Get(pWhere);
            }
            public Service()
            {
                ID = gCID;
            }
        }
    }

}