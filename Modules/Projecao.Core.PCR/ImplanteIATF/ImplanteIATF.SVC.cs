//<auto-generated/>
using System;
using System.Linq;
using Newtonsoft.Json;
using TFX.Core.Objects;
using TFX.Core.Model.Data;
using TFX.Core.Model.Cache;
using TFX.Core.Reflections;
using TFX.Core.Service.Job;
using TFX.Core.Service.SVC;
using Projecao.Core.ISE.DB;
using TFX.Core.Model.DIC.SVC;
using TFX.Core.Model.DIC.ORM;
using TFX.Core.Model.DIC.FRM;
using TFX.Core.Model.DIC.APP;
using TFX.Core.Model.DIC.RPT;
using TFX.Core.Model.Services;
using TFX.Core.Model.DIC.Types;
using Projecao.Core.PCR.Vacina;
using TFX.Core.Model.Interfaces;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using Projecao.Core.PCR.ImplanteIATF;

namespace Projecao.Core.PCR.ImplanteIATF
{
    [XRegister(typeof(ImplanteIATFSVC), sCID)]
    [XDASESource(@"D:\Tootega\Source\TFX20\Modules\Projecao.Core.PCR\Projecao.Core.PCR.csproj", @"D:\Tootega\Source\TFX20\Modules\Projecao.Core.PCR\ImplanteIATF\ImplanteIATF.dssvc")]
    public class ImplanteIATFSVC : XSVCModel
    {
        #region ImplanteIATFFilterFRM

        [XRegister(typeof(ImplanteIATFFilterFRM), sCID)]
        public class ImplanteIATFFilterFRM : XFRMModel
        {
            public const String sCID = "D10077B8-1DFD-4E54-B629-4C660C0E2661";
            static ImplanteIATFFilterFRM()
            {
                gCID = new Guid(sCID);
            }
            public ImplanteIATFFilterFRM()
            {
                ID = gCID;
                Name = "ImplanteIATFFilter";
                Title = "";
                MinRows = 1;
                ConfigCID = new Guid("00000000-0000-0000-0000-000000000000");
                ConfigPKFilter = false;
                Rect = new XRect(20, 20, 965, 678);
                Style = XFRMStyle.Normal;
                ActionContext = XActionContext.All;
                AddItem(Nome);
                Nome.ForceRW = true;
                Nome.CanInsert = true;
                Nome.CanUpdate = true;
                Nome.RowCount = 1;
                Nome.ColCount = 32;
                Nome.RowCountSmall = 1;
                Nome.ColCountSmall = 32;
                Nome.IsHidden = false;
                Nome.IsHiddenSmall = false;
                Nome.AdditionalTitle = "";
                Nome.Location = 1;
                Nome.EditorCID = new Guid("F5982E79-BA45-40FB-85E1-9F2C8B90B6EF");
                Nome.FormImplace = true;
                Nome.Operator = XOperator.Like;
                Nome.JustifyHeight = false;
                Nome.AllowEmpty = true;
                Nome.FontColor = "#000000";
                Nome.FontStyle = XFontStyle.Normal;
                Nome.ShowFooter = false;
                Nome.ViewSAM = new Guid("00000000-0000-0000-0000-000000000000");
                Nome.Scale = 0;
                Nome.Length = 60;
                Nome.SearchAction = XSearchAction.Default;
                Nome.TypeID = XString.CID;
                Nome.AdditionalFieldsID = new Guid[] {  };
                Nome.AdditionalDataFieldsID = new Guid[] {  };
                Nome.TargetFilterFieldID = new Guid[] {  };
                Nome.SourceFilterFieldID = new Guid[] {  };
                Nome.TargetDisplayFieldID = new Guid[] {  };
                Nome.SourceDisplayFieldID = new Guid[] {  };
                Nome.AutoLoad = false;
                Nome.ApplicationID = new Guid("00000000-0000-0000-0000-000000000000");
                Nome.FilterInative = true;
                Nome.IsAnswer = false;
                Nome.AllowMultiSelect = false;
            }
            public XFRMField Nome = new XFRMField(new Guid("B797E5FE-1C58-4287-8656-AF299C8E7038"), "Nome", "Nome do Implante para IATF", XString.CID, 1, 32, false, gCID, null, new Guid("AB185ED9-3D02-4157-B7C6-C70B8E17E605")); // String;
            public static class Fields
            {
                public static XFieldInfo Nome = new XFieldInfo(new Guid("B797E5FE-1C58-4287-8656-AF299C8E7038"), "Nome", "Nome do Implante para IATF", typeof(String));
            }
        }

        #endregion ImplanteIATFFilterFRM

        public const String sCID = "3E6FD0BE-2156-448F-8D9A-A305F5E682BB";
        public static Guid gCID = new Guid(sCID);
        public static XSVCReference ISExItemCategoria_ISExItemID_ISExItem_ISExItemID; // ISExItemCategoria.ISExItemID --> ISExItem.ISExItemID

        #region xISExItem 
        public class xISExItem : XSVCTable
        {

            public static Guid gCID => new Guid("888CF8AF-E35F-4823-BA16-F4C9022C8054");

            public xISExItem()
            {
                Name = "ISExItem";
                Alias = "ISExItem";
                ID = gCID;
                ParentID =  global::Projecao.Core.ISE.DB.ISEx.ISExItem.gCID;

                Items.Add(ISExItemID, ISExItemID.ID);
                ISExItemID.Owner = this;
                ISExItemID.OwnerID = ID;
                ISExItemID.TableName = Name;
                ISExItemID.Alias = "ISExItemID";
                Items.Add(Nome, Nome.ID);
                Nome.Owner = this;
                Nome.OwnerID = ID;
                Nome.TableName = Name;
                Nome.Alias = "Nome";
                Items.Add(ISExLinhaID, ISExLinhaID.ID);
                ISExLinhaID.Owner = this;
                ISExLinhaID.OwnerID = ID;
                ISExLinhaID.TableName = Name;
                ISExLinhaID.Alias = "ISExLinhaID";
                Items.Add(ISExTabelaID, ISExTabelaID.ID);
                ISExTabelaID.Owner = this;
                ISExTabelaID.OwnerID = ID;
                ISExTabelaID.TableName = Name;
                ISExTabelaID.Alias = "ISExTabelaID";
                Items.Add(ISExFabricanteID, ISExFabricanteID.ID);
                ISExFabricanteID.Owner = this;
                ISExFabricanteID.OwnerID = ID;
                ISExFabricanteID.TableName = Name;
                ISExFabricanteID.Alias = "ISExFabricanteID";
                Items.Add(ISExMarcaID, ISExMarcaID.ID);
                ISExMarcaID.Owner = this;
                ISExMarcaID.OwnerID = ID;
                ISExMarcaID.TableName = Name;
                ISExMarcaID.Alias = "ISExMarcaID";
                Items.Add(ISExGrupoID, ISExGrupoID.ID);
                ISExGrupoID.Owner = this;
                ISExGrupoID.OwnerID = ID;
                ISExGrupoID.TableName = Name;
                ISExGrupoID.Alias = "ISExGrupoID";
                Items.Add(SYSxEstadoID, SYSxEstadoID.ID);
                SYSxEstadoID.Owner = this;
                SYSxEstadoID.OwnerID = ID;
                SYSxEstadoID.TableName = Name;
                SYSxEstadoID.Alias = "SYSxEstadoID";
                Items.Add(ProdutoID, ProdutoID.ID);
                ProdutoID.Owner = this;
                ProdutoID.OwnerID = ID;
                ProdutoID.TableName = Name;
                ProdutoID.Alias = "ProdutoID";
            }

            public static XORMFaceField ISExItemID = new XORMFaceField(global::Projecao.Core.ISE.DB.ISEx.ISExItem.ISExItemID, new Guid("979E54A4-971E-4D6D-BD3E-415EFE470FC1"), "ISExItemID", "Lotes do Implante para IATF");
            public static XORMField Nome = new XORMField(global::Projecao.Core.ISE.DB.ISEx.ISExItem.Nome, new Guid("AB185ED9-3D02-4157-B7C6-C70B8E17E605"), "Nome", "Nome do Implante para IATF");
            public static XORMFKField ISExLinhaID = new XORMFKField(global::Projecao.Core.ISE.DB.ISEx.ISExItem.ISExLinhaID, new Guid("471BB1B6-4B41-40B9-99AA-48541B853052"), "ISExLinhaID", "Linha");
            public static XORMFKField ISExTabelaID = new XORMFKField(global::Projecao.Core.ISE.DB.ISEx.ISExItem.ISExTabelaID, new Guid("37E515F9-7EBD-4F7E-8E1C-BDB44ED67757"), "ISExTabelaID", "Tabela");
            public static XORMFKField ISExFabricanteID = new XORMFKField(global::Projecao.Core.ISE.DB.ISEx.ISExItem.ISExFabricanteID, new Guid("F8E6BFD1-159C-4B43-983C-2D8923705A56"), "ISExFabricanteID", "Fabricante");
            public static XORMFKField ISExMarcaID = new XORMFKField(global::Projecao.Core.ISE.DB.ISEx.ISExItem.ISExMarcaID, new Guid("6F189EB4-2864-4066-9975-361BC1F867D0"), "ISExMarcaID", "Marca");
            public static XORMFKField ISExGrupoID = new XORMFKField(global::Projecao.Core.ISE.DB.ISEx.ISExItem.ISExGrupoID, new Guid("67FC6E31-E94A-4F51-833B-0CD8DA486638"), "ISExGrupoID", "Grupo");
            public static XORMStateField SYSxEstadoID = new XORMStateField(global::Projecao.Core.ISE.DB.ISEx.ISExItem.SYSxEstadoID, new Guid("6B7A7584-0EF0-4532-945F-4EED49E37E98"), "SYSxEstadoID", "Estado");
            public static XORMField ProdutoID = new XORMField(global::Projecao.Core.ISE.DB.ISEx.ISExItem.ProdutoID, new Guid("98510F50-90C5-457B-A5D8-FAFD77DEEBB5"), "ProdutoID", "CÃ³digo Legado");
        }
        #endregion xISExItem 


        #region xISExItemCategoria 
        public class xISExItemCategoria : XSVCTable
        {

            public static Guid gCID => new Guid("CDEECD88-2C13-42E5-9B9C-42E854C39859");

            public xISExItemCategoria()
            {
                Name = "ISExItemCategoria";
                Alias = "ISExItemCategoria";
                ID = gCID;
                ParentID =  global::Projecao.Core.ISE.DB.ISEx.ISExItemCategoria.gCID;

                Items.Add(ISExItemCategoriaID, ISExItemCategoriaID.ID);
                ISExItemCategoriaID.Owner = this;
                ISExItemCategoriaID.OwnerID = ID;
                ISExItemCategoriaID.TableName = Name;
                Items.Add(ISExCategoriaID, ISExCategoriaID.ID);
                ISExCategoriaID.Owner = this;
                ISExCategoriaID.OwnerID = ID;
                ISExCategoriaID.TableName = Name;
                Items.Add(ISExItemID, ISExItemID.ID);
                ISExItemID.Owner = this;
                ISExItemID.OwnerID = ID;
                ISExItemID.TableName = Name;
                Items.Add(SYSxEstadoID, SYSxEstadoID.ID);
                SYSxEstadoID.Owner = this;
                SYSxEstadoID.OwnerID = ID;
                SYSxEstadoID.TableName = Name;
            }

            public static XORMPKField ISExItemCategoriaID = new XORMPKField(global::Projecao.Core.ISE.DB.ISEx.ISExItemCategoria.ISExItemCategoriaID, new Guid("7B314791-ED9E-4A02-96A4-3CD352A36E6D"), "ISExItemCategoriaID", "Categorias de Item");
            public static XORMFKField ISExCategoriaID = new XORMFKField(global::Projecao.Core.ISE.DB.ISEx.ISExItemCategoria.ISExCategoriaID, new Guid("80921890-2F6A-41CB-B7E3-5A06AB8ACE11"), "ISExCategoriaID", "CategorizaÃ§Ã£o de Itens");
            public static XORMFKField ISExItemID = new XORMFKField(global::Projecao.Core.ISE.DB.ISEx.ISExItemCategoria.ISExItemID, new Guid("F624A120-A6F1-48CC-AC8E-77CFA7E1346D"), "ISExItemID", "Item");
            public static XORMStateField SYSxEstadoID = new XORMStateField(global::Projecao.Core.ISE.DB.ISEx.ISExItemCategoria.SYSxEstadoID, new Guid("9A743C4B-5C9D-4F62-89FA-8A897A00F191"), "SYSxEstadoID", "Estado");
        }
        #endregion xISExItemCategoria 


        public xISExItem ISExItem;
        public xISExItemCategoria ISExItemCategoria;

        public ImplanteIATFSVC()
        {
            TupleType = typeof(ImplanteIATFSVC.XTuple);
            DataSetType = typeof(ImplanteIATFSVC.XDataSet);
            ServiceRuleCID = new Guid("6C4EF0B1-7D06-4A02-A93A-57DB6BEA424F");
            OnlyActives = false;
            Actions = XSVCAction.All;
            Type = XServiceType.Default;
            ID = new Guid("3E6FD0BE-2156-448F-8D9A-A305F5E682BB");
            Name = "ImplanteIATF";
            Title = "";
            IsCacheable = false;
            CompanyControl = false;
            IsJob = false;
            AutoLoad = true;
            FreeForUsers = false;
            ServerSideNewRecord = false;
            UseDistinct = false;
            JobType = XJobType.Default;
            CanExport = false;
            ModuleID = new Guid("02C4E7C5-1B4F-43DB-AC6C-CD36BBE428B7");
            Rights = new Int16[] { 1, 2, 3, 4, 5, 6, 7 }; 
            FilterFormID = new Guid("D10077B8-1DFD-4E54-B629-4C660C0E2661");
            IsReadOnly = false;
            ClientScript = "Projecao.Core.PCR.js";
            GridFields = new Guid[] { xISExItem.Nome.ID, xISExItem.SYSxEstadoID.ID };
            OrderByFields = new Guid[] { xISExItem.Nome.ID };
            DataSetFields = new Guid[] { xISExItem.ISExItemID.ID, xISExItem.Nome.ID, xISExItem.SYSxEstadoID.ID, xISExItem.ISExGrupoID.ID, xISExItem.ISExMarcaID.ID, xISExItem.ISExFabricanteID.ID, xISExItem.ISExTabelaID.ID, xISExItem.ISExLinhaID.ID, xISExItem.ProdutoID.ID };
            PKField = xISExItem.ISExItemID.ID;
            ConfigTableID = new Guid("8BB836C8-EC72-48FA-A5AB-95DC2BD05E22");
            StateField = xISExItem.SYSxEstadoID.ID;
            MasterRuleCID = new Guid("6C4EF0B1-7D06-4A02-A93A-57DB6BEA424F");
            XSubServiceItem ss927C1D9921BC4E7FB7C2950852ED24E3 = new XSubServiceItem(VacinaLoteSVC.gCID, VacinaLoteSVC.xISExLote.ISExItemID.ID, ImplanteIATFSVC.gCID, xISExItem.ISExItemID.ID, false, XSubSeviceType.Default);
            ss927C1D9921BC4E7FB7C2950852ED24E3.Rights = new Int16[] { 1, 2, 3, 4, 5, 6, 7 }; 
            ss927C1D9921BC4E7FB7C2950852ED24E3.LateLoad = false;
            SubServices.Add(ss927C1D9921BC4E7FB7C2950852ED24E3);
            ISExItem = new xISExItem();
            ISExItem.IsReadOnly = false;
            AddTable(ISExItem);
            ISExItemCategoria = new xISExItemCategoria();
            ISExItemCategoria.IsReadOnly = true;
            AddTable(ISExItemCategoria);
            MasterTableID = ISExItem.ID;
            ISExItemCategoria_ISExItemID_ISExItem_ISExItemID = AddReference(new XSVCReference(new Guid("ACCB1038-BAAD-4162-8BF8-D3D03C9375DD"), "FK_ACCB1038BAAD41628BF8D3D03C9375DD", ImplanteIATFSVC.xISExItemCategoria.gCID, xISExItemCategoria.ISExItemID.ID, ImplanteIATFSVC.xISExItem.gCID, xISExItem.ISExItemID.ID, XJoinType.Inner)); // ISExItemCategoria.ISExItemID --> ISExItem.ISExItemID
            XSVCReference FK_EC7166BF63E041ECAD07F3ACD04DA01F = new XSVCReference(new Guid("EC7166BF-63E0-41EC-AD07-F3ACD04DA01F"), "FK_EC7166BF63E041ECAD07F3ACD04DA01F", VacinaLoteSVC.gCID, VacinaLoteSVC.xISExLote.ISExItemID.ID, ISExItem.ID, ImplanteIATFSVC.xISExItem.ISExItemID.ID, XJoinType.SubService); // VacinaLoteSVC.ISExItemID --> ImplanteIATF.ISExItemID
            FK_EC7166BF63E041ECAD07F3ACD04DA01F.IsLowRelevance = false;
            AddReference(FK_EC7166BF63E041ECAD07F3ACD04DA01F);
            xISExItem.ISExFabricanteID.IsDataField = true;
            xISExItem.ISExFabricanteID.AllowEmpty = true;
            xISExItem.ISExGrupoID.IsDataField = true;
            xISExItem.ISExGrupoID.AllowEmpty = true;
            xISExItem.ISExItemID.GeneratePK = true;
            xISExItem.ISExItemID.IsDataField = true;
            xISExItem.ISExItemID.AllowEmpty = true;
            xISExItem.ISExLinhaID.IsDataField = true;
            xISExItem.ISExLinhaID.AllowEmpty = true;
            xISExItem.ISExMarcaID.IsDataField = true;
            xISExItem.ISExMarcaID.AllowEmpty = true;
            xISExItem.ISExTabelaID.IsDataField = true;
            xISExItem.ISExTabelaID.AllowEmpty = true;
            xISExItem.Nome.OrderType = XOrderType.Asc;
            xISExItem.Nome.Length = 60;
            xISExItem.Nome.IsDataField = true;
            xISExItem.Nome.AllowEmpty = true;
            xISExItem.ProdutoID.Length = 8;
            xISExItem.ProdutoID.IsDataField = true;
            xISExItem.ProdutoID.AllowEmpty = true;
            xISExItem.SYSxEstadoID.IsDataField = true;
            xISExItem.SYSxEstadoID.AllowEmpty = true;
            xISExItem.ProdutoID.DefaultValue = @"NA";
            xISExItem.SYSxEstadoID.DefaultValue = (Int16)1;
        }

        #region XFields

        public class XFields
        {
        public XORMField ISExFabricanteID => xISExItem.ISExFabricanteID;
        public XORMField ISExGrupoID => xISExItem.ISExGrupoID;
        public XORMField ISExItemID => xISExItem.ISExItemID;
        public XORMField ISExLinhaID => xISExItem.ISExLinhaID;
        public XORMField ISExMarcaID => xISExItem.ISExMarcaID;
        public XORMField ISExTabelaID => xISExItem.ISExTabelaID;
        public XORMField Nome => xISExItem.Nome;
        public XORMField ProdutoID => xISExItem.ProdutoID;
        public XORMField SYSxEstadoID => xISExItem.SYSxEstadoID;
        }
        #endregion XFields
        #region ImplanteIATFSVC.XTuple

        public  class XTuple : XDataTuple
        {

            public XTuple()
            {
            }

            public XTuple(Object[] pSource)
                : base(pSource)
            {
            }

            public XTuple(Int32 pColCount)
               : this(new Object[pColCount])
            {
            }

            public readonly XFields Fields = new XFields();

            #nullable enable

        public Guid ISExFabricanteID
        {
            get
            {
                return (Guid)Value[ImplanteIATFSVC.xISExItem.ISExFabricanteID.ID];
            }
            set
            {
                Value[ImplanteIATFSVC.xISExItem.ISExFabricanteID.ID] = value;
            }
        }
        public Guid? oISExFabricanteID
        {
            get
            {
                GetOldValue(ImplanteIATFSVC.xISExItem.ISExFabricanteID, out Object ovlr);
                return (Guid?)ovlr;
            }
        }

        public Int32 ISExGrupoID
        {
            get
            {
                return (Int32)Value[ImplanteIATFSVC.xISExItem.ISExGrupoID.ID];
            }
            set
            {
                Value[ImplanteIATFSVC.xISExItem.ISExGrupoID.ID] = value;
            }
        }
        public Int32? oISExGrupoID
        {
            get
            {
                GetOldValue(ImplanteIATFSVC.xISExItem.ISExGrupoID, out Object ovlr);
                return (Int32?)ovlr;
            }
        }

        public Guid ISExItemID
        {
            get
            {
                return (Guid)Value[ImplanteIATFSVC.xISExItem.ISExItemID.ID];
            }
            set
            {
                Value[ImplanteIATFSVC.xISExItem.ISExItemID.ID] = value;
            }
        }
        public Guid? oISExItemID
        {
            get
            {
                GetOldValue(ImplanteIATFSVC.xISExItem.ISExItemID, out Object ovlr);
                return (Guid?)ovlr;
            }
        }

        public Int32 ISExLinhaID
        {
            get
            {
                return (Int32)Value[ImplanteIATFSVC.xISExItem.ISExLinhaID.ID];
            }
            set
            {
                Value[ImplanteIATFSVC.xISExItem.ISExLinhaID.ID] = value;
            }
        }
        public Int32? oISExLinhaID
        {
            get
            {
                GetOldValue(ImplanteIATFSVC.xISExItem.ISExLinhaID, out Object ovlr);
                return (Int32?)ovlr;
            }
        }

        public Int32 ISExMarcaID
        {
            get
            {
                return (Int32)Value[ImplanteIATFSVC.xISExItem.ISExMarcaID.ID];
            }
            set
            {
                Value[ImplanteIATFSVC.xISExItem.ISExMarcaID.ID] = value;
            }
        }
        public Int32? oISExMarcaID
        {
            get
            {
                GetOldValue(ImplanteIATFSVC.xISExItem.ISExMarcaID, out Object ovlr);
                return (Int32?)ovlr;
            }
        }

        public Int32 ISExTabelaID
        {
            get
            {
                return (Int32)Value[ImplanteIATFSVC.xISExItem.ISExTabelaID.ID];
            }
            set
            {
                Value[ImplanteIATFSVC.xISExItem.ISExTabelaID.ID] = value;
            }
        }
        public Int32? oISExTabelaID
        {
            get
            {
                GetOldValue(ImplanteIATFSVC.xISExItem.ISExTabelaID, out Object ovlr);
                return (Int32?)ovlr;
            }
        }

        public String Nome
        {
            get
            {
                return (String)Value[ImplanteIATFSVC.xISExItem.Nome.ID];
            }
            set
            {
                Value[ImplanteIATFSVC.xISExItem.Nome.ID] = value;
            }
        }
        public String? oNome
        {
            get
            {
                GetOldValue(ImplanteIATFSVC.xISExItem.Nome, out Object ovlr);
                return (String?)ovlr;
            }
        }

        public String ProdutoID
        {
            get
            {
                return (String)Value[ImplanteIATFSVC.xISExItem.ProdutoID.ID];
            }
            set
            {
                Value[ImplanteIATFSVC.xISExItem.ProdutoID.ID] = value;
            }
        }
        public String? oProdutoID
        {
            get
            {
                GetOldValue(ImplanteIATFSVC.xISExItem.ProdutoID, out Object ovlr);
                return (String?)ovlr;
            }
        }

        public Int16 SYSxEstadoID
        {
            get
            {
                return (Int16)Value[ImplanteIATFSVC.xISExItem.SYSxEstadoID.ID];
            }
            set
            {
                Value[ImplanteIATFSVC.xISExItem.SYSxEstadoID.ID] = value;
            }
        }
        public Int16? oSYSxEstadoID
        {
            get
            {
                GetOldValue(ImplanteIATFSVC.xISExItem.SYSxEstadoID, out Object ovlr);
                return (Int16?)ovlr;
            }
        }

            #nullable disable
        }
        #endregion ImplanteIATFSVC.XTuple

        #region ImplanteIATFSVC.XRule
        public abstract class XRule : XServiceRule<ImplanteIATFSVC.XDataSet, ImplanteIATFSVC, ImplanteIATFSVC.XTuple>
        {
        }
        #endregion ImplanteIATFSVC.XRule

        #region ImplanteIATFSVC.XDataSet

        public class XDataSet : XDataSet<ImplanteIATFSVC.XTuple>
        {
            public XDataSet()
            {
                DataSetType = typeof(ImplanteIATFSVC.XDataSet);
            }
        }

        public class XDataSet<T> : XServiceDataSet<ImplanteIATFSVC.XTuple> where T : XDataTuple
        {

            public Guid ISExFabricanteID => ImplanteIATFSVC.xISExItem.ISExFabricanteID.ID;
            public Guid ISExGrupoID => ImplanteIATFSVC.xISExItem.ISExGrupoID.ID;
            public Guid ISExItemID => ImplanteIATFSVC.xISExItem.ISExItemID.ID;
            public Guid ISExLinhaID => ImplanteIATFSVC.xISExItem.ISExLinhaID.ID;
            public Guid ISExMarcaID => ImplanteIATFSVC.xISExItem.ISExMarcaID.ID;
            public Guid ISExTabelaID => ImplanteIATFSVC.xISExItem.ISExTabelaID.ID;
            public Guid Nome => ImplanteIATFSVC.xISExItem.Nome.ID;
            public Guid ProdutoID => ImplanteIATFSVC.xISExItem.ProdutoID.ID;
            public Guid SYSxEstadoID => ImplanteIATFSVC.xISExItem.SYSxEstadoID.ID;

            public XDataSet()
            {
                DataSetType = typeof(ImplanteIATFSVC.XDataSet);
            }

            private Projecao.Core.PCR.Vacina.VacinaLoteSVC.XDataSet _VacinaLoteDataSet;

            public Projecao.Core.PCR.Vacina.VacinaLoteSVC.XDataSet VacinaLoteDataSet
            {
                get
                {
                    if (_VacinaLoteDataSet == null)
                    {
                        _VacinaLoteDataSet = (Projecao.Core.PCR.Vacina.VacinaLoteSVC.XDataSet)Children.Get(Projecao.Core.PCR.Vacina.VacinaLoteSVC.gCID);
                    }
                    return  _VacinaLoteDataSet;
                }
            }

        }
        #endregion ImplanteIATFSVC.XDataSet

        [Guid(ImplanteIATFSVC.sCID)]
        public  interface XService : XIBaseService
        {
            new XDataSet DataSet
            {
                get;
            }
            new XTuple NewTuple(Object pPKValue = null);
             IEnumerable<XTuple> Tuples
            {
                get;
            }
             XTuple Current
            {
                get;
            }
            new XDataSet Get(XServiceData pData);
             XDataSet Get(params Object[] pWhere);
        }
        [XRegister(typeof(_Service), _Service.sCID, typeof(ImplanteIATFSVC))]
        protected class _Service : Service<ImplanteIATFSVC, XDataSet, XTuple>
        {
            public const String sCID = "AE066E44-BB77-4049-9393-B4590E358FBC";
            public Guid gCID = new Guid(sCID);
        }

        public class Service<TModel, TDataSet, TTuple> : XBaseService<ImplanteIATFSVC, XDataSet, XTuple>, XService
             where TModel : ImplanteIATFSVC, new()
             where TDataSet : XDataSet, new()
             where TTuple : XTuple
        {
            XDataSet XService.DataSet => (XDataSet)DataSet;
            XTuple XService.NewTuple(Object pPKValue)
            {
                return (XTuple)NewTuple(pPKValue);
            }
            public new XDataTuple NewTuple(Object pPKValue = null)
            {
                return (XTuple)base.NewTuple(pPKValue);
            }
            IEnumerable<XTuple> XService.Tuples => (IEnumerable<XTuple>)Tuples;
            XTuple XService.Current => (XTuple )Current;
            XDataSet XService.Get(XServiceData pData)
            {
                return (XDataSet)Get(pData);
            }
            XDataSet XService.Get(params Object[] pWhere)
            {
                return (XDataSet)Get(pWhere);
            }
            public Service()
            {
                ID = gCID;
            }
        }
    }

}