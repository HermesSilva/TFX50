//<auto-generated/>
using System;
using System.Linq;
using Newtonsoft.Json;
using TFX.Core.Objects;
using TFX.Core.Model.Data;
using TFX.Core.Model.Cache;
using TFX.Core.Reflections;
using TFX.Core.Service.Job;
using TFX.Core.Service.SVC;
using Projecao.Core.PCR.DB;
using TFX.Core.Model.DIC.SVC;
using TFX.Core.Model.DIC.ORM;
using TFX.Core.Model.Services;
using TFX.Core.Model.DIC.Types;
using TFX.Core.Model.Interfaces;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Projecao.Core.PCR.ReadOnly
{
    [XRegister(typeof(TouroEventoSVC), sCID)]
    [XDASESource(@"D:\Tootega\Source\TFX20\Modules\Projecao.Core.PCR\Projecao.Core.PCR.csproj", @"D:\Tootega\Source\TFX20\Modules\Projecao.Core.PCR\ReadOnly\TouroEvento.dssvc")]
    public class TouroEventoSVC : XSVCModel
    {
        public const String sCID = "D1F257FC-0498-4A9D-B4C6-5A80E8819B0C";
        public static Guid gCID = new Guid(sCID);
        public static XSVCReference PCRxEvento_PCRxEventoID_PCRxAnimalEvento_PCRxAnimalEventoID; // PCRxEvento.PCRxEventoID --> PCRxAnimalEvento.PCRxAnimalEventoID
        public static XSVCReference PCRxAnimal_PCRxAnimalID_PCRxAnimalEvento_PCRxReprodutorID; // PCRxAnimal.PCRxAnimalID --> PCRxAnimalEvento.PCRxReprodutorID

        #region xPCRxEvento 
        public class xPCRxEvento : XSVCTable
        {

            public static Guid gCID => new Guid("4B5739ED-DDFE-43C5-B97A-C9A1D40354C4");

            public xPCRxEvento()
            {
                Name = "PCRxEvento";
                Alias = "PCRxEvento";
                ID = gCID;
                ParentID =  global::Projecao.Core.PCR.DB.PCRx.PCRxEvento.gCID;

                Items.Add(PCRxEventoID, PCRxEventoID.ID);
                PCRxEventoID.Owner = this;
                PCRxEventoID.OwnerID = ID;
                PCRxEventoID.TableName = Name;
                Items.Add(Data, Data.ID);
                Data.Owner = this;
                Data.OwnerID = ID;
                Data.TableName = Name;
                Data.Alias = "Data";
                Items.Add(Observacao, Observacao.ID);
                Observacao.Owner = this;
                Observacao.OwnerID = ID;
                Observacao.TableName = Name;
                Items.Add(PCRxEventoTipoID, PCRxEventoTipoID.ID);
                PCRxEventoTipoID.Owner = this;
                PCRxEventoTipoID.OwnerID = ID;
                PCRxEventoTipoID.TableName = Name;
                PCRxEventoTipoID.Alias = "PCRxEventoTipoID";
                Items.Add(NTRxMobilePontoDestaqueID, NTRxMobilePontoDestaqueID.ID);
                NTRxMobilePontoDestaqueID.Owner = this;
                NTRxMobilePontoDestaqueID.OwnerID = ID;
                NTRxMobilePontoDestaqueID.TableName = Name;
                Items.Add(Latitude, Latitude.ID);
                Latitude.Owner = this;
                Latitude.OwnerID = ID;
                Latitude.TableName = Name;
                Items.Add(Longitude, Longitude.ID);
                Longitude.Owner = this;
                Longitude.OwnerID = ID;
                Longitude.TableName = Name;
                Items.Add(CTLxUsuarioID, CTLxUsuarioID.ID);
                CTLxUsuarioID.Owner = this;
                CTLxUsuarioID.OwnerID = ID;
                CTLxUsuarioID.TableName = Name;
            }

            public static XORMFaceField PCRxEventoID = new XORMFaceField(global::Projecao.Core.PCR.DB.PCRx.PCRxEvento.PCRxEventoID, new Guid("39F7ADE7-CC46-4F82-9C71-0CBA5C7E3460"), "PCRxEventoID", "Evento");
            public static XORMDateField Data = new XORMDateField(global::Projecao.Core.PCR.DB.PCRx.PCRxEvento.Data, new Guid("FB23AEBA-F660-42F1-ABE8-EDC1FAB17E00"), "Data", "Data");
            public static XORMField Observacao = new XORMField(global::Projecao.Core.PCR.DB.PCRx.PCRxEvento.Observacao, new Guid("59451ED6-5BF8-4448-98CA-0874B76ADB23"), "Observacao", "Observação");
            public static XORMFKField PCRxEventoTipoID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxEvento.PCRxEventoTipoID, new Guid("656EFC25-0FCE-48A9-9553-403AA37F5AD6"), "PCRxEventoTipoID", "Tipo de Evento");
            public static XORMFKField NTRxMobilePontoDestaqueID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxEvento.NTRxMobilePontoDestaqueID, new Guid("CFF62C89-7323-4CBC-A6A0-22A38C3E082F"), "NTRxMobilePontoDestaqueID", "Ponto de Destaque");
            public static XORMDecimalField Latitude = new XORMDecimalField(global::Projecao.Core.PCR.DB.PCRx.PCRxEvento.Latitude, new Guid("921DE3BF-362E-45B3-A553-42E7697D1ABF"), "Latitude", "Latitude");
            public static XORMDecimalField Longitude = new XORMDecimalField(global::Projecao.Core.PCR.DB.PCRx.PCRxEvento.Longitude, new Guid("9B334F65-D25D-4F0E-A6C3-671888AA6404"), "Longitude", "Longitude");
            public static XORMFKField CTLxUsuarioID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxEvento.CTLxUsuarioID, new Guid("A4680DFC-356F-48CC-B2F7-63668B0FB511"), "CTLxUsuarioID", "Usuário");
        }
        #endregion xPCRxEvento 


        #region xPCRxAnimalEvento 
        public class xPCRxAnimalEvento : XSVCTable
        {

            public static Guid gCID => new Guid("69577138-D971-4856-8B25-BCCE78F24D1F");

            public xPCRxAnimalEvento()
            {
                Name = "PCRxAnimalEvento";
                Alias = "PCRxAnimalEvento";
                ID = gCID;
                ParentID =  global::Projecao.Core.PCR.DB.PCRx.PCRxAnimalEvento.gCID;

                Items.Add(PCRxAnimalEventoID, PCRxAnimalEventoID.ID);
                PCRxAnimalEventoID.Owner = this;
                PCRxAnimalEventoID.OwnerID = ID;
                PCRxAnimalEventoID.TableName = Name;
                Items.Add(SYSxPessoaID, SYSxPessoaID.ID);
                SYSxPessoaID.Owner = this;
                SYSxPessoaID.OwnerID = ID;
                SYSxPessoaID.TableName = Name;
                SYSxPessoaID.Alias = "SYSxPessoaID";
                Items.Add(ISExItemID, ISExItemID.ID);
                ISExItemID.Owner = this;
                ISExItemID.OwnerID = ID;
                ISExItemID.TableName = Name;
                Items.Add(PCRxReprodutorID, PCRxReprodutorID.ID);
                PCRxReprodutorID.Owner = this;
                PCRxReprodutorID.OwnerID = ID;
                PCRxReprodutorID.TableName = Name;
                PCRxReprodutorID.Alias = "PCRxReprodutorID";
                Items.Add(PCRxAnimalID, PCRxAnimalID.ID);
                PCRxAnimalID.Owner = this;
                PCRxAnimalID.OwnerID = ID;
                PCRxAnimalID.TableName = Name;
                Items.Add(Valor, Valor.ID);
                Valor.Owner = this;
                Valor.OwnerID = ID;
                Valor.TableName = Name;
                Items.Add(PCRxAnimalLoteID, PCRxAnimalLoteID.ID);
                PCRxAnimalLoteID.Owner = this;
                PCRxAnimalLoteID.OwnerID = ID;
                PCRxAnimalLoteID.TableName = Name;
                Items.Add(PCRxIATFFaseID, PCRxIATFFaseID.ID);
                PCRxIATFFaseID.Owner = this;
                PCRxIATFFaseID.OwnerID = ID;
                PCRxIATFFaseID.TableName = Name;
                Items.Add(PCRxAnimalEstadoID, PCRxAnimalEstadoID.ID);
                PCRxAnimalEstadoID.Owner = this;
                PCRxAnimalEstadoID.OwnerID = ID;
                PCRxAnimalEstadoID.TableName = Name;
                Items.Add(PCRxIATFFaseTipoID, PCRxIATFFaseTipoID.ID);
                PCRxIATFFaseTipoID.Owner = this;
                PCRxIATFFaseTipoID.OwnerID = ID;
                PCRxIATFFaseTipoID.TableName = Name;
                Items.Add(Grupo, Grupo.ID);
                Grupo.Owner = this;
                Grupo.OwnerID = ID;
                Grupo.TableName = Name;
            }

            public static XORMFaceField PCRxAnimalEventoID = new XORMFaceField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimalEvento.PCRxAnimalEventoID, new Guid("D9B494AB-4257-4834-9754-845183019387"), "PCRxAnimalEventoID", "Eventos de Animais");
            public static XORMFKField SYSxPessoaID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimalEvento.SYSxPessoaID, new Guid("1FD6BD82-7A3A-4399-A5BC-0F7C7D6D70FC"), "SYSxPessoaID", "Responsável");
            public static XORMFKField ISExItemID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimalEvento.ISExItemID, new Guid("47068483-3CD5-48FB-8B12-A5E2B999449A"), "ISExItemID", "Item");
            public static XORMFKField PCRxReprodutorID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimalEvento.PCRxReprodutorID, new Guid("BE192908-0A4D-4879-BE9E-D1FC9909BE66"), "PCRxReprodutorID", "Reprodutor");
            public static XORMFKField PCRxAnimalID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimalEvento.PCRxAnimalID, new Guid("40E9080D-5E76-4E66-9ECC-B8D511A4A683"), "PCRxAnimalID", "Animal");
            public static XORMDecimalField Valor = new XORMDecimalField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimalEvento.Valor, new Guid("310C10A3-52B2-48DB-8C98-F585011AEEDD"), "Valor", "Valor");
            public static XORMFKField PCRxAnimalLoteID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimalEvento.PCRxAnimalLoteID, new Guid("0A318E36-F2A2-46A4-8494-35C0FFE94322"), "PCRxAnimalLoteID", "Lote de Animais");
            public static XORMFKField PCRxIATFFaseID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimalEvento.PCRxIATFFaseID, new Guid("7046674C-B9A1-42C2-B5A6-2ED0E761D453"), "PCRxIATFFaseID", "Fases da IATF");
            public static XORMFKField PCRxAnimalEstadoID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimalEvento.PCRxAnimalEstadoID, new Guid("1945949E-8BDD-4F7F-8FB5-E3408314053C"), "PCRxAnimalEstadoID", "Estado");
            public static XORMFKField PCRxIATFFaseTipoID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimalEvento.PCRxIATFFaseTipoID, new Guid("35B6CB5A-CABC-4E86-A882-033D18FB7500"), "PCRxIATFFaseTipoID", "Tipo de Fase");
            public static XORMField Grupo = new XORMField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimalEvento.Grupo, new Guid("CEF75E59-B56C-4D70-AE88-D57F1E24E37C"), "Grupo", "Grupo");
        }
        #endregion xPCRxAnimalEvento 


        #region xPCRxAnimal 
        public class xPCRxAnimal : XSVCTable
        {

            public static Guid gCID => new Guid("EDA4A154-8150-418E-A113-AC2E9F93FD69");

            public xPCRxAnimal()
            {
                Name = "PCRxAnimal";
                Alias = "PCRxAnimal";
                ID = gCID;
                ParentID =  global::Projecao.Core.PCR.DB.PCRx.PCRxAnimal.gCID;

                Items.Add(PCRxAnimalID, PCRxAnimalID.ID);
                PCRxAnimalID.Owner = this;
                PCRxAnimalID.OwnerID = ID;
                PCRxAnimalID.TableName = Name;
                Items.Add(ERPxGeneroID, ERPxGeneroID.ID);
                ERPxGeneroID.Owner = this;
                ERPxGeneroID.OwnerID = ID;
                ERPxGeneroID.TableName = Name;
                Items.Add(PCRxRacaID, PCRxRacaID.ID);
                PCRxRacaID.Owner = this;
                PCRxRacaID.OwnerID = ID;
                PCRxRacaID.TableName = Name;
                PCRxRacaID.Alias = "PCRxRacaID";
                Items.Add(PCRxAnimalFaseID, PCRxAnimalFaseID.ID);
                PCRxAnimalFaseID.Owner = this;
                PCRxAnimalFaseID.OwnerID = ID;
                PCRxAnimalFaseID.TableName = Name;
                Items.Add(Nascimento, Nascimento.ID);
                Nascimento.Owner = this;
                Nascimento.OwnerID = ID;
                Nascimento.TableName = Name;
                Items.Add(SYSxEmpresaID, SYSxEmpresaID.ID);
                SYSxEmpresaID.Owner = this;
                SYSxEmpresaID.OwnerID = ID;
                SYSxEmpresaID.TableName = Name;
                Items.Add(PCRxAnimalEstadoID, PCRxAnimalEstadoID.ID);
                PCRxAnimalEstadoID.Owner = this;
                PCRxAnimalEstadoID.OwnerID = ID;
                PCRxAnimalEstadoID.TableName = Name;
                Items.Add(NumeroPartos, NumeroPartos.ID);
                NumeroPartos.Owner = this;
                NumeroPartos.OwnerID = ID;
                NumeroPartos.TableName = Name;
                Items.Add(PCRxEventoReprodutivoID, PCRxEventoReprodutivoID.ID);
                PCRxEventoReprodutivoID.Owner = this;
                PCRxEventoReprodutivoID.OwnerID = ID;
                PCRxEventoReprodutivoID.TableName = Name;
                Items.Add(PCRxAnimalLoteID, PCRxAnimalLoteID.ID);
                PCRxAnimalLoteID.Owner = this;
                PCRxAnimalLoteID.OwnerID = ID;
                PCRxAnimalLoteID.TableName = Name;
                Items.Add(PCRxIATFFaseID, PCRxIATFFaseID.ID);
                PCRxIATFFaseID.Owner = this;
                PCRxIATFFaseID.OwnerID = ID;
                PCRxIATFFaseID.TableName = Name;
            }

            public static XORMFaceField PCRxAnimalID = new XORMFaceField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimal.PCRxAnimalID, new Guid("3D374553-AF11-494F-8374-8ADE1E209D60"), "PCRxAnimalID", "Animal");
            public static XORMFKField ERPxGeneroID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimal.ERPxGeneroID, new Guid("34613476-28AF-464B-8462-E24E710A64BA"), "ERPxGeneroID", "Sexo");
            public static XORMFKField PCRxRacaID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimal.PCRxRacaID, new Guid("783003B5-EE36-4544-BE86-D28AB202F3B9"), "PCRxRacaID", "Raça");
            public static XORMFKField PCRxAnimalFaseID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimal.PCRxAnimalFaseID, new Guid("CFF5859B-7FFC-4B39-9BFA-A137FBBDA62D"), "PCRxAnimalFaseID", "Fase do Animal");
            public static XORMDateField Nascimento = new XORMDateField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimal.Nascimento, new Guid("1A79E9B0-C912-4BE9-96B2-3BFC1829EA5B"), "Nascimento", "Nascimento");
            public static XORMFKField SYSxEmpresaID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimal.SYSxEmpresaID, new Guid("F8DB43E7-F4C3-4467-BE83-A22364880708"), "SYSxEmpresaID", "Empresa");
            public static XORMFKField PCRxAnimalEstadoID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimal.PCRxAnimalEstadoID, new Guid("47A88AF4-AF88-4F58-9806-60B00E2D0B04"), "PCRxAnimalEstadoID", "Estado");
            public static XORMField NumeroPartos = new XORMField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimal.NumeroPartos, new Guid("8E4A4718-5BAA-41D1-A739-5CB16B65960F"), "NumeroPartos", "Número de Partos");
            public static XORMFKField PCRxEventoReprodutivoID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimal.PCRxEventoReprodutivoID, new Guid("91524B5F-05CF-4D37-8502-D7C16A011835"), "PCRxEventoReprodutivoID", "Eventos de Animais");
            public static XORMFKField PCRxAnimalLoteID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimal.PCRxAnimalLoteID, new Guid("0C160A67-E52B-4E5D-A1CA-1ED4D93E942C"), "PCRxAnimalLoteID", "Lote de Animais");
            public static XORMFKField PCRxIATFFaseID = new XORMFKField(global::Projecao.Core.PCR.DB.PCRx.PCRxAnimal.PCRxIATFFaseID, new Guid("28B043B9-29E3-47AC-BCE8-E4CAAD2174DD"), "PCRxIATFFaseID", "Fases da IATF");
        }
        #endregion xPCRxAnimal 


        public xPCRxAnimal PCRxAnimal;
        public xPCRxAnimalEvento PCRxAnimalEvento;
        public xPCRxEvento PCRxEvento;
        public static readonly XORMParameterField PrimaryKeyID = new XORMParameterField(new Guid("1332D29F-B93C-4F6F-88E1-1379ABA8C53A"), "PrimaryKeyID", "User Data Field", XInt32.CID, 0, 0, false, gCID, null);

        public TouroEventoSVC()
        {
            TupleType = typeof(TouroEventoSVC.XTuple);
            DataSetType = typeof(TouroEventoSVC.XDataSet);
            ServiceRuleCID = new Guid("94ECF057-093F-4F44-A970-7BFC1D3031F8");
            OnlyActives = false;
            Actions = XSVCAction.All;
            Type = XServiceType.Default;
            ID = new Guid("D1F257FC-0498-4A9D-B4C6-5A80E8819B0C");
            Name = "TouroEvento";
            Title = "";
            IsCacheable = false;
            CompanyControl = false;
            IsJob = false;
            AutoLoad = true;
            FreeForUsers = false;
            ServerSideNewRecord = false;
            UseDistinct = false;
            JobType = XJobType.Default;
            CanExport = false;
            ModuleID = new Guid("02C4E7C5-1B4F-43DB-AC6C-CD36BBE428B7");
            Rights = new Int16[] { 1 }; 
            IsReadOnly = true;
            ClientScript = "Projecao.Core.PCR.js";
            OrderByFields = new Guid[] { xPCRxEvento.Data.ID };
            DataSetFields = new Guid[] { xPCRxEvento.Data.ID, xPCRxEvento.PCRxEventoTipoID.ID, xPCRxAnimal.PCRxRacaID.ID, PrimaryKeyID.ID, xPCRxAnimalEvento.PCRxReprodutorID.ID, xPCRxAnimalEvento.SYSxPessoaID.ID };
            PKField = PrimaryKeyID.ID;
            MasterRuleCID = new Guid("94ECF057-093F-4F44-A970-7BFC1D3031F8");
            PCRxAnimal = new xPCRxAnimal();
            PCRxAnimal.IsReadOnly = true;
            AddTable(PCRxAnimal);
            PCRxAnimalEvento = new xPCRxAnimalEvento();
            PCRxAnimalEvento.IsReadOnly = true;
            AddTable(PCRxAnimalEvento);
            PCRxEvento = new xPCRxEvento();
            PCRxEvento.IsReadOnly = true;
            AddTable(PCRxEvento);
            MasterTableID = PCRxEvento.ID;
            PCRxEvento_PCRxEventoID_PCRxAnimalEvento_PCRxAnimalEventoID = AddReference(new XSVCReference(new Guid("1EE59E2C-F7BD-49BB-B87F-D19AEC7D3FE6"), "FK_1EE59E2CF7BD49BBB87FD19AEC7D3FE6", TouroEventoSVC.xPCRxEvento.gCID, xPCRxEvento.PCRxEventoID.ID, TouroEventoSVC.xPCRxAnimalEvento.gCID, xPCRxAnimalEvento.PCRxAnimalEventoID.ID, XJoinType.Inner)); // PCRxEvento.PCRxEventoID --> PCRxAnimalEvento.PCRxAnimalEventoID
            PCRxAnimal_PCRxAnimalID_PCRxAnimalEvento_PCRxReprodutorID = AddReference(new XSVCReference(new Guid("6247C68F-E686-458F-B9FB-161AF9CF4051"), "FK_6247C68FE686458FB9FB161AF9CF4051", TouroEventoSVC.xPCRxAnimal.gCID, xPCRxAnimal.PCRxAnimalID.ID, TouroEventoSVC.xPCRxAnimalEvento.gCID, xPCRxAnimalEvento.PCRxReprodutorID.ID, XJoinType.Inner)); // PCRxAnimal.PCRxAnimalID --> PCRxAnimalEvento.PCRxReprodutorID
            AddField(PrimaryKeyID);
            PrimaryKeyID.IsParam = true;
            xPCRxEvento.Data.IsReadOnly = true;
            xPCRxEvento.Data.OrderType = XOrderType.Desc;
            xPCRxEvento.Data.IsDataField = true;
            xPCRxEvento.Data.AllowEmpty = true;
            xPCRxEvento.PCRxEventoTipoID.IsReadOnly = true;
            xPCRxEvento.PCRxEventoTipoID.IsDataField = true;
            xPCRxEvento.PCRxEventoTipoID.AllowEmpty = true;
            xPCRxAnimal.PCRxRacaID.IsReadOnly = true;
            xPCRxAnimal.PCRxRacaID.IsDataField = true;
            xPCRxAnimal.PCRxRacaID.AllowEmpty = true;
            xPCRxAnimalEvento.PCRxReprodutorID.IsReadOnly = true;
            xPCRxAnimalEvento.PCRxReprodutorID.IsDataField = true;
            xPCRxAnimalEvento.PCRxReprodutorID.AllowEmpty = true;
            PrimaryKeyID.GeneratePK = true;
            PrimaryKeyID.IsReadOnly = false;
            PrimaryKeyID.Length = 0;
            PrimaryKeyID.Scale = 0;
            PrimaryKeyID.IsDataField = true;
            PrimaryKeyID.AllowEmpty = true;
            xPCRxAnimalEvento.SYSxPessoaID.IsReadOnly = true;
            xPCRxAnimalEvento.SYSxPessoaID.IsDataField = true;
            xPCRxAnimalEvento.SYSxPessoaID.AllowEmpty = true;
        }

        #region XFields

        public class XFields
        {
        public XORMField Data => xPCRxEvento.Data;
        public XORMField PCRxEventoTipoID => xPCRxEvento.PCRxEventoTipoID;
        public XORMField PCRxRacaID => xPCRxAnimal.PCRxRacaID;
        public XORMField PCRxReprodutorID => xPCRxAnimalEvento.PCRxReprodutorID;
        public XORMField PrimaryKeyID => TouroEventoSVC.PrimaryKeyID;
        public XORMField SYSxPessoaID => xPCRxAnimalEvento.SYSxPessoaID;
        }
        #endregion XFields
        #region TouroEventoSVC.XTuple

        public  class XTuple : XDataTuple
        {

            public XTuple()
            {
            }

            public XTuple(Object[] pSource)
                : base(pSource)
            {
            }

            public XTuple(Int32 pColCount)
               : this(new Object[pColCount])
            {
            }

            public readonly XFields Fields = new XFields();

            #nullable enable

        public DateTime Data
        {
            get
            {
                return (DateTime)Value[TouroEventoSVC.xPCRxEvento.Data.ID];
            }
            set
            {
                Value[TouroEventoSVC.xPCRxEvento.Data.ID] = value;
            }
        }
        public DateTime? oData
        {
            get
            {
                GetOldValue(TouroEventoSVC.xPCRxEvento.Data, out Object ovlr);
                return (DateTime?)ovlr;
            }
        }

        public Int16 PCRxEventoTipoID
        {
            get
            {
                return (Int16)Value[TouroEventoSVC.xPCRxEvento.PCRxEventoTipoID.ID];
            }
            set
            {
                Value[TouroEventoSVC.xPCRxEvento.PCRxEventoTipoID.ID] = value;
            }
        }
        public Int16? oPCRxEventoTipoID
        {
            get
            {
                GetOldValue(TouroEventoSVC.xPCRxEvento.PCRxEventoTipoID, out Object ovlr);
                return (Int16?)ovlr;
            }
        }

        public Int16 PCRxRacaID
        {
            get
            {
                return (Int16)Value[TouroEventoSVC.xPCRxAnimal.PCRxRacaID.ID];
            }
            set
            {
                Value[TouroEventoSVC.xPCRxAnimal.PCRxRacaID.ID] = value;
            }
        }
        public Int16? oPCRxRacaID
        {
            get
            {
                GetOldValue(TouroEventoSVC.xPCRxAnimal.PCRxRacaID, out Object ovlr);
                return (Int16?)ovlr;
            }
        }

        public Guid PCRxReprodutorID
        {
            get
            {
                return (Guid)Value[TouroEventoSVC.xPCRxAnimalEvento.PCRxReprodutorID.ID];
            }
            set
            {
                Value[TouroEventoSVC.xPCRxAnimalEvento.PCRxReprodutorID.ID] = value;
            }
        }
        public Guid? oPCRxReprodutorID
        {
            get
            {
                GetOldValue(TouroEventoSVC.xPCRxAnimalEvento.PCRxReprodutorID, out Object ovlr);
                return (Guid?)ovlr;
            }
        }

        public Int32 PrimaryKeyID
        {
            get
            {
                return (Int32)Value[TouroEventoSVC.PrimaryKeyID.ID];
            }
            set
            {
                Value[TouroEventoSVC.PrimaryKeyID.ID] = value;
            }
        }
        public Int32? oPrimaryKeyID
        {
            get
            {
                GetOldValue(TouroEventoSVC.PrimaryKeyID, out Object ovlr);
                return (Int32?)ovlr;
            }
        }

        public Guid SYSxPessoaID
        {
            get
            {
                return (Guid)Value[TouroEventoSVC.xPCRxAnimalEvento.SYSxPessoaID.ID];
            }
            set
            {
                Value[TouroEventoSVC.xPCRxAnimalEvento.SYSxPessoaID.ID] = value;
            }
        }
        public Guid? oSYSxPessoaID
        {
            get
            {
                GetOldValue(TouroEventoSVC.xPCRxAnimalEvento.SYSxPessoaID, out Object ovlr);
                return (Guid?)ovlr;
            }
        }

            #nullable disable
        }
        #endregion TouroEventoSVC.XTuple

        #region TouroEventoSVC.XRule
        public abstract class XRule : XServiceRule<TouroEventoSVC.XDataSet, TouroEventoSVC, TouroEventoSVC.XTuple>
        {
        }
        #endregion TouroEventoSVC.XRule

        #region TouroEventoSVC.XDataSet

        public class XDataSet : XDataSet<TouroEventoSVC.XTuple>
        {
            public XDataSet()
            {
                DataSetType = typeof(TouroEventoSVC.XDataSet);
            }
        }

        public class XDataSet<T> : XServiceDataSet<TouroEventoSVC.XTuple> where T : XDataTuple
        {

            public Guid Data => TouroEventoSVC.xPCRxEvento.Data.ID;
            public Guid PCRxEventoTipoID => TouroEventoSVC.xPCRxEvento.PCRxEventoTipoID.ID;
            public Guid PCRxRacaID => TouroEventoSVC.xPCRxAnimal.PCRxRacaID.ID;
            public Guid PCRxReprodutorID => TouroEventoSVC.xPCRxAnimalEvento.PCRxReprodutorID.ID;
            public Guid PrimaryKeyID => TouroEventoSVC.PrimaryKeyID.ID;
            public Guid SYSxPessoaID => TouroEventoSVC.xPCRxAnimalEvento.SYSxPessoaID.ID;

            public XDataSet()
            {
                DataSetType = typeof(TouroEventoSVC.XDataSet);
            }

        }
        #endregion TouroEventoSVC.XDataSet

        [Guid(TouroEventoSVC.sCID)]
        public  interface XService : XIBaseService
        {
            new XDataSet DataSet
            {
                get;
            }
            new XTuple NewTuple(Object pPKValue = null);
             IEnumerable<XTuple> Tuples
            {
                get;
            }
             XTuple Current
            {
                get;
            }
            new XDataSet Get(XServiceData pData);
             XDataSet Get(params Object[] pWhere);
        }
        [XRegister(typeof(_Service), _Service.sCID, typeof(TouroEventoSVC))]
        protected class _Service : Service<TouroEventoSVC, XDataSet, XTuple>
        {
            public const String sCID = "8197860B-9D14-4FFE-AB22-14EFE5EF7DA9";
            public Guid gCID = new Guid(sCID);
        }

        public class Service<TModel, TDataSet, TTuple> : XBaseService<TouroEventoSVC, XDataSet, XTuple>, XService
             where TModel : TouroEventoSVC, new()
             where TDataSet : XDataSet, new()
             where TTuple : XTuple
        {
            XDataSet XService.DataSet => (XDataSet)DataSet;
            XTuple XService.NewTuple(Object pPKValue)
            {
                return (XTuple)NewTuple(pPKValue);
            }
            public new XDataTuple NewTuple(Object pPKValue = null)
            {
                return (XTuple)base.NewTuple(pPKValue);
            }
            IEnumerable<XTuple> XService.Tuples => (IEnumerable<XTuple>)Tuples;
            XTuple XService.Current => (XTuple )Current;
            XDataSet XService.Get(XServiceData pData)
            {
                return (XDataSet)Get(pData);
            }
            XDataSet XService.Get(params Object[] pWhere)
            {
                return (XDataSet)Get(pWhere);
            }
            public Service()
            {
                ID = gCID;
            }
        }
    }

}