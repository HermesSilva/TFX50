//<auto-generated/>
using System;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using TFX.Core;
using TFX.Core.Model;
using TFX.Core.Services;
using TFX.Core.Reflections;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.Extensions.DependencyInjection;
using TFX.Core.Exceptions;
using Microsoft.AspNetCore.Http;
using System.Data;
using TFX.Core.Lzma;
using TFX.Core.Identity;
using System.Text;
using TFX.ESC.Core.Escritori.Rules;
using TFX.ESC.Core.Escritori;

namespace TFX.ESC.Core.Escritori
{
    [XGuid("94D6CBB1-BC80-448E-B38D-56FA234CD41E", typeof(IEscritorioService))]
    public class EscritorioService : XService, IEscritorioService
    {
        public class CORxPessoa : XEntity
        {
            public Boolean IsPKEmpty => Object.Equals(CORxPessoaID, typeof(Guid).GetDefault());
            [Display(Name = "Pessoa")]
            [Required()]
            public Guid? CORxPessoaID {get; set;}

            [MaxLength(180)]
            [Required()]
            public String Nome {get; set;}


            public List<CORxAgregado> CORxAgregado {get; set;} = new List<CORxAgregado>();
        }
        public class ESCxEscritorio : XEntity
        {
            public Boolean IsPKEmpty => Object.Equals(ESCxEscritorioID, typeof(Guid).GetDefault());
            [Display(Name = "Escritório")]
            [Required()]
            public Guid? ESCxEscritorioID {get; set;}


            public CORxAgregado CORxAgregado {get; set;}
        }
        public class CORxAgregado : XEntity
        {
            public Boolean IsPKEmpty => Object.Equals(CORxAgregadoID, typeof(Guid).GetDefault());
            [Display(Name = "Agregado")]
            [Required()]
            public Guid? CORxAgregadoID {get; set;}

            [Display(Name = "Estado")]
            [Required()]
            public Int16 CORxStatusID {get; set;}

            [Display(Name = "CPF ou CNPJ")]
            [MaxLength(14)]
            [Required()]
            public String CPFCNPJ {get; set;}


            public List<ESCxEscritorio> ESCxEscritorio {get; set;} = new List<ESCxEscritorio>();

            public CORxPessoa CORxPessoa {get; set;}
        }
        public class DBContext : XDBContext
        {
            public DBContext(DbContextOptions<DBContext> pOptions, XITenantProvider pTenantProvider, XISharedTransaction pSharedTransaction)
                   : base(pOptions, pTenantProvider, pSharedTransaction)
            {
            }

            public DbSet<CORxPessoa> CORxPessoa{get; set;}
            public DbSet<ESCxEscritorio> ESCxEscritorio{get; set;}
            public DbSet<CORxAgregado> CORxAgregado{get; set;}

        private void ConfigureCORxPessoa(ModelBuilder pBuilder)
        {
            pBuilder.Entity<CORxPessoa>(ett =>
            {
                ett.HasKey(e => e.CORxPessoaID).HasName("PK_CORxPessoa");

                ett.Property(d => d.CORxPessoaID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.Nome).HasColumnType(GetDBType("String", 180));
                ett.ToTable("CORxPessoa");
            });
        }
        private void ConfigureESCxEscritorio(ModelBuilder pBuilder)
        {
            pBuilder.Entity<ESCxEscritorio>(ett =>
            {
                ett.HasKey(e => e.ESCxEscritorioID).HasName("PK_ESCxEscritorio");

                ett.Property(d => d.ESCxEscritorioID).HasColumnType(GetDBType("Guid"));
                ett.ToTable("ESCxEscritorio");
                ett.HasOne(d => d.CORxAgregado)
                   .WithMany(p => p.ESCxEscritorio)
                   .HasForeignKey(d => d.ESCxEscritorioID)
                   .OnDelete(DeleteBehavior.Restrict);
            });
        }
        private void ConfigureCORxAgregado(ModelBuilder pBuilder)
        {
            pBuilder.Entity<CORxAgregado>(ett =>
            {
                ett.HasKey(e => e.CORxAgregadoID).HasName("PK_CORxAgregado");

                ett.Property(d => d.CORxAgregadoID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.CORxStatusID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.CPFCNPJ).HasColumnType(GetDBType("String", 14));
                ett.ToTable("CORxAgregado");
                ett.HasOne(d => d.CORxPessoa)
                   .WithMany(p => p.CORxAgregado)
                   .HasForeignKey(d => d.CORxAgregadoID)
                   .OnDelete(DeleteBehavior.Restrict);
            });
        }

            protected override void OnModelCreating(ModelBuilder pBuilder)
            {
                ConfigureCORxPessoa(pBuilder);
                ConfigureESCxEscritorio(pBuilder);
                ConfigureCORxAgregado(pBuilder);
                base.OnModelCreating(pBuilder);
            }

            protected override string GetConnectionString()
            {
                if (ConnectionString != null)
                    return ConnectionString;
                return XEnvironment.Read("SQL_SERVER_TFX", base.GetConnectionString());
            }
        }

        public abstract class BaseINFEscritorioServiceRule : XServiceINFRule<EscritorioService, EscritorioTuple>
        {
            public BaseINFEscritorioServiceRule(EscritorioService pService)
                : base(pService)
            {
            }
            protected DBContext Context
            {
                get;
                private set;
            }
            protected internal virtual T GetWhere<T>(T pQuery)
            {
                return pQuery;
            }
            internal void SetContext(DBContext pContext)
            {
                Context = pContext;
            }

        }

        public EscritorioService(ILogger<XService> pLogger, DBContext pContext)
               :base(pLogger)
        {
            Rule = new EscritorioRule(this);
            _INFRule = new INFEscritorioServiceRule(this);
            Context = pContext;
            _INFRule.SetContext(Context);
        }

        internal XIServiceRule<EscritorioTuple, EscritorioTuple> Rule;
        private INFEscritorioServiceRule _INFRule;

        public override Guid ID => new Guid("94D6CBB1-BC80-448E-B38D-56FA234CD41E");

        public DBContext Context
        {
            get;
        }

        public override void GracefullyClose()
        {
            Context.Commit();
        }
        public IQueryable<EscritorioTuple> ExecuteQuery(EscritorioFilter pFilter)
        {
            var ctx = Context;
            var query = from CORxPessoa in ctx.CORxPessoa
                        join CORxAgregado in ctx.CORxAgregado on CORxPessoa.CORxPessoaID equals CORxAgregado.CORxAgregadoID
                        join ESCxEscritorio in ctx.ESCxEscritorio on CORxAgregado.CORxAgregadoID equals ESCxEscritorio.ESCxEscritorioID
                        
                        select new {CORxPessoa, ESCxEscritorio, CORxAgregado};
            query = _INFRule.GetWhere(query);


            if (pFilter != null)
            {
                if (!pFilter.Nome.IsEmpty())
                    query = query.Where(q => q.CORxPessoa.Nome == pFilter.Nome);
            }

            if (!LoadAll)
            {
                if (pFilter?.SkipRows > 0)
                    query = query.Skip(pFilter.SkipRows.Value);

                if (pFilter?.TakeRows > 0)
                    query = query.Take(pFilter.TakeRows.Value);
                else
                    query = query.Take(75);
            }

            var qry = query.Select(q => new EscritorioTuple(q.CORxAgregado.CPFCNPJ,
                                q.CORxAgregado.CORxStatusID,
                                q.CORxPessoa.Nome,
                                q.CORxPessoa.CORxPessoaID,
                                q.CORxAgregado.CORxAgregadoID,
                                q.ESCxEscritorio.ESCxEscritorioID));
            return qry;
        }

        public EscritorioDataSet Execute(EscritorioFilter pFilter)
        {
            _INFRule.InternalBeforeExecute();
            var qry = ExecuteQuery(pFilter);
            var tuples = qry.ToList();
            tuples = Rule.InternalAfterSelect(tuples);
            _INFRule.InternalAfterExecute(tuples);
            var dataset = new EscritorioDataSet { Tuples = tuples };
            return dataset;
        }

        public object Flush(EscritorioDataSet pDataSet)
        {
            if (pDataSet?.Tuples.Count == 0)
                throw new XUnconformity("Não é permitido Flush sem Tuplas.");
            using (var scope = XEnvironment.Services.CreateScope())
            using (var ctx = scope.ServiceProvider.GetRequiredService<DBContext>())
            {
                Rule?.InternalBeforeFlush(pDataSet.Tuples);

                SetEscritorioValues(ctx, pDataSet);
                ctx.SaveChanges();

                Rule?.InternalAfterFlush(pDataSet.Tuples);

                return XEndPointMessage.Ok;
            }
        }

        private void SetEscritorioValues(DBContext ctx, EscritorioDataSet pDataSet)
        {
            if (pDataSet == null || pDataSet.Tuples == null)
                return;
            foreach (EscritorioTuple stpl in pDataSet.Tuples)
            {
                var sb = new StringBuilder();
                var ESCxEscritoriotpl = new ESCxEscritorio();
                if (stpl.ESCxEscritorioID.Value != Guid.Empty)
                    ESCxEscritoriotpl.ESCxEscritorioID = stpl.ESCxEscritorioID.Value;
                ESCxEscritoriotpl.Validate(sb);
                ctx.ESCxEscritorio.Add(ESCxEscritoriotpl);
                if (!ESCxEscritoriotpl.IsPKEmpty)
                    ctx.Entry(ESCxEscritoriotpl).State = EntityState.Modified;
                else
                    ctx.Entry(ESCxEscritoriotpl).State = EntityState.Added;

                var CORxAgregadotpl = new CORxAgregado();
                if (stpl.CORxAgregadoID.Value != Guid.Empty)
                    CORxAgregadotpl.CORxAgregadoID = stpl.CORxAgregadoID.Value;
                CORxAgregadotpl.CORxStatusID = stpl.CORxStatusID.Value;
                CORxAgregadotpl.CPFCNPJ = stpl.CPFCNPJ.Value;
                CORxAgregadotpl.Validate(sb);
                ctx.CORxAgregado.Add(CORxAgregadotpl);
                if (!CORxAgregadotpl.IsPKEmpty)
                    ctx.Entry(CORxAgregadotpl).State = EntityState.Modified;
                else
                    ctx.Entry(CORxAgregadotpl).State = EntityState.Added;

                var CORxPessoatpl = new CORxPessoa();
                if (stpl.CORxPessoaID.Value != Guid.Empty)
                    CORxPessoatpl.CORxPessoaID = stpl.CORxPessoaID.Value;
                CORxPessoatpl.Nome = stpl.Nome.Value;
                CORxPessoatpl.Validate(sb);
                ctx.CORxPessoa.Add(CORxPessoatpl);
                if (!CORxPessoatpl.IsPKEmpty)
                    ctx.Entry(CORxPessoatpl).State = EntityState.Modified;
                else
                    ctx.Entry(CORxPessoatpl).State = EntityState.Added;
                ESCxEscritoriotpl.CORxAgregado = CORxAgregadotpl;
                CORxAgregadotpl.CORxPessoa = CORxPessoatpl;
                if (sb.Length > 0)
                    throw new Exception(sb.ToString());
            }
        }
    }
}