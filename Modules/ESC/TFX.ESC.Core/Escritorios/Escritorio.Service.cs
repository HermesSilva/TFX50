//<auto-generated/>
using System;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using TFX.Core;
using TFX.Core.Model;
using TFX.Core.Services;
using TFX.Core.Reflections;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.Extensions.DependencyInjection;
using TFX.Core.Exceptions;
using Microsoft.AspNetCore.Http;
using System.Data;
using TFX.Core.Lzma;
using TFX.Core.Identity;
using System.Text;
using TFX.ESC.Core.Escritorios.Rules;
using TFX.ESC.Core.Escritorios;

namespace TFX.ESC.Core.Escritorios
{
    [XGuid("94D6CBB1-BC80-448E-B38D-56FA234CD41E", typeof(IEscritorioService))]
    public class EscritorioService : XService, IEscritorioService
    {
        public class CORxPessoa : XEntity
        {
            [Display(Name = "Localidade")]
            [Required()]
            public Int32 CEPxLocalidadePrincipalID {get; set;}

            public Boolean IsPKEmpty => !CORxPessoaID.HasValue;
            [Display(Name = "Pessoa")]
            [Required()]
            public Guid? CORxPessoaID {get; set;}

            [MaxLength(180)]
            [Required()]
            public String Nome {get; set;}


            public List<CORxAgregado> CORxAgregado {get; set;} = new List<CORxAgregado>();

            public CEPxLocalidade CEPxLocalidade {get; set;}
        }
        public class ESCxEscritorio : XEntity
        {
            public Boolean IsPKEmpty => !ESCxEscritorioID.HasValue;
            [Display(Name = "Escritório")]
            [Required()]
            public Guid? ESCxEscritorioID {get; set;}


            public CORxAgregado CORxAgregado {get; set;}
        }
        public class CORxAgregado : XEntity
        {
            public Boolean IsPKEmpty => !CORxAgregadoID.HasValue;
            [Display(Name = "Agregado")]
            [Required()]
            public Guid? CORxAgregadoID {get; set;}

            [Display(Name = "Estado")]
            [Required()]
            public Int16 CORxStatusID {get; set;}

            [Display(Name = "CPF ou CNPJ")]
            [MaxLength(14)]
            [DisplayFormat(DataFormatString = "###.###.###-##|##.###.###/####-##")]
            [Required()]
            public String CPFCNPJ {get; set;}


            public List<ESCxEscritorio> ESCxEscritorio {get; set;} = new List<ESCxEscritorio>();

            public CORxPessoa CORxPessoa {get; set;}

            public CORxStatus CORxStatus {get; set;}
        }
        public class CORxStatus : XEntity
        {
            public Boolean IsPKEmpty => Object.Equals(CORxStatusID, typeof(Int16).GetDefault());
            [Display(Name = "Status")]
            [Required()]
            [DatabaseGenerated(DatabaseGeneratedOption.None)]
            public Int16 CORxStatusID {get; set;}

            [MaxLength(20)]
            [Required()]
            public String Status {get; set;}


            public List<CORxAgregado> CORxAgregado {get; set;} = new List<CORxAgregado>();
        }
        public class CEPxUF : XEntity
        {
            [Display(Name = "CEP Final")]
            [MaxLength(8)]
            [Required()]
            public String CEPFinal {get; set;}

            [Display(Name = "CEP Inicial")]
            [MaxLength(8)]
            [Required()]
            public String CEPInicial {get; set;}

            [Display(Name = "País")]
            [Required()]
            public Int16 CEPxPaisID {get; set;}

            public Boolean IsPKEmpty => Object.Equals(CEPxUFID, typeof(Int16).GetDefault());
            [Display(Name = "UF")]
            [Required()]
            [DatabaseGenerated(DatabaseGeneratedOption.None)]
            public Int16 CEPxUFID {get; set;}

            [Display(Name = "Nome da UF")]
            [MaxLength(45)]
            [Required()]
            public String Nome {get; set;}

            [Display(Name = "Sigla da UF")]
            [MaxLength(2)]
            [Required()]
            public String Sigla {get; set;}


            public List<CEPxLocalidade> CEPxLocalidade {get; set;} = new List<CEPxLocalidade>();
        }
        public class CEPxLocalidade : XEntity
        {
            [Display(Name = "CEP Geral")]
            [MaxLength(8)]
            public String CEPGeral {get; set;}

            public Boolean IsPKEmpty => Object.Equals(CEPxLocalidadeID, typeof(Int32).GetDefault());
            [Display(Name = "Localidade")]
            [Required()]
            [DatabaseGenerated(DatabaseGeneratedOption.None)]
            public Int32 CEPxLocalidadeID {get; set;}

            [Display(Name = "Tipo de Localidade")]
            [Required()]
            public Int16 CEPxLocalidadeTipoID {get; set;}

            [Display(Name = "Municipio")]
            [Required()]
            public Int32 CEPxMunicipioID {get; set;}

            [Display(Name = "Unidade Federativa")]
            [Required()]
            public Int16 CEPxUFID {get; set;}

            [Display(Name = "Código no IBGE")]
            [MaxLength(7)]
            [DisplayFormat(DataFormatString = "0000000")]
            public String CodigoIBGE {get; set;}

            [Display(Name = "Nome da Localidade")]
            [MaxLength(128)]
            [Required()]
            public String Nome {get; set;}

            [Display(Name = "Número")]
            [Required()]
            public Int32 Numero {get; set;}


            public List<CORxPessoa> CORxPessoa {get; set;} = new List<CORxPessoa>();

            public CEPxUF CEPxUF {get; set;}
        }
        public class DBContext : XDBContext
        {
            public DBContext(DbContextOptions<DBContext> pOptions, XITenantProvider pTenantProvider, XISharedTransaction pSharedTransaction)
                   : base(pOptions, pTenantProvider, pSharedTransaction)
            {
            }

            public DbSet<CORxPessoa> CORxPessoa{get; set;}
            public DbSet<ESCxEscritorio> ESCxEscritorio{get; set;}
            public DbSet<CORxAgregado> CORxAgregado{get; set;}
            public DbSet<CORxStatus> CORxStatus{get; set;}
            public DbSet<CEPxUF> CEPxUF{get; set;}
            public DbSet<CEPxLocalidade> CEPxLocalidade{get; set;}

        private void ConfigureCORxPessoa(ModelBuilder pBuilder)
        {
            pBuilder.Entity<CORxPessoa>(ett =>
            {
                ett.HasKey(e => e.CORxPessoaID).HasName("PK_CORxPessoa");

                ett.Property(d => d.CORxPessoaID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.Nome).HasColumnType(GetDBType("String", 180));
                ett.Property(d => d.CEPxLocalidadePrincipalID).HasColumnType(GetDBType("Int32"));
                ett.ToTable("CORxPessoa");
                ett.HasOne(d => d.CEPxLocalidade)
                   .WithMany(p => p.CORxPessoa)
                   .HasForeignKey(d => d.CEPxLocalidadePrincipalID)
                   .OnDelete(DeleteBehavior.Restrict);
            });
        }
        private void ConfigureESCxEscritorio(ModelBuilder pBuilder)
        {
            pBuilder.Entity<ESCxEscritorio>(ett =>
            {
                ett.HasKey(e => e.ESCxEscritorioID).HasName("PK_ESCxEscritorio");

                ett.Property(d => d.ESCxEscritorioID).HasColumnType(GetDBType("Guid"));
                ett.ToTable("ESCxEscritorio");
                ett.HasOne(d => d.CORxAgregado)
                   .WithMany(p => p.ESCxEscritorio)
                   .HasForeignKey(d => d.ESCxEscritorioID)
                   .OnDelete(DeleteBehavior.Restrict);
            });
        }
        private void ConfigureCORxAgregado(ModelBuilder pBuilder)
        {
            pBuilder.Entity<CORxAgregado>(ett =>
            {
                ett.HasKey(e => e.CORxAgregadoID).HasName("PK_CORxAgregado");

                ett.Property(d => d.CORxAgregadoID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.CORxStatusID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.CPFCNPJ).HasColumnType(GetDBType("String", 14));
                ett.ToTable("CORxAgregado");
                ett.HasOne(d => d.CORxPessoa)
                   .WithMany(p => p.CORxAgregado)
                   .HasForeignKey(d => d.CORxAgregadoID)
                   .OnDelete(DeleteBehavior.Restrict);
                ett.HasOne(d => d.CORxStatus)
                   .WithMany(p => p.CORxAgregado)
                   .HasForeignKey(d => d.CORxStatusID)
                   .OnDelete(DeleteBehavior.Restrict);
            });
        }
        private void ConfigureCORxStatus(ModelBuilder pBuilder)
        {
            pBuilder.Entity<CORxStatus>(ett =>
            {
                ett.HasKey(e => e.CORxStatusID).HasName("PK_CORxStatus");

                ett.Property(d => d.CORxStatusID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.Status).HasColumnType(GetDBType("String", 20));
                ett.ToTable("CORxStatus");
            });
        }
        private void ConfigureCEPxUF(ModelBuilder pBuilder)
        {
            pBuilder.Entity<CEPxUF>(ett =>
            {
                ett.HasKey(e => e.CEPxUFID).HasName("PK_CEPxUF");

                ett.Property(d => d.CEPxUFID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.Nome).HasColumnType(GetDBType("String", 45));
                ett.Property(d => d.Sigla).HasColumnType(GetDBType("String", 2));
                ett.Property(d => d.CEPxPaisID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.CEPInicial).HasColumnType(GetDBType("String", 8));
                ett.Property(d => d.CEPFinal).HasColumnType(GetDBType("String", 8));
                ett.ToTable("CEPxUF");
            });
        }
        private void ConfigureCEPxLocalidade(ModelBuilder pBuilder)
        {
            pBuilder.Entity<CEPxLocalidade>(ett =>
            {
                ett.HasKey(e => e.CEPxLocalidadeID).HasName("PK_CEPxLocalidade");

                ett.Property(d => d.CEPxLocalidadeID).HasColumnType(GetDBType("Int32"));
                ett.Property(d => d.CEPxUFID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.Nome).HasColumnType(GetDBType("String", 128));
                ett.Property(d => d.CodigoIBGE).HasColumnType(GetDBType("String", 7)).IsRequired(false);
                ett.Property(d => d.CEPxLocalidadeTipoID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.CEPGeral).HasColumnType(GetDBType("String", 8)).IsRequired(false)
                    .HasDefaultValue(GetDBValue("String", null));
                ett.Property(d => d.Numero).HasColumnType(GetDBType("Int32"));
                ett.Property(d => d.CEPxMunicipioID).HasColumnType(GetDBType("Int32"));
                ett.ToTable("CEPxLocalidade");
                ett.HasOne(d => d.CEPxUF)
                   .WithMany(p => p.CEPxLocalidade)
                   .HasForeignKey(d => d.CEPxUFID)
                   .OnDelete(DeleteBehavior.Restrict);
            });
        }

            protected override void OnModelCreating(ModelBuilder pBuilder)
            {
                ConfigureCORxPessoa(pBuilder);
                ConfigureESCxEscritorio(pBuilder);
                ConfigureCORxAgregado(pBuilder);
                ConfigureCORxStatus(pBuilder);
                ConfigureCEPxUF(pBuilder);
                ConfigureCEPxLocalidade(pBuilder);
                base.OnModelCreating(pBuilder);
            }

            protected override string GetConnectionString()
            {
                if (ConnectionString != null)
                    return ConnectionString;
                return XEnvironment.Read("SQL_SERVER_TFX", base.GetConnectionString());
            }
        }

        public abstract class BaseINFEscritorioServiceRule : XServiceINFRule<EscritorioService, EscritorioTuple>
        {
            public BaseINFEscritorioServiceRule(EscritorioService pService)
                : base(pService)
            {
            }
            protected DBContext Context
            {
                get;
                private set;
            }
            protected internal virtual T GetWhere<T>(T pQuery)
            {
                return pQuery;
            }
            internal void SetContext(DBContext pContext)
            {
                Context = pContext;
            }

        }

        public EscritorioService(ILogger<XService> pLogger, DBContext pContext)
               :base(pLogger)
        {
            Rule = new EscritorioRule(this);
            _INFRule = new INFEscritorioServiceRule(this);
            Context = pContext;
            _INFRule.SetContext(Context);
        }

        internal XIServiceRule<EscritorioTuple, EscritorioTuple> Rule;
        private INFEscritorioServiceRule _INFRule;

        public override Guid ID => new Guid("94D6CBB1-BC80-448E-B38D-56FA234CD41E");

        public DBContext Context
        {
            get;
        }

        public override void GracefullyClose()
        {
            Context.Commit();
        }
        public IQueryable<EscritorioTuple> ExecuteQuery(EscritorioFilter pFilter)
        {
            var ctx = Context;
            var query = from CORxPessoa in ctx.CORxPessoa
                        join CEPxLocalidade in ctx.CEPxLocalidade on CORxPessoa.CEPxLocalidadePrincipalID equals CEPxLocalidade.CEPxLocalidadeID
                        join CEPxUF in ctx.CEPxUF on CEPxLocalidade.CEPxUFID equals CEPxUF.CEPxUFID
                        join CORxAgregado in ctx.CORxAgregado on CORxPessoa.CORxPessoaID equals CORxAgregado.CORxAgregadoID
                        join CORxStatus in ctx.CORxStatus on CORxAgregado.CORxStatusID equals CORxStatus.CORxStatusID
                        join ESCxEscritorio in ctx.ESCxEscritorio on CORxAgregado.CORxAgregadoID equals ESCxEscritorio.ESCxEscritorioID
                        
                        select new {CORxPessoa, ESCxEscritorio, CORxAgregado, CORxStatus, CEPxUF, CEPxLocalidade};
            query = _INFRule.GetWhere(query);


            if (pFilter != null)
            {
                if (!pFilter.Nome.IsEmpty())
                    query = query.Where(q => q.CORxPessoa.Nome == pFilter.Nome);
            }

            if (!LoadAll)
            {
                if (pFilter?.SkipRows > 0)
                    query = query.Skip(pFilter.SkipRows.Value);

                if (pFilter?.TakeRows > 0)
                    query = query.Take(pFilter.TakeRows.Value);
                else
                    query = query.Take(75);
            }

            var qry = query.Select(q => new EscritorioTuple(q.CORxAgregado.CPFCNPJ,
                                q.CORxAgregado.CORxStatusID,
                                q.CORxPessoa.Nome,
                                q.CORxPessoa.CORxPessoaID,
                                q.CORxAgregado.CORxAgregadoID,
                                q.ESCxEscritorio.ESCxEscritorioID,
                                q.CORxStatus.Status,
                                q.CORxPessoa.CEPxLocalidadePrincipalID,
                                q.CEPxUF.Sigla,
                                q.CEPxLocalidade.Nome));
            return qry;
        }

        public EscritorioDataSet Execute(EscritorioFilter pFilter)
        {
            _INFRule.InternalBeforeExecute();
            var qry = ExecuteQuery(pFilter);
            var tuples = qry.ToList();
            tuples = Rule.InternalAfterSelect(tuples);
            _INFRule.InternalAfterExecute(tuples);
            var dataset = new EscritorioDataSet { Tuples = tuples };
            return dataset;
        }

        public object Flush(EscritorioDataSet pDataSet)
        {
            if (pDataSet?.Tuples.Count == 0)
                throw new XUnconformity("Não é permitido Flush sem Tuplas.");
            using (var scope = XEnvironment.Services.CreateScope())
            using (var ctx = scope.ServiceProvider.GetRequiredService<DBContext>())
            {
                Rule?.InternalBeforeFlush(pDataSet.Tuples);

                SetEscritorioValues(ctx, pDataSet);
                ctx.SaveChanges();

                Rule?.InternalAfterFlush(pDataSet.Tuples);

                return XEndPointMessage.Ok;
            }
        }

        private void SetEscritorioValues(DBContext ctx, EscritorioDataSet pDataSet)
        {
            if (pDataSet == null || pDataSet.Tuples == null)
                return;
            foreach (EscritorioTuple stpl in pDataSet.Tuples)
            {
                var sb = new StringBuilder();
                var ESCxEscritoriotpl = new ESCxEscritorio();
                if (stpl.ESCxEscritorioID.Value != null)
                    ESCxEscritoriotpl.ESCxEscritorioID = stpl.ESCxEscritorioID.Value;
                ESCxEscritoriotpl.Validate(sb);
                ctx.ESCxEscritorio.Add(ESCxEscritoriotpl);
                if (!ESCxEscritoriotpl.IsPKEmpty)
                    ctx.Entry(ESCxEscritoriotpl).State = EntityState.Modified;
                else
                    ctx.Entry(ESCxEscritoriotpl).State = EntityState.Added;

                var CORxAgregadotpl = new CORxAgregado();
                if (stpl.CORxAgregadoID.Value != null)
                    CORxAgregadotpl.CORxAgregadoID = stpl.CORxAgregadoID.Value;
                CORxAgregadotpl.CORxStatusID = stpl.CORxStatusID.Value;
                CORxAgregadotpl.CPFCNPJ = stpl.CPFCNPJ.Value;
                CORxAgregadotpl.Validate(sb);
                ctx.CORxAgregado.Add(CORxAgregadotpl);
                if (!CORxAgregadotpl.IsPKEmpty)
                    ctx.Entry(CORxAgregadotpl).State = EntityState.Modified;
                else
                    ctx.Entry(CORxAgregadotpl).State = EntityState.Added;

                var CORxPessoatpl = new CORxPessoa();
                if (stpl.CORxPessoaID.Value != null)
                    CORxPessoatpl.CORxPessoaID = stpl.CORxPessoaID.Value;
                CORxPessoatpl.Nome = stpl.Nome.Value;
                CORxPessoatpl.CEPxLocalidadePrincipalID = stpl.CEPxLocalidadePrincipalID.Value;
                CORxPessoatpl.Validate(sb);
                ctx.CORxPessoa.Add(CORxPessoatpl);
                if (!CORxPessoatpl.IsPKEmpty)
                    ctx.Entry(CORxPessoatpl).State = EntityState.Modified;
                else
                    ctx.Entry(CORxPessoatpl).State = EntityState.Added;
                ESCxEscritoriotpl.CORxAgregado = CORxAgregadotpl;
                CORxAgregadotpl.CORxPessoa = CORxPessoatpl;
                if (sb.Length > 0)
                    throw new Exception(sb.ToString());
            }
        }
    }
}