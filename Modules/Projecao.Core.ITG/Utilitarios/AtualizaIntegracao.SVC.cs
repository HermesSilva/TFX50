//<auto-generated/>
using System;
using System.Linq;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using Newtonsoft.Json;
using TFX.Core.Model.Cache;
using TFX.Core.Model.Data;
using TFX.Core.Model.DIC.SVC;
using TFX.Core.Model.DIC.ORM;
using TFX.Core.Model.DIC.Types;
using TFX.Core.Model.Interfaces;
using TFX.Core.Model.Services;
using TFX.Core.Reflections;
using TFX.Core.Objects;
#if !OnlyDef
using TFX.Core.Service.Job;
using TFX.Core.Service.SVC;
#endif
using TFX.Core.Model.DIC.FRM;
using TFX.Core.Model.DIC.APP;
using TFX.Core.Model.DIC.RPT;

namespace Projecao.Core.ITG.Utilitarios
{
    [XDASESource(@"D:\Tootega\Source\TFX20\Modules\Projecao.Core.ITG\Projecao.Core.ITG.csproj", @"D:\Tootega\Source\TFX20\Modules\Projecao.Core.ITG\Utilitarios\AtualizaIntegracao.dssvc")]
    [XRegister(typeof(AtualizaIntegracaoSVC), sCID)]
    public class AtualizaIntegracaoSVC : XSVCModel
    {
        #region AtualizaIntegracaoFilterFRM

        [XRegister(typeof(AtualizaIntegracaoFilterFRM), sCID)]
        public class AtualizaIntegracaoFilterFRM : XFRMModel
        {
            public const String sCID = "D50D8BD6-0103-4140-9C20-E273FD9E9602";
            public static new readonly Guid gCID = new Guid(sCID);
            static AtualizaIntegracaoFilterFRM()
            {
                gCID = new Guid(sCID);
            }
            public AtualizaIntegracaoFilterFRM()
            {
                ID = gCID;
                Name = "AtualizaIntegracaoFilter";
                Title = "";
                MinRows = 0;
                ConfigCID = new Guid("00000000-0000-0000-0000-000000000000");
                ConfigPKFilter = false;
                ReferenceScripts = new String[] { "TFX.Core.Service.js", "Projecao.Core.CEP.js", "Projecao.Core.ERP.js", "Projecao.Core.IMC.js", "Projecao.Core.ISE.js", "Projecao.Core.LGC.js", "Projecao.Core.PET.js", "Projecao.Core.ITG.js" };
                Rect = new XRect(28, 28, 401, 250);
                Style = XFRMStyle.Normal;
                ActionContext = XActionContext.All;
            }
            public static class Fields
            {
            }
        }

        #endregion AtualizaIntegracaoFilterFRM

        public const String sCID = "19BE447A-08A8-4484-ADAD-2AA1CA763FD7";
        public static Guid gCID = new Guid(sCID);

        public static readonly XORMParameterField Atualiza = new XORMParameterField(new Guid("E7C74131-296A-49D8-9951-0796558A7D80"), "Atualiza", "Atualiza", XInt32.CID, 0, 0, false, gCID, null);

        public AtualizaIntegracaoSVC()
        {
            TupleType = typeof(AtualizaIntegracaoSVC.XTuple);
            DataSetType = typeof(AtualizaIntegracaoSVC.XDataSet);
            ServiceRuleCID = new Guid("74FAB757-E9CC-4C04-9F61-242EC671194D");
            OnlyActives = false;
            Actions = XSVCAction.All;
            Type = XServiceType.Utility;
            ID = new Guid("19BE447A-08A8-4484-ADAD-2AA1CA763FD7");
            Name = "AtualizaIntegracao";
            Title = "Atualiza Integração";
            IsCacheable = false;
            CompanyControl = false;
            IsJob = false;
            AutoLoad = true;
            FreeForUsers = false;
            ServerSideNewRecord = false;
            UseDistinct = false;
            CheckTenant = true;
            JobType = XJobType.Default;
            ModuleID = new Guid("FA1F36E1-A70A-40D3-B312-D11EFDE16118");
            Rights = new Int16[] { 1, 2, 3, 4, 5, 6, 7 }; 
            IsReadOnly = false;
            ReferenceScripts = new String[] { "TFX.Core.Service.js", "Projecao.Core.CEP.js", "Projecao.Core.ERP.js", "Projecao.Core.IMC.js", "Projecao.Core.ISE.js", "Projecao.Core.LGC.js", "Projecao.Core.PET.js", "Projecao.Core.ITG.js" };
            DataSetFields = new Guid[] { Atualiza.ID };
            PKField = Atualiza.ID;
            MasterRuleCID = new Guid("74FAB757-E9CC-4C04-9F61-242EC671194D");
            AddField(Atualiza);
            Atualiza.IsParam = true;
            Atualiza.GeneratePK = true;
            Atualiza.IsReadOnly = false;
            Atualiza.Length = 0;
            Atualiza.Scale = 0;
            Atualiza.IsDataField = true;
            Atualiza.AllowEmpty = true;
        }

        #region XFields

        public class XFields
        {
        public XORMField Atualiza => AtualizaIntegracaoSVC.Atualiza;
        }
        #endregion XFields
        #region AtualizaIntegracaoSVC.XTuple

        public  class XTuple : XDataTuple
        {

            public XTuple()
            {
            }

            public XTuple(Object[] pSource)
                : base(pSource)
            {
            }

            public XTuple(Int32 pColCount)
               : this(new Object[pColCount])
            {
            }

            public readonly XFields Fields = new XFields();

            #nullable enable

        public Int32 Atualiza
        {
            get
            {
                return (Int32)Value[AtualizaIntegracaoSVC.Atualiza.ID];
            }
            set
            {
                Value[AtualizaIntegracaoSVC.Atualiza.ID] = value;
            }
        }
        public Int32? oAtualiza
        {
            get
            {
                GetOldValue(AtualizaIntegracaoSVC.Atualiza, out Object ovlr);
                return (Int32?)ovlr;
            }
        }

            #nullable disable
        }
        #endregion AtualizaIntegracaoSVC.XTuple

        #region AtualizaIntegracaoSVC.XDataSet

        public class XDataSet : XDataSet<AtualizaIntegracaoSVC.XTuple>
        {
            public XDataSet()
            {
                DataSetType = typeof(AtualizaIntegracaoSVC.XDataSet);
            }
        }

        public class XDataSet<T> : XServiceDataSet<AtualizaIntegracaoSVC.XTuple> where T : XDataTuple
        {

            public class xFLDs{
                public Guid Atualiza => AtualizaIntegracaoSVC.Atualiza.ID;
            }

            public xFLDs FLDs = new xFLDs();

            public XDataSet()
            {
                DataSetType = typeof(AtualizaIntegracaoSVC.XDataSet);
            }

        }
        #endregion AtualizaIntegracaoSVC.XDataSet
        #if !OnlyDef
        #region AtualizaIntegracaoSVC.XRule
        public abstract class XRule : XServiceUtilRule<AtualizaIntegracaoSVC.XDataSet, AtualizaIntegracaoSVC, AtualizaIntegracaoSVC.XTuple>
        {
        }
        #endregion AtualizaIntegracaoSVC.XRule

        [Guid(AtualizaIntegracaoSVC.sCID)]
        public  interface XService : XIBaseService
        {
            new XDataSet DataSet
            {
                get;
            }
            new XTuple NewTuple(Object pPKValue = null);
             IEnumerable<XTuple> Tuples
            {
                get;
            }
             XTuple Current
            {
                get;
            }
            new XDataSet Get(XServiceData pData);
             XDataSet Get(params Object[] pWhere);
        }
        [XRegister(typeof(_Service), _Service.sCID, typeof(AtualizaIntegracaoSVC))]
        protected class _Service : Service<AtualizaIntegracaoSVC, XDataSet, XTuple>
        {
            public const String sCID = "6BDB0E22-70D6-4063-A470-4542E5AAD386";
            public Guid gCID = new Guid(sCID);
        }

        public class Service<TModel, TDataSet, TTuple> : XBaseService<AtualizaIntegracaoSVC, XDataSet, XTuple>, XService
             where TModel : AtualizaIntegracaoSVC, new()
             where TDataSet : XDataSet, new()
             where TTuple : XTuple
        {
            XDataSet XService.DataSet => (XDataSet)DataSet;
            XTuple XService.NewTuple(Object pPKValue)
            {
                return (XTuple)NewTuple(pPKValue);
            }
            public new XDataTuple NewTuple(Object pPKValue = null)
            {
                return (XTuple)base.NewTuple(pPKValue);
            }
            IEnumerable<XTuple> XService.Tuples => (IEnumerable<XTuple>)Tuples;
            XTuple XService.Current => (XTuple )Current;
            XDataSet XService.Get(XServiceData pData)
            {
                return (XDataSet)Get(pData);
            }
            XDataSet XService.Get(params Object[] pWhere)
            {
                return (XDataSet)Get(pWhere);
            }
            public Service()
            {
                ID = gCID;
            }
        }
        #endif
    }

}