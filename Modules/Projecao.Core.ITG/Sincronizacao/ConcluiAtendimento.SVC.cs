//<auto-generated/>
using System;
using System.Linq;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using Newtonsoft.Json;
using TFX.Core.Model.Cache;
using TFX.Core.Model.Data;
using TFX.Core.Model.DIC.SVC;
using TFX.Core.Model.DIC.ORM;
using TFX.Core.Model.DIC.Types;
using TFX.Core.Model.Interfaces;
using TFX.Core.Model.Services;
using TFX.Core.Reflections;
using TFX.Core.Objects;
#if !OnlyDef
using TFX.Core.Service.Job;
using TFX.Core.Service.SVC;
#endif

namespace Projecao.Core.ITG.Sincronizacao
{
    [XDASESource(@"D:\Tootega\Source\TFX20\Modules\Projecao.Core.ITG\Projecao.Core.ITG.csproj", @"D:\Tootega\Source\TFX20\Modules\Projecao.Core.ITG\Sincronizacao\ConcluiAtendimento.dssvc")]
    [XRegister(typeof(ConcluiAtendimentoSVC), sCID)]
    public class ConcluiAtendimentoSVC : XSVCModel
    {
        public const String sCID = "D9FEDEAC-6CD7-4BA6-8995-5348667F00F9";
        public static Guid gCID = new Guid(sCID);

        public static readonly XORMParameterField AtendimentoID = new XORMParameterField(new Guid("3E1D7B3B-02AB-44A3-92AA-B8876010AB36"), "AtendimentoID", "Atendimento", XGuid.CID, 0, 0, false, gCID, null);
        public static readonly XORMParameterField EstadoID = new XORMParameterField(new Guid("907899A9-92EE-41BE-A5D0-AEAA592A38D9"), "EstadoID", "Estado", XInt16.CID, 0, 0, false, gCID, null);

        public ConcluiAtendimentoSVC()
        {
            TupleType = typeof(ConcluiAtendimentoSVC.XTuple);
            DataSetType = typeof(ConcluiAtendimentoSVC.XDataSet);
            ServiceRuleCID = new Guid("6E9F6E92-68A7-4123-B7BA-536DFA1BFE4A");
            OnlyActives = false;
            Actions = XSVCAction.All;
            Type = XServiceType.Utility;
            ID = new Guid("D9FEDEAC-6CD7-4BA6-8995-5348667F00F9");
            Name = "ConcluiAtendimento";
            Title = "";
            IsCacheable = false;
            CompanyControl = false;
            IsJob = false;
            AutoLoad = true;
            FreeForUsers = false;
            ServerSideNewRecord = false;
            UseDistinct = false;
            CheckTenant = true;
            JobType = XJobType.Default;
            ModuleID = new Guid("FA1F36E1-A70A-40D3-B312-D11EFDE16118");
            Rights = new Int16[] { 1, 2, 3, 4, 5, 6, 7 }; 
            IsReadOnly = false;
            ReferenceScripts = new String[] { "TFX.Core.Service.js", "Projecao.Core.CEP.js", "Projecao.Core.ERP.js", "Projecao.Core.IMC.js", "Projecao.Core.ISE.js", "Projecao.Core.LGC.js", "Projecao.Core.PET.js", "Projecao.Core.ITG.js" };
            DataSetFields = new Guid[] { AtendimentoID.ID, EstadoID.ID };
            PKField = AtendimentoID.ID;
            MasterRuleCID = new Guid("6E9F6E92-68A7-4123-B7BA-536DFA1BFE4A");
            AddField(AtendimentoID);
            AtendimentoID.IsParam = true;
            AddField(EstadoID);
            EstadoID.IsParam = true;
            AtendimentoID.GeneratePK = true;
            AtendimentoID.IsReadOnly = false;
            AtendimentoID.Length = 0;
            AtendimentoID.Scale = 0;
            AtendimentoID.IsDataField = true;
            AtendimentoID.AllowEmpty = true;
            EstadoID.IsReadOnly = false;
            EstadoID.Length = 0;
            EstadoID.Scale = 0;
            EstadoID.IsDataField = true;
            EstadoID.AllowEmpty = true;
        }

        #region XFields

        public class XFields
        {
        public XORMField AtendimentoID => ConcluiAtendimentoSVC.AtendimentoID;
        public XORMField EstadoID => ConcluiAtendimentoSVC.EstadoID;
        }
        #endregion XFields
        #region ConcluiAtendimentoSVC.XTuple

        public  class XTuple : XDataTuple
        {

            public XTuple()
            {
            }

            public XTuple(Object[] pSource)
                : base(pSource)
            {
            }

            public XTuple(Int32 pColCount)
               : this(new Object[pColCount])
            {
            }

            public readonly XFields Fields = new XFields();

            #nullable enable

        public Guid AtendimentoID
        {
            get
            {
                return (Guid)Value[ConcluiAtendimentoSVC.AtendimentoID.ID];
            }
            set
            {
                Value[ConcluiAtendimentoSVC.AtendimentoID.ID] = value;
            }
        }
        public Guid? oAtendimentoID
        {
            get
            {
                GetOldValue(ConcluiAtendimentoSVC.AtendimentoID, out Object ovlr);
                return (Guid?)ovlr;
            }
        }

        public Int16 EstadoID
        {
            get
            {
                return (Int16)Value[ConcluiAtendimentoSVC.EstadoID.ID];
            }
            set
            {
                Value[ConcluiAtendimentoSVC.EstadoID.ID] = value;
            }
        }
        public Int16? oEstadoID
        {
            get
            {
                GetOldValue(ConcluiAtendimentoSVC.EstadoID, out Object ovlr);
                return (Int16?)ovlr;
            }
        }

            #nullable disable
        }
        #endregion ConcluiAtendimentoSVC.XTuple

        #region ConcluiAtendimentoSVC.XDataSet

        public class XDataSet : XDataSet<ConcluiAtendimentoSVC.XTuple>
        {
            public XDataSet()
            {
                DataSetType = typeof(ConcluiAtendimentoSVC.XDataSet);
            }
        }

        public class XDataSet<T> : XServiceDataSet<ConcluiAtendimentoSVC.XTuple> where T : XDataTuple
        {

            public class xFLDs{
                public Guid AtendimentoID => ConcluiAtendimentoSVC.AtendimentoID.ID;
                public Guid EstadoID => ConcluiAtendimentoSVC.EstadoID.ID;
            }

            public xFLDs FLDs = new xFLDs();

            public XDataSet()
            {
                DataSetType = typeof(ConcluiAtendimentoSVC.XDataSet);
            }

        }
        #endregion ConcluiAtendimentoSVC.XDataSet
        #if !OnlyDef
        #region ConcluiAtendimentoSVC.XRule
        public abstract class XRule : XServiceUtilRule<ConcluiAtendimentoSVC.XDataSet, ConcluiAtendimentoSVC, ConcluiAtendimentoSVC.XTuple>
        {
        }
        #endregion ConcluiAtendimentoSVC.XRule

        [Guid(ConcluiAtendimentoSVC.sCID)]
        public  interface XService : XIBaseService
        {
            new XDataSet DataSet
            {
                get;
            }
            new XTuple NewTuple(Object pPKValue = null);
             IEnumerable<XTuple> Tuples
            {
                get;
            }
             XTuple Current
            {
                get;
            }
            new XDataSet Get(XServiceData pData);
             XDataSet Get(params Object[] pWhere);
        }
        [XRegister(typeof(_Service), _Service.sCID, typeof(ConcluiAtendimentoSVC))]
        protected class _Service : Service<ConcluiAtendimentoSVC, XDataSet, XTuple>
        {
            public const String sCID = "2751DB6F-A2D7-4164-8DB5-FDC23DDEE9AE";
            public Guid gCID = new Guid(sCID);
        }

        public class Service<TModel, TDataSet, TTuple> : XBaseService<ConcluiAtendimentoSVC, XDataSet, XTuple>, XService
             where TModel : ConcluiAtendimentoSVC, new()
             where TDataSet : XDataSet, new()
             where TTuple : XTuple
        {
            XDataSet XService.DataSet => (XDataSet)DataSet;
            XTuple XService.NewTuple(Object pPKValue)
            {
                return (XTuple)NewTuple(pPKValue);
            }
            public new XDataTuple NewTuple(Object pPKValue = null)
            {
                return (XTuple)base.NewTuple(pPKValue);
            }
            IEnumerable<XTuple> XService.Tuples => (IEnumerable<XTuple>)Tuples;
            XTuple XService.Current => (XTuple )Current;
            XDataSet XService.Get(XServiceData pData)
            {
                return (XDataSet)Get(pData);
            }
            XDataSet XService.Get(params Object[] pWhere)
            {
                return (XDataSet)Get(pWhere);
            }
            public Service()
            {
                ID = gCID;
            }
        }
        #endif
    }

}