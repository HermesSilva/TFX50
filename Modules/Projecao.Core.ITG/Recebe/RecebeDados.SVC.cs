//<auto-generated/>
using System;
using System.Linq;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using Newtonsoft.Json;
using TFX.Core.Model.Cache;
using TFX.Core.Model.Data;
using TFX.Core.Model.DIC.SVC;
using TFX.Core.Model.DIC.ORM;
using TFX.Core.Model.DIC.Types;
using TFX.Core.Model.Interfaces;
using TFX.Core.Model.Services;
using TFX.Core.Reflections;
using TFX.Core.Objects;
#if !OnlyDef
using TFX.Core.Service.Job;
using TFX.Core.Service.SVC;
#endif

namespace Projecao.Core.ITG.Recebe
{
    [XDASESource(@"D:\Tootega\Source\TFX20\Modules\Projecao.Core.ITG\Projecao.Core.ITG.csproj", @"D:\Tootega\Source\TFX20\Modules\Projecao.Core.ITG\Recebe\RecebeDados.dssvc")]
    [XRegister(typeof(RecebeDadosSVC), sCID)]
    public class RecebeDadosSVC : XSVCModel
    {
        public const String sCID = "53B34F48-6842-4BCA-AD8B-FDBF1F6BD3BE";
        public static Guid gCID = new Guid(sCID);

        public static readonly XORMParameterField Dados = new XORMParameterField(new Guid("634A7930-0C3C-4ACE-AC9F-2F4A4D3A2F4F"), "Dados", "Dados", XBinary.CID, 0, 0, false, gCID, null);
        public static readonly XORMParameterField IsOk = new XORMParameterField(new Guid("DBC84F2C-E150-4730-837C-2F6A63130C08"), "IsOk", "Is Ok", XBoolean.CID, 0, 0, false, gCID, null);
        public static readonly XORMParameterField PrimeryKeyID = new XORMParameterField(new Guid("52674BFE-7FEB-448D-A16A-273B941E675B"), "PrimeryKeyID", "PK", XGuid.CID, 0, 0, false, gCID, null);

        public RecebeDadosSVC()
        {
            TupleType = typeof(RecebeDadosSVC.XTuple);
            DataSetType = typeof(RecebeDadosSVC.XDataSet);
            ServiceRuleCID = new Guid("12DE1CD5-EE2A-4271-9C8E-E8D5C957229A");
            OnlyActives = false;
            Actions = XSVCAction.All;
            Type = XServiceType.Utility;
            ID = new Guid("53B34F48-6842-4BCA-AD8B-FDBF1F6BD3BE");
            Name = "RecebeDados";
            Title = "";
            IsCacheable = false;
            CompanyControl = false;
            IsJob = false;
            AutoLoad = true;
            FreeForUsers = false;
            ServerSideNewRecord = false;
            UseDistinct = false;
            CheckTenant = true;
            JobType = XJobType.Default;
            ModuleID = new Guid("FA1F36E1-A70A-40D3-B312-D11EFDE16118");
            Rights = new Int16[] { 1, 2, 3, 4, 5, 6, 7 }; 
            IsReadOnly = false;
            ReferenceScripts = new String[] { "TFX.Core.Service.js", "Projecao.Core.CEP.js", "Projecao.Core.ERP.js", "Projecao.Core.IMC.js", "Projecao.Core.ISE.js", "Projecao.Core.LGC.js", "Projecao.Core.PET.js", "Projecao.Core.ITG.js" };
            DataSetFields = new Guid[] { Dados.ID, PrimeryKeyID.ID, IsOk.ID };
            PKField = PrimeryKeyID.ID;
            MasterRuleCID = new Guid("12DE1CD5-EE2A-4271-9C8E-E8D5C957229A");
            AddField(Dados);
            Dados.IsParam = true;
            AddField(PrimeryKeyID);
            PrimeryKeyID.IsParam = true;
            AddField(IsOk);
            IsOk.IsParam = true;
            Dados.IsReadOnly = false;
            Dados.Length = 0;
            Dados.Scale = 0;
            Dados.IsDataField = true;
            Dados.AllowEmpty = true;
            IsOk.IsReadOnly = false;
            IsOk.Length = 0;
            IsOk.Scale = 0;
            IsOk.IsDataField = true;
            IsOk.AllowEmpty = true;
            PrimeryKeyID.GeneratePK = true;
            PrimeryKeyID.IsReadOnly = false;
            PrimeryKeyID.Length = 0;
            PrimeryKeyID.Scale = 0;
            PrimeryKeyID.IsDataField = true;
            PrimeryKeyID.AllowEmpty = true;
            Dados.DefaultValue = null;
        }

        #region XFields

        public class XFields
        {
        public XORMField Dados => RecebeDadosSVC.Dados;
        public XORMField IsOk => RecebeDadosSVC.IsOk;
        public XORMField PrimeryKeyID => RecebeDadosSVC.PrimeryKeyID;
        }
        #endregion XFields
        #region RecebeDadosSVC.XTuple

        public  class XTuple : XDataTuple
        {

            public XTuple()
            {
            }

            public XTuple(Object[] pSource)
                : base(pSource)
            {
            }

            public XTuple(Int32 pColCount)
               : this(new Object[pColCount])
            {
            }

            public readonly XFields Fields = new XFields();

            #nullable enable

        public Byte[] Dados
        {
            get
            {
                return (Byte[])Value[RecebeDadosSVC.Dados.ID];
            }
            set
            {
                Value[RecebeDadosSVC.Dados.ID] = value;
            }
        }
        public Byte[]? oDados
        {
            get
            {
                GetOldValue(RecebeDadosSVC.Dados, out Object ovlr);
                return (Byte[]?)ovlr;
            }
        }

        public Boolean IsOk
        {
            get
            {
                return (Boolean)Value[RecebeDadosSVC.IsOk.ID];
            }
            set
            {
                Value[RecebeDadosSVC.IsOk.ID] = value;
            }
        }
        public Boolean? oIsOk
        {
            get
            {
                GetOldValue(RecebeDadosSVC.IsOk, out Object ovlr);
                return (Boolean?)ovlr;
            }
        }

        public Guid PrimeryKeyID
        {
            get
            {
                return (Guid)Value[RecebeDadosSVC.PrimeryKeyID.ID];
            }
            set
            {
                Value[RecebeDadosSVC.PrimeryKeyID.ID] = value;
            }
        }
        public Guid? oPrimeryKeyID
        {
            get
            {
                GetOldValue(RecebeDadosSVC.PrimeryKeyID, out Object ovlr);
                return (Guid?)ovlr;
            }
        }

            #nullable disable
        }
        #endregion RecebeDadosSVC.XTuple

        #region RecebeDadosSVC.XDataSet

        public class XDataSet : XDataSet<RecebeDadosSVC.XTuple>
        {
            public XDataSet()
            {
                DataSetType = typeof(RecebeDadosSVC.XDataSet);
            }
        }

        public class XDataSet<T> : XServiceDataSet<RecebeDadosSVC.XTuple> where T : XDataTuple
        {

            public class xFLDs{
                public Guid Dados => RecebeDadosSVC.Dados.ID;
                public Guid IsOk => RecebeDadosSVC.IsOk.ID;
                public Guid PrimeryKeyID => RecebeDadosSVC.PrimeryKeyID.ID;
            }

            public xFLDs FLDs = new xFLDs();

            public XDataSet()
            {
                DataSetType = typeof(RecebeDadosSVC.XDataSet);
            }

        }
        #endregion RecebeDadosSVC.XDataSet
        #if !OnlyDef
        #region RecebeDadosSVC.XRule
        public abstract class XRule : XServiceUtilRule<RecebeDadosSVC.XDataSet, RecebeDadosSVC, RecebeDadosSVC.XTuple>
        {
        }
        #endregion RecebeDadosSVC.XRule

        [Guid(RecebeDadosSVC.sCID)]
        public  interface XService : XIBaseService
        {
            new XDataSet DataSet
            {
                get;
            }
            new XTuple NewTuple(Object pPKValue = null);
             IEnumerable<XTuple> Tuples
            {
                get;
            }
             XTuple Current
            {
                get;
            }
            new XDataSet Get(XServiceData pData);
             XDataSet Get(params Object[] pWhere);
        }
        [XRegister(typeof(_Service), _Service.sCID, typeof(RecebeDadosSVC))]
        protected class _Service : Service<RecebeDadosSVC, XDataSet, XTuple>
        {
            public const String sCID = "F2C1BD6E-D170-4EAE-88D8-2909E29D5E58";
            public Guid gCID = new Guid(sCID);
        }

        public class Service<TModel, TDataSet, TTuple> : XBaseService<RecebeDadosSVC, XDataSet, XTuple>, XService
             where TModel : RecebeDadosSVC, new()
             where TDataSet : XDataSet, new()
             where TTuple : XTuple
        {
            XDataSet XService.DataSet => (XDataSet)DataSet;
            XTuple XService.NewTuple(Object pPKValue)
            {
                return (XTuple)NewTuple(pPKValue);
            }
            public new XDataTuple NewTuple(Object pPKValue = null)
            {
                return (XTuple)base.NewTuple(pPKValue);
            }
            IEnumerable<XTuple> XService.Tuples => (IEnumerable<XTuple>)Tuples;
            XTuple XService.Current => (XTuple )Current;
            XDataSet XService.Get(XServiceData pData)
            {
                return (XDataSet)Get(pData);
            }
            XDataSet XService.Get(params Object[] pWhere)
            {
                return (XDataSet)Get(pWhere);
            }
            public Service()
            {
                ID = gCID;
            }
        }
        #endif
    }

}