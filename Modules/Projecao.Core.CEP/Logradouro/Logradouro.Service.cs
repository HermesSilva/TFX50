//<auto-generated/>
using System;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using TFX.Core;
using TFX.Core.Model;
using TFX.Core.Services;
using TFX.Core.Reflections;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.Extensions.DependencyInjection;
using TFX.Core.Exceptions;
using Microsoft.AspNetCore.Http;
using System.Data;
using TFX.Core.Lzma;
using TFX.Core.Identity;
using System.Text;
using Projecao.Core.CEP.Logradouro.Rules;
using Projecao.Core.CEP.Logradouro;

namespace Projecao.Core.CEP.Logradouro
{
    [XGuid("B4838416-BB04-446B-B189-3D69440046A7", typeof(ILogradouroService))]
    public class LogradouroService : XService, ILogradouroService
    {
        public class CEPxLogradouro : XEntity
        {
            [MaxLength(8)]
            [DisplayFormat(DataFormatString = "00.000-000")]
            public String CEP {get; set;}

            [Display(Name = "Bairro")]
            [Required()]
            public Int32 CEPxBairroID {get; set;}

            [Display(Name = "Localidade")]
            [Required()]
            public Int32 CEPxLocalidadeID {get; set;}

            public Boolean IsPKEmpty => Object.Equals(CEPxLogradouroID, typeof(Int32).GetDefault());
            [Display(Name = "Logradouro")]
            [Required()]
            [DatabaseGenerated(DatabaseGeneratedOption.None)]
            public Int32 CEPxLogradouroID {get; set;}

            [MaxLength(128)]
            [Required()]
            public String Nome {get; set;}

            [Display(Name = "Número")]
            [Required()]
            public Int32 Numero {get; set;}

            [MaxLength(30)]
            [Required()]
            public String Tipo {get; set;}


            public List<CEPxBairro> CEPxBairro {get; set;} = new List<CEPxBairro>();

            public List<CEPxLocalidade> CEPxLocalidade {get; set;} = new List<CEPxLocalidade>();
        }
        public class CEPxBairro : XEntity
        {
            [Display(Name = "Abreviatura")]
            [MaxLength(25)]
            public String Breviatura {get; set;}

            public Boolean IsPKEmpty => Object.Equals(CEPxBairroID, typeof(Int32).GetDefault());
            [Display(Name = "Bairro")]
            [Required()]
            [DatabaseGenerated(DatabaseGeneratedOption.None)]
            public Int32 CEPxBairroID {get; set;}

            [Display(Name = "Localidade")]
            [Required()]
            public Int32 CEPxLocalidadeID {get; set;}

            [MaxLength(128)]
            [Required()]
            public String Nome {get; set;}

            [Display(Name = "Número")]
            [Required()]
            public Int32 Numero {get; set;}


            public CEPxLogradouro CEPxLogradouro {get; set;}
        }
        public class CEPxLocalidade : XEntity
        {
            [Display(Name = "CEP Geral")]
            [MaxLength(8)]
            public String CEPGeral {get; set;}

            public Boolean IsPKEmpty => Object.Equals(CEPxLocalidadeID, typeof(Int32).GetDefault());
            [Display(Name = "Localidade")]
            [Required()]
            [DatabaseGenerated(DatabaseGeneratedOption.None)]
            public Int32 CEPxLocalidadeID {get; set;}

            [Display(Name = "Tipo de Localidade")]
            [Required()]
            public Int16 CEPxLocalidadeTipoID {get; set;}

            [Display(Name = "Município")]
            [Required()]
            public Int32 CEPxMunicipioID {get; set;}

            [Display(Name = "Unidade Federativa")]
            [Required()]
            public Int16 CEPxUFID {get; set;}

            [Display(Name = "Código no IBGE")]
            [MaxLength(7)]
            [DisplayFormat(DataFormatString = "0000000")]
            public String CodigoIBGE {get; set;}

            [Display(Name = "Nome da Localidade")]
            [MaxLength(128)]
            [Required()]
            public String Nome {get; set;}

            [Display(Name = "Número")]
            [Required()]
            public Int32 Numero {get; set;}


            public List<CEPxUF> CEPxUF {get; set;} = new List<CEPxUF>();

            public CEPxLogradouro CEPxLogradouro {get; set;}
        }
        public class CEPxUF : XEntity
        {
            [Display(Name = "CEP Final")]
            [MaxLength(8)]
            [Required()]
            public String CEPFinal {get; set;}

            [Display(Name = "CEP Inicial")]
            [MaxLength(8)]
            [Required()]
            public String CEPInicial {get; set;}

            [Display(Name = "País")]
            [Required()]
            public Int16 CEPxPaisID {get; set;}

            public Boolean IsPKEmpty => Object.Equals(CEPxUFID, typeof(Int16).GetDefault());
            [Display(Name = "UF")]
            [Required()]
            [DatabaseGenerated(DatabaseGeneratedOption.None)]
            public Int16 CEPxUFID {get; set;}

            [Display(Name = "Nome da UF")]
            [MaxLength(45)]
            [Required()]
            public String Nome {get; set;}

            [Display(Name = "Sigla da UF")]
            [MaxLength(2)]
            [Required()]
            public String Sigla {get; set;}


            public CEPxLocalidade CEPxLocalidade {get; set;}
        }
        public class DBContext : XDBContext
        {
            public DBContext(DbContextOptions<DBContext> pOptions, XITenantProvider pTenantProvider, XISharedTransaction pSharedTransaction)
                   : base(pOptions, pTenantProvider, pSharedTransaction)
            {
            }

            public DbSet<CEPxLogradouro> CEPxLogradouro{get; set;}
            public DbSet<CEPxBairro> CEPxBairro{get; set;}
            public DbSet<CEPxLocalidade> CEPxLocalidade{get; set;}
            public DbSet<CEPxUF> CEPxUF{get; set;}

        private void ConfigureCEPxLogradouro(ModelBuilder pBuilder)
        {
            pBuilder.Entity<CEPxLogradouro>(ett =>
            {
                ett.HasKey(e => e.CEPxLogradouroID).HasName("PK_CEPxLogradouro");

                ett.Property(d => d.CEPxBairroID).HasColumnType(GetDBType("Int32"));
                ett.Property(d => d.CEPxLogradouroID).HasColumnType(GetDBType("Int32"));
                ett.Property(d => d.Nome).HasColumnType(GetDBType("String", 128));
                ett.Property(d => d.CEPxLocalidadeID).HasColumnType(GetDBType("Int32"));
                ett.Property(d => d.Tipo).HasColumnType(GetDBType("String", 30));
                ett.Property(d => d.Numero).HasColumnType(GetDBType("Int32"));
                ett.Property(d => d.CEP).HasColumnType(GetDBType("String", 8)).IsRequired(false);
                ett.ToTable("CEPxLogradouro");
            });
        }
        private void ConfigureCEPxBairro(ModelBuilder pBuilder)
        {
            pBuilder.Entity<CEPxBairro>(ett =>
            {
                ett.HasKey(e => e.CEPxBairroID).HasName("PK_CEPxBairro");

                ett.Property(d => d.CEPxLocalidadeID).HasColumnType(GetDBType("Int32"));
                ett.Property(d => d.CEPxBairroID).HasColumnType(GetDBType("Int32"));
                ett.Property(d => d.Nome).HasColumnType(GetDBType("String", 128));
                ett.Property(d => d.Breviatura).HasColumnType(GetDBType("String", 25)).IsRequired(false);
                ett.Property(d => d.Numero).HasColumnType(GetDBType("Int32"));
                ett.ToTable("CEPxBairro");
                ett.HasOne(d => d.CEPxLogradouro)
                   .WithMany(p => p.CEPxBairro)
                   .HasForeignKey(d => d.CEPxBairroID)
                   .OnDelete(DeleteBehavior.Restrict);
            });
        }
        private void ConfigureCEPxLocalidade(ModelBuilder pBuilder)
        {
            pBuilder.Entity<CEPxLocalidade>(ett =>
            {
                ett.HasKey(e => e.CEPxLocalidadeID).HasName("PK_CEPxLocalidade");

                ett.Property(d => d.CEPxLocalidadeID).HasColumnType(GetDBType("Int32"));
                ett.Property(d => d.CEPxUFID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.Nome).HasColumnType(GetDBType("String", 128));
                ett.Property(d => d.CEPxMunicipioID).HasColumnType(GetDBType("Int32"));
                ett.Property(d => d.CodigoIBGE).HasColumnType(GetDBType("String", 7)).IsRequired(false);
                ett.Property(d => d.CEPxLocalidadeTipoID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.CEPGeral).HasColumnType(GetDBType("String", 8)).IsRequired(false)
                    .HasDefaultValue(GetDBValue("String", null));
                ett.Property(d => d.Numero).HasColumnType(GetDBType("Int32"));
                ett.ToTable("CEPxLocalidade");
                ett.HasOne(d => d.CEPxLogradouro)
                   .WithMany(p => p.CEPxLocalidade)
                   .HasForeignKey(d => d.CEPxLocalidadeID)
                   .OnDelete(DeleteBehavior.Restrict);
            });
        }
        private void ConfigureCEPxUF(ModelBuilder pBuilder)
        {
            pBuilder.Entity<CEPxUF>(ett =>
            {
                ett.HasKey(e => e.CEPxUFID).HasName("PK_CEPxUF");

                ett.Property(d => d.CEPxUFID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.Nome).HasColumnType(GetDBType("String", 45));
                ett.Property(d => d.Sigla).HasColumnType(GetDBType("String", 2));
                ett.Property(d => d.CEPxPaisID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.CEPInicial).HasColumnType(GetDBType("String", 8));
                ett.Property(d => d.CEPFinal).HasColumnType(GetDBType("String", 8));
                ett.ToTable("CEPxUF");
                ett.HasOne(d => d.CEPxLocalidade)
                   .WithMany(p => p.CEPxUF)
                   .HasForeignKey(d => d.CEPxUFID)
                   .OnDelete(DeleteBehavior.Restrict);
            });
        }

            protected override void OnModelCreating(ModelBuilder pBuilder)
            {
                ConfigureCEPxLogradouro(pBuilder);
                ConfigureCEPxBairro(pBuilder);
                ConfigureCEPxLocalidade(pBuilder);
                ConfigureCEPxUF(pBuilder);
                base.OnModelCreating(pBuilder);
            }

            protected override string GetConnectionString()
            {
                if (ConnectionString != null)
                    return ConnectionString;
                return XEnvironment.Read("SQL_SERVER_TFX", base.GetConnectionString());
            }
        }

        public abstract class BaseINFLogradouroServiceRule : XServiceINFRule<LogradouroService, LogradouroTuple>
        {
            public BaseINFLogradouroServiceRule(LogradouroService pService)
                : base(pService)
            {
            }
            protected DBContext Context
            {
                get;
                private set;
            }
            protected internal virtual T GetWhere<T>(T pQuery)
            {
                return pQuery;
            }
            internal void SetContext(DBContext pContext)
            {
                Context = pContext;
            }

        }

        public LogradouroService(ILogger<XService> pLogger, DBContext pContext)
               :base(pLogger)
        {
            Rule = new LogradouroRule(this);
            _INFRule = new INFLogradouroServiceRule(this);
            Context = pContext;
            _INFRule.SetContext(Context);
        }

        internal XIServiceRule<LogradouroTuple, LogradouroTuple> Rule;
        private INFLogradouroServiceRule _INFRule;

        public override Guid ID => new Guid("B4838416-BB04-446B-B189-3D69440046A7");

        public DBContext Context
        {
            get;
        }

        public override void GracefullyClose()
        {
            Context.Commit();
        }
        public IQueryable<LogradouroTuple> ExecuteQuery(LogradouroFilter pFilter)
        {
            var ctx = Context;
            var query = from CEPxLogradouro in ctx.CEPxLogradouro
                        join CEPxBairro in ctx.CEPxBairro on CEPxLogradouro.CEPxBairroID equals CEPxBairro.CEPxBairroID
                        join CEPxLocalidade in ctx.CEPxLocalidade on CEPxLogradouro.CEPxLocalidadeID equals CEPxLocalidade.CEPxLocalidadeID
                        join CEPxUF in ctx.CEPxUF on CEPxLocalidade.CEPxUFID equals CEPxUF.CEPxUFID
                        
                        select new {CEPxLogradouro, CEPxBairro, CEPxLocalidade, CEPxUF};
            query = _INFRule.GetWhere(query);


            if (pFilter != null)
            {
                if (!pFilter.Nome.IsEmpty())
                    query = query.Where(q => q.CEPxLogradouro.Nome == pFilter.Nome);
            }

            if (!LoadAll)
            {
                if (pFilter?.SkipRows > 0)
                    query = query.Skip(pFilter.SkipRows.Value);

                if (pFilter?.TakeRows > 0)
                    query = query.Take(pFilter.TakeRows.Value);
                else
                    query = query.Take(75);
            }

            var qry = query.Select(q => new LogradouroTuple(q.CEPxLogradouro.CEP,
                                q.CEPxLocalidade.CodigoIBGE,
                                q.CEPxLocalidade.CEPGeral,
                                q.CEPxBairro.Breviatura,
                                q.CEPxLogradouro.Numero,
                                q.CEPxLogradouro.Tipo,
                                q.CEPxLogradouro.Nome,
                                q.CEPxLocalidade.Nome,
                                q.CEPxUF.Sigla,
                                q.CEPxBairro.Nome,
                                q.CEPxLogradouro.CEPxLogradouroID));
            return qry;
        }

        public LogradouroDataSet Execute(LogradouroFilter pFilter)
        {
            _INFRule.InternalBeforeExecute();
            var qry = ExecuteQuery(pFilter);
            var tuples = qry.ToList();
            tuples = Rule.InternalAfterSelect(tuples);
            _INFRule.InternalAfterExecute(tuples);
            var dataset = new LogradouroDataSet { Tuples = tuples };
            return dataset;
        }
    }
}