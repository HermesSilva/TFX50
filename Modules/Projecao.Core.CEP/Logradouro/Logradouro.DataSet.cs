//<auto-generated/>
using System;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Microsoft.AspNetCore.Mvc;
using TFX.Core.Reflections;
using TFX.Core.Model;
using TFX.Core.Interfaces;
using TFX.Core;
using TFX.Core.Services;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Http;
using TFX.Core.Lzma;
using TFX.Core.Model.FRM;
using TFX.Core.DB;
using TFX.Core.Model.Service;

namespace Projecao.Core.CEP.Logradouro
{
    public class LogradouroServiceModel : XServiceModel
    {
        public static Guid CID = new Guid("B4838416-BB04-446B-B189-3D69440046A7");
        public LogradouroServiceModel()
        {
            SearchPath = "Logradouro/Search";
            DataView.Columns.Add(new XColumnModel() { Name = "CEP", Title = "CEP", Type = "String", Mask = "00.000-000", 
                                                      Visible = true, IsFreeSearch = true, Operator = XOperator.EqualTo });
            DataView.Columns.Add(new XColumnModel() { Name = "CodigoIBGE", Title = "Código no IBGE", Type = "String", Mask = "0000000", 
                                                      Visible = false });
            DataView.Columns.Add(new XColumnModel() { Name = "CEPGeral", Title = "CEP Geral", Type = "String", Mask = "", 
                                                      Visible = false });
            DataView.Columns.Add(new XColumnModel() { Name = "Breviatura", Title = "Abreviatura", Type = "String", Mask = "", 
                                                      Visible = false });
            DataView.Columns.Add(new XColumnModel() { Name = "Numero", Title = "Número", Type = "Int32", Mask = "", 
                                                      Visible = false });
            DataView.Columns.Add(new XColumnModel() { Name = "Tipo", Title = "Tipo", Type = "String", Mask = "", 
                                                      Visible = true, IsFreeSearch = true, Operator = XOperator.EqualTo });
            DataView.Columns.Add(new XColumnModel() { Name = "Nome", Title = "Nome do Logradouro", Type = "String", Mask = "", 
                                                      Visible = true, IsFreeSearch = true, Operator = XOperator.EqualTo });
            DataView.Columns.Add(new XColumnModel() { Name = "NomeLocalidade", Title = "Nome da Localidade", Type = "String", Mask = "", 
                                                      Visible = true, IsFreeSearch = true, Operator = XOperator.EqualTo });
            DataView.Columns.Add(new XColumnModel() { Name = "Sigla", Title = "Sigla da UF", Type = "String", Mask = "", 
                                                      Visible = true, IsFreeSearch = true, Operator = XOperator.EqualTo });
            DataView.Columns.Add(new XColumnModel() { Name = "NomeBairro", Title = "Nome do Bairro", Type = "String", Mask = "", 
                                                      Visible = true, IsFreeSearch = true, Operator = XOperator.EqualTo });
            DataView.Columns.Add(new XColumnModel() { Name = "CEPxLogradouroID", Title = "Logradouro", Type = "Int32", Mask = "", 
                                                      Visible = false });
            Forms.Add(new FRMLogradouroFilter());
        }
    }
    public class LogradouroTuple : XServiceDataTuple
    {
        public LogradouroTuple()
        {
            Initialize();
        }

        public LogradouroTuple(String pCEP, String pCodigoIBGE, String pCEPGeral, String pBreviatura, Int32 pNumero, String pTipo, String pNome, String pNomeLocalidade, String pSigla, String pNomeBairro, Int32 pCEPxLogradouroID)
            : this()
        {
            CEP.Value = pCEP;
            CodigoIBGE.Value = pCodigoIBGE;
            CEPGeral.Value = pCEPGeral;
            Breviatura.Value = pBreviatura;
            Numero.Value = pNumero;
            Tipo.Value = pTipo;
            Nome.Value = pNome;
            NomeLocalidade.Value = pNomeLocalidade;
            Sigla.Value = pSigla;
            NomeBairro.Value = pNomeBairro;
            CEPxLogradouroID.Value = pCEPxLogradouroID;
        }

        public override void Initialize()
        {
            CEP = new XStringDataField();
            CodigoIBGE = new XStringDataField();
            CEPGeral = new XStringDataField();
            Breviatura = new XStringDataField();
            Numero = new XInt32DataField();
            Tipo = new XStringDataField();
            Nome = new XStringDataField();
            NomeLocalidade = new XStringDataField();
            Sigla = new XStringDataField();
            NomeBairro = new XStringDataField();
            CEPxLogradouroID = new XInt32DataField();
        }

        [DisplayFormat(DataFormatString = "00.000-000")]
        public XStringDataField CEP {get;set;}
        [DisplayFormat(DataFormatString = "0000000")]
        [Display(Name = "Código no IBGE")]
        public XStringDataField CodigoIBGE {get;set;}
        [Display(Name = "CEP Geral")]
        public XStringDataField CEPGeral {get;set;}
        [Display(Name = "Abreviatura")]
        public XStringDataField Breviatura {get;set;}
        [Display(Name = "Número")]
        public XInt32DataField Numero {get;set;}
        public XStringDataField Tipo {get;set;}
        [Display(Name = "Nome do Logradouro")]
        public XStringDataField Nome {get;set;}
        [Display(Name = "Nome da Localidade")]
        public XStringDataField NomeLocalidade {get;set;}
        [Display(Name = "Sigla da UF")]
        public XStringDataField Sigla {get;set;}
        [Display(Name = "Nome do Bairro")]
        public XStringDataField NomeBairro {get;set;}
        [Display(Name = "Logradouro")]
        public XInt32DataField CEPxLogradouroID {get;set;}
    }

    public class LogradouroFilter : XFilter
    {

        public LogradouroFilter()
        {
        }
        public String Nome {get;set;}
        public String Sigla {get;set;}
        public String CEP {get;set;}
        public String NomeBairro {get;set;}
        public String Tipo {get;set;}
        public String NomeLocalidade {get;set;}
    }
    public class FRMLogradouroFilter : XFRMModel
    {
        public FRMLogradouroFilter()
        {
            ID = new Guid("4222089D-6E91-4E92-AC18-B62812A2E24F");
            Name = "LogradouroFilter";
            Title = "";
            MinRows = 2;
            Style = XFRMStyle.Normal;
            Type = XFRMType.SVCFilter;
            XFRMField fld;
            fld = AddField(new XFRMField());
            fld.ForceRW = true;
            fld.Title = "Dados para Pesquisa";
            fld.CanInsert = true;
            fld.CanUpdate = true;
            fld.RowCount = 2;
            fld.ColCount = 32;
            fld.IsHidden = false;
            fld.Location = 1;
            fld.EditorCID = XModelEditors.XSearchBox;
            fld.Operator = XOperator.EqualTo;
            fld.JustifyHeight = false;
            fld.AllowEmpty = true;
            fld.FontColor = "#000000";
            fld.FontStyle = XFontStyle.Normal;
            fld.ShowFooter = false;
            fld.ViewSAM = new Guid("00000000-0000-0000-0000-000000000000");
            fld.Order = 1;
            fld.Scale = -1;
            fld.Length = -1;
            fld.TypeID = XDataTypes.XString;
            fld.AdditionalFieldsID = new Guid[] {  };
            fld.AdditionalDataFieldsID = new Guid[] {  };
            fld.TargetFilterFieldID = new Guid[] {  };
            fld.SourceFilterFieldID = new Guid[] {  };
            fld.TargetDisplayFieldID = new Guid[] {  };
            fld.SourceDisplayFieldID = new Guid[] {  };
            fld.AutoLoad = false;
            fld.FilterInative = true;
            fld.IsAnswer = false;
            fld.AllowMultiSelect = false;
        }
    }


    public class LogradouroRequest : XRequest
    {
        public Int32 CEPxLogradouroID {get;set;}
    }

    public interface ILogradouroService : XIService
    {

        LogradouroDataSet Execute(LogradouroFilter pFilter);
        IQueryable<LogradouroTuple> ExecuteQuery(LogradouroFilter pFilter);
    }

    public abstract class BaseLogradouroRule : XServiceRule<LogradouroTuple, LogradouroTuple>
    {
        public BaseLogradouroRule(XService pOwner)
            :base(pOwner)
        {
        }

        public virtual LogradouroFilter Execute(LogradouroFilter pFilter)
        {
            return pFilter;
        }
    }

    public class LogradouroDataSet : XDataSet<LogradouroTuple>
    {
        public override Guid ID => new Guid("B4838416-BB04-446B-B189-3D69440046A7");
    }
}