//<auto-generated/>
using System;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Microsoft.AspNetCore.Mvc;
using TFX.Core.Reflections;
using TFX.Core.Model;
using TFX.Core.Interfaces;
using TFX.Core;
using TFX.Core.Services;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Http;
using TFX.Core.Lzma;
using TFX.Core.Model.FRM;
using TFX.Core.DB;
using TFX.Core.Model.Service;

namespace Projecao.Core.CEP.Localidade
{
    public class LocalidadeServiceModel : XServiceModel
    {
        public static Guid CID = new Guid("447A4B15-4C86-4FFF-B29F-8F2FFF7D7EFD");
        public LocalidadeServiceModel()
        {
            SearchPath = "Localidade/Search";
            DataView.Columns.Add(new XColumnModel() { Name = "CEPxLocalidadeID", Title = "Localidade", Type = "Int32", Mask = "", 
                                                      Visible = false });
            DataView.Columns.Add(new XColumnModel() { Name = "PaisSigla", Title = "País", Type = "String", Mask = "", 
                                                      Visible = false });
            DataView.Columns.Add(new XColumnModel() { Name = "CEPxLocalidadeTipoID", Title = "Tipo de Localidade", Type = "Int16", Mask = "", 
                                                      Visible = false });
            DataView.Columns.Add(new XColumnModel() { Name = "CEPGeral", Title = "CEP Geral", Type = "String", Mask = "", 
                                                      Visible = false });
            DataView.Columns.Add(new XColumnModel() { Name = "CEPxUFID", Title = "Unidade Federativa", Type = "Int16", Mask = "", 
                                                      Visible = false });
            DataView.Columns.Add(new XColumnModel() { Name = "CodigoIBGE", Title = "Código no IBGE", Type = "String", Mask = "0000000", 
                                                      Visible = true, IsFreeSearch = true, Operator = XOperator.EqualTo });
            DataView.Columns.Add(new XColumnModel() { Name = "Nome", Title = "Nome da Localidade", Type = "String", Mask = "", 
                                                      Visible = true, IsFreeSearch = true, Operator = XOperator.EqualTo });
            DataView.Columns.Add(new XColumnModel() { Name = "Numero", Title = "Número", Type = "Int32", Mask = "", 
                                                      Visible = false });
            DataView.Columns.Add(new XColumnModel() { Name = "Tipo", Title = "Tipo", Type = "String", Mask = "", 
                                                      Visible = true });
            DataView.Columns.Add(new XColumnModel() { Name = "Sigla", Title = "Sigla da UF", Type = "String", Mask = "", 
                                                      Visible = true, IsFreeSearch = true, Operator = XOperator.EqualTo });
            DataView.Columns.Add(new XColumnModel() { Name = "UFNome", Title = "Nome da UF", Type = "String", Mask = "", 
                                                      Visible = true });
            Forms.Add(new FRMLocalidadeFilter());
        }
    }
    public class LocalidadeTuple : XServiceDataTuple
    {
        public LocalidadeTuple()
        {
            Initialize();
        }

        public LocalidadeTuple(Int32 pCEPxLocalidadeID, String pPaisSigla, Int16 pCEPxLocalidadeTipoID, String pCEPGeral, Int16 pCEPxUFID, String pCodigoIBGE, String pNome, Int32 pNumero, String pTipo, String pSigla, String pUFNome)
            : this()
        {
            CEPxLocalidadeID.Value = pCEPxLocalidadeID;
            PaisSigla.Value = pPaisSigla;
            CEPxLocalidadeTipoID.Value = pCEPxLocalidadeTipoID;
            CEPGeral.Value = pCEPGeral;
            CEPxUFID.Value = pCEPxUFID;
            CodigoIBGE.Value = pCodigoIBGE;
            Nome.Value = pNome;
            Numero.Value = pNumero;
            Tipo.Value = pTipo;
            Sigla.Value = pSigla;
            UFNome.Value = pUFNome;
        }

        public override void Initialize()
        {
            CEPxLocalidadeID = new XInt32DataField();
            PaisSigla = new XStringDataField();
            CEPxLocalidadeTipoID = new XInt16DataField();
            CEPGeral = new XStringDataField();
            CEPxUFID = new XInt16DataField();
            CodigoIBGE = new XStringDataField();
            Nome = new XStringDataField();
            Numero = new XInt32DataField();
            Tipo = new XStringDataField();
            Sigla = new XStringDataField();
            UFNome = new XStringDataField();
        }

        [Display(Name = "Localidade")]
        public XInt32DataField CEPxLocalidadeID {get;set;}
        [Display(Name = "País")]
        public XStringDataField PaisSigla {get;set;}
        [Display(Name = "Tipo de Localidade")]
        public XInt16DataField CEPxLocalidadeTipoID {get;set;}
        [Display(Name = "CEP Geral")]
        public XStringDataField CEPGeral {get;set;}
        [Display(Name = "Unidade Federativa")]
        public XInt16DataField CEPxUFID {get;set;}
        [DisplayFormat(DataFormatString = "0000000")]
        [Display(Name = "Código no IBGE")]
        public XStringDataField CodigoIBGE {get;set;}
        [Display(Name = "Nome da Localidade")]
        public XStringDataField Nome {get;set;}
        [Display(Name = "Número")]
        public XInt32DataField Numero {get;set;}
        public XStringDataField Tipo {get;set;}
        [Display(Name = "Sigla da UF")]
        public XStringDataField Sigla {get;set;}
        [Display(Name = "Nome da UF")]
        public XStringDataField UFNome {get;set;}
    }

    public class LocalidadeFilter : XFilter
    {

        public LocalidadeFilter()
        {
        }
        public String Sigla {get;set;}
        public String Nome {get;set;}
        public String CodigoIBGE {get;set;}
    }
    public class FRMLocalidadeFilter : XFRMModel
    {
        public FRMLocalidadeFilter()
        {
            ID = new Guid("F6C27D3E-1CC4-4D07-BD95-27A4168C904F");
            Name = "LocalidadeFilter";
            Title = "";
            MinRows = 2;
            Style = XFRMStyle.Normal;
            Type = XFRMType.SVCFilter;
            XFRMField fld;
            fld = AddField(new XFRMField());
            fld.ForceRW = true;
            fld.Title = "Nome da Localidade";
            fld.CanInsert = true;
            fld.CanUpdate = true;
            fld.RowCount = 2;
            fld.ColCount = 32;
            fld.IsHidden = false;
            fld.Location = 1;
            fld.EditorCID = XModelEditors.XSearchBox;
            fld.Operator = XOperator.Like;
            fld.JustifyHeight = false;
            fld.AllowEmpty = true;
            fld.FontColor = "#000000";
            fld.FontStyle = XFontStyle.Normal;
            fld.ShowFooter = false;
            fld.ViewSAM = new Guid("00000000-0000-0000-0000-000000000000");
            fld.Order = 1;
            fld.Scale = -1;
            fld.Length = -1;
            fld.TypeID = XDataTypes.XString;
            fld.AdditionalFieldsID = new Guid[] { new Guid("03182F31-65B0-45DF-A3FB-D7E76F3F812F"), new Guid("D1B3E21B-37C4-4F23-BD88-FA930D4D1AEC"), new Guid("CB68C234-A8F7-40DA-9885-899A48616D05"), new Guid("AE7859AE-9246-4399-AA6D-5EF37035150B") };
            fld.AdditionalDataFieldsID = new Guid[] {  };
            fld.TargetFilterFieldID = new Guid[] {  };
            fld.SourceFilterFieldID = new Guid[] {  };
            fld.TargetDisplayFieldID = new Guid[] {  };
            fld.SourceDisplayFieldID = new Guid[] {  };
            fld.AutoLoad = false;
            fld.FilterInative = true;
            fld.IsAnswer = false;
            fld.AllowMultiSelect = false;
        }
    }


    public class LocalidadeRequest : XRequest
    {
        public Int32 CEPxLocalidadeID {get;set;}
    }

    public interface ILocalidadeService : XIService
    {
        object Flush(LocalidadeDataSet pDataSet);

        LocalidadeDataSet Execute(LocalidadeFilter pFilter);
        IQueryable<LocalidadeTuple> ExecuteQuery(LocalidadeFilter pFilter);
    }

    public abstract class BaseLocalidadeRule : XServiceRule<LocalidadeTuple, LocalidadeTuple>
    {
        public BaseLocalidadeRule(XService pOwner)
            :base(pOwner)
        {
        }

        public virtual LocalidadeFilter Execute(LocalidadeFilter pFilter)
        {
            return pFilter;
        }
    }

    public class LocalidadeDataSet : XDataSet<LocalidadeTuple>
    {
        public override Guid ID => new Guid("447A4B15-4C86-4FFF-B29F-8F2FFF7D7EFD");
    }
}