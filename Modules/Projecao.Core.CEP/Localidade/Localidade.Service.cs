//<auto-generated/>
using System;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using TFX.Core;
using TFX.Core.Model;
using TFX.Core.Services;
using TFX.Core.Reflections;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.Extensions.DependencyInjection;
using TFX.Core.Exceptions;
using Microsoft.AspNetCore.Http;
using System.Data;
using TFX.Core.Lzma;
using TFX.Core.Identity;
using System.Text;
using Projecao.Core.CEP.Localidade.Rules;
using Projecao.Core.CEP.Localidade;

namespace Projecao.Core.CEP.Localidade
{
    [XGuid("447A4B15-4C86-4FFF-B29F-8F2FFF7D7EFD", typeof(ILocalidadeService))]
    public class LocalidadeService : XService, ILocalidadeService
    {
        public class CEPxUF : XEntity
        {
            [Display(Name = "CEP Final")]
            [MaxLength(8)]
            [Required()]
            public String CEPFinal {get; set;}

            [Display(Name = "CEP Inicial")]
            [MaxLength(8)]
            [Required()]
            public String CEPInicial {get; set;}

            [Display(Name = "País")]
            [Required()]
            public Int16 CEPxPaisID {get; set;}

            public Boolean IsPKEmpty => Object.Equals(CEPxUFID, typeof(Int16).GetDefault());
            [Display(Name = "UF")]
            [Required()]
            [DatabaseGenerated(DatabaseGeneratedOption.None)]
            public Int16 CEPxUFID {get; set;}

            [Display(Name = "Nome da UF")]
            [MaxLength(45)]
            [Required()]
            public String Nome {get; set;}

            [Display(Name = "Sigla da UF")]
            [MaxLength(2)]
            [Required()]
            public String Sigla {get; set;}


            public List<CEPxLocalidade> CEPxLocalidade {get; set;} = new List<CEPxLocalidade>();

            public List<CEPxPais> CEPxPais {get; set;} = new List<CEPxPais>();
        }
        public class CEPxLocalidade : XEntity
        {
            [Display(Name = "CEP Geral")]
            [MaxLength(8)]
            public String CEPGeral {get; set;}

            public Boolean IsPKEmpty => Object.Equals(CEPxLocalidadeID, typeof(Int32).GetDefault());
            [Display(Name = "Localidade")]
            [Required()]
            [DatabaseGenerated(DatabaseGeneratedOption.None)]
            public Int32 CEPxLocalidadeID {get; set;}

            [Display(Name = "Tipo de Localidade")]
            [Required()]
            public Int16 CEPxLocalidadeTipoID {get; set;}

            [Display(Name = "Municipio")]
            [Required()]
            public Int32 CEPxMunicipioID {get; set;}

            [Display(Name = "Unidade Federativa")]
            [Required()]
            public Int16 CEPxUFID {get; set;}

            [Display(Name = "Código no IBGE")]
            [MaxLength(7)]
            [DisplayFormat(DataFormatString = "0000000")]
            public String CodigoIBGE {get; set;}

            [Display(Name = "Nome da Localidade")]
            [MaxLength(128)]
            [Required()]
            public String Nome {get; set;}

            [Display(Name = "Número")]
            [Required()]
            public Int32 Numero {get; set;}


            public CEPxUF CEPxUF {get; set;}

            public CEPxLocalidadeTipo CEPxLocalidadeTipo {get; set;}
        }
        public class CEPxLocalidadeTipo : XEntity
        {
            public Boolean IsPKEmpty => Object.Equals(CEPxLocalidadeTipoID, typeof(Int16).GetDefault());
            [Display(Name = "Tipo de Localidade")]
            [Required()]
            [DatabaseGenerated(DatabaseGeneratedOption.None)]
            public Int16 CEPxLocalidadeTipoID {get; set;}

            [MaxLength(25)]
            [Required()]
            public String Tipo {get; set;}


            public List<CEPxLocalidade> CEPxLocalidade {get; set;} = new List<CEPxLocalidade>();
        }
        public class CEPxPais : XEntity
        {
            [MaxLength(6)]
            [Required()]
            public String BACEN {get; set;}

            public Boolean IsPKEmpty => Object.Equals(CEPxPaisID, typeof(Int16).GetDefault());
            [Display(Name = "Pais")]
            [Required()]
            [DatabaseGenerated(DatabaseGeneratedOption.None)]
            public Int16 CEPxPaisID {get; set;}

            [MaxLength(50)]
            [Required()]
            public String Nome {get; set;}

            [MaxLength(3)]
            [Required()]
            public String Sigla {get; set;}


            public CEPxUF CEPxUF {get; set;}
        }
        public class DBContext : XDBContext
        {
            public DBContext(DbContextOptions<DBContext> pOptions, XITenantProvider pTenantProvider, XISharedTransaction pSharedTransaction)
                   : base(pOptions, pTenantProvider, pSharedTransaction)
            {
            }

            public DbSet<CEPxUF> CEPxUF{get; set;}
            public DbSet<CEPxLocalidade> CEPxLocalidade{get; set;}
            public DbSet<CEPxLocalidadeTipo> CEPxLocalidadeTipo{get; set;}
            public DbSet<CEPxPais> CEPxPais{get; set;}

        private void ConfigureCEPxUF(ModelBuilder pBuilder)
        {
            pBuilder.Entity<CEPxUF>(ett =>
            {
                ett.HasKey(e => e.CEPxUFID).HasName("PK_CEPxUF");

                ett.Property(d => d.CEPxUFID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.Nome).HasColumnType(GetDBType("String", 45));
                ett.Property(d => d.Sigla).HasColumnType(GetDBType("String", 2));
                ett.Property(d => d.CEPxPaisID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.CEPInicial).HasColumnType(GetDBType("String", 8));
                ett.Property(d => d.CEPFinal).HasColumnType(GetDBType("String", 8));
                ett.ToTable("CEPxUF");
            });
        }
        private void ConfigureCEPxLocalidade(ModelBuilder pBuilder)
        {
            pBuilder.Entity<CEPxLocalidade>(ett =>
            {
                ett.HasKey(e => e.CEPxLocalidadeID).HasName("PK_CEPxLocalidade");

                ett.Property(d => d.CEPxLocalidadeID).HasColumnType(GetDBType("Int32"));
                ett.Property(d => d.CEPxUFID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.Nome).HasColumnType(GetDBType("String", 128));
                ett.Property(d => d.CodigoIBGE).HasColumnType(GetDBType("String", 7)).IsRequired(false);
                ett.Property(d => d.CEPxLocalidadeTipoID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.CEPGeral).HasColumnType(GetDBType("String", 8)).IsRequired(false)
                    .HasDefaultValue(GetDBValue("String", null));
                ett.Property(d => d.Numero).HasColumnType(GetDBType("Int32"));
                ett.Property(d => d.CEPxMunicipioID).HasColumnType(GetDBType("Int32"));
                ett.ToTable("CEPxLocalidade");
                ett.HasOne(d => d.CEPxUF)
                   .WithMany(p => p.CEPxLocalidade)
                   .HasForeignKey(d => d.CEPxUFID)
                   .OnDelete(DeleteBehavior.Restrict);
                ett.HasOne(d => d.CEPxLocalidadeTipo)
                   .WithMany(p => p.CEPxLocalidade)
                   .HasForeignKey(d => d.CEPxLocalidadeTipoID)
                   .OnDelete(DeleteBehavior.Restrict);
            });
        }
        private void ConfigureCEPxLocalidadeTipo(ModelBuilder pBuilder)
        {
            pBuilder.Entity<CEPxLocalidadeTipo>(ett =>
            {
                ett.HasKey(e => e.CEPxLocalidadeTipoID).HasName("PK_CEPxLocalidadeTipo");

                ett.Property(d => d.CEPxLocalidadeTipoID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.Tipo).HasColumnType(GetDBType("String", 25));
                ett.ToTable("CEPxLocalidadeTipo");
            });
        }
        private void ConfigureCEPxPais(ModelBuilder pBuilder)
        {
            pBuilder.Entity<CEPxPais>(ett =>
            {
                ett.HasKey(e => e.CEPxPaisID).HasName("PK_CEPxPais");

                ett.Property(d => d.CEPxPaisID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.Sigla).HasColumnType(GetDBType("String", 3));
                ett.Property(d => d.Nome).HasColumnType(GetDBType("String", 50));
                ett.Property(d => d.BACEN).HasColumnType(GetDBType("String", 6));
                ett.ToTable("CEPxPais");
                ett.HasOne(d => d.CEPxUF)
                   .WithMany(p => p.CEPxPais)
                   .HasForeignKey(d => d.CEPxPaisID)
                   .OnDelete(DeleteBehavior.Restrict);
            });
        }

            protected override void OnModelCreating(ModelBuilder pBuilder)
            {
                ConfigureCEPxUF(pBuilder);
                ConfigureCEPxLocalidade(pBuilder);
                ConfigureCEPxLocalidadeTipo(pBuilder);
                ConfigureCEPxPais(pBuilder);
                base.OnModelCreating(pBuilder);
            }

            protected override string GetConnectionString()
            {
                if (ConnectionString != null)
                    return ConnectionString;
                return XEnvironment.Read("SQL_SERVER_TFX", base.GetConnectionString());
            }
        }

        public abstract class BaseINFLocalidadeServiceRule : XServiceINFRule<LocalidadeService, LocalidadeTuple>
        {
            public BaseINFLocalidadeServiceRule(LocalidadeService pService)
                : base(pService)
            {
            }
            protected DBContext Context
            {
                get;
                private set;
            }
            protected internal virtual T GetWhere<T>(T pQuery)
            {
                return pQuery;
            }
            internal void SetContext(DBContext pContext)
            {
                Context = pContext;
            }

        }

        public LocalidadeService(ILogger<XService> pLogger, DBContext pContext)
               :base(pLogger)
        {
            Rule = new LocalidadeRule(this);
            _INFRule = new INFLocalidadeServiceRule(this);
            Context = pContext;
            _INFRule.SetContext(Context);
        }

        internal XIServiceRule<LocalidadeTuple, LocalidadeTuple> Rule;
        private INFLocalidadeServiceRule _INFRule;

        public override Guid ID => new Guid("447A4B15-4C86-4FFF-B29F-8F2FFF7D7EFD");

        public DBContext Context
        {
            get;
        }

        public override void GracefullyClose()
        {
            Context.Commit();
        }
        public IQueryable<LocalidadeTuple> ExecuteQuery(LocalidadeFilter pFilter)
        {
            var ctx = Context;
            var query = from CEPxLocalidade in ctx.CEPxLocalidade
                        join CEPxUF in ctx.CEPxUF on CEPxLocalidade.CEPxUFID equals CEPxUF.CEPxUFID
                        join CEPxPais in ctx.CEPxPais on CEPxUF.CEPxPaisID equals CEPxPais.CEPxPaisID
                        join CEPxLocalidadeTipo in ctx.CEPxLocalidadeTipo on CEPxLocalidade.CEPxLocalidadeTipoID equals CEPxLocalidadeTipo.CEPxLocalidadeTipoID
                        
                        select new {CEPxUF, CEPxLocalidade, CEPxLocalidadeTipo, CEPxPais};
            query = _INFRule.GetWhere(query);


            if (pFilter != null)
            {
                if (!pFilter.Nome.IsEmpty())
                    query = query.Where(q => EF.Functions.Like(q.CEPxLocalidade.Nome, "%"+pFilter.Nome+"%"));
            }

            if (!LoadAll)
            {
                if (pFilter?.SkipRows > 0)
                    query = query.Skip(pFilter.SkipRows.Value);

                if (pFilter?.TakeRows > 0)
                    query = query.Take(pFilter.TakeRows.Value);
                else
                    query = query.Take(75);
            }

            var qry = query.Select(q => new LocalidadeTuple(q.CEPxLocalidade.CEPxLocalidadeID,
                                q.CEPxPais.Sigla,
                                q.CEPxLocalidade.CEPxLocalidadeTipoID,
                                q.CEPxLocalidade.CEPGeral,
                                q.CEPxLocalidade.CEPxUFID,
                                q.CEPxLocalidade.CodigoIBGE,
                                q.CEPxLocalidade.Nome,
                                q.CEPxLocalidade.Numero,
                                q.CEPxLocalidadeTipo.Tipo,
                                q.CEPxUF.Sigla,
                                q.CEPxUF.Nome));
            return qry;
        }

        public LocalidadeDataSet Execute(LocalidadeFilter pFilter)
        {
            _INFRule.InternalBeforeExecute();
            var qry = ExecuteQuery(pFilter);
            var tuples = qry.ToList();
            tuples = Rule.InternalAfterSelect(tuples);
            _INFRule.InternalAfterExecute(tuples);
            var dataset = new LocalidadeDataSet { Tuples = tuples };
            return dataset;
        }

        public object Flush(LocalidadeDataSet pDataSet)
        {
            if (pDataSet?.Tuples.Count == 0)
                throw new XUnconformity("Não é permitido Flush sem Tuplas.");
            using (var scope = XEnvironment.Services.CreateScope())
            using (var ctx = scope.ServiceProvider.GetRequiredService<DBContext>())
            {
                Rule?.InternalBeforeFlush(pDataSet.Tuples);

                SetLocalidadeValues(ctx, pDataSet);
                ctx.SaveChanges();

                Rule?.InternalAfterFlush(pDataSet.Tuples);

                return XEndPointMessage.Ok;
            }
        }

        private void SetLocalidadeValues(DBContext ctx, LocalidadeDataSet pDataSet)
        {
            if (pDataSet == null || pDataSet.Tuples == null)
                return;
            foreach (LocalidadeTuple stpl in pDataSet.Tuples)
            {
                var sb = new StringBuilder();
                var CEPxLocalidadetpl = new CEPxLocalidade();
                CEPxLocalidadetpl.CEPxLocalidadeID = stpl.CEPxLocalidadeID.Value;
                CEPxLocalidadetpl.CEPxUFID = stpl.CEPxUFID.Value;
                CEPxLocalidadetpl.Nome = stpl.Nome.Value;
                CEPxLocalidadetpl.CodigoIBGE = stpl.CodigoIBGE.Value;
                CEPxLocalidadetpl.CEPxLocalidadeTipoID = stpl.CEPxLocalidadeTipoID.Value;
                CEPxLocalidadetpl.CEPGeral = stpl.CEPGeral.Value;
                CEPxLocalidadetpl.Numero = stpl.Numero.Value;
                CEPxLocalidadetpl.Validate(sb);
                ctx.CEPxLocalidade.Add(CEPxLocalidadetpl);
                if (!CEPxLocalidadetpl.IsPKEmpty)
                    ctx.Entry(CEPxLocalidadetpl).State = EntityState.Modified;
                else
                    ctx.Entry(CEPxLocalidadetpl).State = EntityState.Added;
                if (sb.Length > 0)
                    throw new Exception(sb.ToString());
            }
        }
    }
}