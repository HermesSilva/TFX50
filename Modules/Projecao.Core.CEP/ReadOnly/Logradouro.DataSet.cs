//<auto-generated/>
using System;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Microsoft.AspNetCore.Mvc;
using TFX.Core.Reflections;
using TFX.Core.Model;
using TFX.Core.Interfaces;
using TFX.Core;
using TFX.Core.Services;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Http;
using TFX.Core.Lzma;
using TFX.Core.Model.FRM;
using TFX.Core.DB;
using TFX.Core.Model.Service;

namespace Projecao.Core.CEP.ReadOnly
{
    public class LogradouroServiceModel : XServiceModel
    {
        public static Guid CID = new Guid("F7E6E0E6-49C5-41F1-AF4F-C54123E24C1E");
        public LogradouroServiceModel()
        {
            SearchPath = "Logradouro/Search";
            DataView.Columns.Add(new XColumnModel() { Name = "Localidade", Title = "Nome da Localidade", Type = "String", Mask = "", 
                                                      Visible = true, IsFreeSearch = true, Operator = XOperator.EqualTo });
            DataView.Columns.Add(new XColumnModel() { Name = "Logradouro", Title = "Logradouro", Type = "String", Mask = "", 
                                                      Visible = true, IsFreeSearch = true, Operator = XOperator.EqualTo });
            DataView.Columns.Add(new XColumnModel() { Name = "Tipo", Title = "Tipo", Type = "String", Mask = "", 
                                                      Visible = true, IsFreeSearch = true, Operator = XOperator.EqualTo });
            DataView.Columns.Add(new XColumnModel() { Name = "Bairro", Title = "Bairro", Type = "String", Mask = "", 
                                                      Visible = true, IsFreeSearch = true, Operator = XOperator.EqualTo });
            DataView.Columns.Add(new XColumnModel() { Name = "Sigla", Title = "Sigla da UF", Type = "String", Mask = "", 
                                                      Visible = true, IsFreeSearch = true, Operator = XOperator.EqualTo });
            DataView.Columns.Add(new XColumnModel() { Name = "CEP", Title = "CEP", Type = "String", Mask = "00.000-000", 
                                                      Visible = true, IsFreeSearch = true, Operator = XOperator.EqualTo });
            DataView.Columns.Add(new XColumnModel() { Name = "CEPxLogradouroID", Title = "Logradouro", Type = "Int32", Mask = "", 
                                                      Visible = false });
            DataView.Columns.Add(new XColumnModel() { Name = "Numero", Title = "Número", Type = "Int32", Mask = "", 
                                                      Visible = false });
            Forms.Add(new FRMLogradouroFilter());
        }
    }
    public class LogradouroTuple : XServiceDataTuple
    {
        public LogradouroTuple()
        {
            Initialize();
        }

        public LogradouroTuple(String pLocalidade, String pLogradouro, String pTipo, String pBairro, String pSigla, String pCEP, Int32 pCEPxLogradouroID, Int32 pNumero)
            : this()
        {
            Localidade.Value = pLocalidade;
            Logradouro.Value = pLogradouro;
            Tipo.Value = pTipo;
            Bairro.Value = pBairro;
            Sigla.Value = pSigla;
            CEP.Value = pCEP;
            CEPxLogradouroID.Value = pCEPxLogradouroID;
            Numero.Value = pNumero;
        }

        public override void Initialize()
        {
            Localidade = new XStringDataField();
            Logradouro = new XStringDataField();
            Tipo = new XStringDataField();
            Bairro = new XStringDataField();
            Sigla = new XStringDataField();
            CEP = new XStringDataField();
            CEPxLogradouroID = new XInt32DataField();
            Numero = new XInt32DataField();
        }

        [Display(Name = "Nome da Localidade")]
        public XStringDataField Localidade {get;set;}
        public XStringDataField Logradouro {get;set;}
        public XStringDataField Tipo {get;set;}
        public XStringDataField Bairro {get;set;}
        [Display(Name = "Sigla da UF")]
        public XStringDataField Sigla {get;set;}
        [DisplayFormat(DataFormatString = "00.000-000")]
        public XStringDataField CEP {get;set;}
        [Display(Name = "Logradouro")]
        public XInt32DataField CEPxLogradouroID {get;set;}
        [Display(Name = "Número")]
        public XInt32DataField Numero {get;set;}
    }

    public class LogradouroFilter : XFilter
    {

        public LogradouroFilter()
        {
        }

        public LogradouroFilter(String pLogradouro)
        {
            Logradouro = pLogradouro;
        }
        public String Logradouro {get;set;}
    }
    public class FRMLogradouroFilter : XFRMModel
    {
        public FRMLogradouroFilter()
        {
            ID = new Guid("781A9725-1E1B-4026-B833-B0E03824881B");
            Name = "LogradouroFilter";
            Title = "";
            MinRows = 2;
            Style = XFRMStyle.Normal;
            Type = XFRMType.SVCFilter;
            XFRMField fld;
            fld = AddField(new XFRMField());
            fld.ForceRW = true;
            fld.Title = "Logradouro";
            fld.CanInsert = true;
            fld.CanUpdate = true;
            fld.RowCount = 2;
            fld.ColCount = 32;
            fld.IsHidden = false;
            fld.Location = 1;
            fld.EditorCID = XModelEditors.XString;
            fld.Operator = XOperator.Like;
            fld.JustifyHeight = false;
            fld.AllowEmpty = true;
            fld.FontColor = "#000000";
            fld.FontStyle = XFontStyle.Normal;
            fld.ShowFooter = false;
            fld.ViewSAM = new Guid("00000000-0000-0000-0000-000000000000");
            fld.Order = 1;
            fld.Scale = -1;
            fld.Length = -1;
            fld.TypeID = XDataTypes.XString;
            fld.AdditionalFieldsID = new Guid[] { new Guid("62E6788A-48D6-49E1-8526-587EC5A5AB2F"), new Guid("63C2FC0F-B117-46A6-B1F8-A42F5F5EDC53"), new Guid("AB358249-4E4D-4655-8C81-35069195BA94"), new Guid("B70901C0-1293-457C-B03F-29CE9393AE57"), new Guid("226BCADC-0DA6-4AD9-98B7-38D6966F8FDC"), new Guid("358E455F-477E-412D-B426-1BE2DC880409") };
            fld.AdditionalDataFieldsID = new Guid[] {  };
            fld.TargetFilterFieldID = new Guid[] {  };
            fld.SourceFilterFieldID = new Guid[] {  };
            fld.TargetDisplayFieldID = new Guid[] {  };
            fld.SourceDisplayFieldID = new Guid[] {  };
            fld.AutoLoad = false;
            fld.FilterInative = true;
            fld.IsAnswer = false;
            fld.AllowMultiSelect = false;
        }
    }


    public class LogradouroRequest : XRequest
    {
        public Int32 CEPxLogradouroID {get;set;}
    }

    public interface ILogradouroService : XIService
    {

        LogradouroDataSet Execute(LogradouroFilter pFilter);
        IQueryable<LogradouroTuple> ExecuteQuery(LogradouroFilter pFilter);
    }

    public abstract class BaseLogradouroRule : XServiceRule<LogradouroTuple, LogradouroTuple>
    {
        public BaseLogradouroRule(XService pOwner)
            :base(pOwner)
        {
        }

        public virtual LogradouroFilter Execute(LogradouroFilter pFilter)
        {
            return pFilter;
        }
    }

    public class LogradouroDataSet : XDataSet<LogradouroTuple>
    {
        public override Guid ID => new Guid("F7E6E0E6-49C5-41F1-AF4F-C54123E24C1E");
    }
}