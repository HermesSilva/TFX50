//<auto-generated/>
using System;
using System.Linq;
using Newtonsoft.Json;
using TFX.Core.Objects;
using TFX.Core.Model.Data;
using TFX.Core.Model.Cache;
using TFX.Core.Reflections;
using TFX.Core.Service.Job;
using TFX.Core.Service.SVC;
using Projecao.Core.NTR.DB;
using TFX.Core.Model.DIC.SVC;
using TFX.Core.Model.DIC.ORM;
using TFX.Core.Model.Services;
using TFX.Core.Model.DIC.Types;
using TFX.Core.Model.Interfaces;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Projecao.Core.NTR.EventoMobile
{
    [XRegister(typeof(MobileConfigLogSVC), sCID)]
    [XDASESource(@"D:\Tootega\Source\TFX20\Modules\Projecao.Core.NTR\Projecao.Core.NTR.csproj", @"D:\Tootega\Source\TFX20\Modules\Projecao.Core.NTR\EventoMobile\MobileConfigLog.dssvc")]
    public class MobileConfigLogSVC : XSVCModel
    {
        public const String sCID = "72E9F7DE-ECC3-44E7-A3A3-A071335257FE";
        public static Guid gCID = new Guid(sCID);
        public static XSVCReference NTRxLogTipo_NTRxLogTipoID_NTRxMobileLogErro_NTRxLogTipoID; // NTRxLogTipo.NTRxLogTipoID --> NTRxMobileLogErro.NTRxLogTipoID

        #region xNTRxLogTipo 
        public class xNTRxLogTipo : XSVCTable
        {

            public static Guid gCID => new Guid("893ABDFA-27FC-473B-9AB2-1F756434A343");

            public xNTRxLogTipo()
            {
                Name = "NTRxLogTipo";
                Alias = "NTRxLogTipo";
                ID = gCID;
                ParentID =  global::Projecao.Core.NTR.DB.NTRx.NTRxLogTipo.gCID;

                Items.Add(NTRxLogTipoID, NTRxLogTipoID.ID);
                NTRxLogTipoID.Owner = this;
                NTRxLogTipoID.OwnerID = ID;
                NTRxLogTipoID.TableName = Name;
                Items.Add(Tipo, Tipo.ID);
                Tipo.Owner = this;
                Tipo.OwnerID = ID;
                Tipo.TableName = Name;
                Tipo.Alias = "Tipo";
            }

            public static XORMPKField NTRxLogTipoID = new XORMPKField(global::Projecao.Core.NTR.DB.NTRx.NTRxLogTipo.NTRxLogTipoID, new Guid("9EF778FC-D1AF-444E-9B36-152184D3F1BD"), "NTRxLogTipoID", "Tipo de Log");
            public static XORMFaceField Tipo = new XORMFaceField(global::Projecao.Core.NTR.DB.NTRx.NTRxLogTipo.Tipo, new Guid("AF30D51B-49F2-4B17-914A-1D2679F7B596"), "Tipo", "Tipo");
        }
        #endregion xNTRxLogTipo 


        #region xNTRxMobileLogErro 
        public class xNTRxMobileLogErro : XSVCTable
        {

            public static Guid gCID => new Guid("FAA87044-12C7-4D49-8AA3-313E5FD6127D");

            public xNTRxMobileLogErro()
            {
                Name = "NTRxMobileLogErro";
                Alias = "NTRxMobileLogErro";
                ID = gCID;
                ParentID =  global::Projecao.Core.NTR.DB.NTRx.NTRxMobileLogErro.gCID;

                Items.Add(NTRxMobileLogErroID, NTRxMobileLogErroID.ID);
                NTRxMobileLogErroID.Owner = this;
                NTRxMobileLogErroID.OwnerID = ID;
                NTRxMobileLogErroID.TableName = Name;
                NTRxMobileLogErroID.Alias = "NTRxMobileLogErroID";
                Items.Add(Data, Data.ID);
                Data.Owner = this;
                Data.OwnerID = ID;
                Data.TableName = Name;
                Data.Alias = "Data";
                Items.Add(Mensagem, Mensagem.ID);
                Mensagem.Owner = this;
                Mensagem.OwnerID = ID;
                Mensagem.TableName = Name;
                Mensagem.Alias = "Mensagem";
                Items.Add(Pilha, Pilha.ID);
                Pilha.Owner = this;
                Pilha.OwnerID = ID;
                Pilha.TableName = Name;
                Pilha.Alias = "Pilha";
                Items.Add(NTRxLogTipoID, NTRxLogTipoID.ID);
                NTRxLogTipoID.Owner = this;
                NTRxLogTipoID.OwnerID = ID;
                NTRxLogTipoID.TableName = Name;
                Items.Add(NTRxMobileConfigID, NTRxMobileConfigID.ID);
                NTRxMobileConfigID.Owner = this;
                NTRxMobileConfigID.OwnerID = ID;
                NTRxMobileConfigID.TableName = Name;
                NTRxMobileConfigID.Alias = "NTRxMobileConfigID";
            }

            public static XORMPKField NTRxMobileLogErroID = new XORMPKField(global::Projecao.Core.NTR.DB.NTRx.NTRxMobileLogErro.NTRxMobileLogErroID, new Guid("049C6385-973B-45A0-B6A5-347DAEE6D59C"), "NTRxMobileLogErroID", "Log de Erro Mobile");
            public static XORMDateTimeField Data = new XORMDateTimeField(global::Projecao.Core.NTR.DB.NTRx.NTRxMobileLogErro.Data, new Guid("6F961C60-4C1C-416D-B5F0-C10950E75B28"), "Data", "Data");
            public static XORMField Mensagem = new XORMField(global::Projecao.Core.NTR.DB.NTRx.NTRxMobileLogErro.Mensagem, new Guid("EBC23BF1-EC9D-437E-9415-F8E31FAB77B0"), "Mensagem", "Mensagem");
            public static XORMField Pilha = new XORMField(global::Projecao.Core.NTR.DB.NTRx.NTRxMobileLogErro.Pilha, new Guid("C7E81697-6A88-4637-B595-9B3DADE58C42"), "Pilha", "Pilha");
            public static XORMFKField NTRxLogTipoID = new XORMFKField(global::Projecao.Core.NTR.DB.NTRx.NTRxMobileLogErro.NTRxLogTipoID, new Guid("A632592C-3D33-4D95-9C3D-5FED7D94A7BD"), "NTRxLogTipoID", "Tipo de Log");
            public static XORMFKField NTRxMobileConfigID = new XORMFKField(global::Projecao.Core.NTR.DB.NTRx.NTRxMobileLogErro.NTRxMobileConfigID, new Guid("984EF9C3-3DC9-4511-93D6-1A907901A3C5"), "NTRxMobileConfigID", "Configurações de Dispositivo Móvel");
        }
        #endregion xNTRxMobileLogErro 


        public xNTRxLogTipo NTRxLogTipo;
        public xNTRxMobileLogErro NTRxMobileLogErro;

        public MobileConfigLogSVC()
        {
            TupleType = typeof(MobileConfigLogSVC.XTuple);
            DataSetType = typeof(MobileConfigLogSVC.XDataSet);
            ServiceRuleCID = new Guid("B1F3262D-EBF2-4550-A3BA-A4AE83EBAEDE");
            OnlyActives = false;
            Actions = XSVCAction.All;
            Type = XServiceType.Default;
            ID = new Guid("72E9F7DE-ECC3-44E7-A3A3-A071335257FE");
            Name = "MobileConfigLog";
            Title = "";
            IsCacheable = false;
            CompanyControl = false;
            IsJob = false;
            AutoLoad = true;
            FreeForUsers = false;
            ServerSideNewRecord = false;
            UseDistinct = false;
            JobType = XJobType.Default;
            CanExport = false;
            ModuleID = new Guid("0E753EE6-8CF5-448C-8438-DAC71A5AECB2");
            Rights = new Int16[] { 1 }; 
            IsReadOnly = true;
            ClientScript = "Projecao.Core.NTR.js";
            GridFields = new Guid[] { xNTRxLogTipo.Tipo.ID, xNTRxMobileLogErro.Data.ID, xNTRxMobileLogErro.Mensagem.ID };
            OrderByFields = new Guid[] { xNTRxMobileLogErro.Data.ID };
            DataSetFields = new Guid[] { xNTRxMobileLogErro.NTRxMobileConfigID.ID, xNTRxMobileLogErro.Pilha.ID, xNTRxMobileLogErro.Mensagem.ID, xNTRxMobileLogErro.Data.ID, xNTRxMobileLogErro.NTRxMobileLogErroID.ID, xNTRxLogTipo.Tipo.ID };
            PKField = xNTRxMobileLogErro.NTRxMobileLogErroID.ID;
            ConfigTableID = new Guid("F26FB60A-701C-4A91-97DE-47C48CC359FC");
            MasterRuleCID = new Guid("B1F3262D-EBF2-4550-A3BA-A4AE83EBAEDE");
            NTRxLogTipo = new xNTRxLogTipo();
            NTRxLogTipo.IsReadOnly = true;
            AddTable(NTRxLogTipo);
            NTRxMobileLogErro = new xNTRxMobileLogErro();
            NTRxMobileLogErro.IsReadOnly = true;
            AddTable(NTRxMobileLogErro);
            MasterTableID = NTRxMobileLogErro.ID;
            NTRxLogTipo_NTRxLogTipoID_NTRxMobileLogErro_NTRxLogTipoID = AddReference(new XSVCReference(new Guid("E841CC30-EB22-4E2F-ADCD-ABF738E887B4"), "FK_E841CC30EB224E2FADCDABF738E887B4", MobileConfigLogSVC.xNTRxLogTipo.gCID, xNTRxLogTipo.NTRxLogTipoID.ID, MobileConfigLogSVC.xNTRxMobileLogErro.gCID, xNTRxMobileLogErro.NTRxLogTipoID.ID, XJoinType.Inner)); // NTRxLogTipo.NTRxLogTipoID --> NTRxMobileLogErro.NTRxLogTipoID
            xNTRxMobileLogErro.Data.IsReadOnly = true;
            xNTRxMobileLogErro.Data.OrderType = XOrderType.Desc;
            xNTRxMobileLogErro.Data.IsDataField = true;
            xNTRxMobileLogErro.Data.AllowEmpty = true;
            xNTRxMobileLogErro.Mensagem.IsReadOnly = true;
            xNTRxMobileLogErro.Mensagem.IsDataField = true;
            xNTRxMobileLogErro.Mensagem.AllowEmpty = true;
            xNTRxMobileLogErro.NTRxMobileConfigID.IsReadOnly = true;
            xNTRxMobileLogErro.NTRxMobileConfigID.IsDataField = true;
            xNTRxMobileLogErro.NTRxMobileConfigID.AllowEmpty = true;
            xNTRxMobileLogErro.NTRxMobileLogErroID.IsReadOnly = true;
            xNTRxMobileLogErro.NTRxMobileLogErroID.IsDataField = true;
            xNTRxMobileLogErro.NTRxMobileLogErroID.AllowEmpty = true;
            xNTRxMobileLogErro.Pilha.IsReadOnly = true;
            xNTRxMobileLogErro.Pilha.IsDataField = true;
            xNTRxMobileLogErro.Pilha.AllowEmpty = true;
            xNTRxLogTipo.Tipo.IsReadOnly = true;
            xNTRxLogTipo.Tipo.Length = 20;
            xNTRxLogTipo.Tipo.IsDataField = true;
            xNTRxLogTipo.Tipo.AllowEmpty = true;
        }

        #region XFields

        public class XFields
        {
        public XORMField Data => xNTRxMobileLogErro.Data;
        public XORMField Mensagem => xNTRxMobileLogErro.Mensagem;
        public XORMField NTRxMobileConfigID => xNTRxMobileLogErro.NTRxMobileConfigID;
        public XORMField NTRxMobileLogErroID => xNTRxMobileLogErro.NTRxMobileLogErroID;
        public XORMField Pilha => xNTRxMobileLogErro.Pilha;
        public XORMField Tipo => xNTRxLogTipo.Tipo;
        }
        #endregion XFields
        #region MobileConfigLogSVC.XTuple

        public  class XTuple : XDataTuple
        {

            public XTuple()
            {
            }

            public XTuple(Object[] pSource)
                : base(pSource)
            {
            }

            public XTuple(Int32 pColCount)
               : this(new Object[pColCount])
            {
            }

            public readonly XFields Fields = new XFields();

            #nullable enable

        public DateTime Data
        {
            get
            {
                return (DateTime)Value[MobileConfigLogSVC.xNTRxMobileLogErro.Data.ID];
            }
            set
            {
                Value[MobileConfigLogSVC.xNTRxMobileLogErro.Data.ID] = value;
            }
        }
        public DateTime? oData
        {
            get
            {
                GetOldValue(MobileConfigLogSVC.xNTRxMobileLogErro.Data, out Object ovlr);
                return (DateTime?)ovlr;
            }
        }

        public String Mensagem
        {
            get
            {
                return (String)Value[MobileConfigLogSVC.xNTRxMobileLogErro.Mensagem.ID];
            }
            set
            {
                Value[MobileConfigLogSVC.xNTRxMobileLogErro.Mensagem.ID] = value;
            }
        }
        public String? oMensagem
        {
            get
            {
                GetOldValue(MobileConfigLogSVC.xNTRxMobileLogErro.Mensagem, out Object ovlr);
                return (String?)ovlr;
            }
        }

        public Guid NTRxMobileConfigID
        {
            get
            {
                return (Guid)Value[MobileConfigLogSVC.xNTRxMobileLogErro.NTRxMobileConfigID.ID];
            }
            set
            {
                Value[MobileConfigLogSVC.xNTRxMobileLogErro.NTRxMobileConfigID.ID] = value;
            }
        }
        public Guid? oNTRxMobileConfigID
        {
            get
            {
                GetOldValue(MobileConfigLogSVC.xNTRxMobileLogErro.NTRxMobileConfigID, out Object ovlr);
                return (Guid?)ovlr;
            }
        }

        public Int32 NTRxMobileLogErroID
        {
            get
            {
                return (Int32)Value[MobileConfigLogSVC.xNTRxMobileLogErro.NTRxMobileLogErroID.ID];
            }
            set
            {
                Value[MobileConfigLogSVC.xNTRxMobileLogErro.NTRxMobileLogErroID.ID] = value;
            }
        }
        public Int32? oNTRxMobileLogErroID
        {
            get
            {
                GetOldValue(MobileConfigLogSVC.xNTRxMobileLogErro.NTRxMobileLogErroID, out Object ovlr);
                return (Int32?)ovlr;
            }
        }

        public String Pilha
        {
            get
            {
                return (String)Value[MobileConfigLogSVC.xNTRxMobileLogErro.Pilha.ID];
            }
            set
            {
                Value[MobileConfigLogSVC.xNTRxMobileLogErro.Pilha.ID] = value;
            }
        }
        public String? oPilha
        {
            get
            {
                GetOldValue(MobileConfigLogSVC.xNTRxMobileLogErro.Pilha, out Object ovlr);
                return (String?)ovlr;
            }
        }

        public String Tipo
        {
            get
            {
                return (String)Value[MobileConfigLogSVC.xNTRxLogTipo.Tipo.ID];
            }
            set
            {
                Value[MobileConfigLogSVC.xNTRxLogTipo.Tipo.ID] = value;
            }
        }
        public String? oTipo
        {
            get
            {
                GetOldValue(MobileConfigLogSVC.xNTRxLogTipo.Tipo, out Object ovlr);
                return (String?)ovlr;
            }
        }

            #nullable disable
        }
        #endregion MobileConfigLogSVC.XTuple

        #region MobileConfigLogSVC.XRule
        public abstract class XRule : XServiceRule<MobileConfigLogSVC.XDataSet, MobileConfigLogSVC, MobileConfigLogSVC.XTuple>
        {
        }
        #endregion MobileConfigLogSVC.XRule

        #region MobileConfigLogSVC.XDataSet

        public class XDataSet : XDataSet<MobileConfigLogSVC.XTuple>
        {
            public XDataSet()
            {
                DataSetType = typeof(MobileConfigLogSVC.XDataSet);
            }
        }

        public class XDataSet<T> : XServiceDataSet<MobileConfigLogSVC.XTuple> where T : XDataTuple
        {

            public Guid Data => MobileConfigLogSVC.xNTRxMobileLogErro.Data.ID;
            public Guid Mensagem => MobileConfigLogSVC.xNTRxMobileLogErro.Mensagem.ID;
            public Guid NTRxMobileConfigID => MobileConfigLogSVC.xNTRxMobileLogErro.NTRxMobileConfigID.ID;
            public Guid NTRxMobileLogErroID => MobileConfigLogSVC.xNTRxMobileLogErro.NTRxMobileLogErroID.ID;
            public Guid Pilha => MobileConfigLogSVC.xNTRxMobileLogErro.Pilha.ID;
            public Guid Tipo => MobileConfigLogSVC.xNTRxLogTipo.Tipo.ID;

            public XDataSet()
            {
                DataSetType = typeof(MobileConfigLogSVC.XDataSet);
            }

        }
        #endregion MobileConfigLogSVC.XDataSet

        [Guid(MobileConfigLogSVC.sCID)]
        public  interface XService : XIBaseService
        {
            new XDataSet DataSet
            {
                get;
            }
            new XTuple NewTuple(Object pPKValue = null);
             IEnumerable<XTuple> Tuples
            {
                get;
            }
             XTuple Current
            {
                get;
            }
            new XDataSet Get(XServiceData pData);
             XDataSet Get(params Object[] pWhere);
        }
        [XRegister(typeof(_Service), _Service.sCID, typeof(MobileConfigLogSVC))]
        protected class _Service : Service<MobileConfigLogSVC, XDataSet, XTuple>
        {
            public const String sCID = "0ACA568A-0C2F-439A-B2D0-BDFDF66131F7";
            public Guid gCID = new Guid(sCID);
        }

        public class Service<TModel, TDataSet, TTuple> : XBaseService<MobileConfigLogSVC, XDataSet, XTuple>, XService
             where TModel : MobileConfigLogSVC, new()
             where TDataSet : XDataSet, new()
             where TTuple : XTuple
        {
            XDataSet XService.DataSet => (XDataSet)DataSet;
            XTuple XService.NewTuple(Object pPKValue)
            {
                return (XTuple)NewTuple(pPKValue);
            }
            public new XDataTuple NewTuple(Object pPKValue = null)
            {
                return (XTuple)base.NewTuple(pPKValue);
            }
            IEnumerable<XTuple> XService.Tuples => (IEnumerable<XTuple>)Tuples;
            XTuple XService.Current => (XTuple )Current;
            XDataSet XService.Get(XServiceData pData)
            {
                return (XDataSet)Get(pData);
            }
            XDataSet XService.Get(params Object[] pWhere)
            {
                return (XDataSet)Get(pWhere);
            }
            public Service()
            {
                ID = gCID;
            }
        }
    }

}