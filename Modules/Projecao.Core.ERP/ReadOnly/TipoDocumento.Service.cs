//<auto-generated/>
using System;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using TFX.Core;
using TFX.Core.Model;
using TFX.Core.Services;
using TFX.Core.Reflections;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.Extensions.DependencyInjection;
using TFX.Core.Exceptions;
using Microsoft.AspNetCore.Http;
using System.Data;
using TFX.Core.Lzma;
using TFX.Core.Identity;
using System.Text;
using Projecao.Core.ERP.ReadOnly.Rules;
using Projecao.Core.ERP.ReadOnly;

namespace Projecao.Core.ERP.ReadOnly
{
    [XGuid("8EF7B9BB-4F2B-4245-B181-2CA6D8399462", typeof(ITipoDocumentoService))]
    public class TipoDocumentoService : XService, ITipoDocumentoService
    {
        public class ERPxDocumentoTipo : XEntity
        {
            public Boolean IsPKEmpty => Object.Equals(ERPxDocumentoTipoID, typeof(Int16).GetDefault());
            [Display(Name = "Tipo de Documento")]
            [Required()]
            [DatabaseGenerated(DatabaseGeneratedOption.None)]
            public Int16 ERPxDocumentoTipoID {get; set;}

            [Required()]
            public Int32 Filtro {get; set;}

            [Display(Name = "MÃ¡scara")]
            [MaxLength(30)]
            public String Mascara {get; set;}

            [Display(Name = "Tipo de Documento")]
            [MaxLength(25)]
            [Required()]
            public String Tipo {get; set;}

        }
        public class DBContext : XDBContext
        {
            public DBContext(DbContextOptions<DBContext> pOptions, XITenantProvider pTenantProvider, XISharedTransaction pSharedTransaction)
                   : base(pOptions, pTenantProvider, pSharedTransaction)
            {
            }

            public DbSet<ERPxDocumentoTipo> ERPxDocumentoTipo{get; set;}

        private void ConfigureERPxDocumentoTipo(ModelBuilder pBuilder)
        {
            pBuilder.Entity<ERPxDocumentoTipo>(ett =>
            {
                ett.HasKey(e => e.ERPxDocumentoTipoID).HasName("PK_ERPxDocumentoTipo");

                ett.Property(d => d.Tipo).HasColumnType(GetDBType("String", 25));
                ett.Property(d => d.ERPxDocumentoTipoID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.Mascara).HasColumnType(GetDBType("String", 30)).IsRequired(false);
                ett.Property(d => d.Filtro).HasColumnType(GetDBType("Int32"));
                ett.ToTable("ERPxDocumentoTipo");
            });
        }

            protected override void OnModelCreating(ModelBuilder pBuilder)
            {
                ConfigureERPxDocumentoTipo(pBuilder);
                base.OnModelCreating(pBuilder);
            }

            protected override string GetConnectionString()
            {
                if (ConnectionString != null)
                    return ConnectionString;
                return XEnvironment.Read("SQL_SERVER_TFX", base.GetConnectionString());
            }
        }

        public abstract class BaseINFTipoDocumentoServiceRule : XServiceINFRule<TipoDocumentoService, TipoDocumentoTuple>
        {
            public BaseINFTipoDocumentoServiceRule(TipoDocumentoService pService)
                : base(pService)
            {
            }
            protected DBContext Context
            {
                get;
                private set;
            }
            protected internal virtual T GetWhere<T>(T pQuery)
            {
                return pQuery;
            }
            internal void SetContext(DBContext pContext)
            {
                Context = pContext;
            }

        }

        public TipoDocumentoService(ILogger<XService> pLogger, DBContext pContext)
               :base(pLogger)
        {
            Rule = new TipoDocumentoRule(this);
            _INFRule = new INFTipoDocumentoServiceRule(this);
            Context = pContext;
            _INFRule.SetContext(Context);
        }

        internal XIServiceRule<TipoDocumentoTuple, TipoDocumentoTuple> Rule;
        private INFTipoDocumentoServiceRule _INFRule;

        public override Guid ID => new Guid("8EF7B9BB-4F2B-4245-B181-2CA6D8399462");

        public DBContext Context
        {
            get;
        }

        public override void GracefullyClose()
        {
            Context.Commit();
        }
        public IQueryable<TipoDocumentoTuple> ExecuteQuery(TipoDocumentoFilter pFilter)
        {
            var ctx = Context;
            var query = from ERPxDocumentoTipo in ctx.ERPxDocumentoTipo
                        
                        select new {ERPxDocumentoTipo};
            query = _INFRule.GetWhere(query);


            if (pFilter != null)
            {
                if (!pFilter.Tipo.IsEmpty())
                    query = query.Where(q => EF.Functions.Like(q.ERPxDocumentoTipo.Tipo, "%"+pFilter.Tipo+"%"));
            }

            if (!LoadAll)
            {
                if (pFilter?.SkipRows > 0)
                    query = query.Skip(pFilter.SkipRows.Value);

                if (pFilter?.TakeRows > 0)
                    query = query.Take(pFilter.TakeRows.Value);
                else
                    query = query.Take(75);
            }

            var qry = query.Select(q => new TipoDocumentoTuple(q.ERPxDocumentoTipo.Mascara,
                                   q.ERPxDocumentoTipo.Tipo,
                                   q.ERPxDocumentoTipo.ERPxDocumentoTipoID));
            return qry;
        }

        public TipoDocumentoDataSet Execute(TipoDocumentoFilter pFilter)
        {
            _INFRule.InternalBeforeExecute();
            var qry = ExecuteQuery(pFilter);
            var tuples = qry.ToList();
            tuples = Rule.InternalAfterSelect(tuples);
            _INFRule.InternalAfterExecute(tuples);
            var dataset = new TipoDocumentoDataSet { Tuples = tuples };
            return dataset;
        }
    }
}