//<auto-generated/>
using System;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using TFX.Core;
using TFX.Core.Model;
using TFX.Core.Services;
using TFX.Core.Reflections;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.Extensions.DependencyInjection;
using TFX.Core.Exceptions;
using Microsoft.AspNetCore.Http;
using System.Data;
using TFX.Core.Lzma;
using TFX.Core.Identity;
using System.Text;
using Projecao.Core.ERP.ReadOnly.Rules;
using Projecao.Core.ERP.ReadOnly;

namespace Projecao.Core.ERP.ReadOnly
{
    [XGuid("44C651B9-54CB-4225-84FA-F51053C43F08", typeof(IEmpresaConfigService))]
    public class EmpresaConfigService : XService, IEmpresaConfigService
    {
        public class ERPxDocumento : XEntity
        {
            [Display(Name = "Pessoas")]
            [Required()]
            public Guid CORxPessoaID {get; set;}

            [Display(Name = "Estado")]
            [Required()]
            public Int16 CORxStatusID {get; set;}

            public Boolean IsPKEmpty => !ERPxDocumentoID.HasValue;
            [Display(Name = "Documento")]
            [Required()]
            public Guid? ERPxDocumentoID {get; set;}

            [Display(Name = "Tipo de Documento")]
            [Required()]
            public Int16 ERPxDocumentoTipoID {get; set;}

            [Display(Name = "NÃºmero")]
            [MaxLength(25)]
            [Required()]
            public String Numero {get; set;}


            public CORxPessoa CORxPessoa {get; set;}
        }
        public class CORxPessoa : XEntity
        {
            [Display(Name = "Localidade")]
            [Required()]
            public Int32 CEPxLocalidadePrincipalID {get; set;}

            public Boolean IsPKEmpty => !CORxPessoaID.HasValue;
            [Display(Name = "Pessoa")]
            [Required()]
            public Guid? CORxPessoaID {get; set;}

            [MaxLength(180)]
            [Required()]
            public String Nome {get; set;}


            public List<ERPxDocumento> ERPxDocumento {get; set;} = new List<ERPxDocumento>();
        }
        public class DBContext : XDBContext
        {
            public DBContext(DbContextOptions<DBContext> pOptions, XITenantProvider pTenantProvider, XISharedTransaction pSharedTransaction)
                   : base(pOptions, pTenantProvider, pSharedTransaction)
            {
            }

            public DbSet<ERPxDocumento> ERPxDocumento{get; set;}
            public DbSet<CORxPessoa> CORxPessoa{get; set;}

        private void ConfigureERPxDocumento(ModelBuilder pBuilder)
        {
            pBuilder.Entity<ERPxDocumento>(ett =>
            {
                ett.HasKey(e => e.ERPxDocumentoID).HasName("PK_ERPxDocumento");

                ett.Property(d => d.ERPxDocumentoID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.ERPxDocumentoTipoID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.CORxPessoaID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.Numero).HasColumnType(GetDBType("String", 25));
                ett.Property(d => d.CORxStatusID).HasColumnType(GetDBType("Int16"))
                    .HasDefaultValue(GetDBValue("Int16", (Int16)0));
                ett.ToTable("ERPxDocumento");
                ett.HasOne(d => d.CORxPessoa)
                   .WithMany(p => p.ERPxDocumento)
                   .HasForeignKey(d => d.CORxPessoaID)
                   .OnDelete(DeleteBehavior.Restrict);
            });
        }
        private void ConfigureCORxPessoa(ModelBuilder pBuilder)
        {
            pBuilder.Entity<CORxPessoa>(ett =>
            {
                ett.HasKey(e => e.CORxPessoaID).HasName("PK_CORxPessoa");

                ett.Property(d => d.CORxPessoaID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.Nome).HasColumnType(GetDBType("String", 180));
                ett.Property(d => d.CEPxLocalidadePrincipalID).HasColumnType(GetDBType("Int32"));
                ett.ToTable("CORxPessoa");
            });
        }

            protected override void OnModelCreating(ModelBuilder pBuilder)
            {
                ConfigureERPxDocumento(pBuilder);
                ConfigureCORxPessoa(pBuilder);
                base.OnModelCreating(pBuilder);
            }

            protected override string GetConnectionString()
            {
                if (ConnectionString != null)
                    return ConnectionString;
                return XEnvironment.Read("SQL_SERVER_TFX", base.GetConnectionString());
            }
        }

        public abstract class BaseINFEmpresaConfigServiceRule : XServiceINFRule<EmpresaConfigService, EmpresaConfigTuple>
        {
            public BaseINFEmpresaConfigServiceRule(EmpresaConfigService pService)
                : base(pService)
            {
            }
            protected DBContext Context
            {
                get;
                private set;
            }
            protected internal virtual T GetWhere<T>(T pQuery)
            {
                return pQuery;
            }
            internal void SetContext(DBContext pContext)
            {
                Context = pContext;
            }

        }

        public EmpresaConfigService(ILogger<XService> pLogger, DBContext pContext)
               :base(pLogger)
        {
            Rule = new EmpresaConfigRule(this);
            _INFRule = new INFEmpresaConfigServiceRule(this);
            Context = pContext;
            _INFRule.SetContext(Context);
        }

        internal XIServiceRule<EmpresaConfigTuple, EmpresaConfigTuple> Rule;
        private INFEmpresaConfigServiceRule _INFRule;

        public override Guid ID => new Guid("44C651B9-54CB-4225-84FA-F51053C43F08");

        public DBContext Context
        {
            get;
        }

        public override void GracefullyClose()
        {
            Context.Commit();
        }
        public IQueryable<EmpresaConfigTuple> ExecuteQuery()
        {
            var ctx = Context;
            var query = from CORxPessoa in ctx.CORxPessoa
                        join ERPxDocumento in ctx.ERPxDocumento on CORxPessoa.CORxPessoaID equals ERPxDocumento.CORxPessoaID
                        where ERPxDocumento.ERPxDocumentoTipoID ERPxModel.ERPxDocumentoTipo.CNPJ
                        select new {ERPxDocumento, CORxPessoa};
            query = _INFRule.GetWhere(query);


            var qry = query.Select(q => new EmpresaConfigTuple(q.ERPxDocumento.Numero,
                                   q.CORxPessoa.CORxPessoaID,
                                   q.CORxPessoa.Nome,
                                   q.CORxPessoa.CEPxLocalidadePrincipalID));
            return qry;
        }

        public EmpresaConfigDataSet Execute()
        {
            _INFRule.InternalBeforeExecute();
            var qry = ExecuteQuery();
            var tuples = qry.ToList();
            tuples = Rule.InternalAfterSelect(tuples);
            _INFRule.InternalAfterExecute(tuples);
            var dataset = new EmpresaConfigDataSet { Tuples = tuples };
            return dataset;
        }
    }
}