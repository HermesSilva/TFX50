//<auto-generated/>
using System;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Microsoft.AspNetCore.Mvc;
using TFX.Core.Reflections;
using TFX.Core.Model;
using TFX.Core.Interfaces;
using TFX.Core;
using TFX.Core.Services;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Http;
using TFX.Core.Lzma;
using TFX.Core.Model.FRM;
using TFX.Core.DB;
using TFX.Core.Model.Service;

namespace Projecao.Core.ERP.PessoaFisica
{
    public class PessoaFisicaServiceModel : XServiceModel
    {
        public static Guid CID = new Guid("DF0B1AD3-584F-47FB-8418-650111A9A6D9");
        public PessoaFisicaServiceModel()
        {
            SearchPath = "PessoaFisica/Search";
            DataView.Columns.Add(new XColumnModel() { Name = "CPF", Title = "CPF", Type = "String", Mask = "000.000.000-00", 
                                                      Visible = false });
            DataView.Columns.Add(new XColumnModel() { Name = "CORxPessoaID", Title = "Pessoa", Type = "Guid", Mask = "", 
                                                      Visible = false });
            DataView.Columns.Add(new XColumnModel() { Name = "Nome", Title = "Nome", Type = "String", Mask = "", 
                                                      Visible = false });
            DataView.Columns.Add(new XColumnModel() { Name = "CEPxLocalidadePrincipalID", Title = "Localidade", Type = "Int32", Mask = "", 
                                                      Visible = false });
            DataView.Columns.Add(new XColumnModel() { Name = "ERPxGeneroID", Title = "Gênero", Type = "Int16", Mask = "", 
                                                      Visible = false });
            DataView.Columns.Add(new XColumnModel() { Name = "Nascimento", Title = "Data de Nascimento", Type = "DateTime", Mask = "", 
                                                      Visible = false });
            DataView.Columns.Add(new XColumnModel() { Name = "CORxStatusID", Title = "Estado", Type = "Int16", Mask = "", 
                                                      Visible = true });
            DataView.Columns.Add(new XColumnModel() { Name = "Genero", Title = "Gênero", Type = "String", Mask = "", 
                                                      Visible = true });
            Forms.Add(new FRMPessoaFisicaFilter());
        }
    }
    public class ContatoTuple : XServiceDataTuple
    {
        public ContatoTuple()
        {
            Initialize();
        }

        public ContatoTuple(Boolean pValidar, String pContato, Guid? pERPxContatoID, Int16 pERPxContatoTipoID, Boolean pValidado, Int16 pERPxFinalidadeID, Int16 pCORxStatusID, Guid pCORxPessoaID, String pObservacao, String pMascara, String pTipo, String pFinalidade)
            : this()
        {
            Validar.Value = pValidar;
            Contato.Value = pContato;
            ERPxContatoID.Value = pERPxContatoID;
            ERPxContatoTipoID.Value = pERPxContatoTipoID;
            Validado.Value = pValidado;
            ERPxFinalidadeID.Value = pERPxFinalidadeID;
            CORxStatusID.Value = pCORxStatusID;
            CORxPessoaID.Value = pCORxPessoaID;
            Observacao.Value = pObservacao;
            Mascara.Value = pMascara;
            Tipo.Value = pTipo;
            Finalidade.Value = pFinalidade;
        }

        public override void Initialize()
        {
            Validar = new XBooleanDataField();
            Contato = new XStringDataField();
            ERPxContatoID = new XGuidNullableDataField();
            ERPxContatoTipoID = new XInt16DataField();
            Validado = new XBooleanDataField();
            ERPxFinalidadeID = new XInt16DataField();
            CORxStatusID = new XInt16DataField();
            CORxPessoaID = new XGuidDataField();
            Observacao = new XStringDataField();
            Mascara = new XStringDataField();
            Tipo = new XStringDataField();
            Finalidade = new XStringDataField();
        }

        public XBooleanDataField Validar {get;set;}
        [Display(Name = "E-Mail, Telefone e ETC.")]
        public XStringDataField Contato {get;set;}
        [Display(Name = "Meios de Contato")]
        public XGuidNullableDataField ERPxContatoID {get;set;}
        [Display(Name = "Tipo de Contato")]
        public XInt16DataField ERPxContatoTipoID {get;set;}
        public XBooleanDataField Validado {get;set;}
        [Display(Name = "Finalidade")]
        public XInt16DataField ERPxFinalidadeID {get;set;}
        [Display(Name = "Estado")]
        public XInt16DataField CORxStatusID {get;set;}
        [Display(Name = "Pessoas")]
        public XGuidDataField CORxPessoaID {get;set;}
        [Display(Name = "Observação")]
        public XStringDataField Observacao {get;set;}
        [Display(Name = "Máscara")]
        public XStringDataField Mascara {get;set;}
        public XStringDataField Tipo {get;set;}
        public XStringDataField Finalidade {get;set;}
    }
    public class DocumentoTuple : XServiceDataTuple
    {
        public DocumentoTuple()
        {
            Initialize();
        }

        public DocumentoTuple(Guid? pERPxDocumentoID, Int16 pERPxDocumentoTipoID, String pNumero, Int16 pCORxStatusID, Guid pCORxPessoaID, String pMascara, String pTipo)
            : this()
        {
            ERPxDocumentoID.Value = pERPxDocumentoID;
            ERPxDocumentoTipoID.Value = pERPxDocumentoTipoID;
            Numero.Value = pNumero;
            CORxStatusID.Value = pCORxStatusID;
            CORxPessoaID.Value = pCORxPessoaID;
            Mascara.Value = pMascara;
            Tipo.Value = pTipo;
        }

        public override void Initialize()
        {
            ERPxDocumentoID = new XGuidNullableDataField();
            ERPxDocumentoTipoID = new XInt16DataField();
            Numero = new XStringDataField();
            CORxStatusID = new XInt16DataField();
            CORxPessoaID = new XGuidDataField();
            Mascara = new XStringDataField();
            Tipo = new XStringDataField();
        }

        [Display(Name = "Documento")]
        public XGuidNullableDataField ERPxDocumentoID {get;set;}
        [Display(Name = "Tipo de Documento")]
        public XInt16DataField ERPxDocumentoTipoID {get;set;}
        [Display(Name = "Doc. Nº")]
        public XStringDataField Numero {get;set;}
        [Display(Name = "Estado")]
        public XInt16DataField CORxStatusID {get;set;}
        [Display(Name = "Pessoas")]
        public XGuidDataField CORxPessoaID {get;set;}
        [Display(Name = "Máscara")]
        public XStringDataField Mascara {get;set;}
        [Display(Name = "Tipo de Documento")]
        public XStringDataField Tipo {get;set;}
    }
    public class EnderecoTuple : XServiceDataTuple
    {
        public EnderecoTuple()
        {
            Initialize();
        }

        public EnderecoTuple(String pLocalidade, Int32 pCEPxLogradouroID, String pComplemento, String pLogradouro, String pTipo, String pCEP, String pBairro, Decimal pLongitude, Decimal pLatitude, String pEndereco, String pSigla, String pNomeUF, String pCodigoIBGE, Guid? pERPxEnderecoID, Int16 pERPxFinalidadeID, String pLote, String pNumero, String pObservacao, String pQuadra, Int16 pCORxStatusID, Guid pCORxPessoaID, String pFinalidade)
            : this()
        {
            Localidade.Value = pLocalidade;
            CEPxLogradouroID.Value = pCEPxLogradouroID;
            Complemento.Value = pComplemento;
            Logradouro.Value = pLogradouro;
            Tipo.Value = pTipo;
            CEP.Value = pCEP;
            Bairro.Value = pBairro;
            Longitude.Value = pLongitude;
            Latitude.Value = pLatitude;
            Endereco.Value = pEndereco;
            Sigla.Value = pSigla;
            NomeUF.Value = pNomeUF;
            CodigoIBGE.Value = pCodigoIBGE;
            ERPxEnderecoID.Value = pERPxEnderecoID;
            ERPxFinalidadeID.Value = pERPxFinalidadeID;
            Lote.Value = pLote;
            Numero.Value = pNumero;
            Observacao.Value = pObservacao;
            Quadra.Value = pQuadra;
            CORxStatusID.Value = pCORxStatusID;
            CORxPessoaID.Value = pCORxPessoaID;
            Finalidade.Value = pFinalidade;
        }

        public override void Initialize()
        {
            Localidade = new XStringDataField();
            CEPxLogradouroID = new XInt32DataField();
            Complemento = new XStringDataField();
            Logradouro = new XStringDataField();
            Tipo = new XStringDataField();
            CEP = new XStringDataField();
            Bairro = new XStringDataField();
            Longitude = new XDecimalDataField();
            Latitude = new XDecimalDataField();
            Endereco = new XStringDataField();
            Sigla = new XStringDataField();
            NomeUF = new XStringDataField();
            CodigoIBGE = new XStringDataField();
            ERPxEnderecoID = new XGuidNullableDataField();
            ERPxFinalidadeID = new XInt16DataField();
            Lote = new XStringDataField();
            Numero = new XStringDataField();
            Observacao = new XStringDataField();
            Quadra = new XStringDataField();
            CORxStatusID = new XInt16DataField();
            CORxPessoaID = new XGuidDataField();
            Finalidade = new XStringDataField();
        }

        [Display(Name = "Nome da Localidade")]
        public XStringDataField Localidade {get;set;}
        [Display(Name = "Logradouro")]
        public XInt32DataField CEPxLogradouroID {get;set;}
        public XStringDataField Complemento {get;set;}
        public XStringDataField Logradouro {get;set;}
        public XStringDataField Tipo {get;set;}
        [DisplayFormat(DataFormatString = "00.000-000")]
        public XStringDataField CEP {get;set;}
        public XStringDataField Bairro {get;set;}
        public XDecimalDataField Longitude {get;set;}
        public XDecimalDataField Latitude {get;set;}
        [Display(Name = "Endereço")]
        public XStringDataField Endereco {get;set;}
        [Display(Name = "Sigla da UF")]
        public XStringDataField Sigla {get;set;}
        [Display(Name = "Nome da UF")]
        public XStringDataField NomeUF {get;set;}
        [DisplayFormat(DataFormatString = "0000000")]
        [Display(Name = "Código no IBGE")]
        public XStringDataField CodigoIBGE {get;set;}
        [Display(Name = "Endereço")]
        public XGuidNullableDataField ERPxEnderecoID {get;set;}
        [Display(Name = "Finalidade")]
        public XInt16DataField ERPxFinalidadeID {get;set;}
        public XStringDataField Lote {get;set;}
        [Display(Name = "Número")]
        public XStringDataField Numero {get;set;}
        [Display(Name = "Observação")]
        public XStringDataField Observacao {get;set;}
        public XStringDataField Quadra {get;set;}
        [Display(Name = "Estado")]
        public XInt16DataField CORxStatusID {get;set;}
        [Display(Name = "Pessoas")]
        public XGuidDataField CORxPessoaID {get;set;}
        public XStringDataField Finalidade {get;set;}
    }
    public class PessoaFisicaTipoTuple : XServiceDataTuple
    {
        public PessoaFisicaTipoTuple()
        {
            Initialize();
        }

        public PessoaFisicaTipoTuple(Guid? pERPxPessoaFisicaTiposID, Guid pERPxPessoaFisicaID, Int16 pERPxPessoaFisicaTipoID, String pTipo, Int16 pCORxStatusID)
            : this()
        {
            ERPxPessoaFisicaTiposID.Value = pERPxPessoaFisicaTiposID;
            ERPxPessoaFisicaID.Value = pERPxPessoaFisicaID;
            ERPxPessoaFisicaTipoID.Value = pERPxPessoaFisicaTipoID;
            Tipo.Value = pTipo;
            CORxStatusID.Value = pCORxStatusID;
        }

        public override void Initialize()
        {
            ERPxPessoaFisicaTiposID = new XGuidNullableDataField();
            ERPxPessoaFisicaID = new XGuidDataField();
            ERPxPessoaFisicaTipoID = new XInt16DataField();
            Tipo = new XStringDataField();
            CORxStatusID = new XInt16DataField();
        }

        [Display(Name = "Ligação de Pessoa Física à Tipo")]
        public XGuidNullableDataField ERPxPessoaFisicaTiposID {get;set;}
        [Display(Name = "Pessoa Física")]
        public XGuidDataField ERPxPessoaFisicaID {get;set;}
        [Display(Name = "Tipo de Pessoa Física")]
        public XInt16DataField ERPxPessoaFisicaTipoID {get;set;}
        [Display(Name = "Tipo de Pessoa Física")]
        public XStringDataField Tipo {get;set;}
        [Display(Name = "Estado")]
        public XInt16DataField CORxStatusID {get;set;}
    }
    public class PessoaFisicaTuple : XServiceDataTuple
    {
        public PessoaFisicaTuple()
        {
            Initialize();
        }

        public PessoaFisicaTuple(String pCPF, Guid? pCORxPessoaID, String pNome, Int32 pCEPxLocalidadePrincipalID, Int16 pERPxGeneroID, DateTime pNascimento, Int16 pCORxStatusID, String pGenero, ContatoTuple[] pContato, DocumentoTuple[] pDocumento, EnderecoTuple[] pEndereco, PessoaFisicaTipoTuple[] pPessoaFisicaTipo)
            : this()
        {
            CPF.Value = pCPF;
            CORxPessoaID.Value = pCORxPessoaID;
            Nome.Value = pNome;
            CEPxLocalidadePrincipalID.Value = pCEPxLocalidadePrincipalID;
            ERPxGeneroID.Value = pERPxGeneroID;
            Nascimento.Value = pNascimento;
            CORxStatusID.Value = pCORxStatusID;
            Genero.Value = pGenero;
            Contato = pContato;
            Documento = pDocumento;
            Endereco = pEndereco;
            PessoaFisicaTipo = pPessoaFisicaTipo;
        }

        public override void Initialize()
        {
            CPF = new XStringDataField();
            CORxPessoaID = new XGuidNullableDataField();
            Nome = new XStringDataField();
            CEPxLocalidadePrincipalID = new XInt32DataField();
            ERPxGeneroID = new XInt16DataField();
            Nascimento = new XDateTimeDataField();
            CORxStatusID = new XInt16DataField();
            Genero = new XStringDataField();
        }

        public XStringDataField CPF {get;set;}
        [Display(Name = "Pessoa")]
        public XGuidNullableDataField CORxPessoaID {get;set;}
        public XStringDataField Nome {get;set;}
        [Display(Name = "Localidade")]
        public XInt32DataField CEPxLocalidadePrincipalID {get;set;}
        [Display(Name = "Gênero")]
        public XInt16DataField ERPxGeneroID {get;set;}
        [Display(Name = "Data de Nascimento")]
        public XDateTimeDataField Nascimento {get;set;}
        [Display(Name = "Estado")]
        public XInt16DataField CORxStatusID {get;set;}
        [Display(Name = "Gênero")]
        public XStringDataField Genero {get;set;}
        public ContatoTuple[] Contato {get;set;}
        public DocumentoTuple[] Documento {get;set;}
        public EnderecoTuple[] Endereco {get;set;}
        public PessoaFisicaTipoTuple[] PessoaFisicaTipo {get;set;}
    }

    public class PessoaFisicaFilter : XFilter
    {

        public PessoaFisicaFilter()
        {
        }
    }
    public class FRMPessoaFisicaFilter : XFRMModel
    {
        public FRMPessoaFisicaFilter()
        {
            ID = new Guid("2A6204BA-66C0-4BB5-BDF9-2F517F2B4CD1");
            Name = "PessoaFisicaFilter";
            Title = "";
            MinRows = 0;
            Style = XFRMStyle.Normal;
            Type = XFRMType.SVCFilter;
            XFRMField fld;
        }
    }


    public class PessoaFisicaRequest : XRequest
    {
        public Guid CORxPessoaID {get;set;}
    }

    public interface IPessoaFisicaService : XIService
    {
        object Flush(PessoaFisicaDataSet pDataSet);

        PessoaFisicaDataSet Execute(PessoaFisicaFilter pFilter, Boolean pFull);
        IQueryable<PessoaFisicaTuple> ExecuteQuery(PessoaFisicaFilter pFilter, Boolean pFull);
    }

    public abstract class BasePessoaFisicaRule : XServiceRule<PessoaFisicaTuple, PessoaFisicaTuple>
    {
        public BasePessoaFisicaRule(XService pOwner)
            :base(pOwner)
        {
        }

        public virtual PessoaFisicaFilter Execute(PessoaFisicaFilter pFilter)
        {
            return pFilter;
        }
    }

    public class PessoaFisicaDataSet : XDataSet<PessoaFisicaTuple>
    {
        public override Guid ID => new Guid("DF0B1AD3-584F-47FB-8418-650111A9A6D9");
    }
}