//<auto-generated/>
using System;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using TFX.Core;
using TFX.Core.Model;
using TFX.Core.Services;
using TFX.Core.Reflections;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.Extensions.DependencyInjection;
using TFX.Core.Exceptions;
using Microsoft.AspNetCore.Http;
using System.Data;
using TFX.Core.Lzma;
using TFX.Core.Identity;
using System.Text;
using Projecao.Core.ERP.PessoaFisica.Rules;
using Projecao.Core.ERP.PessoaFisica;

namespace Projecao.Core.ERP.PessoaFisica
{
    [XGuid("677562A2-DE98-4BC8-AC79-02BEEF69DBDD", typeof(IPessoaFisicaTipoService))]
    public class PessoaFisicaTipoService : XService, IPessoaFisicaTipoService
    {
        public class ERPxPessoaFisicaTipo : XEntity
        {
            public Boolean IsPKEmpty => Object.Equals(ERPxPessoaFisicaTipoID, typeof(Int16).GetDefault());
            [Display(Name = "Tipo de Pessoa Física")]
            [Required()]
            [DatabaseGenerated(DatabaseGeneratedOption.None)]
            public Int16 ERPxPessoaFisicaTipoID {get; set;}

            [Display(Name = "Tipo de Pessoa Física")]
            [MaxLength(35)]
            [Required()]
            public String Tipo {get; set;}


            public List<ERPxPessoaFisicaTipos> ERPxPessoaFisicaTipos {get; set;} = new List<ERPxPessoaFisicaTipos>();
        }
        public class ERPxPessoaFisicaTipos : XEntity
        {
            [Display(Name = "Estado")]
            [Required()]
            public Int16 CORxStatusID {get; set;}

            [Display(Name = "Pessoa Física")]
            [Required()]
            public Guid ERPxPessoaFisicaID {get; set;}

            [Display(Name = "Tipo de Pessoa Física")]
            [Required()]
            public Int16 ERPxPessoaFisicaTipoID {get; set;}

            public Boolean IsPKEmpty => !ERPxPessoaFisicaTiposID.HasValue;
            [Display(Name = "Ligação de Pessoa Física à Tipo")]
            [Required()]
            public Guid? ERPxPessoaFisicaTiposID {get; set;}


            public ERPxPessoaFisicaTipo ERPxPessoaFisicaTipo {get; set;}
        }
        public class DBContext : XDBContext
        {
            public DBContext(DbContextOptions<DBContext> pOptions, XITenantProvider pTenantProvider, XISharedTransaction pSharedTransaction)
                   : base(pOptions, pTenantProvider, pSharedTransaction)
            {
            }

            public DbSet<ERPxPessoaFisicaTipo> ERPxPessoaFisicaTipo{get; set;}
            public DbSet<ERPxPessoaFisicaTipos> ERPxPessoaFisicaTipos{get; set;}

        private void ConfigureERPxPessoaFisicaTipo(ModelBuilder pBuilder)
        {
            pBuilder.Entity<ERPxPessoaFisicaTipo>(ett =>
            {
                ett.HasKey(e => e.ERPxPessoaFisicaTipoID).HasName("PK_ERPxPessoaFisicaTipo");

                ett.Property(d => d.ERPxPessoaFisicaTipoID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.Tipo).HasColumnType(GetDBType("String", 35));
                ett.ToTable("ERPxPessoaFisicaTipo");
            });
        }
        private void ConfigureERPxPessoaFisicaTipos(ModelBuilder pBuilder)
        {
            pBuilder.Entity<ERPxPessoaFisicaTipos>(ett =>
            {
                ett.HasKey(e => e.ERPxPessoaFisicaTiposID).HasName("PK_ERPxPessoaFisicaTipos");

                ett.Property(d => d.ERPxPessoaFisicaTiposID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.ERPxPessoaFisicaTipoID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.ERPxPessoaFisicaID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.CORxStatusID).HasColumnType(GetDBType("Int16"));
                ett.ToTable("ERPxPessoaFisicaTipos");
                ett.HasOne(d => d.ERPxPessoaFisicaTipo)
                   .WithMany(p => p.ERPxPessoaFisicaTipos)
                   .HasForeignKey(d => d.ERPxPessoaFisicaTipoID)
                   .OnDelete(DeleteBehavior.Restrict);
            });
        }

            protected override void OnModelCreating(ModelBuilder pBuilder)
            {
                ConfigureERPxPessoaFisicaTipo(pBuilder);
                ConfigureERPxPessoaFisicaTipos(pBuilder);
                base.OnModelCreating(pBuilder);
            }

            protected override string GetConnectionString()
            {
                if (ConnectionString != null)
                    return ConnectionString;
                return XEnvironment.Read("SQL_SERVER_TFX", base.GetConnectionString());
            }
        }

        public abstract class BaseINFPessoaFisicaTipoServiceRule : XServiceINFRule<PessoaFisicaTipoService, PessoaFisicaTipoTuple>
        {
            public BaseINFPessoaFisicaTipoServiceRule(PessoaFisicaTipoService pService)
                : base(pService)
            {
            }
            protected DBContext Context
            {
                get;
                private set;
            }
            protected internal virtual T GetWhere<T>(T pQuery)
            {
                return pQuery;
            }
            internal void SetContext(DBContext pContext)
            {
                Context = pContext;
            }

        }

        public PessoaFisicaTipoService(ILogger<XService> pLogger, DBContext pContext)
               :base(pLogger)
        {
            Rule = new PessoaFisicaTipoRule(this);
            _INFRule = new INFPessoaFisicaTipoServiceRule(this);
            Context = pContext;
            _INFRule.SetContext(Context);
        }

        internal XIServiceRule<PessoaFisicaTipoTuple, PessoaFisicaTipoTuple> Rule;
        private INFPessoaFisicaTipoServiceRule _INFRule;

        public override Guid ID => new Guid("677562A2-DE98-4BC8-AC79-02BEEF69DBDD");

        public DBContext Context
        {
            get;
        }

        public override void GracefullyClose()
        {
            Context.Commit();
        }
        public IQueryable<PessoaFisicaTipoTuple> ExecuteQuery()
        {
            var ctx = Context;
            var query = from ERPxPessoaFisicaTipos in ctx.ERPxPessoaFisicaTipos
                        join ERPxPessoaFisicaTipo in ctx.ERPxPessoaFisicaTipo on ERPxPessoaFisicaTipos.ERPxPessoaFisicaTipoID equals ERPxPessoaFisicaTipo.ERPxPessoaFisicaTipoID
                        
                        select new {ERPxPessoaFisicaTipo, ERPxPessoaFisicaTipos};
            query = _INFRule.GetWhere(query);


            var qry = query.Select(q => new PessoaFisicaTipoTuple(q.ERPxPessoaFisicaTipos.ERPxPessoaFisicaTiposID,
                                      q.ERPxPessoaFisicaTipos.ERPxPessoaFisicaID,
                                      q.ERPxPessoaFisicaTipos.ERPxPessoaFisicaTipoID,
                                      q.ERPxPessoaFisicaTipo.Tipo,
                                      q.ERPxPessoaFisicaTipos.CORxStatusID));
            return qry;
        }

        public PessoaFisicaTipoDataSet Execute()
        {
            _INFRule.InternalBeforeExecute();
            var qry = ExecuteQuery();
            var tuples = qry.ToList();
            tuples = Rule.InternalAfterSelect(tuples);
            _INFRule.InternalAfterExecute(tuples);
            var dataset = new PessoaFisicaTipoDataSet { Tuples = tuples };
            return dataset;
        }

        public object Flush(PessoaFisicaTipoDataSet pDataSet)
        {
            if (pDataSet?.Tuples.Count == 0)
                throw new XUnconformity("Não é permitido Flush sem Tuplas.");
            using (var scope = XEnvironment.Services.CreateScope())
            using (var ctx = scope.ServiceProvider.GetRequiredService<DBContext>())
            {
                Rule?.InternalBeforeFlush(pDataSet.Tuples);

                SetPessoaFisicaTipoValues(ctx, pDataSet);
                ctx.SaveChanges();

                Rule?.InternalAfterFlush(pDataSet.Tuples);

                return XEndPointMessage.Ok;
            }
        }

        private void SetPessoaFisicaTipoValues(DBContext ctx, PessoaFisicaTipoDataSet pDataSet)
        {
            if (pDataSet == null || pDataSet.Tuples == null)
                return;
            foreach (PessoaFisicaTipoTuple stpl in pDataSet.Tuples)
            {
                var sb = new StringBuilder();
                var ERPxPessoaFisicaTipostpl = new ERPxPessoaFisicaTipos();
                if (stpl.ERPxPessoaFisicaTiposID.Value != null)
                    ERPxPessoaFisicaTipostpl.ERPxPessoaFisicaTiposID = stpl.ERPxPessoaFisicaTiposID.Value;
                ERPxPessoaFisicaTipostpl.ERPxPessoaFisicaTipoID = stpl.ERPxPessoaFisicaTipoID.Value;
                ERPxPessoaFisicaTipostpl.ERPxPessoaFisicaID = stpl.ERPxPessoaFisicaID.Value;
                ERPxPessoaFisicaTipostpl.CORxStatusID = stpl.CORxStatusID.Value;
                ERPxPessoaFisicaTipostpl.Validate(sb);
                ctx.ERPxPessoaFisicaTipos.Add(ERPxPessoaFisicaTipostpl);
                if (!ERPxPessoaFisicaTipostpl.IsPKEmpty)
                    ctx.Entry(ERPxPessoaFisicaTipostpl).State = EntityState.Modified;
                else
                    ctx.Entry(ERPxPessoaFisicaTipostpl).State = EntityState.Added;
                if (sb.Length > 0)
                    throw new Exception(sb.ToString());
            }
        }
    }
}