//<auto-generated/>
using System;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using TFX.Core;
using TFX.Core.Model;
using TFX.Core.Services;
using TFX.Core.Reflections;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.Extensions.DependencyInjection;
using TFX.Core.Exceptions;
using Microsoft.AspNetCore.Http;
using System.Data;
using TFX.Core.Lzma;
using TFX.Core.Identity;
using System.Text;
using Projecao.Core.ERP.AutomatedService.Rules;
using Projecao.Core.ERP.AutomatedService;

namespace Projecao.Core.ERP.AutomatedService
{
    [XGuid("9518AE01-27B2-4FCE-AB2C-994E2AABBCCB", typeof(IEMailEnvioService))]
    public class EMailEnvioService : XService, IEMailEnvioService
    {
        public class DBContext : XDBContext
        {
            public DBContext(DbContextOptions<DBContext> pOptions, XITenantProvider pTenantProvider, XISharedTransaction pSharedTransaction)
                   : base(pOptions, pTenantProvider, pSharedTransaction)
            {
            }



            protected override void OnModelCreating(ModelBuilder pBuilder)
            {
                base.OnModelCreating(pBuilder);
            }

            protected override string GetConnectionString()
            {
                if (ConnectionString != null)
                    return ConnectionString;
                return XEnvironment.Read("SQL_SERVER_TFX", base.GetConnectionString());
            }
        }

        public abstract class BaseINFEMailEnvioServiceRule : XServiceINFRule<EMailEnvioService, EMailEnvioTuple>
        {
            public BaseINFEMailEnvioServiceRule(EMailEnvioService pService)
                : base(pService)
            {
            }
            protected DBContext Context
            {
                get;
                private set;
            }
            protected internal virtual T GetWhere<T>(T pQuery)
            {
                return pQuery;
            }
            internal void SetContext(DBContext pContext)
            {
                Context = pContext;
            }

        }

        public EMailEnvioService(ILogger<XService> pLogger, DBContext pContext)
               :base(pLogger)
        {
            Rule = new EMailEnvioRule(this);
            _INFRule = new INFEMailEnvioServiceRule(this);
            Context = pContext;
            _INFRule.SetContext(Context);
        }

        internal XIServiceRule<EMailEnvioTuple, EMailEnvioTuple> Rule;
        private INFEMailEnvioServiceRule _INFRule;

        public override Guid ID => new Guid("9518AE01-27B2-4FCE-AB2C-994E2AABBCCB");

        public DBContext Context
        {
            get;
        }

        public override void GracefullyClose()
        {
            Context.Commit();
        }
    }
}