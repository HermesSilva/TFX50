//<auto-generated/>
using System;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using TFX.Core;
using TFX.Core.Model;
using TFX.Core.Services;
using TFX.Core.Reflections;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.Extensions.DependencyInjection;
using TFX.Core.Exceptions;
using Microsoft.AspNetCore.Http;
using System.Data;
using TFX.Core.Lzma;
using TFX.Core.Identity;
using System.Text;
using Projecao.Core.ERP.Pessoa.Rules;
using Projecao.Core.ERP.Pessoa;

namespace Projecao.Core.ERP.Pessoa
{
    [XGuid("63151C23-62E8-4BBA-9C12-FEC0708E03CF", typeof(IContatoService))]
    public class ContatoService : XService, IContatoService
    {
        public class ERPxContato : XEntity
        {
            [Display(Name = "E-Mail, Telefone e ETC.")]
            [MaxLength(50)]
            [Required()]
            public String Contato {get; set;}

            [Display(Name = "Pessoas")]
            [Required()]
            public Guid CORxPessoaID {get; set;}

            [Display(Name = "Estado")]
            [Required()]
            public Int16 CORxStatusID {get; set;}

            public Boolean IsPKEmpty => !ERPxContatoID.HasValue;
            [Display(Name = "Meios de Contato")]
            [Required()]
            public Guid? ERPxContatoID {get; set;}

            [Display(Name = "Tipo de Contato")]
            [Required()]
            public Int16 ERPxContatoTipoID {get; set;}

            [Display(Name = "Finalidade")]
            [Required()]
            public Int16 ERPxFinalidadeID {get; set;}

            [Display(Name = "Observação")]
            [MaxLength(30)]
            public String Observacao {get; set;}

            [Required()]
            public Boolean Validado {get; set;}


            public List<ERPxContatoTipo> ERPxContatoTipo {get; set;} = new List<ERPxContatoTipo>();

            public List<ERPxFinalidade> ERPxFinalidade {get; set;} = new List<ERPxFinalidade>();
        }
        public class ERPxContatoTipo : XEntity
        {
            public Boolean IsPKEmpty => Object.Equals(ERPxContatoTipoID, typeof(Int16).GetDefault());
            [Display(Name = "Tipo de Contato")]
            [Required()]
            [DatabaseGenerated(DatabaseGeneratedOption.None)]
            public Int16 ERPxContatoTipoID {get; set;}

            [Display(Name = "Máscara")]
            [MaxLength(128)]
            public String Mascara {get; set;}

            [MaxLength(20)]
            [Required()]
            public String Tipo {get; set;}


            public ERPxContato ERPxContato {get; set;}
        }
        public class ERPxFinalidade : XEntity
        {
            public Boolean IsPKEmpty => Object.Equals(ERPxFinalidadeID, typeof(Int16).GetDefault());
            [Display(Name = "Finalidade")]
            [Required()]
            [DatabaseGenerated(DatabaseGeneratedOption.None)]
            public Int16 ERPxFinalidadeID {get; set;}

            [MaxLength(30)]
            [Required()]
            public String Finalidade {get; set;}


            public ERPxContato ERPxContato {get; set;}
        }
        public class DBContext : XDBContext
        {
            public DBContext(DbContextOptions<DBContext> pOptions, XITenantProvider pTenantProvider, XISharedTransaction pSharedTransaction)
                   : base(pOptions, pTenantProvider, pSharedTransaction)
            {
            }

            public DbSet<ERPxContato> ERPxContato{get; set;}
            public DbSet<ERPxContatoTipo> ERPxContatoTipo{get; set;}
            public DbSet<ERPxFinalidade> ERPxFinalidade{get; set;}

        private void ConfigureERPxContato(ModelBuilder pBuilder)
        {
            pBuilder.Entity<ERPxContato>(ett =>
            {
                ett.HasKey(e => e.ERPxContatoID).HasName("PK_ERPxContato");

                ett.Property(d => d.Contato).HasColumnType(GetDBType("String", 50));
                ett.Property(d => d.CORxPessoaID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.ERPxContatoID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.ERPxContatoTipoID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.ERPxFinalidadeID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.CORxStatusID).HasColumnType(GetDBType("Int16"))
                    .HasDefaultValue(GetDBValue("Int16", (Int16)0));
                ett.Property(d => d.Validado).HasColumnType(GetDBType("Boolean"))
                    .HasDefaultValue(GetDBValue("Boolean", false));
                ett.Property(d => d.Observacao).HasColumnType(GetDBType("String", 30)).IsRequired(false);
                ett.ToTable("ERPxContato");
            });
        }
        private void ConfigureERPxContatoTipo(ModelBuilder pBuilder)
        {
            pBuilder.Entity<ERPxContatoTipo>(ett =>
            {
                ett.HasKey(e => e.ERPxContatoTipoID).HasName("PK_ERPxContatoTipo");

                ett.Property(d => d.Tipo).HasColumnType(GetDBType("String", 20));
                ett.Property(d => d.ERPxContatoTipoID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.Mascara).HasColumnType(GetDBType("String", 128)).IsRequired(false);
                ett.ToTable("ERPxContatoTipo");
                ett.HasOne(d => d.ERPxContato)
                   .WithMany(p => p.ERPxContatoTipo)
                   .HasForeignKey(d => d.ERPxContatoTipoID)
                   .OnDelete(DeleteBehavior.Restrict);
            });
        }
        private void ConfigureERPxFinalidade(ModelBuilder pBuilder)
        {
            pBuilder.Entity<ERPxFinalidade>(ett =>
            {
                ett.HasKey(e => e.ERPxFinalidadeID).HasName("PK_ERPxFinalidade");

                ett.Property(d => d.Finalidade).HasColumnType(GetDBType("String", 30));
                ett.Property(d => d.ERPxFinalidadeID).HasColumnType(GetDBType("Int16"));
                ett.ToTable("ERPxFinalidade");
                ett.HasOne(d => d.ERPxContato)
                   .WithMany(p => p.ERPxFinalidade)
                   .HasForeignKey(d => d.ERPxFinalidadeID)
                   .OnDelete(DeleteBehavior.Restrict);
            });
        }

            protected override void OnModelCreating(ModelBuilder pBuilder)
            {
                ConfigureERPxContato(pBuilder);
                ConfigureERPxContatoTipo(pBuilder);
                ConfigureERPxFinalidade(pBuilder);
                base.OnModelCreating(pBuilder);
            }

            protected override string GetConnectionString()
            {
                if (ConnectionString != null)
                    return ConnectionString;
                return XEnvironment.Read("SQL_SERVER_TFX", base.GetConnectionString());
            }
        }

        public abstract class BaseINFContatoServiceRule : XServiceINFRule<ContatoService, ContatoTuple>
        {
            public BaseINFContatoServiceRule(ContatoService pService)
                : base(pService)
            {
            }
            protected DBContext Context
            {
                get;
                private set;
            }
            protected internal virtual T GetWhere<T>(T pQuery)
            {
                return pQuery;
            }
            internal void SetContext(DBContext pContext)
            {
                Context = pContext;
            }

        }

        public ContatoService(ILogger<XService> pLogger, DBContext pContext)
               :base(pLogger)
        {
            Rule = new ContatoRule(this);
            _INFRule = new INFContatoServiceRule(this);
            Context = pContext;
            _INFRule.SetContext(Context);
        }

        internal XIServiceRule<ContatoTuple, ContatoTuple> Rule;
        private INFContatoServiceRule _INFRule;

        public override Guid ID => new Guid("63151C23-62E8-4BBA-9C12-FEC0708E03CF");

        public DBContext Context
        {
            get;
        }

        public override void GracefullyClose()
        {
            Context.Commit();
        }
        public IQueryable<ContatoTuple> ExecuteQuery(ContatoFilter pFilter)
        {
            var ctx = Context;
            var query = from ERPxContato in ctx.ERPxContato
                        join ERPxContatoTipo in ctx.ERPxContatoTipo on ERPxContato.ERPxContatoTipoID equals ERPxContatoTipo.ERPxContatoTipoID
                        join ERPxFinalidade in ctx.ERPxFinalidade on ERPxContato.ERPxFinalidadeID equals ERPxFinalidade.ERPxFinalidadeID
                        
                        select new {ERPxContato, ERPxContatoTipo, ERPxFinalidade};
            query = _INFRule.GetWhere(query);


            if (pFilter != null)
            {
                if (!pFilter.Contato.IsEmpty())
                    query = query.Where(q => EF.Functions.Like(q.ERPxContato.Contato, "%"+pFilter.Contato+"%"));
            }

            if (!LoadAll)
            {
                if (pFilter?.SkipRows > 0)
                    query = query.Skip(pFilter.SkipRows.Value);

                if (pFilter?.TakeRows > 0)
                    query = query.Take(pFilter.TakeRows.Value);
                else
                    query = query.Take(75);
            }

            var qry = query.Select(q => new ContatoTuple(false,
                             q.ERPxContato.Contato,
                             q.ERPxContato.ERPxContatoID,
                             q.ERPxContato.ERPxContatoTipoID,
                             q.ERPxContato.Validado,
                             q.ERPxContato.ERPxFinalidadeID,
                             q.ERPxContato.CORxStatusID,
                             q.ERPxContato.CORxPessoaID,
                             q.ERPxContato.Observacao,
                             q.ERPxContatoTipo.Mascara,
                             q.ERPxContatoTipo.Tipo,
                             q.ERPxFinalidade.Finalidade));
            return qry;
        }

        public ContatoDataSet Execute(ContatoFilter pFilter)
        {
            _INFRule.InternalBeforeExecute();
            var qry = ExecuteQuery(pFilter);
            var tuples = qry.ToList();
            tuples = Rule.InternalAfterSelect(tuples);
            _INFRule.InternalAfterExecute(tuples);
            var dataset = new ContatoDataSet { Tuples = tuples };
            return dataset;
        }

        public object Flush(ContatoDataSet pDataSet)
        {
            if (pDataSet?.Tuples.Count == 0)
                throw new XUnconformity("Não é permitido Flush sem Tuplas.");
            using (var scope = XEnvironment.Services.CreateScope())
            using (var ctx = scope.ServiceProvider.GetRequiredService<DBContext>())
            {
                Rule?.InternalBeforeFlush(pDataSet.Tuples);

                SetContatoValues(ctx, pDataSet);
                ctx.SaveChanges();

                Rule?.InternalAfterFlush(pDataSet.Tuples);

                return XEndPointMessage.Ok;
            }
        }

        private void SetContatoValues(DBContext ctx, ContatoDataSet pDataSet)
        {
            if (pDataSet == null || pDataSet.Tuples == null)
                return;
            foreach (ContatoTuple stpl in pDataSet.Tuples)
            {
                var sb = new StringBuilder();
                var ERPxContatotpl = new ERPxContato();
                ERPxContatotpl.Contato = stpl.Contato.Value;
                ERPxContatotpl.CORxPessoaID = stpl.CORxPessoaID.Value;
                if (stpl.ERPxContatoID.Value != null)
                    ERPxContatotpl.ERPxContatoID = stpl.ERPxContatoID.Value;
                ERPxContatotpl.ERPxContatoTipoID = stpl.ERPxContatoTipoID.Value;
                ERPxContatotpl.ERPxFinalidadeID = stpl.ERPxFinalidadeID.Value;
                ERPxContatotpl.CORxStatusID = stpl.CORxStatusID.Value;
                ERPxContatotpl.Validado = stpl.Validado.Value;
                ERPxContatotpl.Observacao = stpl.Observacao.Value;
                ERPxContatotpl.Validate(sb);
                ctx.ERPxContato.Add(ERPxContatotpl);
                if (!ERPxContatotpl.IsPKEmpty)
                    ctx.Entry(ERPxContatotpl).State = EntityState.Modified;
                else
                    ctx.Entry(ERPxContatotpl).State = EntityState.Added;
                if (sb.Length > 0)
                    throw new Exception(sb.ToString());
            }
        }
    }
}