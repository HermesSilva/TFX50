//<auto-generated/>
using System;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Microsoft.AspNetCore.Mvc;
using TFX.Core.Reflections;
using TFX.Core.Model;
using TFX.Core.Interfaces;
using TFX.Core;
using TFX.Core.Services;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Http;
using TFX.Core.Lzma;
using TFX.Core.Model.FRM;
using TFX.Core.DB;
using TFX.Core.Model.Service;

namespace Projecao.Core.ERP.Pessoa
{
    public class ContatoServiceModel : XServiceModel
    {
        public static Guid CID = new Guid("63151C23-62E8-4BBA-9C12-FEC0708E03CF");
        public ContatoServiceModel()
        {
            SearchPath = "Contato/Search";
            DataView.Columns.Add(new XColumnModel() { Name = "Validar", Title = "Validar", Type = "Boolean", Mask = "", 
                                                      Visible = false });
            DataView.Columns.Add(new XColumnModel() { Name = "Contato", Title = "E-Mail, Telefone e ETC.", Type = "String", Mask = "", 
                                                      Visible = true, IsFreeSearch = true, Operator = XOperator.EqualTo });
            DataView.Columns.Add(new XColumnModel() { Name = "ERPxContatoID", Title = "Meios de Contato", Type = "Guid", Mask = "", 
                                                      Visible = false });
            DataView.Columns.Add(new XColumnModel() { Name = "ERPxContatoTipoID", Title = "Tipo de Contato", Type = "Int16", Mask = "", 
                                                      Visible = false });
            DataView.Columns.Add(new XColumnModel() { Name = "Validado", Title = "Validado", Type = "Boolean", Mask = "", 
                                                      Visible = false });
            DataView.Columns.Add(new XColumnModel() { Name = "ERPxFinalidadeID", Title = "Finalidade", Type = "Int16", Mask = "", 
                                                      Visible = false });
            DataView.Columns.Add(new XColumnModel() { Name = "CORxStatusID", Title = "Estado", Type = "Int16", Mask = "", 
                                                      Visible = true });
            DataView.Columns.Add(new XColumnModel() { Name = "CORxPessoaID", Title = "Pessoas", Type = "Guid", Mask = "", 
                                                      Visible = false });
            DataView.Columns.Add(new XColumnModel() { Name = "Observacao", Title = "Observação", Type = "String", Mask = "", 
                                                      Visible = false });
            DataView.Columns.Add(new XColumnModel() { Name = "Mascara", Title = "Máscara", Type = "String", Mask = "", 
                                                      Visible = false });
            DataView.Columns.Add(new XColumnModel() { Name = "Tipo", Title = "Tipo", Type = "String", Mask = "", 
                                                      Visible = true, IsFreeSearch = true, Operator = XOperator.EqualTo });
            DataView.Columns.Add(new XColumnModel() { Name = "Finalidade", Title = "Finalidade", Type = "String", Mask = "", 
                                                      Visible = true, IsFreeSearch = true, Operator = XOperator.EqualTo });
            Forms.Add(new FRMContatoFilter());
        }
    }
    public class ContatoTuple : XServiceDataTuple
    {
        public ContatoTuple()
        {
            Initialize();
        }

        public ContatoTuple(Boolean pValidar, String pContato, Guid? pERPxContatoID, Int16 pERPxContatoTipoID, Boolean pValidado, Int16 pERPxFinalidadeID, Int16 pCORxStatusID, Guid pCORxPessoaID, String pObservacao, String pMascara, String pTipo, String pFinalidade)
            : this()
        {
            Validar.Value = pValidar;
            Contato.Value = pContato;
            ERPxContatoID.Value = pERPxContatoID;
            ERPxContatoTipoID.Value = pERPxContatoTipoID;
            Validado.Value = pValidado;
            ERPxFinalidadeID.Value = pERPxFinalidadeID;
            CORxStatusID.Value = pCORxStatusID;
            CORxPessoaID.Value = pCORxPessoaID;
            Observacao.Value = pObservacao;
            Mascara.Value = pMascara;
            Tipo.Value = pTipo;
            Finalidade.Value = pFinalidade;
        }

        public override void Initialize()
        {
            Validar = new XBooleanDataField();
            Contato = new XStringDataField();
            ERPxContatoID = new XGuidNullableDataField();
            ERPxContatoTipoID = new XInt16DataField();
            Validado = new XBooleanDataField();
            ERPxFinalidadeID = new XInt16DataField();
            CORxStatusID = new XInt16DataField();
            CORxPessoaID = new XGuidDataField();
            Observacao = new XStringDataField();
            Mascara = new XStringDataField();
            Tipo = new XStringDataField();
            Finalidade = new XStringDataField();
        }

        public XBooleanDataField Validar {get;set;}
        [Display(Name = "E-Mail, Telefone e ETC.")]
        public XStringDataField Contato {get;set;}
        [Display(Name = "Meios de Contato")]
        public XGuidNullableDataField ERPxContatoID {get;set;}
        [Display(Name = "Tipo de Contato")]
        public XInt16DataField ERPxContatoTipoID {get;set;}
        public XBooleanDataField Validado {get;set;}
        [Display(Name = "Finalidade")]
        public XInt16DataField ERPxFinalidadeID {get;set;}
        [Display(Name = "Estado")]
        public XInt16DataField CORxStatusID {get;set;}
        [Display(Name = "Pessoas")]
        public XGuidDataField CORxPessoaID {get;set;}
        [Display(Name = "Observação")]
        public XStringDataField Observacao {get;set;}
        [Display(Name = "Máscara")]
        public XStringDataField Mascara {get;set;}
        public XStringDataField Tipo {get;set;}
        public XStringDataField Finalidade {get;set;}
    }

    public class ContatoFilter : XFilter
    {

        public ContatoFilter()
        {
        }

        public ContatoFilter(String pContato)
        {
            Contato = pContato;
        }
        public String Contato {get;set;}
    }
    public class FRMContatoFilter : XFRMModel
    {
        public FRMContatoFilter()
        {
            ID = new Guid("B0389FAB-C834-4473-A974-A3415EE3EC6B");
            Name = "ContatoFilter";
            Title = "";
            MinRows = 2;
            Style = XFRMStyle.Normal;
            Type = XFRMType.SVCFilter;
            XFRMField fld;
            fld = AddField(new XFRMField());
            fld.ForceRW = true;
            fld.Title = "E-Mail, Telefone e ETC.";
            fld.CanInsert = true;
            fld.CanUpdate = true;
            fld.RowCount = 2;
            fld.ColCount = 32;
            fld.IsHidden = false;
            fld.Location = 1;
            fld.EditorCID = XModelEditors.XString;
            fld.Operator = XOperator.Like;
            fld.JustifyHeight = false;
            fld.AllowEmpty = true;
            fld.FontColor = "#000000";
            fld.FontStyle = XFontStyle.Normal;
            fld.ShowFooter = false;
            fld.ViewSAM = new Guid("00000000-0000-0000-0000-000000000000");
            fld.Order = 1;
            fld.Scale = -1;
            fld.Length = -1;
            fld.TypeID = XDataTypes.XString;
            fld.AdditionalFieldsID = new Guid[] {  };
            fld.AdditionalDataFieldsID = new Guid[] {  };
            fld.TargetFilterFieldID = new Guid[] {  };
            fld.SourceFilterFieldID = new Guid[] {  };
            fld.TargetDisplayFieldID = new Guid[] {  };
            fld.SourceDisplayFieldID = new Guid[] {  };
            fld.AutoLoad = false;
            fld.FilterInative = true;
            fld.IsAnswer = false;
            fld.AllowMultiSelect = false;
        }
    }


    public class ContatoRequest : XRequest
    {
        public Guid ERPxContatoID {get;set;}
    }

    public interface IContatoService : XIService
    {
        object Flush(ContatoDataSet pDataSet);

        ContatoDataSet Execute(ContatoFilter pFilter);
        IQueryable<ContatoTuple> ExecuteQuery(ContatoFilter pFilter);
    }

    public abstract class BaseContatoRule : XServiceRule<ContatoTuple, ContatoTuple>
    {
        public BaseContatoRule(XService pOwner)
            :base(pOwner)
        {
        }

        public virtual ContatoFilter Execute(ContatoFilter pFilter)
        {
            return pFilter;
        }
    }

    public class ContatoDataSet : XDataSet<ContatoTuple>
    {
        public override Guid ID => new Guid("63151C23-62E8-4BBA-9C12-FEC0708E03CF");
    }
}