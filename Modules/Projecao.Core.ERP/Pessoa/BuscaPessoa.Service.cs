//<auto-generated/>
using System;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using TFX.Core;
using TFX.Core.Model;
using TFX.Core.Services;
using TFX.Core.Reflections;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.Extensions.DependencyInjection;
using TFX.Core.Exceptions;
using Microsoft.AspNetCore.Http;
using System.Data;
using TFX.Core.Lzma;
using TFX.Core.Identity;
using System.Text;
using Projecao.Core.ERP.Pessoa.Rules;
using Projecao.Core.ERP.Pessoa;

namespace Projecao.Core.ERP.Pessoa
{
    [XGuid("A3C45B46-82AA-41EC-B62F-A58F16B71F20", typeof(IBuscaPessoaService))]
    public class BuscaPessoaService : XService, IBuscaPessoaService
    {
        public class ERPxDocumento : XEntity
        {
            [Display(Name = "Pessoas")]
            [Required()]
            public Guid CORxPessoaID {get; set;}

            [Display(Name = "Estado")]
            [Required()]
            public Int16 CORxStatusID {get; set;}

            public Boolean IsPKEmpty => !ERPxDocumentoID.HasValue;
            [Display(Name = "Documento")]
            [Required()]
            public Guid? ERPxDocumentoID {get; set;}

            [Display(Name = "Tipo de Documento")]
            [Required()]
            public Int16 ERPxDocumentoTipoID {get; set;}

            [Display(Name = "Número")]
            [MaxLength(25)]
            [Required()]
            public String Numero {get; set;}


            public List<ERPxDocumentoTipo> ERPxDocumentoTipo {get; set;} = new List<ERPxDocumentoTipo>();

            public CORxPessoa CORxPessoa {get; set;}
        }
        public class ERPxDocumentoTipo : XEntity
        {
            public Boolean IsPKEmpty => Object.Equals(ERPxDocumentoTipoID, typeof(Int16).GetDefault());
            [Display(Name = "Tipo de Documento")]
            [Required()]
            [DatabaseGenerated(DatabaseGeneratedOption.None)]
            public Int16 ERPxDocumentoTipoID {get; set;}

            [Required()]
            public Int32 Filtro {get; set;}

            [Display(Name = "Máscara")]
            [MaxLength(30)]
            public String Mascara {get; set;}

            [Display(Name = "Tipo de Documento")]
            [MaxLength(25)]
            [Required()]
            public String Tipo {get; set;}


            public ERPxDocumento ERPxDocumento {get; set;}
        }
        public class ERPxEndereco : XEntity
        {
            [Display(Name = "Logradouro")]
            [Required()]
            public Int32 CEPxLogradouroID {get; set;}

            [MaxLength(30)]
            public String Complemento {get; set;}

            [Display(Name = "Pessoas")]
            [Required()]
            public Guid CORxPessoaID {get; set;}

            [Display(Name = "Estado")]
            [Required()]
            public Int16 CORxStatusID {get; set;}

            public Boolean IsPKEmpty => !ERPxEnderecoID.HasValue;
            [Display(Name = "Endereço")]
            [Required()]
            public Guid? ERPxEnderecoID {get; set;}

            [Display(Name = "Finalidade")]
            [Required()]
            public Int16 ERPxFinalidadeID {get; set;}

            [Required()]
            public Decimal Latitude {get; set;}

            [Required()]
            public Decimal Longitude {get; set;}

            [MaxLength(4)]
            public String Lote {get; set;}

            [Display(Name = "Número")]
            [MaxLength(10)]
            public String Numero {get; set;}

            [Display(Name = "Observação")]
            [MaxLength(50)]
            public String Observacao {get; set;}

            [MaxLength(4)]
            public String Quadra {get; set;}


            public List<ERPxFinalidade> ERPxFinalidade {get; set;} = new List<ERPxFinalidade>();

            public CORxPessoa CORxPessoa {get; set;}
        }
        public class ERPxFinalidade : XEntity
        {
            public Boolean IsPKEmpty => Object.Equals(ERPxFinalidadeID, typeof(Int16).GetDefault());
            [Display(Name = "Finalidade")]
            [Required()]
            [DatabaseGenerated(DatabaseGeneratedOption.None)]
            public Int16 ERPxFinalidadeID {get; set;}

            [MaxLength(30)]
            [Required()]
            public String Finalidade {get; set;}


            public ERPxEndereco ERPxEndereco {get; set;}
        }
        public class ERPxContato : XEntity
        {
            [Display(Name = "E-Mail, Telefone e ETC.")]
            [MaxLength(50)]
            [Required()]
            public String Contato {get; set;}

            [Display(Name = "Pessoas")]
            [Required()]
            public Guid CORxPessoaID {get; set;}

            [Display(Name = "Estado")]
            [Required()]
            public Int16 CORxStatusID {get; set;}

            public Boolean IsPKEmpty => !ERPxContatoID.HasValue;
            [Display(Name = "Meios de Contato")]
            [Required()]
            public Guid? ERPxContatoID {get; set;}

            [Display(Name = "Tipo de Contato")]
            [Required()]
            public Int16 ERPxContatoTipoID {get; set;}

            [Display(Name = "Finalidade")]
            [Required()]
            public Int16 ERPxFinalidadeID {get; set;}

            [Display(Name = "Observação")]
            [MaxLength(30)]
            public String Observacao {get; set;}

            [Required()]
            public Boolean Validado {get; set;}


            public List<ERPxContatoTipo> ERPxContatoTipo {get; set;} = new List<ERPxContatoTipo>();

            public CORxPessoa CORxPessoa {get; set;}
        }
        public class ERPxContatoTipo : XEntity
        {
            public Boolean IsPKEmpty => Object.Equals(ERPxContatoTipoID, typeof(Int16).GetDefault());
            [Display(Name = "Tipo de Contato")]
            [Required()]
            [DatabaseGenerated(DatabaseGeneratedOption.None)]
            public Int16 ERPxContatoTipoID {get; set;}

            [Display(Name = "Máscara")]
            [MaxLength(128)]
            public String Mascara {get; set;}

            [MaxLength(20)]
            [Required()]
            public String Tipo {get; set;}


            public ERPxContato ERPxContato {get; set;}
        }
        public class CORxPessoa : XEntity
        {
            [Display(Name = "Localidade")]
            [Required()]
            public Int32 CEPxLocalidadePrincipalID {get; set;}

            public Boolean IsPKEmpty => !CORxPessoaID.HasValue;
            [Display(Name = "Pessoa")]
            [Required()]
            public Guid? CORxPessoaID {get; set;}

            [MaxLength(180)]
            [Required()]
            public String Nome {get; set;}


            public List<ERPxDocumento> ERPxDocumento {get; set;} = new List<ERPxDocumento>();

            public List<ERPxEndereco> ERPxEndereco {get; set;} = new List<ERPxEndereco>();

            public List<ERPxContato> ERPxContato {get; set;} = new List<ERPxContato>();
        }
        public class DBContext : XDBContext
        {
            public DBContext(DbContextOptions<DBContext> pOptions, XITenantProvider pTenantProvider, XISharedTransaction pSharedTransaction)
                   : base(pOptions, pTenantProvider, pSharedTransaction)
            {
            }

            public DbSet<ERPxDocumento> ERPxDocumento{get; set;}
            public DbSet<ERPxDocumentoTipo> ERPxDocumentoTipo{get; set;}
            public DbSet<ERPxEndereco> ERPxEndereco{get; set;}
            public DbSet<ERPxFinalidade> ERPxFinalidade{get; set;}
            public DbSet<ERPxContato> ERPxContato{get; set;}
            public DbSet<ERPxContatoTipo> ERPxContatoTipo{get; set;}
            public DbSet<CORxPessoa> CORxPessoa{get; set;}

        private void ConfigureERPxDocumento(ModelBuilder pBuilder)
        {
            pBuilder.Entity<ERPxDocumento>(ett =>
            {
                ett.HasKey(e => e.ERPxDocumentoID).HasName("PK_ERPxDocumento");

                ett.Property(d => d.ERPxDocumentoID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.ERPxDocumentoTipoID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.CORxPessoaID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.Numero).HasColumnType(GetDBType("String", 25));
                ett.Property(d => d.CORxStatusID).HasColumnType(GetDBType("Int16"))
                    .HasDefaultValue(GetDBValue("Int16", (Int16)0));
                ett.ToTable("ERPxDocumento");
                ett.HasOne(d => d.CORxPessoa)
                   .WithMany(p => p.ERPxDocumento)
                   .HasForeignKey(d => d.CORxPessoaID)
                   .OnDelete(DeleteBehavior.Restrict);
            });
        }
        private void ConfigureERPxDocumentoTipo(ModelBuilder pBuilder)
        {
            pBuilder.Entity<ERPxDocumentoTipo>(ett =>
            {
                ett.HasKey(e => e.ERPxDocumentoTipoID).HasName("PK_ERPxDocumentoTipo");

                ett.Property(d => d.Tipo).HasColumnType(GetDBType("String", 25));
                ett.Property(d => d.ERPxDocumentoTipoID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.Mascara).HasColumnType(GetDBType("String", 30)).IsRequired(false);
                ett.Property(d => d.Filtro).HasColumnType(GetDBType("Int32"));
                ett.ToTable("ERPxDocumentoTipo");
                ett.HasOne(d => d.ERPxDocumento)
                   .WithMany(p => p.ERPxDocumentoTipo)
                   .HasForeignKey(d => d.ERPxDocumentoTipoID)
                   .OnDelete(DeleteBehavior.Restrict);
            });
        }
        private void ConfigureERPxEndereco(ModelBuilder pBuilder)
        {
            pBuilder.Entity<ERPxEndereco>(ett =>
            {
                ett.HasKey(e => e.ERPxEnderecoID).HasName("PK_ERPxEndereco");

                ett.Property(d => d.CORxPessoaID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.ERPxEnderecoID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.CORxStatusID).HasColumnType(GetDBType("Int16"))
                    .HasDefaultValue(GetDBValue("Int16", (Int16)0));
                ett.Property(d => d.Lote).HasColumnType(GetDBType("String", 4)).IsRequired(false)
                    .HasDefaultValue(GetDBValue("String", null));
                ett.Property(d => d.Quadra).HasColumnType(GetDBType("String", 4)).IsRequired(false)
                    .HasDefaultValue(GetDBValue("String", null));
                ett.Property(d => d.Numero).HasColumnType(GetDBType("String", 10)).IsRequired(false)
                    .HasDefaultValue(GetDBValue("String", null));
                ett.Property(d => d.ERPxFinalidadeID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.Observacao).HasColumnType(GetDBType("String", 50)).IsRequired(false);
                ett.Property(d => d.CEPxLogradouroID).HasColumnType(GetDBType("Int32"));
                ett.Property(d => d.Complemento).HasColumnType(GetDBType("String", 30)).IsRequired(false);
                ett.Property(d => d.Latitude).HasColumnType(GetDBType("Decimal", 20, 10));
                ett.Property(d => d.Longitude).HasColumnType(GetDBType("Decimal", 20, 10));
                ett.ToTable("ERPxEndereco");
                ett.HasOne(d => d.CORxPessoa)
                   .WithMany(p => p.ERPxEndereco)
                   .HasForeignKey(d => d.CORxPessoaID)
                   .OnDelete(DeleteBehavior.Restrict);
            });
        }
        private void ConfigureERPxFinalidade(ModelBuilder pBuilder)
        {
            pBuilder.Entity<ERPxFinalidade>(ett =>
            {
                ett.HasKey(e => e.ERPxFinalidadeID).HasName("PK_ERPxFinalidade");

                ett.Property(d => d.Finalidade).HasColumnType(GetDBType("String", 30));
                ett.Property(d => d.ERPxFinalidadeID).HasColumnType(GetDBType("Int16"));
                ett.ToTable("ERPxFinalidade");
                ett.HasOne(d => d.ERPxEndereco)
                   .WithMany(p => p.ERPxFinalidade)
                   .HasForeignKey(d => d.ERPxFinalidadeID)
                   .OnDelete(DeleteBehavior.Restrict);
            });
        }
        private void ConfigureERPxContato(ModelBuilder pBuilder)
        {
            pBuilder.Entity<ERPxContato>(ett =>
            {
                ett.HasKey(e => e.ERPxContatoID).HasName("PK_ERPxContato");

                ett.Property(d => d.Contato).HasColumnType(GetDBType("String", 50));
                ett.Property(d => d.CORxPessoaID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.ERPxContatoID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.ERPxContatoTipoID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.ERPxFinalidadeID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.CORxStatusID).HasColumnType(GetDBType("Int16"))
                    .HasDefaultValue(GetDBValue("Int16", (Int16)0));
                ett.Property(d => d.Validado).HasColumnType(GetDBType("Boolean"))
                    .HasDefaultValue(GetDBValue("Boolean", false));
                ett.Property(d => d.Observacao).HasColumnType(GetDBType("String", 30)).IsRequired(false);
                ett.ToTable("ERPxContato");
                ett.HasOne(d => d.CORxPessoa)
                   .WithMany(p => p.ERPxContato)
                   .HasForeignKey(d => d.CORxPessoaID)
                   .OnDelete(DeleteBehavior.Restrict);
            });
        }
        private void ConfigureERPxContatoTipo(ModelBuilder pBuilder)
        {
            pBuilder.Entity<ERPxContatoTipo>(ett =>
            {
                ett.HasKey(e => e.ERPxContatoTipoID).HasName("PK_ERPxContatoTipo");

                ett.Property(d => d.Tipo).HasColumnType(GetDBType("String", 20));
                ett.Property(d => d.ERPxContatoTipoID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.Mascara).HasColumnType(GetDBType("String", 128)).IsRequired(false);
                ett.ToTable("ERPxContatoTipo");
                ett.HasOne(d => d.ERPxContato)
                   .WithMany(p => p.ERPxContatoTipo)
                   .HasForeignKey(d => d.ERPxContatoTipoID)
                   .OnDelete(DeleteBehavior.Restrict);
            });
        }
        private void ConfigureCORxPessoa(ModelBuilder pBuilder)
        {
            pBuilder.Entity<CORxPessoa>(ett =>
            {
                ett.HasKey(e => e.CORxPessoaID).HasName("PK_CORxPessoa");

                ett.Property(d => d.CORxPessoaID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.Nome).HasColumnType(GetDBType("String", 180));
                ett.Property(d => d.CEPxLocalidadePrincipalID).HasColumnType(GetDBType("Int32"));
                ett.ToTable("CORxPessoa");
            });
        }

            protected override void OnModelCreating(ModelBuilder pBuilder)
            {
                ConfigureERPxDocumento(pBuilder);
                ConfigureERPxDocumentoTipo(pBuilder);
                ConfigureERPxEndereco(pBuilder);
                ConfigureERPxFinalidade(pBuilder);
                ConfigureERPxContato(pBuilder);
                ConfigureERPxContatoTipo(pBuilder);
                ConfigureCORxPessoa(pBuilder);
                base.OnModelCreating(pBuilder);
            }

            protected override string GetConnectionString()
            {
                if (ConnectionString != null)
                    return ConnectionString;
                return XEnvironment.Read("SQL_SERVER_TFX", base.GetConnectionString());
            }
        }

        public abstract class BaseINFBuscaPessoaServiceRule : XServiceINFRule<BuscaPessoaService, BuscaPessoaTuple>
        {
            public BaseINFBuscaPessoaServiceRule(BuscaPessoaService pService)
                : base(pService)
            {
            }
            protected DBContext Context
            {
                get;
                private set;
            }
            protected internal virtual T GetWhere<T>(T pQuery)
            {
                return pQuery;
            }
            internal void SetContext(DBContext pContext)
            {
                Context = pContext;
            }

        }

        public BuscaPessoaService(ILogger<XService> pLogger, DBContext pContext)
               :base(pLogger)
        {
            Rule = new BuscaPessoaRule(this);
            _INFRule = new INFBuscaPessoaServiceRule(this);
            Context = pContext;
            _INFRule.SetContext(Context);
        }

        internal XIServiceRule<BuscaPessoaTuple, BuscaPessoaTuple> Rule;
        private INFBuscaPessoaServiceRule _INFRule;

        public override Guid ID => new Guid("A3C45B46-82AA-41EC-B62F-A58F16B71F20");

        public DBContext Context
        {
            get;
        }

        public override void GracefullyClose()
        {
            Context.Commit();
        }
        public IQueryable<BuscaPessoaTuple> ExecuteQuery(BuscaPessoaFilter pFilter)
        {
            var ctx = Context;
            var query = from CORxPessoa in ctx.CORxPessoa
                        join ERPxDocumento in ctx.ERPxDocumento on CORxPessoa.CORxPessoaID equals ERPxDocumento.CORxPessoaID
                        from ERPxDocumentoTipo in ctx.ERPxDocumentoTipo.Where(t => ERPxDocumento.ERPxDocumentoTipoID == t.ERPxDocumentoTipoID).DefaultIfEmpty()
                        join ERPxEndereco in ctx.ERPxEndereco on CORxPessoa.CORxPessoaID equals ERPxEndereco.CORxPessoaID
                        from ERPxFinalidade in ctx.ERPxFinalidade.Where(t => ERPxEndereco.ERPxFinalidadeID == t.ERPxFinalidadeID).DefaultIfEmpty()
                        join ERPxContato in ctx.ERPxContato on CORxPessoa.CORxPessoaID equals ERPxContato.CORxPessoaID
                        from ERPxContatoTipo in ctx.ERPxContatoTipo.Where(t => ERPxContato.ERPxContatoTipoID == t.ERPxContatoTipoID).DefaultIfEmpty()
                        
                        select new {ERPxDocumento, ERPxDocumentoTipo, ERPxEndereco, ERPxFinalidade, ERPxContato, ERPxContatoTipo, CORxPessoa};
            query = _INFRule.GetWhere(query);


            if (!LoadAll)
            {
                if (pFilter?.SkipRows > 0)
                    query = query.Skip(pFilter.SkipRows.Value);

                if (pFilter?.TakeRows > 0)
                    query = query.Take(pFilter.TakeRows.Value);
                else
                    query = query.Take(75);
            }

            var qry = query.Select(q => new BuscaPessoaTuple(0,
                                 q.ERPxContato.Contato,
                                 q.ERPxContato.ERPxContatoTipoID,
                                 q.ERPxContatoTipo.Mascara,
                                 q.ERPxContatoTipo.Tipo,
                                 q.ERPxDocumento.ERPxDocumentoTipoID,
                                 q.ERPxDocumento.Numero,
                                 q.ERPxDocumentoTipo.Mascara,
                                 q.ERPxDocumentoTipo.Tipo,
                                 q.ERPxFinalidade.Finalidade,
                                 q.ERPxEndereco.Observacao));
            return qry;
        }

        public BuscaPessoaDataSet Execute(BuscaPessoaFilter pFilter)
        {
            _INFRule.InternalBeforeExecute();
            var qry = ExecuteQuery(pFilter);
            var tuples = qry.ToList();
            tuples = Rule.InternalAfterSelect(tuples);
            _INFRule.InternalAfterExecute(tuples);
            var dataset = new BuscaPessoaDataSet { Tuples = tuples };
            return dataset;
        }
    }
}