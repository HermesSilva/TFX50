//<auto-generated/>
using System;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Microsoft.AspNetCore.Mvc;
using TFX.Core.Reflections;
using TFX.Core.Model;
using TFX.Core.Interfaces;
using TFX.Core;
using TFX.Core.Services;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Http;
using TFX.Core.Lzma;
using TFX.Core.Model.FRM;
using TFX.Core.DB;
using TFX.Core.Model.Service;

namespace Projecao.Core.ERP.Pessoa
{
    public class DocumentoServiceModel : XServiceModel
    {
        public static Guid CID = new Guid("34ADCC85-4724-4E28-B0AC-CE711B98DC23");
        public DocumentoServiceModel()
        {
            SearchPath = "Documento/Search";
            DataView.Columns.Add(new XColumnModel() { Name = "ERPxDocumentoID", Title = "Documento", Type = "Guid", Mask = "", 
                                                      Visible = false });
            DataView.Columns.Add(new XColumnModel() { Name = "ERPxDocumentoTipoID", Title = "Tipo de Documento", Type = "Int16", Mask = "", 
                                                      Visible = false });
            DataView.Columns.Add(new XColumnModel() { Name = "Numero", Title = "Doc. Nº", Type = "String", Mask = "", 
                                                      Visible = true, IsFreeSearch = true, Operator = XOperator.EqualTo });
            DataView.Columns.Add(new XColumnModel() { Name = "CORxStatusID", Title = "Estado", Type = "Int16", Mask = "", 
                                                      Visible = true });
            DataView.Columns.Add(new XColumnModel() { Name = "CORxPessoaID", Title = "Pessoas", Type = "Guid", Mask = "", 
                                                      Visible = false });
            DataView.Columns.Add(new XColumnModel() { Name = "Mascara", Title = "Máscara", Type = "String", Mask = "", 
                                                      Visible = false });
            DataView.Columns.Add(new XColumnModel() { Name = "Tipo", Title = "Tipo de Documento", Type = "String", Mask = "", 
                                                      Visible = true, IsFreeSearch = true, Operator = XOperator.EqualTo });
            Forms.Add(new FRMDocumentoFilter());
        }
    }
    public class DocumentoTuple : XServiceDataTuple
    {
        public DocumentoTuple()
        {
            Initialize();
        }

        public DocumentoTuple(Guid? pERPxDocumentoID, Int16 pERPxDocumentoTipoID, String pNumero, Int16 pCORxStatusID, Guid pCORxPessoaID, String pMascara, String pTipo)
            : this()
        {
            ERPxDocumentoID.Value = pERPxDocumentoID;
            ERPxDocumentoTipoID.Value = pERPxDocumentoTipoID;
            Numero.Value = pNumero;
            CORxStatusID.Value = pCORxStatusID;
            CORxPessoaID.Value = pCORxPessoaID;
            Mascara.Value = pMascara;
            Tipo.Value = pTipo;
        }

        public override void Initialize()
        {
            ERPxDocumentoID = new XGuidNullableDataField();
            ERPxDocumentoTipoID = new XInt16DataField();
            Numero = new XStringDataField();
            CORxStatusID = new XInt16DataField();
            CORxPessoaID = new XGuidDataField();
            Mascara = new XStringDataField();
            Tipo = new XStringDataField();
        }

        [Display(Name = "Documento")]
        public XGuidNullableDataField ERPxDocumentoID {get;set;}
        [Display(Name = "Tipo de Documento")]
        public XInt16DataField ERPxDocumentoTipoID {get;set;}
        [Display(Name = "Doc. Nº")]
        public XStringDataField Numero {get;set;}
        [Display(Name = "Estado")]
        public XInt16DataField CORxStatusID {get;set;}
        [Display(Name = "Pessoas")]
        public XGuidDataField CORxPessoaID {get;set;}
        [Display(Name = "Máscara")]
        public XStringDataField Mascara {get;set;}
        [Display(Name = "Tipo de Documento")]
        public XStringDataField Tipo {get;set;}
    }

    public class DocumentoFilter : XFilter
    {

        public DocumentoFilter()
        {
        }

        public DocumentoFilter(String pNumero)
        {
            Numero = pNumero;
        }
        public String Numero {get;set;}
    }
    public class FRMDocumentoFilter : XFRMModel
    {
        public FRMDocumentoFilter()
        {
            ID = new Guid("F1237A74-6975-4C3E-B0CD-2456D50AD30C");
            Name = "DocumentoFilter";
            Title = "";
            MinRows = 2;
            Style = XFRMStyle.Normal;
            Type = XFRMType.SVCFilter;
            XFRMField fld;
            fld = AddField(new XFRMField());
            fld.ForceRW = true;
            fld.Title = "Número";
            fld.CanInsert = true;
            fld.CanUpdate = true;
            fld.RowCount = 2;
            fld.ColCount = 32;
            fld.IsHidden = false;
            fld.Location = 1;
            fld.EditorCID = XModelEditors.XString;
            fld.Operator = XOperator.Like;
            fld.JustifyHeight = false;
            fld.AllowEmpty = true;
            fld.FontColor = "#000000";
            fld.FontStyle = XFontStyle.Normal;
            fld.ShowFooter = false;
            fld.ViewSAM = new Guid("00000000-0000-0000-0000-000000000000");
            fld.Order = 1;
            fld.Scale = -1;
            fld.Length = -1;
            fld.TypeID = XDataTypes.XString;
            fld.AdditionalFieldsID = new Guid[] {  };
            fld.AdditionalDataFieldsID = new Guid[] {  };
            fld.TargetFilterFieldID = new Guid[] {  };
            fld.SourceFilterFieldID = new Guid[] {  };
            fld.TargetDisplayFieldID = new Guid[] {  };
            fld.SourceDisplayFieldID = new Guid[] {  };
            fld.AutoLoad = false;
            fld.FilterInative = true;
            fld.IsAnswer = false;
            fld.AllowMultiSelect = false;
        }
    }


    public class DocumentoRequest : XRequest
    {
        public Guid ERPxDocumentoID {get;set;}
    }

    public interface IDocumentoService : XIService
    {
        object Flush(DocumentoDataSet pDataSet);

        DocumentoDataSet Execute(DocumentoFilter pFilter);
        IQueryable<DocumentoTuple> ExecuteQuery(DocumentoFilter pFilter);
    }

    public abstract class BaseDocumentoRule : XServiceRule<DocumentoTuple, DocumentoTuple>
    {
        public BaseDocumentoRule(XService pOwner)
            :base(pOwner)
        {
        }

        public virtual DocumentoFilter Execute(DocumentoFilter pFilter)
        {
            return pFilter;
        }
    }

    public class DocumentoDataSet : XDataSet<DocumentoTuple>
    {
        public override Guid ID => new Guid("34ADCC85-4724-4E28-B0AC-CE711B98DC23");
    }
}