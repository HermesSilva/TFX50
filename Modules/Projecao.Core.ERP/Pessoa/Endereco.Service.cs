//<auto-generated/>
using System;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using TFX.Core;
using TFX.Core.Model;
using TFX.Core.Services;
using TFX.Core.Reflections;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.Extensions.DependencyInjection;
using TFX.Core.Exceptions;
using Microsoft.AspNetCore.Http;
using System.Data;
using TFX.Core.Lzma;
using TFX.Core.Identity;
using System.Text;
using Projecao.Core.ERP.Pessoa.Rules;
using Projecao.Core.ERP.Pessoa;

namespace Projecao.Core.ERP.Pessoa
{
    [XGuid("FDEB9A57-921E-49FF-8B81-2D917798CED9", typeof(IEnderecoService))]
    public class EnderecoService : XService, IEnderecoService
    {
        public class ERPxEndereco : XEntity
        {
            [Display(Name = "Logradouro")]
            [Required()]
            public Int32 CEPxLogradouroID {get; set;}

            [MaxLength(30)]
            public String Complemento {get; set;}

            [Display(Name = "Pessoas")]
            [Required()]
            public Guid CORxPessoaID {get; set;}

            [Display(Name = "Estado")]
            [Required()]
            public Int16 CORxStatusID {get; set;}

            public Boolean IsPKEmpty => !ERPxEnderecoID.HasValue;
            [Display(Name = "Endereço")]
            [Required()]
            public Guid? ERPxEnderecoID {get; set;}

            [Display(Name = "Finalidade")]
            [Required()]
            public Int16 ERPxFinalidadeID {get; set;}

            [Required()]
            public Decimal Latitude {get; set;}

            [Required()]
            public Decimal Longitude {get; set;}

            [MaxLength(4)]
            public String Lote {get; set;}

            [Display(Name = "Número")]
            [MaxLength(10)]
            public String Numero {get; set;}

            [Display(Name = "Observação")]
            [MaxLength(50)]
            public String Observacao {get; set;}

            [MaxLength(4)]
            public String Quadra {get; set;}


            public List<ERPxFinalidade> ERPxFinalidade {get; set;} = new List<ERPxFinalidade>();

            public List<CEPxLogradouro> CEPxLogradouro {get; set;} = new List<CEPxLogradouro>();
        }
        public class ERPxFinalidade : XEntity
        {
            public Boolean IsPKEmpty => Object.Equals(ERPxFinalidadeID, typeof(Int16).GetDefault());
            [Display(Name = "Finalidade")]
            [Required()]
            [DatabaseGenerated(DatabaseGeneratedOption.None)]
            public Int16 ERPxFinalidadeID {get; set;}

            [MaxLength(30)]
            [Required()]
            public String Finalidade {get; set;}


            public ERPxEndereco ERPxEndereco {get; set;}
        }
        public class CEPxUF : XEntity
        {
            [Display(Name = "CEP Final")]
            [MaxLength(8)]
            [Required()]
            public String CEPFinal {get; set;}

            [Display(Name = "CEP Inicial")]
            [MaxLength(8)]
            [Required()]
            public String CEPInicial {get; set;}

            [Display(Name = "País")]
            [Required()]
            public Int16 CEPxPaisID {get; set;}

            public Boolean IsPKEmpty => Object.Equals(CEPxUFID, typeof(Int16).GetDefault());
            [Display(Name = "UF")]
            [Required()]
            [DatabaseGenerated(DatabaseGeneratedOption.None)]
            public Int16 CEPxUFID {get; set;}

            [Display(Name = "Nome da UF")]
            [MaxLength(45)]
            [Required()]
            public String Nome {get; set;}

            [Display(Name = "Sigla da UF")]
            [MaxLength(2)]
            [Required()]
            public String Sigla {get; set;}


            public CEPxLocalidade CEPxLocalidade {get; set;}
        }
        public class CEPxLocalidade : XEntity
        {
            [Display(Name = "CEP Geral")]
            [MaxLength(8)]
            public String CEPGeral {get; set;}

            public Boolean IsPKEmpty => Object.Equals(CEPxLocalidadeID, typeof(Int32).GetDefault());
            [Display(Name = "Localidade")]
            [Required()]
            [DatabaseGenerated(DatabaseGeneratedOption.None)]
            public Int32 CEPxLocalidadeID {get; set;}

            [Display(Name = "Tipo de Localidade")]
            [Required()]
            public Int16 CEPxLocalidadeTipoID {get; set;}

            [Display(Name = "Município")]
            [Required()]
            public Int32 CEPxMunicipioID {get; set;}

            [Display(Name = "Unidade Federativa")]
            [Required()]
            public Int16 CEPxUFID {get; set;}

            [Display(Name = "Código no IBGE")]
            [MaxLength(7)]
            [DisplayFormat(DataFormatString = "0000000")]
            public String CodigoIBGE {get; set;}

            [Display(Name = "Nome da Localidade")]
            [MaxLength(128)]
            [Required()]
            public String Nome {get; set;}

            [Display(Name = "Número")]
            [Required()]
            public Int32 Numero {get; set;}


            public List<CEPxUF> CEPxUF {get; set;} = new List<CEPxUF>();

            public List<CEPxLogradouro> CEPxLogradouro {get; set;} = new List<CEPxLogradouro>();
        }
        public class CEPxLogradouro : XEntity
        {
            [MaxLength(8)]
            [DisplayFormat(DataFormatString = "00.000-000")]
            public String CEP {get; set;}

            [Display(Name = "Bairro")]
            [Required()]
            public Int32 CEPxBairroID {get; set;}

            [Display(Name = "Localidade")]
            [Required()]
            public Int32 CEPxLocalidadeID {get; set;}

            public Boolean IsPKEmpty => Object.Equals(CEPxLogradouroID, typeof(Int32).GetDefault());
            [Display(Name = "Logradouro")]
            [Required()]
            [DatabaseGenerated(DatabaseGeneratedOption.None)]
            public Int32 CEPxLogradouroID {get; set;}

            [MaxLength(128)]
            [Required()]
            public String Nome {get; set;}

            [Display(Name = "Número")]
            [Required()]
            public Int32 Numero {get; set;}

            [MaxLength(30)]
            [Required()]
            public String Tipo {get; set;}


            public List<CEPxBairro> CEPxBairro {get; set;} = new List<CEPxBairro>();

            public CEPxLocalidade CEPxLocalidade {get; set;}

            public ERPxEndereco ERPxEndereco {get; set;}
        }
        public class CEPxBairro : XEntity
        {
            [Display(Name = "Abreviatura")]
            [MaxLength(25)]
            public String Breviatura {get; set;}

            public Boolean IsPKEmpty => Object.Equals(CEPxBairroID, typeof(Int32).GetDefault());
            [Display(Name = "Bairro")]
            [Required()]
            [DatabaseGenerated(DatabaseGeneratedOption.None)]
            public Int32 CEPxBairroID {get; set;}

            [Display(Name = "Localidade")]
            [Required()]
            public Int32 CEPxLocalidadeID {get; set;}

            [MaxLength(128)]
            [Required()]
            public String Nome {get; set;}

            [Display(Name = "Número")]
            [Required()]
            public Int32 Numero {get; set;}


            public CEPxLogradouro CEPxLogradouro {get; set;}
        }
        public class DBContext : XDBContext
        {
            public DBContext(DbContextOptions<DBContext> pOptions, XITenantProvider pTenantProvider, XISharedTransaction pSharedTransaction)
                   : base(pOptions, pTenantProvider, pSharedTransaction)
            {
            }

            public DbSet<ERPxEndereco> ERPxEndereco{get; set;}
            public DbSet<ERPxFinalidade> ERPxFinalidade{get; set;}
            public DbSet<CEPxUF> CEPxUF{get; set;}
            public DbSet<CEPxLocalidade> CEPxLocalidade{get; set;}
            public DbSet<CEPxLogradouro> CEPxLogradouro{get; set;}
            public DbSet<CEPxBairro> CEPxBairro{get; set;}

        private void ConfigureERPxEndereco(ModelBuilder pBuilder)
        {
            pBuilder.Entity<ERPxEndereco>(ett =>
            {
                ett.HasKey(e => e.ERPxEnderecoID).HasName("PK_ERPxEndereco");

                ett.Property(d => d.CORxPessoaID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.ERPxEnderecoID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.CORxStatusID).HasColumnType(GetDBType("Int16"))
                    .HasDefaultValue(GetDBValue("Int16", (Int16)0));
                ett.Property(d => d.Lote).HasColumnType(GetDBType("String", 4)).IsRequired(false)
                    .HasDefaultValue(GetDBValue("String", null));
                ett.Property(d => d.Quadra).HasColumnType(GetDBType("String", 4)).IsRequired(false)
                    .HasDefaultValue(GetDBValue("String", null));
                ett.Property(d => d.Numero).HasColumnType(GetDBType("String", 10)).IsRequired(false)
                    .HasDefaultValue(GetDBValue("String", null));
                ett.Property(d => d.ERPxFinalidadeID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.Observacao).HasColumnType(GetDBType("String", 50)).IsRequired(false);
                ett.Property(d => d.CEPxLogradouroID).HasColumnType(GetDBType("Int32"));
                ett.Property(d => d.Complemento).HasColumnType(GetDBType("String", 30)).IsRequired(false);
                ett.Property(d => d.Latitude).HasColumnType(GetDBType("Decimal", 20, 10));
                ett.Property(d => d.Longitude).HasColumnType(GetDBType("Decimal", 20, 10));
                ett.ToTable("ERPxEndereco");
            });
        }
        private void ConfigureERPxFinalidade(ModelBuilder pBuilder)
        {
            pBuilder.Entity<ERPxFinalidade>(ett =>
            {
                ett.HasKey(e => e.ERPxFinalidadeID).HasName("PK_ERPxFinalidade");

                ett.Property(d => d.Finalidade).HasColumnType(GetDBType("String", 30));
                ett.Property(d => d.ERPxFinalidadeID).HasColumnType(GetDBType("Int16"));
                ett.ToTable("ERPxFinalidade");
                ett.HasOne(d => d.ERPxEndereco)
                   .WithMany(p => p.ERPxFinalidade)
                   .HasForeignKey(d => d.ERPxFinalidadeID)
                   .OnDelete(DeleteBehavior.Restrict);
            });
        }
        private void ConfigureCEPxUF(ModelBuilder pBuilder)
        {
            pBuilder.Entity<CEPxUF>(ett =>
            {
                ett.HasKey(e => e.CEPxUFID).HasName("PK_CEPxUF");

                ett.Property(d => d.CEPxUFID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.Nome).HasColumnType(GetDBType("String", 45));
                ett.Property(d => d.Sigla).HasColumnType(GetDBType("String", 2));
                ett.Property(d => d.CEPxPaisID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.CEPInicial).HasColumnType(GetDBType("String", 8));
                ett.Property(d => d.CEPFinal).HasColumnType(GetDBType("String", 8));
                ett.ToTable("CEPxUF");
                ett.HasOne(d => d.CEPxLocalidade)
                   .WithMany(p => p.CEPxUF)
                   .HasForeignKey(d => d.CEPxUFID)
                   .OnDelete(DeleteBehavior.Restrict);
            });
        }
        private void ConfigureCEPxLocalidade(ModelBuilder pBuilder)
        {
            pBuilder.Entity<CEPxLocalidade>(ett =>
            {
                ett.HasKey(e => e.CEPxLocalidadeID).HasName("PK_CEPxLocalidade");

                ett.Property(d => d.CEPxLocalidadeID).HasColumnType(GetDBType("Int32"));
                ett.Property(d => d.CEPxUFID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.Nome).HasColumnType(GetDBType("String", 128));
                ett.Property(d => d.CEPxMunicipioID).HasColumnType(GetDBType("Int32"));
                ett.Property(d => d.CodigoIBGE).HasColumnType(GetDBType("String", 7)).IsRequired(false);
                ett.Property(d => d.CEPxLocalidadeTipoID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.CEPGeral).HasColumnType(GetDBType("String", 8)).IsRequired(false)
                    .HasDefaultValue(GetDBValue("String", null));
                ett.Property(d => d.Numero).HasColumnType(GetDBType("Int32"));
                ett.ToTable("CEPxLocalidade");
            });
        }
        private void ConfigureCEPxLogradouro(ModelBuilder pBuilder)
        {
            pBuilder.Entity<CEPxLogradouro>(ett =>
            {
                ett.HasKey(e => e.CEPxLogradouroID).HasName("PK_CEPxLogradouro");

                ett.Property(d => d.CEPxBairroID).HasColumnType(GetDBType("Int32"));
                ett.Property(d => d.CEPxLogradouroID).HasColumnType(GetDBType("Int32"));
                ett.Property(d => d.Nome).HasColumnType(GetDBType("String", 128));
                ett.Property(d => d.CEPxLocalidadeID).HasColumnType(GetDBType("Int32"));
                ett.Property(d => d.Tipo).HasColumnType(GetDBType("String", 30));
                ett.Property(d => d.Numero).HasColumnType(GetDBType("Int32"));
                ett.Property(d => d.CEP).HasColumnType(GetDBType("String", 8)).IsRequired(false);
                ett.ToTable("CEPxLogradouro");
                ett.HasOne(d => d.CEPxLocalidade)
                   .WithMany(p => p.CEPxLogradouro)
                   .HasForeignKey(d => d.CEPxLocalidadeID)
                   .OnDelete(DeleteBehavior.Restrict);
                ett.HasOne(d => d.ERPxEndereco)
                   .WithMany(p => p.CEPxLogradouro)
                   .HasForeignKey(d => d.CEPxLogradouroID)
                   .OnDelete(DeleteBehavior.Restrict);
            });
        }
        private void ConfigureCEPxBairro(ModelBuilder pBuilder)
        {
            pBuilder.Entity<CEPxBairro>(ett =>
            {
                ett.HasKey(e => e.CEPxBairroID).HasName("PK_CEPxBairro");

                ett.Property(d => d.CEPxLocalidadeID).HasColumnType(GetDBType("Int32"));
                ett.Property(d => d.CEPxBairroID).HasColumnType(GetDBType("Int32"));
                ett.Property(d => d.Nome).HasColumnType(GetDBType("String", 128));
                ett.Property(d => d.Breviatura).HasColumnType(GetDBType("String", 25)).IsRequired(false);
                ett.Property(d => d.Numero).HasColumnType(GetDBType("Int32"));
                ett.ToTable("CEPxBairro");
                ett.HasOne(d => d.CEPxLogradouro)
                   .WithMany(p => p.CEPxBairro)
                   .HasForeignKey(d => d.CEPxBairroID)
                   .OnDelete(DeleteBehavior.Restrict);
            });
        }

            protected override void OnModelCreating(ModelBuilder pBuilder)
            {
                ConfigureERPxEndereco(pBuilder);
                ConfigureERPxFinalidade(pBuilder);
                ConfigureCEPxUF(pBuilder);
                ConfigureCEPxLocalidade(pBuilder);
                ConfigureCEPxLogradouro(pBuilder);
                ConfigureCEPxBairro(pBuilder);
                base.OnModelCreating(pBuilder);
            }

            protected override string GetConnectionString()
            {
                if (ConnectionString != null)
                    return ConnectionString;
                return XEnvironment.Read("SQL_SERVER_TFX", base.GetConnectionString());
            }
        }

        public abstract class BaseINFEnderecoServiceRule : XServiceINFRule<EnderecoService, EnderecoTuple>
        {
            public BaseINFEnderecoServiceRule(EnderecoService pService)
                : base(pService)
            {
            }
            protected DBContext Context
            {
                get;
                private set;
            }
            protected internal virtual T GetWhere<T>(T pQuery)
            {
                return pQuery;
            }
            internal void SetContext(DBContext pContext)
            {
                Context = pContext;
            }

        }

        public EnderecoService(ILogger<XService> pLogger, DBContext pContext)
               :base(pLogger)
        {
            Rule = new EnderecoRule(this);
            _INFRule = new INFEnderecoServiceRule(this);
            Context = pContext;
            _INFRule.SetContext(Context);
        }

        internal XIServiceRule<EnderecoTuple, EnderecoTuple> Rule;
        private INFEnderecoServiceRule _INFRule;

        public override Guid ID => new Guid("FDEB9A57-921E-49FF-8B81-2D917798CED9");

        public DBContext Context
        {
            get;
        }

        public override void GracefullyClose()
        {
            Context.Commit();
        }
        public IQueryable<EnderecoTuple> ExecuteQuery(EnderecoFilter pFilter)
        {
            var ctx = Context;
            var query = from ERPxEndereco in ctx.ERPxEndereco
                        join ERPxFinalidade in ctx.ERPxFinalidade on ERPxEndereco.ERPxFinalidadeID equals ERPxFinalidade.ERPxFinalidadeID
                        join CEPxLogradouro in ctx.CEPxLogradouro on ERPxEndereco.CEPxLogradouroID equals CEPxLogradouro.CEPxLogradouroID
                        join CEPxLocalidade in ctx.CEPxLocalidade on CEPxLogradouro.CEPxLocalidadeID equals CEPxLocalidade.CEPxLocalidadeID
                        join CEPxUF in ctx.CEPxUF on CEPxLocalidade.CEPxUFID equals CEPxUF.CEPxUFID
                        join CEPxBairro in ctx.CEPxBairro on CEPxLogradouro.CEPxBairroID equals CEPxBairro.CEPxBairroID
                        
                        select new {ERPxEndereco, ERPxFinalidade, CEPxUF, CEPxLocalidade, CEPxLogradouro, CEPxBairro};
            query = _INFRule.GetWhere(query);


            if (!LoadAll)
            {
                if (pFilter?.SkipRows > 0)
                    query = query.Skip(pFilter.SkipRows.Value);

                if (pFilter?.TakeRows > 0)
                    query = query.Take(pFilter.TakeRows.Value);
                else
                    query = query.Take(75);
            }

            var qry = query.Select(q => new EnderecoTuple(q.CEPxLocalidade.Nome,
                              q.ERPxEndereco.CEPxLogradouroID,
                              q.ERPxEndereco.Complemento,
                              q.CEPxLogradouro.Nome,
                              q.CEPxLogradouro.Tipo,
                              q.CEPxLogradouro.CEP,
                              q.CEPxBairro.Nome,
                              q.ERPxEndereco.Longitude,
                              q.ERPxEndereco.Latitude,
                              null,
                              q.CEPxUF.Sigla,
                              q.CEPxUF.Nome,
                              q.CEPxLocalidade.CodigoIBGE,
                              q.ERPxEndereco.ERPxEnderecoID,
                              q.ERPxEndereco.ERPxFinalidadeID,
                              q.ERPxEndereco.Lote,
                              q.ERPxEndereco.Numero,
                              q.ERPxEndereco.Observacao,
                              q.ERPxEndereco.Quadra,
                              q.ERPxEndereco.CORxStatusID,
                              q.ERPxEndereco.CORxPessoaID,
                              q.ERPxFinalidade.Finalidade));
            return qry;
        }

        public EnderecoDataSet Execute(EnderecoFilter pFilter)
        {
            _INFRule.InternalBeforeExecute();
            var qry = ExecuteQuery(pFilter);
            var tuples = qry.ToList();
            tuples = Rule.InternalAfterSelect(tuples);
            _INFRule.InternalAfterExecute(tuples);
            var dataset = new EnderecoDataSet { Tuples = tuples };
            return dataset;
        }

        public object Flush(EnderecoDataSet pDataSet)
        {
            if (pDataSet?.Tuples.Count == 0)
                throw new XUnconformity("Não é permitido Flush sem Tuplas.");
            using (var scope = XEnvironment.Services.CreateScope())
            using (var ctx = scope.ServiceProvider.GetRequiredService<DBContext>())
            {
                Rule?.InternalBeforeFlush(pDataSet.Tuples);

                SetEnderecoValues(ctx, pDataSet);
                ctx.SaveChanges();

                Rule?.InternalAfterFlush(pDataSet.Tuples);

                return XEndPointMessage.Ok;
            }
        }

        private void SetEnderecoValues(DBContext ctx, EnderecoDataSet pDataSet)
        {
            if (pDataSet == null || pDataSet.Tuples == null)
                return;
            foreach (EnderecoTuple stpl in pDataSet.Tuples)
            {
                var sb = new StringBuilder();
                var ERPxEnderecotpl = new ERPxEndereco();
                ERPxEnderecotpl.CORxPessoaID = stpl.CORxPessoaID.Value;
                if (stpl.ERPxEnderecoID.Value != null)
                    ERPxEnderecotpl.ERPxEnderecoID = stpl.ERPxEnderecoID.Value;
                ERPxEnderecotpl.CORxStatusID = stpl.CORxStatusID.Value;
                ERPxEnderecotpl.Lote = stpl.Lote.Value;
                ERPxEnderecotpl.Quadra = stpl.Quadra.Value;
                ERPxEnderecotpl.Numero = stpl.Numero.Value;
                ERPxEnderecotpl.ERPxFinalidadeID = stpl.ERPxFinalidadeID.Value;
                ERPxEnderecotpl.Observacao = stpl.Observacao.Value;
                ERPxEnderecotpl.CEPxLogradouroID = stpl.CEPxLogradouroID.Value;
                ERPxEnderecotpl.Complemento = stpl.Complemento.Value;
                ERPxEnderecotpl.Latitude = stpl.Latitude.Value;
                ERPxEnderecotpl.Longitude = stpl.Longitude.Value;
                ERPxEnderecotpl.Validate(sb);
                ctx.ERPxEndereco.Add(ERPxEnderecotpl);
                if (!ERPxEnderecotpl.IsPKEmpty)
                    ctx.Entry(ERPxEnderecotpl).State = EntityState.Modified;
                else
                    ctx.Entry(ERPxEnderecotpl).State = EntityState.Added;
                if (sb.Length > 0)
                    throw new Exception(sb.ToString());
            }
        }
    }
}