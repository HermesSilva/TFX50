//<auto-generated/>
using System;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using TFX.Core;
using TFX.Core.Model;
using TFX.Core.Services;
using TFX.Core.Reflections;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.Extensions.DependencyInjection;
using TFX.Core.Exceptions;
using Microsoft.AspNetCore.Http;
using System.Data;
using TFX.Core.Lzma;
using TFX.Core.Identity;
using System.Text;
using Projecao.Core.ERP.Pessoa.Rules;
using Projecao.Core.ERP.Pessoa;

namespace Projecao.Core.ERP.Pessoa
{
    [XGuid("34ADCC85-4724-4E28-B0AC-CE711B98DC23", typeof(IDocumentoService))]
    public class DocumentoService : XService, IDocumentoService
    {
        public class ERPxDocumento : XEntity
        {
            [Display(Name = "Pessoas")]
            [Required()]
            public Guid CORxPessoaID {get; set;}

            [Display(Name = "Estado")]
            [Required()]
            public Int16 CORxStatusID {get; set;}

            public Boolean IsPKEmpty => !ERPxDocumentoID.HasValue;
            [Display(Name = "Documento")]
            [Required()]
            public Guid? ERPxDocumentoID {get; set;}

            [Display(Name = "Tipo de Documento")]
            [Required()]
            public Int16 ERPxDocumentoTipoID {get; set;}

            [Display(Name = "Número")]
            [MaxLength(25)]
            [Required()]
            public String Numero {get; set;}


            public List<ERPxDocumentoTipo> ERPxDocumentoTipo {get; set;} = new List<ERPxDocumentoTipo>();
        }
        public class ERPxDocumentoTipo : XEntity
        {
            public Boolean IsPKEmpty => Object.Equals(ERPxDocumentoTipoID, typeof(Int16).GetDefault());
            [Display(Name = "Tipo de Documento")]
            [Required()]
            [DatabaseGenerated(DatabaseGeneratedOption.None)]
            public Int16 ERPxDocumentoTipoID {get; set;}

            [Required()]
            public Int32 Filtro {get; set;}

            [Display(Name = "Máscara")]
            [MaxLength(30)]
            public String Mascara {get; set;}

            [Display(Name = "Tipo de Documento")]
            [MaxLength(25)]
            [Required()]
            public String Tipo {get; set;}


            public ERPxDocumento ERPxDocumento {get; set;}
        }
        public class DBContext : XDBContext
        {
            public DBContext(DbContextOptions<DBContext> pOptions, XITenantProvider pTenantProvider, XISharedTransaction pSharedTransaction)
                   : base(pOptions, pTenantProvider, pSharedTransaction)
            {
            }

            public DbSet<ERPxDocumento> ERPxDocumento{get; set;}
            public DbSet<ERPxDocumentoTipo> ERPxDocumentoTipo{get; set;}

        private void ConfigureERPxDocumento(ModelBuilder pBuilder)
        {
            pBuilder.Entity<ERPxDocumento>(ett =>
            {
                ett.HasKey(e => e.ERPxDocumentoID).HasName("PK_ERPxDocumento");

                ett.Property(d => d.ERPxDocumentoID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.ERPxDocumentoTipoID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.CORxPessoaID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.Numero).HasColumnType(GetDBType("String", 25));
                ett.Property(d => d.CORxStatusID).HasColumnType(GetDBType("Int16"))
                    .HasDefaultValue(GetDBValue("Int16", (Int16)0));
                ett.ToTable("ERPxDocumento");
            });
        }
        private void ConfigureERPxDocumentoTipo(ModelBuilder pBuilder)
        {
            pBuilder.Entity<ERPxDocumentoTipo>(ett =>
            {
                ett.HasKey(e => e.ERPxDocumentoTipoID).HasName("PK_ERPxDocumentoTipo");

                ett.Property(d => d.Tipo).HasColumnType(GetDBType("String", 25));
                ett.Property(d => d.ERPxDocumentoTipoID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.Mascara).HasColumnType(GetDBType("String", 30)).IsRequired(false);
                ett.Property(d => d.Filtro).HasColumnType(GetDBType("Int32"));
                ett.ToTable("ERPxDocumentoTipo");
                ett.HasOne(d => d.ERPxDocumento)
                   .WithMany(p => p.ERPxDocumentoTipo)
                   .HasForeignKey(d => d.ERPxDocumentoTipoID)
                   .OnDelete(DeleteBehavior.Restrict);
            });
        }

            protected override void OnModelCreating(ModelBuilder pBuilder)
            {
                ConfigureERPxDocumento(pBuilder);
                ConfigureERPxDocumentoTipo(pBuilder);
                base.OnModelCreating(pBuilder);
            }

            protected override string GetConnectionString()
            {
                if (ConnectionString != null)
                    return ConnectionString;
                return XEnvironment.Read("SQL_SERVER_TFX", base.GetConnectionString());
            }
        }

        public abstract class BaseINFDocumentoServiceRule : XServiceINFRule<DocumentoService, DocumentoTuple>
        {
            public BaseINFDocumentoServiceRule(DocumentoService pService)
                : base(pService)
            {
            }
            protected DBContext Context
            {
                get;
                private set;
            }
            protected internal virtual T GetWhere<T>(T pQuery)
            {
                return pQuery;
            }
            internal void SetContext(DBContext pContext)
            {
                Context = pContext;
            }

        }

        public DocumentoService(ILogger<XService> pLogger, DBContext pContext)
               :base(pLogger)
        {
            Rule = new DocumentoRule(this);
            _INFRule = new INFDocumentoServiceRule(this);
            Context = pContext;
            _INFRule.SetContext(Context);
        }

        internal XIServiceRule<DocumentoTuple, DocumentoTuple> Rule;
        private INFDocumentoServiceRule _INFRule;

        public override Guid ID => new Guid("34ADCC85-4724-4E28-B0AC-CE711B98DC23");

        public DBContext Context
        {
            get;
        }

        public override void GracefullyClose()
        {
            Context.Commit();
        }
        public IQueryable<DocumentoTuple> ExecuteQuery(DocumentoFilter pFilter)
        {
            var ctx = Context;
            var query = from ERPxDocumento in ctx.ERPxDocumento
                        join ERPxDocumentoTipo in ctx.ERPxDocumentoTipo on ERPxDocumento.ERPxDocumentoTipoID equals ERPxDocumentoTipo.ERPxDocumentoTipoID
                        
                        select new {ERPxDocumento, ERPxDocumentoTipo};
            query = _INFRule.GetWhere(query);


            if (pFilter != null)
            {
                if (!pFilter.Numero.IsEmpty())
                    query = query.Where(q => EF.Functions.Like(q.ERPxDocumento.Numero, "%"+pFilter.Numero+"%"));
            }

            if (!LoadAll)
            {
                if (pFilter?.SkipRows > 0)
                    query = query.Skip(pFilter.SkipRows.Value);

                if (pFilter?.TakeRows > 0)
                    query = query.Take(pFilter.TakeRows.Value);
                else
                    query = query.Take(75);
            }

            var qry = query.Select(q => new DocumentoTuple(q.ERPxDocumento.ERPxDocumentoID,
                               q.ERPxDocumento.ERPxDocumentoTipoID,
                               q.ERPxDocumento.Numero,
                               q.ERPxDocumento.CORxStatusID,
                               q.ERPxDocumento.CORxPessoaID,
                               q.ERPxDocumentoTipo.Mascara,
                               q.ERPxDocumentoTipo.Tipo));
            return qry;
        }

        public DocumentoDataSet Execute(DocumentoFilter pFilter)
        {
            _INFRule.InternalBeforeExecute();
            var qry = ExecuteQuery(pFilter);
            var tuples = qry.ToList();
            tuples = Rule.InternalAfterSelect(tuples);
            _INFRule.InternalAfterExecute(tuples);
            var dataset = new DocumentoDataSet { Tuples = tuples };
            return dataset;
        }

        public object Flush(DocumentoDataSet pDataSet)
        {
            if (pDataSet?.Tuples.Count == 0)
                throw new XUnconformity("Não é permitido Flush sem Tuplas.");
            using (var scope = XEnvironment.Services.CreateScope())
            using (var ctx = scope.ServiceProvider.GetRequiredService<DBContext>())
            {
                Rule?.InternalBeforeFlush(pDataSet.Tuples);

                SetDocumentoValues(ctx, pDataSet);
                ctx.SaveChanges();

                Rule?.InternalAfterFlush(pDataSet.Tuples);

                return XEndPointMessage.Ok;
            }
        }

        private void SetDocumentoValues(DBContext ctx, DocumentoDataSet pDataSet)
        {
            if (pDataSet == null || pDataSet.Tuples == null)
                return;
            foreach (DocumentoTuple stpl in pDataSet.Tuples)
            {
                var sb = new StringBuilder();
                var ERPxDocumentotpl = new ERPxDocumento();
                if (stpl.ERPxDocumentoID.Value != null)
                    ERPxDocumentotpl.ERPxDocumentoID = stpl.ERPxDocumentoID.Value;
                ERPxDocumentotpl.ERPxDocumentoTipoID = stpl.ERPxDocumentoTipoID.Value;
                ERPxDocumentotpl.CORxPessoaID = stpl.CORxPessoaID.Value;
                ERPxDocumentotpl.Numero = stpl.Numero.Value;
                ERPxDocumentotpl.CORxStatusID = stpl.CORxStatusID.Value;
                ERPxDocumentotpl.Validate(sb);
                ctx.ERPxDocumento.Add(ERPxDocumentotpl);
                if (!ERPxDocumentotpl.IsPKEmpty)
                    ctx.Entry(ERPxDocumentotpl).State = EntityState.Modified;
                else
                    ctx.Entry(ERPxDocumentotpl).State = EntityState.Added;
                if (sb.Length > 0)
                    throw new Exception(sb.ToString());
            }
        }
    }
}