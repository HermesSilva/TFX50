//<auto-generated/>
using System;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Microsoft.AspNetCore.Mvc;
using TFX.Core.Reflections;
using TFX.Core.Model;
using TFX.Core.Interfaces;
using TFX.Core;
using TFX.Core.Services;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Http;
using TFX.Core.Lzma;
using TFX.Core.Model.FRM;
using TFX.Core.DB;
using TFX.Core.Model.Service;

namespace Projecao.Core.ERP.Pessoa
{
    public class EnderecoServiceModel : XServiceModel
    {
        public static Guid CID = new Guid("FDEB9A57-921E-49FF-8B81-2D917798CED9");
        public EnderecoServiceModel()
        {
            SearchPath = "Endereco/Search";
            DataView.Columns.Add(new XColumnModel() { Name = "Localidade", Title = "Nome da Localidade", Type = "String", Mask = "", 
                                                      Visible = true, IsFreeSearch = true, Operator = XOperator.EqualTo });
            DataView.Columns.Add(new XColumnModel() { Name = "CEPxLogradouroID", Title = "Logradouro", Type = "Int32", Mask = "", 
                                                      Visible = false });
            DataView.Columns.Add(new XColumnModel() { Name = "Complemento", Title = "Complemento", Type = "String", Mask = "", 
                                                      Visible = false });
            DataView.Columns.Add(new XColumnModel() { Name = "Logradouro", Title = "Logradouro", Type = "String", Mask = "", 
                                                      Visible = true, IsFreeSearch = true, Operator = XOperator.EqualTo });
            DataView.Columns.Add(new XColumnModel() { Name = "Tipo", Title = "Tipo", Type = "String", Mask = "", 
                                                      Visible = true, IsFreeSearch = true, Operator = XOperator.EqualTo });
            DataView.Columns.Add(new XColumnModel() { Name = "CEP", Title = "CEP", Type = "String", Mask = "00.000-000", 
                                                      Visible = false });
            DataView.Columns.Add(new XColumnModel() { Name = "Bairro", Title = "Bairro", Type = "String", Mask = "", 
                                                      Visible = false });
            DataView.Columns.Add(new XColumnModel() { Name = "Longitude", Title = "Longitude", Type = "Decimal", Mask = "", 
                                                      Visible = false });
            DataView.Columns.Add(new XColumnModel() { Name = "Latitude", Title = "Latitude", Type = "Decimal", Mask = "", 
                                                      Visible = false });
            DataView.Columns.Add(new XColumnModel() { Name = "Endereco", Title = "Endereço", Type = "String", Mask = "", 
                                                      Visible = false });
            DataView.Columns.Add(new XColumnModel() { Name = "Sigla", Title = "Sigla da UF", Type = "String", Mask = "", 
                                                      Visible = true, IsFreeSearch = true, Operator = XOperator.EqualTo });
            DataView.Columns.Add(new XColumnModel() { Name = "NomeUF", Title = "Nome da UF", Type = "String", Mask = "", 
                                                      Visible = false });
            DataView.Columns.Add(new XColumnModel() { Name = "CodigoIBGE", Title = "Código no IBGE", Type = "String", Mask = "0000000", 
                                                      Visible = false });
            DataView.Columns.Add(new XColumnModel() { Name = "ERPxEnderecoID", Title = "Endereço", Type = "Guid", Mask = "", 
                                                      Visible = false });
            DataView.Columns.Add(new XColumnModel() { Name = "ERPxFinalidadeID", Title = "Finalidade", Type = "Int16", Mask = "", 
                                                      Visible = false });
            DataView.Columns.Add(new XColumnModel() { Name = "Lote", Title = "Lote", Type = "String", Mask = "", 
                                                      Visible = false });
            DataView.Columns.Add(new XColumnModel() { Name = "Numero", Title = "Número", Type = "String", Mask = "", 
                                                      Visible = false });
            DataView.Columns.Add(new XColumnModel() { Name = "Observacao", Title = "Observação", Type = "String", Mask = "", 
                                                      Visible = false });
            DataView.Columns.Add(new XColumnModel() { Name = "Quadra", Title = "Quadra", Type = "String", Mask = "", 
                                                      Visible = false });
            DataView.Columns.Add(new XColumnModel() { Name = "CORxStatusID", Title = "Estado", Type = "Int16", Mask = "", 
                                                      Visible = true });
            DataView.Columns.Add(new XColumnModel() { Name = "CORxPessoaID", Title = "Pessoas", Type = "Guid", Mask = "", 
                                                      Visible = false });
            DataView.Columns.Add(new XColumnModel() { Name = "Finalidade", Title = "Finalidade", Type = "String", Mask = "", 
                                                      Visible = true });
            Forms.Add(new FRMEnderecoFilter());
        }
    }
    public class EnderecoTuple : XServiceDataTuple
    {
        public EnderecoTuple()
        {
            Initialize();
        }

        public EnderecoTuple(String pLocalidade, Int32 pCEPxLogradouroID, String pComplemento, String pLogradouro, String pTipo, String pCEP, String pBairro, Decimal pLongitude, Decimal pLatitude, String pEndereco, String pSigla, String pNomeUF, String pCodigoIBGE, Guid? pERPxEnderecoID, Int16 pERPxFinalidadeID, String pLote, String pNumero, String pObservacao, String pQuadra, Int16 pCORxStatusID, Guid pCORxPessoaID, String pFinalidade)
            : this()
        {
            Localidade.Value = pLocalidade;
            CEPxLogradouroID.Value = pCEPxLogradouroID;
            Complemento.Value = pComplemento;
            Logradouro.Value = pLogradouro;
            Tipo.Value = pTipo;
            CEP.Value = pCEP;
            Bairro.Value = pBairro;
            Longitude.Value = pLongitude;
            Latitude.Value = pLatitude;
            Endereco.Value = pEndereco;
            Sigla.Value = pSigla;
            NomeUF.Value = pNomeUF;
            CodigoIBGE.Value = pCodigoIBGE;
            ERPxEnderecoID.Value = pERPxEnderecoID;
            ERPxFinalidadeID.Value = pERPxFinalidadeID;
            Lote.Value = pLote;
            Numero.Value = pNumero;
            Observacao.Value = pObservacao;
            Quadra.Value = pQuadra;
            CORxStatusID.Value = pCORxStatusID;
            CORxPessoaID.Value = pCORxPessoaID;
            Finalidade.Value = pFinalidade;
        }

        public override void Initialize()
        {
            Localidade = new XStringDataField();
            CEPxLogradouroID = new XInt32DataField();
            Complemento = new XStringDataField();
            Logradouro = new XStringDataField();
            Tipo = new XStringDataField();
            CEP = new XStringDataField();
            Bairro = new XStringDataField();
            Longitude = new XDecimalDataField();
            Latitude = new XDecimalDataField();
            Endereco = new XStringDataField();
            Sigla = new XStringDataField();
            NomeUF = new XStringDataField();
            CodigoIBGE = new XStringDataField();
            ERPxEnderecoID = new XGuidNullableDataField();
            ERPxFinalidadeID = new XInt16DataField();
            Lote = new XStringDataField();
            Numero = new XStringDataField();
            Observacao = new XStringDataField();
            Quadra = new XStringDataField();
            CORxStatusID = new XInt16DataField();
            CORxPessoaID = new XGuidDataField();
            Finalidade = new XStringDataField();
        }

        [Display(Name = "Nome da Localidade")]
        public XStringDataField Localidade {get;set;}
        [Display(Name = "Logradouro")]
        public XInt32DataField CEPxLogradouroID {get;set;}
        public XStringDataField Complemento {get;set;}
        public XStringDataField Logradouro {get;set;}
        public XStringDataField Tipo {get;set;}
        [DisplayFormat(DataFormatString = "00.000-000")]
        public XStringDataField CEP {get;set;}
        public XStringDataField Bairro {get;set;}
        public XDecimalDataField Longitude {get;set;}
        public XDecimalDataField Latitude {get;set;}
        [Display(Name = "Endereço")]
        public XStringDataField Endereco {get;set;}
        [Display(Name = "Sigla da UF")]
        public XStringDataField Sigla {get;set;}
        [Display(Name = "Nome da UF")]
        public XStringDataField NomeUF {get;set;}
        [DisplayFormat(DataFormatString = "0000000")]
        [Display(Name = "Código no IBGE")]
        public XStringDataField CodigoIBGE {get;set;}
        [Display(Name = "Endereço")]
        public XGuidNullableDataField ERPxEnderecoID {get;set;}
        [Display(Name = "Finalidade")]
        public XInt16DataField ERPxFinalidadeID {get;set;}
        public XStringDataField Lote {get;set;}
        [Display(Name = "Número")]
        public XStringDataField Numero {get;set;}
        [Display(Name = "Observação")]
        public XStringDataField Observacao {get;set;}
        public XStringDataField Quadra {get;set;}
        [Display(Name = "Estado")]
        public XInt16DataField CORxStatusID {get;set;}
        [Display(Name = "Pessoas")]
        public XGuidDataField CORxPessoaID {get;set;}
        public XStringDataField Finalidade {get;set;}
    }

    public class EnderecoFilter : XFilter
    {

        public EnderecoFilter()
        {
        }
    }
    public class FRMEnderecoFilter : XFRMModel
    {
        public FRMEnderecoFilter()
        {
            ID = new Guid("33E0A3C3-C327-4B9B-9637-A4B4517BB555");
            Name = "EnderecoFilter";
            Title = "";
            MinRows = 0;
            Style = XFRMStyle.Normal;
            Type = XFRMType.SVCFilter;
            XFRMField fld;
        }
    }


    public class EnderecoRequest : XRequest
    {
        public Guid ERPxEnderecoID {get;set;}
    }

    public interface IEnderecoService : XIService
    {
        object Flush(EnderecoDataSet pDataSet);

        EnderecoDataSet Execute(EnderecoFilter pFilter);
        IQueryable<EnderecoTuple> ExecuteQuery(EnderecoFilter pFilter);
    }

    public abstract class BaseEnderecoRule : XServiceRule<EnderecoTuple, EnderecoTuple>
    {
        public BaseEnderecoRule(XService pOwner)
            :base(pOwner)
        {
        }

        public virtual EnderecoFilter Execute(EnderecoFilter pFilter)
        {
            return pFilter;
        }
    }

    public class EnderecoDataSet : XDataSet<EnderecoTuple>
    {
        public override Guid ID => new Guid("FDEB9A57-921E-49FF-8B81-2D917798CED9");
    }
}