//<auto-generated/>
using System;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using TFX.Core;
using TFX.Core.Model;
using TFX.Core.Services;
using TFX.Core.Reflections;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.Extensions.DependencyInjection;
using TFX.Core.Exceptions;
using Microsoft.AspNetCore.Http;
using System.Data;
using TFX.Core.Lzma;
using TFX.Core.Identity;
using System.Text;
using Projecao.Core.ERP.GerenciaEmpresa.Rules;
using Projecao.Core.ERP.GerenciaEmpresa;

namespace Projecao.Core.ERP.GerenciaEmpresa
{
    [XGuid("E8C8F59A-C2AA-4FAC-B528-C7302E3C513A", typeof(IGerenciaEmpresaService))]
    public class GerenciaEmpresaService : XService, IGerenciaEmpresaService
    {
        public class ERPxDocumento : XEntity
        {
            [Display(Name = "Pessoas")]
            [Required()]
            public Guid CORxPessoaID {get; set;}

            [Display(Name = "Estado")]
            [Required()]
            public Int16 CORxStatusID {get; set;}

            public Boolean IsPKEmpty => !ERPxDocumentoID.HasValue;
            [Display(Name = "Documento")]
            [Required()]
            public Guid? ERPxDocumentoID {get; set;}

            [Display(Name = "Tipo de Documento")]
            [Required()]
            public Int16 ERPxDocumentoTipoID {get; set;}

            [Display(Name = "Número")]
            [MaxLength(25)]
            [Required()]
            public String Numero {get; set;}


            public CORxPessoa CORxPessoa {get; set;}
        }
        public class ERPxPessoaJuridica : XEntity
        {
            [Display(Name = "Estado")]
            [Required()]
            public Int16 CORxStatusID {get; set;}

            public Boolean IsPKEmpty => !ERPxPessoaJuridicaID.HasValue;
            [Display(Name = "Pessoa Jurídica")]
            [Required()]
            public Guid? ERPxPessoaJuridicaID {get; set;}

            [Display(Name = "Razão Social")]
            [MaxLength(160)]
            [Required()]
            public String RazaoSocial {get; set;}


            public CORxPessoa CORxPessoa {get; set;}
        }
        public class CORxPessoa : XEntity
        {
            [Display(Name = "Localidade")]
            [Required()]
            public Int32 CEPxLocalidadePrincipalID {get; set;}

            public Boolean IsPKEmpty => !CORxPessoaID.HasValue;
            [Display(Name = "Pessoa")]
            [Required()]
            public Guid? CORxPessoaID {get; set;}

            [MaxLength(180)]
            [Required()]
            public String Nome {get; set;}


            public List<ERPxPessoaJuridica> ERPxPessoaJuridica {get; set;} = new List<ERPxPessoaJuridica>();

            public List<ERPxDocumento> ERPxDocumento {get; set;} = new List<ERPxDocumento>();
        }
        public class DBContext : XDBContext
        {
            public DBContext(DbContextOptions<DBContext> pOptions, XITenantProvider pTenantProvider, XISharedTransaction pSharedTransaction)
                   : base(pOptions, pTenantProvider, pSharedTransaction)
            {
            }

            public DbSet<ERPxDocumento> ERPxDocumento{get; set;}
            public DbSet<ERPxPessoaJuridica> ERPxPessoaJuridica{get; set;}
            public DbSet<CORxPessoa> CORxPessoa{get; set;}

        private void ConfigureERPxDocumento(ModelBuilder pBuilder)
        {
            pBuilder.Entity<ERPxDocumento>(ett =>
            {
                ett.HasKey(e => e.ERPxDocumentoID).HasName("PK_ERPxDocumento");

                ett.Property(d => d.ERPxDocumentoID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.ERPxDocumentoTipoID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.CORxPessoaID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.Numero).HasColumnType(GetDBType("String", 25));
                ett.Property(d => d.CORxStatusID).HasColumnType(GetDBType("Int16"))
                    .HasDefaultValue(GetDBValue("Int16", (Int16)0));
                ett.ToTable("ERPxDocumento");
                ett.HasOne(d => d.CORxPessoa)
                   .WithMany(p => p.ERPxDocumento)
                   .HasForeignKey(d => d.CORxPessoaID)
                   .OnDelete(DeleteBehavior.Restrict);
            });
        }
        private void ConfigureERPxPessoaJuridica(ModelBuilder pBuilder)
        {
            pBuilder.Entity<ERPxPessoaJuridica>(ett =>
            {
                ett.HasKey(e => e.ERPxPessoaJuridicaID).HasName("PK_ERPxPessoaJuridica");

                ett.Property(d => d.ERPxPessoaJuridicaID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.CORxStatusID).HasColumnType(GetDBType("Int16"))
                    .HasDefaultValue(GetDBValue("Int16", (Int16)0));
                ett.Property(d => d.RazaoSocial).HasColumnType(GetDBType("String", 160))
                    .HasDefaultValue(GetDBValue("String", @"NI"));
                ett.ToTable("ERPxPessoaJuridica");
                ett.HasOne(d => d.CORxPessoa)
                   .WithMany(p => p.ERPxPessoaJuridica)
                   .HasForeignKey(d => d.ERPxPessoaJuridicaID)
                   .OnDelete(DeleteBehavior.Restrict);
            });
        }
        private void ConfigureCORxPessoa(ModelBuilder pBuilder)
        {
            pBuilder.Entity<CORxPessoa>(ett =>
            {
                ett.HasKey(e => e.CORxPessoaID).HasName("PK_CORxPessoa");

                ett.Property(d => d.CORxPessoaID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.Nome).HasColumnType(GetDBType("String", 180));
                ett.Property(d => d.CEPxLocalidadePrincipalID).HasColumnType(GetDBType("Int32"));
                ett.ToTable("CORxPessoa");
            });
        }

            protected override void OnModelCreating(ModelBuilder pBuilder)
            {
                ConfigureERPxDocumento(pBuilder);
                ConfigureERPxPessoaJuridica(pBuilder);
                ConfigureCORxPessoa(pBuilder);
                base.OnModelCreating(pBuilder);
            }

            protected override string GetConnectionString()
            {
                if (ConnectionString != null)
                    return ConnectionString;
                return XEnvironment.Read("SQL_SERVER_TFX", base.GetConnectionString());
            }
        }

        public abstract class BaseINFGerenciaEmpresaServiceRule : XServiceINFRule<GerenciaEmpresaService, GerenciaEmpresaTuple>
        {
            public BaseINFGerenciaEmpresaServiceRule(GerenciaEmpresaService pService)
                : base(pService)
            {
            }
            protected DBContext Context
            {
                get;
                private set;
            }
            protected internal virtual T GetWhere<T>(T pQuery)
            {
                return pQuery;
            }
            internal void SetContext(DBContext pContext)
            {
                Context = pContext;
            }

        }

        public GerenciaEmpresaService(ILogger<XService> pLogger, DBContext pContext)
               :base(pLogger)
        {
            Rule = new GerenciaEmpresaRule(this);
            _INFRule = new INFGerenciaEmpresaServiceRule(this);
            Context = pContext;
            _INFRule.SetContext(Context);
        }

        internal XIServiceRule<GerenciaEmpresaTuple, GerenciaEmpresaTuple> Rule;
        private INFGerenciaEmpresaServiceRule _INFRule;

        public override Guid ID => new Guid("E8C8F59A-C2AA-4FAC-B528-C7302E3C513A");

        public DBContext Context
        {
            get;
        }

        public override void GracefullyClose()
        {
            Context.Commit();
        }
        public IQueryable<GerenciaEmpresaTuple> ExecuteQuery(GerenciaEmpresaFilter pFilter)
        {
            var ctx = Context;
            var query = from CORxPessoa in ctx.CORxPessoa
                        join ERPxPessoaJuridica in ctx.ERPxPessoaJuridica on CORxPessoa.CORxPessoaID equals ERPxPessoaJuridica.ERPxPessoaJuridicaID
                        join ERPxDocumento in ctx.ERPxDocumento on CORxPessoa.CORxPessoaID equals ERPxDocumento.CORxPessoaID
                        where ERPxDocumento.ERPxDocumentoTipoID == Projecao.Core.ERP.DB.ERPxModel.ERPxDocumentoTipo.CNPJ
                        select new {ERPxDocumento, ERPxPessoaJuridica, CORxPessoa};
            query = _INFRule.GetWhere(query);


            if (!LoadAll)
            {
                if (pFilter?.SkipRows > 0)
                    query = query.Skip(pFilter.SkipRows.Value);

                if (pFilter?.TakeRows > 0)
                    query = query.Take(pFilter.TakeRows.Value);
                else
                    query = query.Take(75);
            }

            var qry = query.Select(q => new GerenciaEmpresaTuple(null,
                                     q.ERPxDocumento.Numero,
                                     new Guid("00000000-0000-0000-0000-000000000000"),
                                     q.ERPxPessoaJuridica.RazaoSocial,
                                     new DateTime(1, 1, 1),
                                     null,
                                     q.CORxPessoa.CORxPessoaID,
                                     q.CORxPessoa.Nome,
                                     q.CORxPessoa.CEPxLocalidadePrincipalID));
            return qry;
        }

        public GerenciaEmpresaDataSet Execute(GerenciaEmpresaFilter pFilter)
        {
            _INFRule.InternalBeforeExecute();
            var qry = ExecuteQuery(pFilter);
            var tuples = qry.ToList();
            tuples = Rule.InternalAfterSelect(tuples);
            _INFRule.InternalAfterExecute(tuples);
            var dataset = new GerenciaEmpresaDataSet { Tuples = tuples };
            return dataset;
        }
    }
}