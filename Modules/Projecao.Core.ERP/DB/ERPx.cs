//<auto-generated/>
using System;
using System.Linq;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore.Infrastructure;
using TFX.Core;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using TFX.Core.Lzma;

namespace Projecao.Core.ERP.DB
{
    public class ProjecaoCoreERPContext : XDBContext
    {
        #region _CEPxLogradouro

        public class _CEPxLogradouro
        {
            [MaxLength(8)]
            [DisplayFormat(DataFormatString = "00.000-000")]
            public String CEP {get; set;}
            [Display(Name = "Bairro")]
            [Required()]
            public Int32 CEPxBairroID {get; set;}
            [Display(Name = "Localidade")]
            [Required()]
            public Int32 CEPxLocalidadeID {get; set;}
            public Boolean IsPKEmpty => Object.Equals(CEPxLogradouroID, typeof(Int32).GetDefault());
            [Display(Name = "Logradouro")]
            [Required()]
            [DatabaseGenerated(DatabaseGeneratedOption.None)]
            public Int32 CEPxLogradouroID {get; set;}
            [MaxLength(128)]
            [Required()]
            public String Nome {get; set;}
            [Display(Name = "Número")]
            [Required()]
            public Int32 Numero {get; set;}
            [MaxLength(30)]
            [Required()]
            public String Tipo {get; set;}
            public List<_ERPxEndereco> ERPxEndereco {get; set;} = new List<_ERPxEndereco>();
        }

        #endregion _CEPxLogradouro

        #region _CORxPessoa

        public class _CORxPessoa
        {
            [Display(Name = "Localidade")]
            [Required()]
            public Int32 CEPxLocalidadePrincipalID {get; set;}
            public Boolean IsPKEmpty => !CORxPessoaID.HasValue;
            [Display(Name = "Pessoa")]
            [Required()]
            public Guid? CORxPessoaID {get; set;}
            [MaxLength(180)]
            [Required()]
            public String Nome {get; set;}
            public List<_ERPxContato> ERPxContato {get; set;} = new List<_ERPxContato>();
            public List<_ERPxEndereco> ERPxEndereco {get; set;} = new List<_ERPxEndereco>();
            public List<_ERPxDocumento> ERPxDocumento {get; set;} = new List<_ERPxDocumento>();
        }

        #endregion _CORxPessoa

        #region _CORxStatus

        public class _CORxStatus
        {
            public Boolean IsPKEmpty => Object.Equals(CORxStatusID, typeof(Int16).GetDefault());
            [Display(Name = "Status")]
            [Required()]
            [DatabaseGenerated(DatabaseGeneratedOption.None)]
            public Int16 CORxStatusID {get; set;}
            [MaxLength(20)]
            [Required()]
            public String Status {get; set;}
            public List<_ERPxPessoaFisica> ERPxPessoaFisica {get; set;} = new List<_ERPxPessoaFisica>();
            public List<_ERPxPessoaJuridica> ERPxPessoaJuridica {get; set;} = new List<_ERPxPessoaJuridica>();
            public List<_ERPxEndereco> ERPxEndereco {get; set;} = new List<_ERPxEndereco>();
            public List<_ERPxContato> ERPxContato {get; set;} = new List<_ERPxContato>();
            public List<_ERPxDocumento> ERPxDocumento {get; set;} = new List<_ERPxDocumento>();
            public List<_ERPxPessoaFisicaTipos> ERPxPessoaFisicaTipos {get; set;} = new List<_ERPxPessoaFisicaTipos>();
            public List<_ERPxProfissional> ERPxProfissional {get; set;} = new List<_ERPxProfissional>();
            public List<_ERPxProfissionalHorario> ERPxProfissionalHorario {get; set;} = new List<_ERPxProfissionalHorario>();
        }

        #endregion _CORxStatus

        #region _ERPxCategoria

        public class _ERPxCategoria
        {
            [MaxLength(35)]
            [Required()]
            public String Categoria {get; set;}
            public Boolean IsPKEmpty => Object.Equals(ERPxCategoriaID, typeof(Int16).GetDefault());
            [Display(Name = "Categoria de Profissional")]
            [Required()]
            [DatabaseGenerated(DatabaseGeneratedOption.None)]
            public Int16 ERPxCategoriaID {get; set;}
            public List<_ERPxProfissionalCategoria> ERPxProfissionalCategoria {get; set;} = new List<_ERPxProfissionalCategoria>();
        }

        #endregion _ERPxCategoria

        #region _ERPxContato

        public class _ERPxContato
        {
            [Display(Name = "E-Mail, Telefone e ETC.")]
            [MaxLength(50)]
            [Required()]
            public String Contato {get; set;}
            [Display(Name = "Pessoas")]
            [Required()]
            public Guid CORxPessoaID {get; set;}
            [Display(Name = "Estado")]
            [Required()]
            public Int16 CORxStatusID {get; set;}
            public Boolean IsPKEmpty => !ERPxContatoID.HasValue;
            [Display(Name = "Meios de Contato")]
            [Required()]
            public Guid? ERPxContatoID {get; set;}
            [Display(Name = "Tipo de Contato")]
            [Required()]
            public Int16 ERPxContatoTipoID {get; set;}
            [Display(Name = "Finalidade")]
            [Required()]
            public Int16 ERPxFinalidadeID {get; set;}
            [Display(Name = "Observação")]
            [MaxLength(30)]
            public String Observacao {get; set;}
            [Required()]
            public Boolean Validado {get; set;}
            public _ERPxFinalidade ERPxFinalidade {get; set;}
            public _ERPxContatoTipo ERPxContatoTipo {get; set;}
            public _CORxStatus CORxStatus {get; set;}
            public _CORxPessoa CORxPessoa {get; set;}
        }

        #endregion _ERPxContato

        #region _ERPxContatoTipo

        public class _ERPxContatoTipo
        {
            public class XDefault
            {
                private static Dictionary<Int16, _ERPxContatoTipo> _SeedData = new Dictionary<Int16, _ERPxContatoTipo>()
                {
                    [(Int16)2] = new _ERPxContatoTipo { Tipo = @"E-Mail", Mascara = null, ERPxContatoTipoID = (Int16)2 },
                    [(Int16)6] = new _ERPxContatoTipo { Tipo = @"Mensagem WhatsApp", Mascara = @"0000-0000|(00) 0000-0000|+00 (00) 0000-0000|00000-0000|(00) 00000-0000|+00 (00) 00000-0000", ERPxContatoTipoID = (Int16)6 },
                    [(Int16)1] = new _ERPxContatoTipo { Tipo = @"Telefone Celular", Mascara = @"0000-0000|(00) 0000-0000|+00 (00) 0000-0000|00000-0000|(00) 00000-0000|+00 (00) 00000-0000", ERPxContatoTipoID = (Int16)1 },
                    [(Int16)4] = new _ERPxContatoTipo { Tipo = @"Outros", Mascara = null, ERPxContatoTipoID = (Int16)4 },
                    [(Int16)5] = new _ERPxContatoTipo { Tipo = @"Chat ", Mascara = null, ERPxContatoTipoID = (Int16)5 },
                    [(Int16)3] = new _ERPxContatoTipo { Tipo = @"Telefone Fixo", Mascara = @"0000-0000|(00) 0000-0000|+00 (00) 0000-0000|00000-0000|(00) 00000-0000|+00 (00) 00000-0000", ERPxContatoTipoID = (Int16)3 }
                };
                public static _ERPxContatoTipo[] SeedData => _SeedData.Values.ToArray();
            }
            public Boolean IsPKEmpty => Object.Equals(ERPxContatoTipoID, typeof(Int16).GetDefault());
            [Display(Name = "Tipo de Contato")]
            [Required()]
            [DatabaseGenerated(DatabaseGeneratedOption.None)]
            public Int16 ERPxContatoTipoID {get; set;}
            [Display(Name = "Máscara")]
            [MaxLength(128)]
            public String Mascara {get; set;}
            [MaxLength(20)]
            [Required()]
            public String Tipo {get; set;}
            public List<_ERPxContato> ERPxContato {get; set;} = new List<_ERPxContato>();
        }

        #endregion _ERPxContatoTipo

        #region _ERPxDocumento

        public class _ERPxDocumento
        {
            public class XDefault
            {
                private static Dictionary<Guid, _ERPxDocumento> _SeedData = new Dictionary<Guid, _ERPxDocumento>()
                {
                    [new Guid("00000000-0000-0000-0000-000000000000")] = new _ERPxDocumento { ERPxDocumentoTipoID = (Int16)2, Numero = @"NI", CORxPessoaID = new Guid("00000000-0000-0000-0000-000000000000"), CORxStatusID = (Int16)0, ERPxDocumentoID = new Guid("00000000-0000-0000-0000-000000000000") }
                };
                public static _ERPxDocumento[] SeedData => _SeedData.Values.ToArray();
            }
            [Display(Name = "Pessoas")]
            [Required()]
            public Guid CORxPessoaID {get; set;}
            [Display(Name = "Estado")]
            [Required()]
            public Int16 CORxStatusID {get; set;}
            public Boolean IsPKEmpty => !ERPxDocumentoID.HasValue;
            [Display(Name = "Documento")]
            [Required()]
            public Guid? ERPxDocumentoID {get; set;}
            [Display(Name = "Tipo de Documento")]
            [Required()]
            public Int16 ERPxDocumentoTipoID {get; set;}
            [Display(Name = "Número")]
            [MaxLength(25)]
            [Required()]
            public String Numero {get; set;}
            public _ERPxDocumentoTipo ERPxDocumentoTipo {get; set;}
            public _CORxStatus CORxStatus {get; set;}
            public _CORxPessoa CORxPessoa {get; set;}
        }

        #endregion _ERPxDocumento

        #region _ERPxDocumentoTipo

        public class _ERPxDocumentoTipo
        {
            public class XDefault
            {
                private static Dictionary<Int16, _ERPxDocumentoTipo> _SeedData = new Dictionary<Int16, _ERPxDocumentoTipo>()
                {
                    [(Int16)6] = new _ERPxDocumentoTipo { Tipo = @"Passaporte", Mascara = null, ERPxDocumentoTipoID = (Int16)6, Filtro = -1 },
                    [(Int16)7] = new _ERPxDocumentoTipo { Tipo = @"Inscrição Municipal", Mascara = null, ERPxDocumentoTipoID = (Int16)7, Filtro = 2 },
                    [(Int16)5] = new _ERPxDocumentoTipo { Tipo = @"RG", Mascara = null, ERPxDocumentoTipoID = (Int16)5, Filtro = -1 },
                    [(Int16)9] = new _ERPxDocumentoTipo { Tipo = @"Alvará Municipal", Mascara = null, ERPxDocumentoTipoID = (Int16)9, Filtro = 2 },
                    [(Int16)1] = new _ERPxDocumentoTipo { Tipo = @"CPF", Mascara = @"000.000.000-00", ERPxDocumentoTipoID = (Int16)1, Filtro = -1 },
                    [(Int16)2] = new _ERPxDocumentoTipo { Tipo = @"CNPJ", Mascara = @"00.000.000/0000-00", ERPxDocumentoTipoID = (Int16)2, Filtro = 2 },
                    [(Int16)4] = new _ERPxDocumentoTipo { Tipo = @"IE", Mascara = null, ERPxDocumentoTipoID = (Int16)4, Filtro = 0 },
                    [(Int16)3] = new _ERPxDocumentoTipo { Tipo = @"Outros", Mascara = null, ERPxDocumentoTipoID = (Int16)3, Filtro = 0 }
                };
                public static _ERPxDocumentoTipo[] SeedData => _SeedData.Values.ToArray();
            }
            public Boolean IsPKEmpty => Object.Equals(ERPxDocumentoTipoID, typeof(Int16).GetDefault());
            [Display(Name = "Tipo de Documento")]
            [Required()]
            [DatabaseGenerated(DatabaseGeneratedOption.None)]
            public Int16 ERPxDocumentoTipoID {get; set;}
            [Required()]
            public Int32 Filtro {get; set;}
            [Display(Name = "Máscara")]
            [MaxLength(30)]
            public String Mascara {get; set;}
            [Display(Name = "Tipo de Documento")]
            [MaxLength(25)]
            [Required()]
            public String Tipo {get; set;}
            public List<_ERPxDocumento> ERPxDocumento {get; set;} = new List<_ERPxDocumento>();
        }

        #endregion _ERPxDocumentoTipo

        #region _ERPxEndereco

        public class _ERPxEndereco
        {
            public class XDefault
            {
                private static Dictionary<Guid, _ERPxEndereco> _SeedData = new Dictionary<Guid, _ERPxEndereco>()
                {
                    [new Guid("00000000-0000-0000-0000-000000000000")] = new _ERPxEndereco { CORxPessoaID = new Guid("00000000-0000-0000-0000-000000000000"), ERPxFinalidadeID = (Int16)1, CEPxLogradouroID = 0, Numero = @"NI", Quadra = @"NI", Lote = @"NI", CORxStatusID = (Int16)1, ERPxEnderecoID = new Guid("00000000-0000-0000-0000-000000000000"), Complemento = null, Observacao = null, Latitude = 0, Longitude = 0 }
                };
                public static _ERPxEndereco[] SeedData => _SeedData.Values.ToArray();
            }
            [Display(Name = "Logradouro")]
            [Required()]
            public Int32 CEPxLogradouroID {get; set;}
            [MaxLength(30)]
            public String Complemento {get; set;}
            [Display(Name = "Pessoas")]
            [Required()]
            public Guid CORxPessoaID {get; set;}
            [Display(Name = "Estado")]
            [Required()]
            public Int16 CORxStatusID {get; set;}
            public Boolean IsPKEmpty => !ERPxEnderecoID.HasValue;
            [Display(Name = "Endereço")]
            [Required()]
            public Guid? ERPxEnderecoID {get; set;}
            [Display(Name = "Finalidade")]
            [Required()]
            public Int16 ERPxFinalidadeID {get; set;}
            [Required()]
            public Decimal Latitude {get; set;}
            [Required()]
            public Decimal Longitude {get; set;}
            [MaxLength(4)]
            public String Lote {get; set;}
            [Display(Name = "Número")]
            [MaxLength(10)]
            public String Numero {get; set;}
            [Display(Name = "Observação")]
            [MaxLength(50)]
            public String Observacao {get; set;}
            [MaxLength(4)]
            public String Quadra {get; set;}
            public _ERPxFinalidade ERPxFinalidade {get; set;}
            public _CEPxLogradouro CEPxLogradouro {get; set;}
            public _CORxStatus CORxStatus {get; set;}
            public _CORxPessoa CORxPessoa {get; set;}
        }

        #endregion _ERPxEndereco

        #region _ERPxFinalidade

        public class _ERPxFinalidade
        {
            public class XDefault
            {
                private static Dictionary<Int16, _ERPxFinalidade> _SeedData = new Dictionary<Int16, _ERPxFinalidade>()
                {
                    [(Int16)4] = new _ERPxFinalidade { Finalidade = @"Envio de Mensagens", ERPxFinalidadeID = (Int16)4 },
                    [(Int16)3] = new _ERPxFinalidade { Finalidade = @"Documentos Fiscais", ERPxFinalidadeID = (Int16)3 },
                    [(Int16)2] = new _ERPxFinalidade { Finalidade = @"Cobrança", ERPxFinalidadeID = (Int16)2 },
                    [(Int16)1] = new _ERPxFinalidade { Finalidade = @"Outros", ERPxFinalidadeID = (Int16)1 }
                };
                public static _ERPxFinalidade[] SeedData => _SeedData.Values.ToArray();
            }
            public Boolean IsPKEmpty => Object.Equals(ERPxFinalidadeID, typeof(Int16).GetDefault());
            [Display(Name = "Finalidade")]
            [Required()]
            [DatabaseGenerated(DatabaseGeneratedOption.None)]
            public Int16 ERPxFinalidadeID {get; set;}
            [MaxLength(30)]
            [Required()]
            public String Finalidade {get; set;}
            public List<_ERPxEndereco> ERPxEndereco {get; set;} = new List<_ERPxEndereco>();
            public List<_ERPxContato> ERPxContato {get; set;} = new List<_ERPxContato>();
        }

        #endregion _ERPxFinalidade

        #region _ERPxFornecedor

        public class _ERPxFornecedor
        {
            public Boolean IsPKEmpty => !ERPxFornecedorID.HasValue;
            [Display(Name = "Fornecedores")]
            [Required()]
            public Guid? ERPxFornecedorID {get; set;}
            public _ERPxPessoaJuridica ERPxPessoaJuridica {get; set;}
        }

        #endregion _ERPxFornecedor

        #region _ERPxGenero

        public class _ERPxGenero
        {
            public class XDefault
            {
                private static Dictionary<Int16, _ERPxGenero> _SeedData = new Dictionary<Int16, _ERPxGenero>()
                {
                    [(Int16)2] = new _ERPxGenero { Genero = @"Feminino", ERPxGeneroID = (Int16)2, Invisivel = false, Designacao = @"Fêmea" },
                    [(Int16)0] = new _ERPxGenero { Genero = @"NI", ERPxGeneroID = (Int16)0, Invisivel = false, Designacao = @"NA" },
                    [(Int16)1] = new _ERPxGenero { Genero = @"Masculino", ERPxGeneroID = (Int16)1, Invisivel = false, Designacao = @"Macho" }
                };
                public static _ERPxGenero[] SeedData => _SeedData.Values.ToArray();
            }
            [Display(Name = "Designação")]
            [MaxLength(20)]
            [Required()]
            public String Designacao {get; set;}
            public Boolean IsPKEmpty => Object.Equals(ERPxGeneroID, typeof(Int16).GetDefault());
            [Display(Name = "Gênero")]
            [Required()]
            [DatabaseGenerated(DatabaseGeneratedOption.None)]
            public Int16 ERPxGeneroID {get; set;}
            [Display(Name = "Gênero")]
            [MaxLength(15)]
            [Required()]
            public String Genero {get; set;}
            [Display(Name = "Invisível")]
            [Required()]
            public Boolean Invisivel {get; set;}
            public List<_ERPxPessoaFisica> ERPxPessoaFisica {get; set;} = new List<_ERPxPessoaFisica>();
        }

        #endregion _ERPxGenero

        #region _ERPxPessoaFisica

        public class _ERPxPessoaFisica
        {
            public class XDefault
            {
                private static Dictionary<Guid, _ERPxPessoaFisica> _SeedData = new Dictionary<Guid, _ERPxPessoaFisica>()
                {
                    [new Guid("00000000-0000-0000-0000-000000000000")] = new _ERPxPessoaFisica { ERPxGeneroID = (Int16)0, Nascimento = new DateTime(1, 1, 1), ERPxPessoaFisicaID = new Guid("00000000-0000-0000-0000-000000000000"), CORxStatusID = (Int16)0 },
                    [new Guid("F4B32152-8189-4525-BCEE-A6A62A290B38")] = new _ERPxPessoaFisica { ERPxGeneroID = (Int16)0, Nascimento = new DateTime(1975, 1, 1), ERPxPessoaFisicaID = new Guid("F4B32152-8189-4525-BCEE-A6A62A290B38"), CORxStatusID = (Int16)1 }
                };
                public static _ERPxPessoaFisica[] SeedData => _SeedData.Values.ToArray();
            }
            [Display(Name = "Estado")]
            [Required()]
            public Int16 CORxStatusID {get; set;}
            [Display(Name = "Gênero")]
            [Required()]
            public Int16 ERPxGeneroID {get; set;}
            public Boolean IsPKEmpty => !ERPxPessoaFisicaID.HasValue;
            [Display(Name = "Pessoa Física")]
            [Required()]
            public Guid? ERPxPessoaFisicaID {get; set;}
            [Display(Name = "Data de Nascimento")]
            [Required()]
            public DateTime Nascimento {get; set;}
            public _ERPxGenero ERPxGenero {get; set;}
            public _CORxStatus CORxStatus {get; set;}
            public List<_ERPxPessoaFisicaTipos> ERPxPessoaFisicaTipos {get; set;} = new List<_ERPxPessoaFisicaTipos>();
            public List<_ERPxProfissional> ERPxProfissional {get; set;} = new List<_ERPxProfissional>();
        }

        #endregion _ERPxPessoaFisica

        #region _ERPxPessoaFisicaTipo

        public class _ERPxPessoaFisicaTipo
        {
            public class XDefault
            {
                private static Dictionary<Int16, _ERPxPessoaFisicaTipo> _SeedData = new Dictionary<Int16, _ERPxPessoaFisicaTipo>()
                {
                    [(Int16)1] = new _ERPxPessoaFisicaTipo { ERPxPessoaFisicaTipoID = (Int16)1, Tipo = @"Usuário do Sistema" }
                };
                public static _ERPxPessoaFisicaTipo[] SeedData => _SeedData.Values.ToArray();
            }
            public Boolean IsPKEmpty => Object.Equals(ERPxPessoaFisicaTipoID, typeof(Int16).GetDefault());
            [Display(Name = "Tipo de Pessoa Física")]
            [Required()]
            [DatabaseGenerated(DatabaseGeneratedOption.None)]
            public Int16 ERPxPessoaFisicaTipoID {get; set;}
            [Display(Name = "Tipo de Pessoa Física")]
            [MaxLength(35)]
            [Required()]
            public String Tipo {get; set;}
            public List<_ERPxPessoaFisicaTipos> ERPxPessoaFisicaTipos {get; set;} = new List<_ERPxPessoaFisicaTipos>();
        }

        #endregion _ERPxPessoaFisicaTipo

        #region _ERPxPessoaFisicaTipos

        public class _ERPxPessoaFisicaTipos
        {
            public class XDefault
            {
                private static Dictionary<Guid, _ERPxPessoaFisicaTipos> _SeedData = new Dictionary<Guid, _ERPxPessoaFisicaTipos>()
                {
                    [new Guid("00000000-0000-0000-0000-000000000000")] = new _ERPxPessoaFisicaTipos { ERPxPessoaFisicaTiposID = new Guid("00000000-0000-0000-0000-000000000000"), ERPxPessoaFisicaID = new Guid("F4B32152-8189-4525-BCEE-A6A62A290B38"), ERPxPessoaFisicaTipoID = (Int16)1, CORxStatusID = (Int16)1 }
                };
                public static _ERPxPessoaFisicaTipos[] SeedData => _SeedData.Values.ToArray();
            }
            [Display(Name = "Estado")]
            [Required()]
            public Int16 CORxStatusID {get; set;}
            [Display(Name = "Pessoa Física")]
            [Required()]
            public Guid ERPxPessoaFisicaID {get; set;}
            [Display(Name = "Tipo de Pessoa Física")]
            [Required()]
            public Int16 ERPxPessoaFisicaTipoID {get; set;}
            public Boolean IsPKEmpty => !ERPxPessoaFisicaTiposID.HasValue;
            [Display(Name = "Ligação de Pessoa Física à Tipo")]
            [Required()]
            public Guid? ERPxPessoaFisicaTiposID {get; set;}
            public _ERPxPessoaFisicaTipo ERPxPessoaFisicaTipo {get; set;}
            public _ERPxPessoaFisica ERPxPessoaFisica {get; set;}
            public _CORxStatus CORxStatus {get; set;}
        }

        #endregion _ERPxPessoaFisicaTipos

        #region _ERPxPessoaJuridica

        public class _ERPxPessoaJuridica
        {
            public class XDefault
            {
                private static Dictionary<Guid, _ERPxPessoaJuridica> _SeedData = new Dictionary<Guid, _ERPxPessoaJuridica>()
                {
                    [new Guid("00000000-0000-0000-0000-000000000000")] = new _ERPxPessoaJuridica { RazaoSocial = @"NA", ERPxPessoaJuridicaID = new Guid("00000000-0000-0000-0000-000000000000"), CORxStatusID = (Int16)1 }
                };
                public static _ERPxPessoaJuridica[] SeedData => _SeedData.Values.ToArray();
            }
            [Display(Name = "Estado")]
            [Required()]
            public Int16 CORxStatusID {get; set;}
            public Boolean IsPKEmpty => !ERPxPessoaJuridicaID.HasValue;
            [Display(Name = "Pessoa Jurídica")]
            [Required()]
            public Guid? ERPxPessoaJuridicaID {get; set;}
            [Display(Name = "Razão Social")]
            [MaxLength(160)]
            [Required()]
            public String RazaoSocial {get; set;}
            public _CORxStatus CORxStatus {get; set;}
            public List<_ERPxFornecedor> ERPxFornecedor {get; set;} = new List<_ERPxFornecedor>();
        }

        #endregion _ERPxPessoaJuridica

        #region _ERPxProfissional

        public class _ERPxProfissional
        {
            public class XDefault
            {
                private static Dictionary<Guid, _ERPxProfissional> _SeedData = new Dictionary<Guid, _ERPxProfissional>()
                {
                    [new Guid("00000000-0000-0000-0000-000000000000")] = new _ERPxProfissional { ERPxProfissionalID = new Guid("00000000-0000-0000-0000-000000000000"), CORxStatusID = (Int16)0 }
                };
                public static _ERPxProfissional[] SeedData => _SeedData.Values.ToArray();
            }
            [Display(Name = "Estado")]
            [Required()]
            public Int16 CORxStatusID {get; set;}
            public Boolean IsPKEmpty => !ERPxProfissionalID.HasValue;
            [Display(Name = "Profissionais")]
            [Required()]
            public Guid? ERPxProfissionalID {get; set;}
            public _ERPxPessoaFisica ERPxPessoaFisica {get; set;}
            public _CORxStatus CORxStatus {get; set;}
            public List<_ERPxProfissionalCategoria> ERPxProfissionalCategoria {get; set;} = new List<_ERPxProfissionalCategoria>();
            public List<_ERPxProfissionalHorario> ERPxProfissionalHorario {get; set;} = new List<_ERPxProfissionalHorario>();
        }

        #endregion _ERPxProfissional

        #region _ERPxProfissionalCategoria

        public class _ERPxProfissionalCategoria
        {
            [Display(Name = "Categoria de Profissional")]
            [Required()]
            public Int16 ERPxCategoriaID {get; set;}
            public Boolean IsPKEmpty => !ERPxProfissionalCategoriaID.HasValue;
            [Display(Name = "Categorias por Profissional")]
            [Required()]
            public Guid? ERPxProfissionalCategoriaID {get; set;}
            [Display(Name = "Profissionais")]
            [Required()]
            public Guid ERPxProfissionalID {get; set;}
            public _ERPxCategoria ERPxCategoria {get; set;}
            public _ERPxProfissional ERPxProfissional {get; set;}
        }

        #endregion _ERPxProfissionalCategoria

        #region _ERPxProfissionalHorario

        public class _ERPxProfissionalHorario
        {
            [Display(Name = "Estado")]
            [Required()]
            public Int16 CORxStatusID {get; set;}
            public Boolean IsPKEmpty => !ERPxProfissionalHorarioID.HasValue;
            [Display(Name = "Itens de Horário")]
            [Required()]
            public Guid? ERPxProfissionalHorarioID {get; set;}
            [Display(Name = "Tipos de Horários")]
            [Required()]
            public Int16 ERPxProfissionalHorarioTipoID {get; set;}
            [Display(Name = "Profissionais")]
            [Required()]
            public Guid ERPxProfissionalID {get; set;}
            [Required()]
            public DateTime Fim {get; set;}
            [Display(Name = "Início")]
            [Required()]
            public DateTime Inicio {get; set;}
            public _ERPxProfissional ERPxProfissional {get; set;}
            public _ERPxProfissionalHorarioTipo ERPxProfissionalHorarioTipo {get; set;}
            public _CORxStatus CORxStatus {get; set;}
        }

        #endregion _ERPxProfissionalHorario

        #region _ERPxProfissionalHorarioTipo

        public class _ERPxProfissionalHorarioTipo
        {
            public class XDefault
            {
                private static Dictionary<Int16, _ERPxProfissionalHorarioTipo> _SeedData = new Dictionary<Int16, _ERPxProfissionalHorarioTipo>()
                {
                    [(Int16)0] = new _ERPxProfissionalHorarioTipo { ERPxProfissionalHorarioTipoID = (Int16)0, Horario = @"Às Domingos" },
                    [(Int16)6] = new _ERPxProfissionalHorarioTipo { ERPxProfissionalHorarioTipoID = (Int16)6, Horario = @"Aos Sábados" },
                    [(Int16)1] = new _ERPxProfissionalHorarioTipo { ERPxProfissionalHorarioTipoID = (Int16)1, Horario = @"Às Segundas Feiras" },
                    [(Int16)2] = new _ERPxProfissionalHorarioTipo { ERPxProfissionalHorarioTipoID = (Int16)2, Horario = @"Às Terças Feiras" },
                    [(Int16)5] = new _ERPxProfissionalHorarioTipo { ERPxProfissionalHorarioTipoID = (Int16)5, Horario = @"Às Sextas Feiras" },
                    [(Int16)4] = new _ERPxProfissionalHorarioTipo { ERPxProfissionalHorarioTipoID = (Int16)4, Horario = @"Às Quintas Feiras" },
                    [(Int16)7] = new _ERPxProfissionalHorarioTipo { ERPxProfissionalHorarioTipoID = (Int16)7, Horario = @"De Segunda à Sexta" },
                    [(Int16)3] = new _ERPxProfissionalHorarioTipo { ERPxProfissionalHorarioTipoID = (Int16)3, Horario = @"Às Quartas Feiras" }
                };
                public static _ERPxProfissionalHorarioTipo[] SeedData => _SeedData.Values.ToArray();
            }
            public Boolean IsPKEmpty => Object.Equals(ERPxProfissionalHorarioTipoID, typeof(Int16).GetDefault());
            [Display(Name = "Tipos de Horários")]
            [Required()]
            [DatabaseGenerated(DatabaseGeneratedOption.None)]
            public Int16 ERPxProfissionalHorarioTipoID {get; set;}
            [Display(Name = "Tipo de Horário")]
            [MaxLength(35)]
            [Required()]
            public String Horario {get; set;}
            public List<_ERPxProfissionalHorario> ERPxProfissionalHorario {get; set;} = new List<_ERPxProfissionalHorario>();
        }

        #endregion _ERPxProfissionalHorarioTipo


        protected ProjecaoCoreERPContext(DbContextOptions pOptions)
          : base(pOptions)
        {
        
        }

        public ProjecaoCoreERPContext(DbContextOptions<ProjecaoCoreERPContext> pOptions)
          : base(pOptions)
        {
        
        }

        internal DbSet<_ERPxCategoria> ERPxCategoria{get; set;}
        internal DbSet<_ERPxContato> ERPxContato{get; set;}
        internal DbSet<_ERPxContatoTipo> ERPxContatoTipo{get; set;}
        internal DbSet<_ERPxDocumento> ERPxDocumento{get; set;}
        internal DbSet<_ERPxDocumentoTipo> ERPxDocumentoTipo{get; set;}
        internal DbSet<_ERPxEndereco> ERPxEndereco{get; set;}
        internal DbSet<_ERPxFinalidade> ERPxFinalidade{get; set;}
        internal DbSet<_ERPxFornecedor> ERPxFornecedor{get; set;}
        internal DbSet<_ERPxGenero> ERPxGenero{get; set;}
        internal DbSet<_ERPxPessoaFisica> ERPxPessoaFisica{get; set;}
        internal DbSet<_ERPxPessoaFisicaTipo> ERPxPessoaFisicaTipo{get; set;}
        internal DbSet<_ERPxPessoaFisicaTipos> ERPxPessoaFisicaTipos{get; set;}
        internal DbSet<_ERPxPessoaJuridica> ERPxPessoaJuridica{get; set;}
        internal DbSet<_ERPxProfissional> ERPxProfissional{get; set;}
        internal DbSet<_ERPxProfissionalCategoria> ERPxProfissionalCategoria{get; set;}
        internal DbSet<_ERPxProfissionalHorario> ERPxProfissionalHorario{get; set;}
        internal DbSet<_ERPxProfissionalHorarioTipo> ERPxProfissionalHorarioTipo{get; set;}
        protected override void OnModelCreating(ModelBuilder pBuilder)
        {
            ConfigureCEPxLogradouro(pBuilder);
            ConfigureCORxPessoa(pBuilder);
            ConfigureCORxStatus(pBuilder);
            ConfigureERPxCategoria(pBuilder);
            ConfigureERPxContato(pBuilder);
            ConfigureERPxContatoTipo(pBuilder);
            ConfigureERPxDocumento(pBuilder);
            ConfigureERPxDocumentoTipo(pBuilder);
            ConfigureERPxEndereco(pBuilder);
            ConfigureERPxFinalidade(pBuilder);
            ConfigureERPxFornecedor(pBuilder);
            ConfigureERPxGenero(pBuilder);
            ConfigureERPxPessoaFisica(pBuilder);
            ConfigureERPxPessoaFisicaTipo(pBuilder);
            ConfigureERPxPessoaFisicaTipos(pBuilder);
            ConfigureERPxPessoaJuridica(pBuilder);
            ConfigureERPxProfissional(pBuilder);
            ConfigureERPxProfissionalCategoria(pBuilder);
            ConfigureERPxProfissionalHorario(pBuilder);
            ConfigureERPxProfissionalHorarioTipo(pBuilder);
        }

        private void ConfigureCEPxLogradouro(ModelBuilder pBuilder)
        {
            pBuilder.Entity<_CEPxLogradouro>(ett =>
            {
                ett.HasKey(e => e.CEPxLogradouroID).HasName("PK_CEPxLogradouro");
                
                ett.Property(d => d.CEPxBairroID).HasColumnType(GetDBType("Int32"));
                ett.Property(d => d.CEPxLogradouroID).HasColumnType(GetDBType("Int32"));
                ett.Property(d => d.Nome).HasColumnType(GetDBType("String", 128));
                ett.Property(d => d.CEPxLocalidadeID).HasColumnType(GetDBType("Int32"));
                ett.Property(d => d.Tipo).HasColumnType(GetDBType("String", 30));
                ett.Property(d => d.Numero).HasColumnType(GetDBType("Int32"));
                ett.Property(d => d.CEP).HasColumnType(GetDBType("String", 8)).IsRequired(false);
                ett.ToTable("CEPxLogradouro", t => t.ExcludeFromMigrations());

                ett.HasIndex(e => new { e.CEPxBairroID, e.CEPxLocalidadeID, e.CEPxLogradouroID, e.Tipo, e.Nome, e.CEP })
                    .HasDatabaseName("IX_C83930E8_5C82_4ED4_AD4F_22B7A8392666");
            });
        }

        private void ConfigureCORxPessoa(ModelBuilder pBuilder)
        {
            pBuilder.Entity<_CORxPessoa>(ett =>
            {
                ett.HasKey(e => e.CORxPessoaID).HasName("PK_CORxPessoa");
                
                ett.Property(d => d.CORxPessoaID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.Nome).HasColumnType(GetDBType("String", 180));
                ett.Property(d => d.CEPxLocalidadePrincipalID).HasColumnType(GetDBType("Int32"));
                ett.ToTable("CORxPessoa", t => t.ExcludeFromMigrations());
            });
        }

        private void ConfigureCORxStatus(ModelBuilder pBuilder)
        {
            pBuilder.Entity<_CORxStatus>(ett =>
            {
                ett.HasKey(e => e.CORxStatusID).HasName("PK_CORxStatus");
                
                ett.Property(d => d.CORxStatusID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.Status).HasColumnType(GetDBType("String", 20));
                ett.ToTable("CORxStatus", t => t.ExcludeFromMigrations());
            });
        }

        private void ConfigureERPxCategoria(ModelBuilder pBuilder)
        {
            pBuilder.Entity<_ERPxCategoria>(ett =>
            {
                ett.HasKey(e => e.ERPxCategoriaID).HasName("PK_ERPxCategoria");
                
                ett.Property(d => d.ERPxCategoriaID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.Categoria).HasColumnType(GetDBType("String", 35));
                ett.ToTable("ERPxCategoria");
            });
        }

        private void ConfigureERPxContato(ModelBuilder pBuilder)
        {
            pBuilder.Entity<_ERPxContato>(ett =>
            {
                ett.HasKey(e => e.ERPxContatoID).HasName("PK_ERPxContato");
                
                ett.Property(d => d.Contato).HasColumnType(GetDBType("String", 50));
                ett.Property(d => d.CORxPessoaID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.ERPxContatoID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.ERPxContatoTipoID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.ERPxFinalidadeID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.CORxStatusID).HasColumnType(GetDBType("Int16"))
                    .HasDefaultValue(GetDBValue("Int16", (Int16)0));
                ett.Property(d => d.Validado).HasColumnType(GetDBType("Boolean"))
                    .HasDefaultValue(GetDBValue("Boolean", false));
                ett.Property(d => d.Observacao).HasColumnType(GetDBType("String", 30)).IsRequired(false);
                ett.ToTable("ERPxContato");

                ett.HasOne(d => d.CORxPessoa)
                   .WithMany(p => p.ERPxContato)
                   .HasForeignKey(d => d.CORxPessoaID)
                   .OnDelete(DeleteBehavior.Restrict)
                   .HasConstraintName("FK_0E654D4AED51402E9FF6E98504AEB5CA");

                ett.HasOne(d => d.ERPxContatoTipo)
                   .WithMany(p => p.ERPxContato)
                   .HasForeignKey(d => d.ERPxContatoTipoID)
                   .OnDelete(DeleteBehavior.Restrict)
                   .HasConstraintName("FK_529664");

                ett.HasOne(d => d.CORxStatus)
                   .WithMany(p => p.ERPxContato)
                   .HasForeignKey(d => d.CORxStatusID)
                   .OnDelete(DeleteBehavior.Restrict)
                   .HasConstraintName("FK_51C6F265549348069F2821C19BFCE13E");

                ett.HasOne(d => d.ERPxFinalidade)
                   .WithMany(p => p.ERPxContato)
                   .HasForeignKey(d => d.ERPxFinalidadeID)
                   .OnDelete(DeleteBehavior.Restrict)
                   .HasConstraintName("FK_529662");

                ett.HasIndex(d => d.ERPxFinalidadeID).HasDatabaseName("IX_497F7B77DB22487891CEF147BB460A8B");
                ett.HasIndex(d => d.ERPxContatoTipoID).HasDatabaseName("IX_95C55966E7914D66A601A3EBAA8AB674");
                ett.HasIndex(d => d.CORxStatusID).HasDatabaseName("IX_51C6F265549348069F2821C19BFCE13E");
                ett.HasIndex(d => d.CORxPessoaID).HasDatabaseName("IX_0E654D4AED51402E9FF6E98504AEB5CA");

                ett.HasIndex(e => new { e.CORxPessoaID, e.Contato })
                    .IsUnique()
                    .HasDatabaseName("IX_F37B5226_0067_4E6D_912E_7E42D3C4BADA");
            });
        }

        private void ConfigureERPxContatoTipo(ModelBuilder pBuilder)
        {
            pBuilder.Entity<_ERPxContatoTipo>(ett =>
            {
                ett.HasKey(e => e.ERPxContatoTipoID).HasName("PK_ERPxContatoTipo");
                
                ett.Property(d => d.Tipo).HasColumnType(GetDBType("String", 20));
                ett.Property(d => d.ERPxContatoTipoID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.Mascara).HasColumnType(GetDBType("String", 128)).IsRequired(false);
                ett.ToTable("ERPxContatoTipo");
                ett.HasData(_ERPxContatoTipo.XDefault.SeedData);
            });
        }

        private void ConfigureERPxDocumento(ModelBuilder pBuilder)
        {
            pBuilder.Entity<_ERPxDocumento>(ett =>
            {
                ett.HasKey(e => e.ERPxDocumentoID).HasName("PK_ERPxDocumento");
                
                ett.Property(d => d.ERPxDocumentoID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.ERPxDocumentoTipoID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.CORxPessoaID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.Numero).HasColumnType(GetDBType("String", 25));
                ett.Property(d => d.CORxStatusID).HasColumnType(GetDBType("Int16"))
                    .HasDefaultValue(GetDBValue("Int16", (Int16)0));
                ett.ToTable("ERPxDocumento");

                ett.HasOne(d => d.CORxPessoa)
                   .WithMany(p => p.ERPxDocumento)
                   .HasForeignKey(d => d.CORxPessoaID)
                   .OnDelete(DeleteBehavior.Restrict)
                   .HasConstraintName("FK_5F7E452D79C944328446AAD57587917C");

                ett.HasOne(d => d.CORxStatus)
                   .WithMany(p => p.ERPxDocumento)
                   .HasForeignKey(d => d.CORxStatusID)
                   .OnDelete(DeleteBehavior.Restrict)
                   .HasConstraintName("FK_7B2BB2D7B5DD4C2C9FBCFAFE802FB8B3");

                ett.HasOne(d => d.ERPxDocumentoTipo)
                   .WithMany(p => p.ERPxDocumento)
                   .HasForeignKey(d => d.ERPxDocumentoTipoID)
                   .OnDelete(DeleteBehavior.Restrict)
                   .HasConstraintName("FK_529872");

                ett.HasIndex(d => d.ERPxDocumentoTipoID).HasDatabaseName("IX_A31E2B713C84465F8D7C5CC4F735F8F7");
                ett.HasIndex(d => d.CORxStatusID).HasDatabaseName("IX_7B2BB2D7B5DD4C2C9FBCFAFE802FB8B3");
                ett.HasIndex(d => d.CORxPessoaID).HasDatabaseName("IX_5F7E452D79C944328446AAD57587917C");

                ett.HasIndex(e => new { e.ERPxDocumentoTipoID, e.CORxPessoaID })
                    .IsUnique()
                    .HasDatabaseName("IX_530206");
                ett.HasIndex(e => new { e.Numero, e.ERPxDocumentoTipoID, e.CORxStatusID })
                    .IsUnique()
                    .HasDatabaseName("IX_601892");
                ett.HasData(_ERPxDocumento.XDefault.SeedData);
            });
        }

        private void ConfigureERPxDocumentoTipo(ModelBuilder pBuilder)
        {
            pBuilder.Entity<_ERPxDocumentoTipo>(ett =>
            {
                ett.HasKey(e => e.ERPxDocumentoTipoID).HasName("PK_ERPxDocumentoTipo");
                
                ett.Property(d => d.Tipo).HasColumnType(GetDBType("String", 25));
                ett.Property(d => d.ERPxDocumentoTipoID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.Mascara).HasColumnType(GetDBType("String", 30)).IsRequired(false);
                ett.Property(d => d.Filtro).HasColumnType(GetDBType("Int32"));
                ett.ToTable("ERPxDocumentoTipo");
                ett.HasData(_ERPxDocumentoTipo.XDefault.SeedData);
            });
        }

        private void ConfigureERPxEndereco(ModelBuilder pBuilder)
        {
            pBuilder.Entity<_ERPxEndereco>(ett =>
            {
                ett.HasKey(e => e.ERPxEnderecoID).HasName("PK_ERPxEndereco");
                
                ett.Property(d => d.CORxPessoaID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.ERPxEnderecoID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.CORxStatusID).HasColumnType(GetDBType("Int16"))
                    .HasDefaultValue(GetDBValue("Int16", (Int16)0));
                ett.Property(d => d.Lote).HasColumnType(GetDBType("String", 4)).IsRequired(false)
                    .HasDefaultValue(GetDBValue("String", null));
                ett.Property(d => d.Quadra).HasColumnType(GetDBType("String", 4)).IsRequired(false)
                    .HasDefaultValue(GetDBValue("String", null));
                ett.Property(d => d.Numero).HasColumnType(GetDBType("String", 10)).IsRequired(false)
                    .HasDefaultValue(GetDBValue("String", null));
                ett.Property(d => d.ERPxFinalidadeID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.Observacao).HasColumnType(GetDBType("String", 50)).IsRequired(false);
                ett.Property(d => d.CEPxLogradouroID).HasColumnType(GetDBType("Int32"));
                ett.Property(d => d.Complemento).HasColumnType(GetDBType("String", 30)).IsRequired(false);
                ett.Property(d => d.Latitude).HasColumnType(GetDBType("Decimal", 20, 10));
                ett.Property(d => d.Longitude).HasColumnType(GetDBType("Decimal", 20, 10));
                ett.ToTable("ERPxEndereco");

                ett.HasOne(d => d.CORxPessoa)
                   .WithMany(p => p.ERPxEndereco)
                   .HasForeignKey(d => d.CORxPessoaID)
                   .OnDelete(DeleteBehavior.Restrict)
                   .HasConstraintName("FK_F92D21F245294E54AE7006F94BFE60C7");

                ett.HasOne(d => d.CORxStatus)
                   .WithMany(p => p.ERPxEndereco)
                   .HasForeignKey(d => d.CORxStatusID)
                   .OnDelete(DeleteBehavior.Restrict)
                   .HasConstraintName("FK_B9782A035C6C4ACC9AA722AB30D5DC89");

                ett.HasOne(d => d.CEPxLogradouro)
                   .WithMany(p => p.ERPxEndereco)
                   .HasForeignKey(d => d.CEPxLogradouroID)
                   .OnDelete(DeleteBehavior.Restrict)
                   .HasConstraintName("FK_24448961F77B4CAC9D842F76E306CF5B");

                ett.HasOne(d => d.ERPxFinalidade)
                   .WithMany(p => p.ERPxEndereco)
                   .HasForeignKey(d => d.ERPxFinalidadeID)
                   .OnDelete(DeleteBehavior.Restrict)
                   .HasConstraintName("FK_529658");

                ett.HasIndex(d => d.ERPxFinalidadeID).HasDatabaseName("IX_6E425692A0734A0785AF5E5650EAE7F8");
                ett.HasIndex(d => d.CEPxLogradouroID).HasDatabaseName("IX_24448961F77B4CAC9D842F76E306CF5B");
                ett.HasIndex(d => d.CORxStatusID).HasDatabaseName("IX_B9782A035C6C4ACC9AA722AB30D5DC89");
                ett.HasIndex(d => d.CORxPessoaID).HasDatabaseName("IX_F92D21F245294E54AE7006F94BFE60C7");

                ett.HasIndex(e => new { e.CORxPessoaID, e.CORxStatusID, e.ERPxEnderecoID, e.CEPxLogradouroID, e.ERPxFinalidadeID, e.Quadra, e.Lote, e.Latitude, e.Longitude, e.Complemento, e.Numero })
                    .HasDatabaseName("IX_12E333D9_332C_41E8_B1B4_8284251435D1");
                ett.HasData(_ERPxEndereco.XDefault.SeedData);
            });
        }

        private void ConfigureERPxFinalidade(ModelBuilder pBuilder)
        {
            pBuilder.Entity<_ERPxFinalidade>(ett =>
            {
                ett.HasKey(e => e.ERPxFinalidadeID).HasName("PK_ERPxFinalidade");
                
                ett.Property(d => d.Finalidade).HasColumnType(GetDBType("String", 30));
                ett.Property(d => d.ERPxFinalidadeID).HasColumnType(GetDBType("Int16"));
                ett.ToTable("ERPxFinalidade");
                ett.HasData(_ERPxFinalidade.XDefault.SeedData);
            });
        }

        private void ConfigureERPxFornecedor(ModelBuilder pBuilder)
        {
            pBuilder.Entity<_ERPxFornecedor>(ett =>
            {
                ett.HasKey(e => e.ERPxFornecedorID).HasName("PK_ERPxFornecedor");
                
                ett.Property(d => d.ERPxFornecedorID).HasColumnType(GetDBType("Guid"));
                ett.ToTable("ERPxFornecedor");

                ett.HasOne(d => d.ERPxPessoaJuridica)
                   .WithMany()
                   .HasForeignKey(d => d.ERPxFornecedorID)
                   .OnDelete(DeleteBehavior.Restrict)
                   .HasConstraintName("FK_A4E089E6F08C47DEA7A2093E7207245A");

                ett.HasIndex(d => d.ERPxFornecedorID).HasDatabaseName("IX_A4E089E6F08C47DEA7A2093E7207245A");
            });
        }

        private void ConfigureERPxGenero(ModelBuilder pBuilder)
        {
            pBuilder.Entity<_ERPxGenero>(ett =>
            {
                ett.HasKey(e => e.ERPxGeneroID).HasName("PK_ERPxGenero");
                
                ett.Property(d => d.Genero).HasColumnType(GetDBType("String", 15));
                ett.Property(d => d.ERPxGeneroID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.Invisivel).HasColumnType(GetDBType("Boolean"));
                ett.Property(d => d.Designacao).HasColumnType(GetDBType("String", 20));
                ett.ToTable("ERPxGenero");
                ett.HasData(_ERPxGenero.XDefault.SeedData);
            });
        }

        private void ConfigureERPxPessoaFisica(ModelBuilder pBuilder)
        {
            pBuilder.Entity<_ERPxPessoaFisica>(ett =>
            {
                ett.HasKey(e => e.ERPxPessoaFisicaID).HasName("PK_ERPxPessoaFisica");
                
                ett.Property(d => d.ERPxPessoaFisicaID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.CORxStatusID).HasColumnType(GetDBType("Int16"))
                    .HasDefaultValue(GetDBValue("Int16", (Int16)0));
                ett.Property(d => d.ERPxGeneroID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.Nascimento).HasColumnType(GetDBType("DateTime"));
                ett.ToTable("ERPxPessoaFisica");

                ett.HasOne(d => d.ERPxGenero)
                   .WithMany(p => p.ERPxPessoaFisica)
                   .HasForeignKey(d => d.ERPxGeneroID)
                   .OnDelete(DeleteBehavior.Restrict)
                   .HasConstraintName("FK_532463");

                ett.HasOne(d => d.CORxStatus)
                   .WithMany(p => p.ERPxPessoaFisica)
                   .HasForeignKey(d => d.CORxStatusID)
                   .OnDelete(DeleteBehavior.Restrict)
                   .HasConstraintName("FK_29E58B640111432D9BDB6C2801597F81");

                ett.HasIndex(d => d.ERPxGeneroID).HasDatabaseName("IX_E0DF81FD6086469CB2A8E8FB6B3021FA");
                ett.HasIndex(d => d.CORxStatusID).HasDatabaseName("IX_29E58B640111432D9BDB6C2801597F81");
                ett.HasData(_ERPxPessoaFisica.XDefault.SeedData);
            });
        }

        private void ConfigureERPxPessoaFisicaTipo(ModelBuilder pBuilder)
        {
            pBuilder.Entity<_ERPxPessoaFisicaTipo>(ett =>
            {
                ett.HasKey(e => e.ERPxPessoaFisicaTipoID).HasName("PK_ERPxPessoaFisicaTipo");
                
                ett.Property(d => d.ERPxPessoaFisicaTipoID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.Tipo).HasColumnType(GetDBType("String", 35));
                ett.ToTable("ERPxPessoaFisicaTipo");
                ett.HasData(_ERPxPessoaFisicaTipo.XDefault.SeedData);
            });
        }

        private void ConfigureERPxPessoaFisicaTipos(ModelBuilder pBuilder)
        {
            pBuilder.Entity<_ERPxPessoaFisicaTipos>(ett =>
            {
                ett.HasKey(e => e.ERPxPessoaFisicaTiposID).HasName("PK_ERPxPessoaFisicaTipos");
                
                ett.Property(d => d.ERPxPessoaFisicaTiposID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.ERPxPessoaFisicaTipoID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.ERPxPessoaFisicaID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.CORxStatusID).HasColumnType(GetDBType("Int16"));
                ett.ToTable("ERPxPessoaFisicaTipos");

                ett.HasOne(d => d.CORxStatus)
                   .WithMany(p => p.ERPxPessoaFisicaTipos)
                   .HasForeignKey(d => d.CORxStatusID)
                   .OnDelete(DeleteBehavior.Restrict)
                   .HasConstraintName("FK_D5C25A2F357B4DC58334CE40FF90A20B");

                ett.HasOne(d => d.ERPxPessoaFisica)
                   .WithMany(p => p.ERPxPessoaFisicaTipos)
                   .HasForeignKey(d => d.ERPxPessoaFisicaID)
                   .OnDelete(DeleteBehavior.Restrict)
                   .HasConstraintName("FK_C3C07B29B31C4BE1B90079B3256A0572");

                ett.HasOne(d => d.ERPxPessoaFisicaTipo)
                   .WithMany(p => p.ERPxPessoaFisicaTipos)
                   .HasForeignKey(d => d.ERPxPessoaFisicaTipoID)
                   .OnDelete(DeleteBehavior.Restrict)
                   .HasConstraintName("FK_D1BEE9AA310A476EAA08D7D9A46961A1");

                ett.HasIndex(d => d.ERPxPessoaFisicaTipoID).HasDatabaseName("IX_D1BEE9AA310A476EAA08D7D9A46961A1");
                ett.HasIndex(d => d.ERPxPessoaFisicaID).HasDatabaseName("IX_C3C07B29B31C4BE1B90079B3256A0572");
                ett.HasIndex(d => d.CORxStatusID).HasDatabaseName("IX_D5C25A2F357B4DC58334CE40FF90A20B");

                ett.HasIndex(e => new { e.ERPxPessoaFisicaID, e.ERPxPessoaFisicaTipoID })
                    .IsUnique()
                    .HasDatabaseName("IX_15335A7B_CC5F_4F8E_9FBA_7B47C7B9FFEA");
                ett.HasData(_ERPxPessoaFisicaTipos.XDefault.SeedData);
            });
        }

        private void ConfigureERPxPessoaJuridica(ModelBuilder pBuilder)
        {
            pBuilder.Entity<_ERPxPessoaJuridica>(ett =>
            {
                ett.HasKey(e => e.ERPxPessoaJuridicaID).HasName("PK_ERPxPessoaJuridica");
                
                ett.Property(d => d.ERPxPessoaJuridicaID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.CORxStatusID).HasColumnType(GetDBType("Int16"))
                    .HasDefaultValue(GetDBValue("Int16", (Int16)0));
                ett.Property(d => d.RazaoSocial).HasColumnType(GetDBType("String", 160))
                    .HasDefaultValue(GetDBValue("String", @"NI"));
                ett.ToTable("ERPxPessoaJuridica");

                ett.HasOne(d => d.CORxStatus)
                   .WithMany(p => p.ERPxPessoaJuridica)
                   .HasForeignKey(d => d.CORxStatusID)
                   .OnDelete(DeleteBehavior.Restrict)
                   .HasConstraintName("FK_1183A3DBAC464B44986F8D45935BB8E4");

                ett.HasIndex(d => d.CORxStatusID).HasDatabaseName("IX_1183A3DBAC464B44986F8D45935BB8E4");
                ett.HasData(_ERPxPessoaJuridica.XDefault.SeedData);
            });
        }

        private void ConfigureERPxProfissional(ModelBuilder pBuilder)
        {
            pBuilder.Entity<_ERPxProfissional>(ett =>
            {
                ett.HasKey(e => e.ERPxProfissionalID).HasName("PK_ERPxProfissional");
                
                ett.Property(d => d.ERPxProfissionalID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.CORxStatusID).HasColumnType(GetDBType("Int16"));
                ett.ToTable("ERPxProfissional");

                ett.HasOne(d => d.CORxStatus)
                   .WithMany(p => p.ERPxProfissional)
                   .HasForeignKey(d => d.CORxStatusID)
                   .OnDelete(DeleteBehavior.Restrict)
                   .HasConstraintName("FK_9B7B5569232745D4B3C4181A55269727");

                ett.HasOne(d => d.ERPxPessoaFisica)
                   .WithMany()
                   .HasForeignKey(d => d.ERPxProfissionalID)
                   .OnDelete(DeleteBehavior.Restrict)
                   .HasConstraintName("FK_596632");

                ett.HasIndex(d => d.ERPxProfissionalID).HasDatabaseName("IX_CCAFAC3553BA4F51A0F61624663A299D");
                ett.HasIndex(d => d.CORxStatusID).HasDatabaseName("IX_9B7B5569232745D4B3C4181A55269727");
                ett.HasData(_ERPxProfissional.XDefault.SeedData);
            });
        }

        private void ConfigureERPxProfissionalCategoria(ModelBuilder pBuilder)
        {
            pBuilder.Entity<_ERPxProfissionalCategoria>(ett =>
            {
                ett.HasKey(e => e.ERPxProfissionalCategoriaID).HasName("PK_ERPxProfissionalCategoria");
                
                ett.Property(d => d.ERPxCategoriaID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.ERPxProfissionalID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.ERPxProfissionalCategoriaID).HasColumnType(GetDBType("Guid"));
                ett.ToTable("ERPxProfissionalCategoria");

                ett.HasOne(d => d.ERPxCategoria)
                   .WithMany(p => p.ERPxProfissionalCategoria)
                   .HasForeignKey(d => d.ERPxCategoriaID)
                   .OnDelete(DeleteBehavior.Restrict)
                   .HasConstraintName("FK_596638");

                ett.HasOne(d => d.ERPxProfissional)
                   .WithMany(p => p.ERPxProfissionalCategoria)
                   .HasForeignKey(d => d.ERPxProfissionalID)
                   .OnDelete(DeleteBehavior.Restrict)
                   .HasConstraintName("FK_596636");

                ett.HasIndex(d => d.ERPxCategoriaID).HasDatabaseName("IX_C64D39DCDE244E23843A0B80799F2BE2");
                ett.HasIndex(d => d.ERPxProfissionalID).HasDatabaseName("IX_FA9890819D9B4F36B642E078DBA111C6");

                ett.HasIndex(e => new { e.ERPxProfissionalID, e.ERPxCategoriaID })
                    .IsUnique()
                    .HasDatabaseName("IX_597572");
            });
        }

        private void ConfigureERPxProfissionalHorario(ModelBuilder pBuilder)
        {
            pBuilder.Entity<_ERPxProfissionalHorario>(ett =>
            {
                ett.HasKey(e => e.ERPxProfissionalHorarioID).HasName("PK_ERPxProfissionalHorario");
                
                ett.Property(d => d.ERPxProfissionalHorarioTipoID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.ERPxProfissionalID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.ERPxProfissionalHorarioID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.Inicio).HasColumnType(GetDBType("DateTime"));
                ett.Property(d => d.Fim).HasColumnType(GetDBType("DateTime"));
                ett.Property(d => d.CORxStatusID).HasColumnType(GetDBType("Int16"));
                ett.ToTable("ERPxProfissionalHorario");

                ett.HasOne(d => d.ERPxProfissionalHorarioTipo)
                   .WithMany(p => p.ERPxProfissionalHorario)
                   .HasForeignKey(d => d.ERPxProfissionalHorarioTipoID)
                   .OnDelete(DeleteBehavior.Restrict)
                   .HasConstraintName("FK_599322");

                ett.HasOne(d => d.CORxStatus)
                   .WithMany(p => p.ERPxProfissionalHorario)
                   .HasForeignKey(d => d.CORxStatusID)
                   .OnDelete(DeleteBehavior.Restrict)
                   .HasConstraintName("FK_CDC71151B0274EDC84B4475F4717DAA6");

                ett.HasOne(d => d.ERPxProfissional)
                   .WithMany(p => p.ERPxProfissionalHorario)
                   .HasForeignKey(d => d.ERPxProfissionalID)
                   .OnDelete(DeleteBehavior.Restrict)
                   .HasConstraintName("FK_599320");

                ett.HasIndex(d => d.ERPxProfissionalID).HasDatabaseName("IX_AFEC2A2EE5804F908FD8FE09629C9A5F");
                ett.HasIndex(d => d.ERPxProfissionalHorarioTipoID).HasDatabaseName("IX_6789BA23775349D993D8B002E038C3B8");
                ett.HasIndex(d => d.CORxStatusID).HasDatabaseName("IX_CDC71151B0274EDC84B4475F4717DAA6");
            });
        }

        private void ConfigureERPxProfissionalHorarioTipo(ModelBuilder pBuilder)
        {
            pBuilder.Entity<_ERPxProfissionalHorarioTipo>(ett =>
            {
                ett.HasKey(e => e.ERPxProfissionalHorarioTipoID).HasName("PK_ERPxProfissionalHorarioTipo");
                
                ett.Property(d => d.ERPxProfissionalHorarioTipoID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.Horario).HasColumnType(GetDBType("String", 35));
                ett.ToTable("ERPxProfissionalHorarioTipo");
                ett.HasData(_ERPxProfissionalHorarioTipo.XDefault.SeedData);
            });
        }
    }
}