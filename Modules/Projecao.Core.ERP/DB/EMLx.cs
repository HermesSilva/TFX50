//<auto-generated/>
using System;
using System.Linq;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore.Infrastructure;
using TFX.Core;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using TFX.Core.Lzma;

namespace Projecao.Core.ERP.DB
{
    public class ProjecaoCoreERPContext : XDBContext
    {
        #region _CORxAgregado

        public class _CORxAgregado
        {
            public Boolean IsPKEmpty => !CORxAgregadoID.HasValue;
            [Display(Name = "Agregado")]
            [Required()]
            public Guid? CORxAgregadoID {get; set;}
            [Display(Name = "Estado")]
            [Required()]
            public Int16 CORxStatusID {get; set;}
            [Display(Name = "CPF ou CNPJ")]
            [MaxLength(14)]
            [DisplayFormat(DataFormatString = "###.###.###-##|##.###.###/####-##")]
            [Required()]
            public String CPFCNPJ {get; set;}
        }

        #endregion _CORxAgregado

        #region _CORxPessoa

        public class _CORxPessoa
        {
            [Display(Name = "Localidade")]
            [Required()]
            public Int32 CEPxLocalidadePrincipalID {get; set;}
            public Boolean IsPKEmpty => !CORxPessoaID.HasValue;
            [Display(Name = "Pessoa")]
            [Required()]
            public Guid? CORxPessoaID {get; set;}
            [MaxLength(180)]
            [Required()]
            public String Nome {get; set;}
            public List<_EMLxEmpresaServidor> EMLxEmpresaServidor {get; set;} = new List<_EMLxEmpresaServidor>();
            public List<_EMLxCaixa> EMLxCaixa {get; set;} = new List<_EMLxCaixa>();
        }

        #endregion _CORxPessoa

        #region _EMLxAnexo

        public class _EMLxAnexo
        {
            [Required()]
            public Byte[] Dado {get; set;}
            [NotMapped]
            public Byte[] DadoArray
            {
                get
                {
                    return XLzma.Decode(Dado);
                }
                set
                {
                    Dado = XLzma.Encode(value);
                }
            }
            public Boolean IsPKEmpty => !EMLxAnexoID.HasValue;
            [Display(Name = "Anexo")]
            [Required()]
            public Guid? EMLxAnexoID {get; set;}
            [Display(Name = "Caixa de Correspondência")]
            [Required()]
            public Guid EMLxCaixaID {get; set;}
            [MaxLength(50)]
            [Required()]
            public String Nome {get; set;}
            public _EMLxCaixa EMLxCaixa {get; set;}
        }

        #endregion _EMLxAnexo

        #region _EMLxCaixa

        public class _EMLxCaixa
        {
            [Display(Name = "Assunto")]
            [MaxLength(50)]
            [Required()]
            public String Asunto {get; set;}
            [Display(Name = "Criação")]
            [Required()]
            public DateTime Criacao {get; set;}
            public Boolean IsPKEmpty => !EMLxCaixaID.HasValue;
            [Display(Name = "Caixa de Correspondência")]
            [Required()]
            public Guid? EMLxCaixaID {get; set;}
            [Display(Name = "Estado")]
            [Required()]
            public Int16 EMLxEstadoID {get; set;}
            [Display(Name = "Servidor")]
            [Required()]
            public Guid EMLxServidorID {get; set;}
            [Required()]
            public DateTime Envio {get; set;}
            [Required()]
            public String Mensagem {get; set;}
            [Display(Name = "Pessoas")]
            [Required()]
            public Guid SYSxEmitenteID {get; set;}
            public _EMLxEstado EMLxEstado {get; set;}
            public _EMLxServidor EMLxServidor {get; set;}
            public _CORxPessoa CORxPessoa {get; set;}
            public List<_EMLxLog> EMLxLog {get; set;} = new List<_EMLxLog>();
            public List<_EMLxAnexo> EMLxAnexo {get; set;} = new List<_EMLxAnexo>();
            public List<_EMLxDestinatario> EMLxDestinatario {get; set;} = new List<_EMLxDestinatario>();
        }

        #endregion _EMLxCaixa

        #region _EMLxDestinatario

        public class _EMLxDestinatario
        {
            [Display(Name = "Caixa de Correspondência")]
            [Required()]
            public Guid EMLxCaixaID {get; set;}
            public Boolean IsPKEmpty => !EMLxDestinatarioID.HasValue;
            [Display(Name = "Destinatários")]
            [Required()]
            public Guid? EMLxDestinatarioID {get; set;}
            [Display(Name = "Meios de Contato")]
            [Required()]
            public Guid ERPxContatoID {get; set;}
            public _ERPxContato ERPxContato {get; set;}
            public _EMLxCaixa EMLxCaixa {get; set;}
        }

        #endregion _EMLxDestinatario

        #region _EMLxEmpresaServidor

        public class _EMLxEmpresaServidor
        {
            [Display(Name = "Pessoas")]
            [Required()]
            public Guid CORxPessoaID {get; set;}
            public Boolean IsPKEmpty => !EMLxEmpresaServidorID.HasValue;
            [Display(Name = "Empresa por Servidor")]
            [Required()]
            public Guid? EMLxEmpresaServidorID {get; set;}
            [Display(Name = "Servidor")]
            [Required()]
            public Guid EMLxServidorID {get; set;}
            public _EMLxServidor EMLxServidor {get; set;}
            public _CORxPessoa CORxPessoa {get; set;}
        }

        #endregion _EMLxEmpresaServidor

        #region _EMLxEstado

        public class _EMLxEstado
        {
            public class XDefault
            {
                private static Dictionary<Int16, _EMLxEstado> _SeedData = new Dictionary<Int16, _EMLxEstado>()
                {
                    [(Int16)2] = new _EMLxEstado { Estado = @"Enviado", EMLxEstadoID = (Int16)2 },
                    [(Int16)3] = new _EMLxEstado { Estado = @"Com Erro", EMLxEstadoID = (Int16)3 },
                    [(Int16)1] = new _EMLxEstado { Estado = @"A Enviar", EMLxEstadoID = (Int16)1 }
                };
                public static _EMLxEstado[] SeedData => _SeedData.Values.ToArray();
            }
            public Boolean IsPKEmpty => Object.Equals(EMLxEstadoID, typeof(Int16).GetDefault());
            [Display(Name = "Estado")]
            [Required()]
            [DatabaseGenerated(DatabaseGeneratedOption.None)]
            public Int16 EMLxEstadoID {get; set;}
            [MaxLength(20)]
            [Required()]
            public String Estado {get; set;}
            public List<_EMLxCaixa> EMLxCaixa {get; set;} = new List<_EMLxCaixa>();
        }

        #endregion _EMLxEstado

        #region _EMLxLog

        public class _EMLxLog
        {
            [Required()]
            public DateTime Data {get; set;}
            [Display(Name = "Caixa de Correspondência")]
            [Required()]
            public Guid EMLxCaixaID {get; set;}
            public Boolean IsPKEmpty => !EMLxLogID.HasValue;
            [Display(Name = "Log de Envio")]
            [Required()]
            public Guid? EMLxLogID {get; set;}
            [MaxLength(150)]
            [Required()]
            public String Mensagem {get; set;}
            [Required()]
            public String Pilha {get; set;}
            public _EMLxCaixa EMLxCaixa {get; set;}
        }

        #endregion _EMLxLog

        #region _EMLxServidor

        public class _EMLxServidor
        {
            [Display(Name = "Finalidade do Servidor")]
            [Required()]
            public Int16 EMLxServidorFinalizadeID {get; set;}
            public Boolean IsPKEmpty => !EMLxServidorID.HasValue;
            [Display(Name = "Servidor")]
            [Required()]
            public Guid? EMLxServidorID {get; set;}
            [MaxLength(25)]
            [Required()]
            public String Nome {get; set;}
            [Required()]
            public Int32 Porta {get; set;}
            [MaxLength(256)]
            [Required()]
            public String Senha {get; set;}
            [Display(Name = "Servidor SMTP")]
            [MaxLength(60)]
            [Required()]
            public String SMTPServidor {get; set;}
            [Display(Name = "Usa SSL")]
            [Required()]
            public Boolean SSL {get; set;}
            [Display(Name = "Usuário")]
            [Required()]
            public String Usuario {get; set;}
            public _EMLxServidorFinalizade EMLxServidorFinalizade {get; set;}
            public List<_EMLxCaixa> EMLxCaixa {get; set;} = new List<_EMLxCaixa>();
            public List<_EMLxEmpresaServidor> EMLxEmpresaServidor {get; set;} = new List<_EMLxEmpresaServidor>();
        }

        #endregion _EMLxServidor

        #region _EMLxServidorFinalizade

        public class _EMLxServidorFinalizade
        {
            public class XDefault
            {
                private static Dictionary<Int16, _EMLxServidorFinalizade> _SeedData = new Dictionary<Int16, _EMLxServidorFinalizade>()
                {
                    [(Int16)1] = new _EMLxServidorFinalizade { Finalidade = @"Uso Geral", EMLxServidorFinalizadeID = (Int16)1 }
                };
                public static _EMLxServidorFinalizade[] SeedData => _SeedData.Values.ToArray();
            }
            public Boolean IsPKEmpty => Object.Equals(EMLxServidorFinalizadeID, typeof(Int16).GetDefault());
            [Display(Name = "Finalidade do Servidor")]
            [Required()]
            [DatabaseGenerated(DatabaseGeneratedOption.None)]
            public Int16 EMLxServidorFinalizadeID {get; set;}
            [MaxLength(25)]
            [Required()]
            public String Finalidade {get; set;}
            public List<_EMLxServidor> EMLxServidor {get; set;} = new List<_EMLxServidor>();
        }

        #endregion _EMLxServidorFinalizade

        #region _ERPxContato

        public class _ERPxContato
        {
            [Display(Name = "E-Mail, Telefone e ETC.")]
            [MaxLength(50)]
            [Required()]
            public String Contato {get; set;}
            [Display(Name = "Pessoas")]
            [Required()]
            public Guid CORxPessoaID {get; set;}
            [Display(Name = "Estado")]
            [Required()]
            public Int16 CORxStatusID {get; set;}
            [Display(Name = "Meios de Contato")]
            [Required()]
            public Guid? ERPxContatoID {get; set;}
            [Display(Name = "Tipo de Contato")]
            [Required()]
            public Int16 ERPxContatoTipoID {get; set;}
            [Display(Name = "Finalidade")]
            [Required()]
            public Int16 ERPxFinalidadeID {get; set;}
            [Display(Name = "Observação")]
            [MaxLength(30)]
            public String Observacao {get; set;}
            [Required()]
            public Boolean Validado {get; set;}
            public List<_EMLxDestinatario> EMLxDestinatario {get; set;} = new List<_EMLxDestinatario>();
        }

        #endregion _ERPxContato


        protected ProjecaoCoreERPContext(DbContextOptions pOptions)
          : base(pOptions)
        {
        
        }

        public ProjecaoCoreERPContext(DbContextOptions<ProjecaoCoreERPContext> pOptions)
          : base(pOptions)
        {
        
        }

        internal DbSet<_EMLxAnexo> EMLxAnexo{get; set;}
        internal DbSet<_EMLxCaixa> EMLxCaixa{get; set;}
        internal DbSet<_EMLxDestinatario> EMLxDestinatario{get; set;}
        internal DbSet<_EMLxEmpresaServidor> EMLxEmpresaServidor{get; set;}
        internal DbSet<_EMLxEstado> EMLxEstado{get; set;}
        internal DbSet<_EMLxLog> EMLxLog{get; set;}
        internal DbSet<_EMLxServidor> EMLxServidor{get; set;}
        internal DbSet<_EMLxServidorFinalizade> EMLxServidorFinalizade{get; set;}
        protected override void OnModelCreating(ModelBuilder pBuilder)
        {
            ConfigureCORxAgregado(pBuilder);
            ConfigureCORxPessoa(pBuilder);
            ConfigureEMLxAnexo(pBuilder);
            ConfigureEMLxCaixa(pBuilder);
            ConfigureEMLxDestinatario(pBuilder);
            ConfigureEMLxEmpresaServidor(pBuilder);
            ConfigureEMLxEstado(pBuilder);
            ConfigureEMLxLog(pBuilder);
            ConfigureEMLxServidor(pBuilder);
            ConfigureEMLxServidorFinalizade(pBuilder);
            ConfigureERPxContato(pBuilder);
        }

        private void ConfigureCORxAgregado(ModelBuilder pBuilder)
        {
            pBuilder.Entity<_CORxAgregado>(ett =>
            {
                ett.HasKey(e => e.CORxAgregadoID).HasName("PK_CORxAgregado");
                
                ett.Property(d => d.CORxAgregadoID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.CORxStatusID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.CPFCNPJ).HasColumnType(GetDBType("String", 14));
                ett.ToTable("CORxAgregado", t => t.ExcludeFromMigrations());
            });
        }

        private void ConfigureCORxPessoa(ModelBuilder pBuilder)
        {
            pBuilder.Entity<_CORxPessoa>(ett =>
            {
                ett.HasKey(e => e.CORxPessoaID).HasName("PK_CORxPessoa");
                
                ett.Property(d => d.CORxPessoaID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.Nome).HasColumnType(GetDBType("String", 180));
                ett.Property(d => d.CEPxLocalidadePrincipalID).HasColumnType(GetDBType("Int32"));
                ett.ToTable("CORxPessoa", t => t.ExcludeFromMigrations());
            });
        }

        private void ConfigureEMLxAnexo(ModelBuilder pBuilder)
        {
            pBuilder.Entity<_EMLxAnexo>(ett =>
            {
                ett.HasKey(e => e.EMLxAnexoID).HasName("PK_EMLxAnexo");
                
                ett.Property(d => d.Dado).HasColumnType(GetDBType("Byte[]"));
                ett.Property(d => d.EMLxCaixaID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.EMLxAnexoID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.Nome).HasColumnType(GetDBType("String", 50));
                ett.ToTable("EMLxAnexo");

                ett.HasOne(d => d.EMLxCaixa)
                   .WithMany(p => p.EMLxAnexo)
                   .HasForeignKey(d => d.EMLxCaixaID)
                   .OnDelete(DeleteBehavior.Restrict)
                   .HasConstraintName("FK_593111");

                ett.HasIndex(d => d.EMLxCaixaID).HasDatabaseName("IX_8DD4566AC9AB45DC8B0B2EB79544A8C7");
            });
        }

        private void ConfigureEMLxCaixa(ModelBuilder pBuilder)
        {
            pBuilder.Entity<_EMLxCaixa>(ett =>
            {
                ett.HasKey(e => e.EMLxCaixaID).HasName("PK_EMLxCaixa");
                
                ett.Property(d => d.EMLxEstadoID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.EMLxCaixaID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.Mensagem).HasColumnType(GetDBType("String"));
                ett.Property(d => d.Envio).HasColumnType(GetDBType("DateTime"));
                ett.Property(d => d.Criacao).HasColumnType(GetDBType("DateTime"));
                ett.Property(d => d.SYSxEmitenteID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.EMLxServidorID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.Asunto).HasColumnType(GetDBType("String", 50));
                ett.ToTable("EMLxCaixa");

                ett.HasOne(d => d.CORxPessoa)
                   .WithMany(p => p.EMLxCaixa)
                   .HasForeignKey(d => d.SYSxEmitenteID)
                   .OnDelete(DeleteBehavior.Restrict)
                   .HasConstraintName("FK_740A2C9FCA9E45B7A8474CF152CC7787");

                ett.HasOne(d => d.EMLxServidor)
                   .WithMany(p => p.EMLxCaixa)
                   .HasForeignKey(d => d.EMLxServidorID)
                   .OnDelete(DeleteBehavior.Restrict)
                   .HasConstraintName("FK_593162");

                ett.HasOne(d => d.EMLxEstado)
                   .WithMany(p => p.EMLxCaixa)
                   .HasForeignKey(d => d.EMLxEstadoID)
                   .OnDelete(DeleteBehavior.Restrict)
                   .HasConstraintName("FK_593073");

                ett.HasIndex(d => d.EMLxEstadoID).HasDatabaseName("IX_66241D59536E47B49E34165C7A8239F1");
                ett.HasIndex(d => d.EMLxServidorID).HasDatabaseName("IX_BF992DDE37E7499BA349BF3A1D51E7FC");
                ett.HasIndex(d => d.SYSxEmitenteID).HasDatabaseName("IX_740A2C9FCA9E45B7A8474CF152CC7787");
            });
        }

        private void ConfigureEMLxDestinatario(ModelBuilder pBuilder)
        {
            pBuilder.Entity<_EMLxDestinatario>(ett =>
            {
                ett.HasKey(e => e.EMLxDestinatarioID).HasName("PK_EMLxDestinatario");
                
                ett.Property(d => d.ERPxContatoID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.EMLxCaixaID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.EMLxDestinatarioID).HasColumnType(GetDBType("Guid"));
                ett.ToTable("EMLxDestinatario");

                ett.HasOne(d => d.ERPxContato)
                   .WithMany(p => p.EMLxDestinatario)
                   .HasForeignKey(d => d.ERPxContatoID)
                   .OnDelete(DeleteBehavior.Restrict)
                   .HasConstraintName("FK_593078");

                ett.HasOne(d => d.EMLxCaixa)
                   .WithMany(p => p.EMLxDestinatario)
                   .HasForeignKey(d => d.EMLxCaixaID)
                   .OnDelete(DeleteBehavior.Restrict)
                   .HasConstraintName("FK_593178");

                ett.HasIndex(d => d.ERPxContatoID).HasDatabaseName("IX_F0EFA1AC90904286A4F197BDD9B374DE");
                ett.HasIndex(d => d.EMLxCaixaID).HasDatabaseName("IX_6016D7428D524850B145B80FE6A42488");
            });
        }

        private void ConfigureEMLxEmpresaServidor(ModelBuilder pBuilder)
        {
            pBuilder.Entity<_EMLxEmpresaServidor>(ett =>
            {
                ett.HasKey(e => e.EMLxEmpresaServidorID).HasName("PK_EMLxEmpresaServidor");
                
                ett.Property(d => d.EMLxServidorID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.CORxPessoaID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.EMLxEmpresaServidorID).HasColumnType(GetDBType("Guid"));
                ett.ToTable("EMLxEmpresaServidor");

                ett.HasOne(d => d.CORxPessoa)
                   .WithMany(p => p.EMLxEmpresaServidor)
                   .HasForeignKey(d => d.CORxPessoaID)
                   .OnDelete(DeleteBehavior.Restrict)
                   .HasConstraintName("FK_1B5E64FF1C794BC4A7BB0A2180621E4D");

                ett.HasOne(d => d.EMLxServidor)
                   .WithMany(p => p.EMLxEmpresaServidor)
                   .HasForeignKey(d => d.EMLxServidorID)
                   .OnDelete(DeleteBehavior.Restrict)
                   .HasConstraintName("FK_593262");

                ett.HasIndex(d => d.EMLxServidorID).HasDatabaseName("IX_B7B582743EC343B69CEFAE26C3488E0F");
                ett.HasIndex(d => d.CORxPessoaID).HasDatabaseName("IX_1B5E64FF1C794BC4A7BB0A2180621E4D");
            });
        }

        private void ConfigureEMLxEstado(ModelBuilder pBuilder)
        {
            pBuilder.Entity<_EMLxEstado>(ett =>
            {
                ett.HasKey(e => e.EMLxEstadoID).HasName("PK_EMLxEstado");
                
                ett.Property(d => d.Estado).HasColumnType(GetDBType("String", 20));
                ett.Property(d => d.EMLxEstadoID).HasColumnType(GetDBType("Int16"));
                ett.ToTable("EMLxEstado");
                ett.HasData(_EMLxEstado.XDefault.SeedData);
            });
        }

        private void ConfigureEMLxLog(ModelBuilder pBuilder)
        {
            pBuilder.Entity<_EMLxLog>(ett =>
            {
                ett.HasKey(e => e.EMLxLogID).HasName("PK_EMLxLog");
                
                ett.Property(d => d.EMLxCaixaID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.EMLxLogID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.Pilha).HasColumnType(GetDBType("String"));
                ett.Property(d => d.Data).HasColumnType(GetDBType("DateTime"));
                ett.Property(d => d.Mensagem).HasColumnType(GetDBType("String", 150));
                ett.ToTable("EMLxLog");

                ett.HasOne(d => d.EMLxCaixa)
                   .WithMany(p => p.EMLxLog)
                   .HasForeignKey(d => d.EMLxCaixaID)
                   .OnDelete(DeleteBehavior.Restrict)
                   .HasConstraintName("FK_593093");

                ett.HasIndex(d => d.EMLxCaixaID).HasDatabaseName("IX_AF99BCD81EE54C5CAF4C709A847F830D");
            });
        }

        private void ConfigureEMLxServidor(ModelBuilder pBuilder)
        {
            pBuilder.Entity<_EMLxServidor>(ett =>
            {
                ett.HasKey(e => e.EMLxServidorID).HasName("PK_EMLxServidor");
                
                ett.Property(d => d.EMLxServidorID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.Nome).HasColumnType(GetDBType("String", 25));
                ett.Property(d => d.Senha).HasColumnType(GetDBType("String", 256));
                ett.Property(d => d.Usuario).HasColumnType(GetDBType("String"));
                ett.Property(d => d.Porta).HasColumnType(GetDBType("Int32"));
                ett.Property(d => d.SMTPServidor).HasColumnType(GetDBType("String", 60));
                ett.Property(d => d.SSL).HasColumnType(GetDBType("Boolean"));
                ett.Property(d => d.EMLxServidorFinalizadeID).HasColumnType(GetDBType("Int16"));
                ett.ToTable("EMLxServidor");

                ett.HasOne(d => d.EMLxServidorFinalizade)
                   .WithMany(p => p.EMLxServidor)
                   .HasForeignKey(d => d.EMLxServidorFinalizadeID)
                   .OnDelete(DeleteBehavior.Restrict)
                   .HasConstraintName("FK_593603");

                ett.HasIndex(d => d.EMLxServidorFinalizadeID).HasDatabaseName("IX_DC14ECA948514440A1C13AEBCE33BD32");
            });
        }

        private void ConfigureEMLxServidorFinalizade(ModelBuilder pBuilder)
        {
            pBuilder.Entity<_EMLxServidorFinalizade>(ett =>
            {
                ett.HasKey(e => e.EMLxServidorFinalizadeID).HasName("PK_EMLxServidorFinalizade");
                
                ett.Property(d => d.Finalidade).HasColumnType(GetDBType("String", 25));
                ett.Property(d => d.EMLxServidorFinalizadeID).HasColumnType(GetDBType("Int16"));
                ett.ToTable("EMLxServidorFinalizade");
                ett.HasData(_EMLxServidorFinalizade.XDefault.SeedData);
            });
        }

        private void ConfigureERPxContato(ModelBuilder pBuilder)
        {
            pBuilder.Entity<_ERPxContato>(ett =>
            {
                ett.HasKey(e => e.ERPxContatoID).HasName("PK_ERPxContato");
                
                ett.Property(d => d.Contato).HasColumnType(GetDBType("String", 50));
                ett.Property(d => d.CORxPessoaID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.ERPxContatoID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.ERPxContatoTipoID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.ERPxFinalidadeID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.CORxStatusID).HasColumnType(GetDBType("Int16"))
                    .HasDefaultValue(GetDBValue("Int16", (Int16)0));
                ett.Property(d => d.Validado).HasColumnType(GetDBType("Boolean"))
                    .HasDefaultValue(GetDBValue("Boolean", false));
                ett.Property(d => d.Observacao).HasColumnType(GetDBType("String", 30)).IsRequired(false);
                ett.ToTable("ERPxContato", t => t.ExcludeFromMigrations());
            });
        }
    }
}