//<auto-generated/>
using System;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using TFX.Core;
using TFX.Core.Model;
using TFX.Core.Services;
using TFX.Core.Reflections;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.Extensions.DependencyInjection;
using TFX.Core.Exceptions;
using Microsoft.AspNetCore.Http;
using System.Data;
using TFX.Core.Lzma;
using TFX.Core.Identity;
using System.Text;
using Projecao.Core.ERP.Profissional.Rules;
using Projecao.Core.ERP.Profissional;

namespace Projecao.Core.ERP.Profissional
{
    [XGuid("C491121C-26B3-400D-8A45-7593CC13AE7E", typeof(IHorariosService))]
    public class HorariosService : XService, IHorariosService
    {
        public class ERPxProfissionalHorario : XEntity
        {
            [Display(Name = "Estado")]
            [Required()]
            public Int16 CORxStatusID {get; set;}

            public Boolean IsPKEmpty => !ERPxProfissionalHorarioID.HasValue;
            [Display(Name = "Itens de Horário")]
            [Required()]
            public Guid? ERPxProfissionalHorarioID {get; set;}

            [Display(Name = "Tipos de Horários")]
            [Required()]
            public Int16 ERPxProfissionalHorarioTipoID {get; set;}

            [Display(Name = "Profissionais")]
            [Required()]
            public Guid ERPxProfissionalID {get; set;}

            [Required()]
            public DateTime Fim {get; set;}

            [Display(Name = "Início")]
            [Required()]
            public DateTime Inicio {get; set;}


            public List<ERPxProfissionalHorarioTipo> ERPxProfissionalHorarioTipo {get; set;} = new List<ERPxProfissionalHorarioTipo>();
        }
        public class ERPxProfissionalHorarioTipo : XEntity
        {
            public Boolean IsPKEmpty => Object.Equals(ERPxProfissionalHorarioTipoID, typeof(Int16).GetDefault());
            [Display(Name = "Tipos de Horários")]
            [Required()]
            [DatabaseGenerated(DatabaseGeneratedOption.None)]
            public Int16 ERPxProfissionalHorarioTipoID {get; set;}

            [Display(Name = "Tipo de Horário")]
            [MaxLength(35)]
            [Required()]
            public String Horario {get; set;}


            public ERPxProfissionalHorario ERPxProfissionalHorario {get; set;}
        }
        public class DBContext : XDBContext
        {
            public DBContext(DbContextOptions<DBContext> pOptions, XITenantProvider pTenantProvider, XISharedTransaction pSharedTransaction)
                   : base(pOptions, pTenantProvider, pSharedTransaction)
            {
            }

            public DbSet<ERPxProfissionalHorario> ERPxProfissionalHorario{get; set;}
            public DbSet<ERPxProfissionalHorarioTipo> ERPxProfissionalHorarioTipo{get; set;}

        private void ConfigureERPxProfissionalHorario(ModelBuilder pBuilder)
        {
            pBuilder.Entity<ERPxProfissionalHorario>(ett =>
            {
                ett.HasKey(e => e.ERPxProfissionalHorarioID).HasName("PK_ERPxProfissionalHorario");

                ett.Property(d => d.ERPxProfissionalHorarioTipoID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.ERPxProfissionalID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.ERPxProfissionalHorarioID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.Inicio).HasColumnType(GetDBType("DateTime"));
                ett.Property(d => d.Fim).HasColumnType(GetDBType("DateTime"));
                ett.Property(d => d.CORxStatusID).HasColumnType(GetDBType("Int16"));
                ett.ToTable("ERPxProfissionalHorario");
            });
        }
        private void ConfigureERPxProfissionalHorarioTipo(ModelBuilder pBuilder)
        {
            pBuilder.Entity<ERPxProfissionalHorarioTipo>(ett =>
            {
                ett.HasKey(e => e.ERPxProfissionalHorarioTipoID).HasName("PK_ERPxProfissionalHorarioTipo");

                ett.Property(d => d.ERPxProfissionalHorarioTipoID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.Horario).HasColumnType(GetDBType("String", 35));
                ett.ToTable("ERPxProfissionalHorarioTipo");
                ett.HasOne(d => d.ERPxProfissionalHorario)
                   .WithMany(p => p.ERPxProfissionalHorarioTipo)
                   .HasForeignKey(d => d.ERPxProfissionalHorarioTipoID)
                   .OnDelete(DeleteBehavior.Restrict);
            });
        }

            protected override void OnModelCreating(ModelBuilder pBuilder)
            {
                ConfigureERPxProfissionalHorario(pBuilder);
                ConfigureERPxProfissionalHorarioTipo(pBuilder);
                base.OnModelCreating(pBuilder);
            }

            protected override string GetConnectionString()
            {
                if (ConnectionString != null)
                    return ConnectionString;
                return XEnvironment.Read("SQL_SERVER_TFX", base.GetConnectionString());
            }
        }

        public abstract class BaseINFHorariosServiceRule : XServiceINFRule<HorariosService, HorariosTuple>
        {
            public BaseINFHorariosServiceRule(HorariosService pService)
                : base(pService)
            {
            }
            protected DBContext Context
            {
                get;
                private set;
            }
            protected internal virtual T GetWhere<T>(T pQuery)
            {
                return pQuery;
            }
            internal void SetContext(DBContext pContext)
            {
                Context = pContext;
            }

        }

        public HorariosService(ILogger<XService> pLogger, DBContext pContext)
               :base(pLogger)
        {
            Rule = new HorariosRule(this);
            _INFRule = new INFHorariosServiceRule(this);
            Context = pContext;
            _INFRule.SetContext(Context);
        }

        internal XIServiceRule<HorariosTuple, HorariosTuple> Rule;
        private INFHorariosServiceRule _INFRule;

        public override Guid ID => new Guid("C491121C-26B3-400D-8A45-7593CC13AE7E");

        public DBContext Context
        {
            get;
        }

        public override void GracefullyClose()
        {
            Context.Commit();
        }
        public IQueryable<HorariosTuple> ExecuteQuery(HorariosFilter pFilter)
        {
            var ctx = Context;
            var query = from ERPxProfissionalHorario in ctx.ERPxProfissionalHorario
                        join ERPxProfissionalHorarioTipo in ctx.ERPxProfissionalHorarioTipo on ERPxProfissionalHorario.ERPxProfissionalHorarioTipoID equals ERPxProfissionalHorarioTipo.ERPxProfissionalHorarioTipoID
                        
                        select new {ERPxProfissionalHorario, ERPxProfissionalHorarioTipo};
            query = _INFRule.GetWhere(query);


            if (!LoadAll)
            {
                if (pFilter?.SkipRows > 0)
                    query = query.Skip(pFilter.SkipRows.Value);

                if (pFilter?.TakeRows > 0)
                    query = query.Take(pFilter.TakeRows.Value);
                else
                    query = query.Take(75);
            }

            var qry = query.Select(q => new HorariosTuple(q.ERPxProfissionalHorario.Inicio,
                              q.ERPxProfissionalHorario.ERPxProfissionalID,
                              q.ERPxProfissionalHorarioTipo.Horario,
                              q.ERPxProfissionalHorario.ERPxProfissionalHorarioID,
                              q.ERPxProfissionalHorario.ERPxProfissionalHorarioTipoID,
                              q.ERPxProfissionalHorario.Fim));
            return qry;
        }

        public HorariosDataSet Execute(HorariosFilter pFilter)
        {
            _INFRule.InternalBeforeExecute();
            var qry = ExecuteQuery(pFilter);
            var tuples = qry.ToList();
            tuples = Rule.InternalAfterSelect(tuples);
            _INFRule.InternalAfterExecute(tuples);
            var dataset = new HorariosDataSet { Tuples = tuples };
            return dataset;
        }

        public object Flush(HorariosDataSet pDataSet)
        {
            if (pDataSet?.Tuples.Count == 0)
                throw new XUnconformity("Não é permitido Flush sem Tuplas.");
            using (var scope = XEnvironment.Services.CreateScope())
            using (var ctx = scope.ServiceProvider.GetRequiredService<DBContext>())
            {
                Rule?.InternalBeforeFlush(pDataSet.Tuples);

                SetHorariosValues(ctx, pDataSet);
                ctx.SaveChanges();

                Rule?.InternalAfterFlush(pDataSet.Tuples);

                return XEndPointMessage.Ok;
            }
        }

        private void SetHorariosValues(DBContext ctx, HorariosDataSet pDataSet)
        {
            if (pDataSet == null || pDataSet.Tuples == null)
                return;
            foreach (HorariosTuple stpl in pDataSet.Tuples)
            {
                var sb = new StringBuilder();
                var ERPxProfissionalHorariotpl = new ERPxProfissionalHorario();
                ERPxProfissionalHorariotpl.ERPxProfissionalHorarioTipoID = stpl.ERPxProfissionalHorarioTipoID.Value;
                ERPxProfissionalHorariotpl.ERPxProfissionalID = stpl.ERPxProfissionalID.Value;
                if (stpl.ERPxProfissionalHorarioID.Value != null)
                    ERPxProfissionalHorariotpl.ERPxProfissionalHorarioID = stpl.ERPxProfissionalHorarioID.Value;
                ERPxProfissionalHorariotpl.Inicio = stpl.Inicio.Value;
                ERPxProfissionalHorariotpl.Fim = stpl.Fim.Value;
                ERPxProfissionalHorariotpl.Validate(sb);
                ctx.ERPxProfissionalHorario.Add(ERPxProfissionalHorariotpl);
                if (!ERPxProfissionalHorariotpl.IsPKEmpty)
                    ctx.Entry(ERPxProfissionalHorariotpl).State = EntityState.Modified;
                else
                    ctx.Entry(ERPxProfissionalHorariotpl).State = EntityState.Added;
                if (sb.Length > 0)
                    throw new Exception(sb.ToString());
            }
        }
    }
}