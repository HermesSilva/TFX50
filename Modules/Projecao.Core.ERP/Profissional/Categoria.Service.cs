//<auto-generated/>
using System;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using TFX.Core;
using TFX.Core.Model;
using TFX.Core.Services;
using TFX.Core.Reflections;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.Extensions.DependencyInjection;
using TFX.Core.Exceptions;
using Microsoft.AspNetCore.Http;
using System.Data;
using TFX.Core.Lzma;
using TFX.Core.Identity;
using System.Text;
using Projecao.Core.ERP.Profissional.Rules;
using Projecao.Core.ERP.Profissional;

namespace Projecao.Core.ERP.Profissional
{
    [XGuid("59D73CAE-2254-4721-9DE0-97F54D83391E", typeof(ICategoriaService))]
    public class CategoriaService : XService, ICategoriaService
    {
        public class ERPxProfissionalCategoria : XEntity
        {
            [Display(Name = "Categoria de Profissional")]
            [Required()]
            public Int16 ERPxCategoriaID {get; set;}

            public Boolean IsPKEmpty => !ERPxProfissionalCategoriaID.HasValue;
            [Display(Name = "Categorias por Profissional")]
            [Required()]
            public Guid? ERPxProfissionalCategoriaID {get; set;}

            [Display(Name = "Profissionais")]
            [Required()]
            public Guid ERPxProfissionalID {get; set;}


            public List<ERPxCategoria> ERPxCategoria {get; set;} = new List<ERPxCategoria>();
        }
        public class ERPxCategoria : XEntity
        {
            [MaxLength(35)]
            [Required()]
            public String Categoria {get; set;}

            public Boolean IsPKEmpty => Object.Equals(ERPxCategoriaID, typeof(Int16).GetDefault());
            [Display(Name = "Categoria de Profissional")]
            [Required()]
            [DatabaseGenerated(DatabaseGeneratedOption.None)]
            public Int16 ERPxCategoriaID {get; set;}


            public ERPxProfissionalCategoria ERPxProfissionalCategoria {get; set;}
        }
        public class DBContext : XDBContext
        {
            public DBContext(DbContextOptions<DBContext> pOptions, XITenantProvider pTenantProvider, XISharedTransaction pSharedTransaction)
                   : base(pOptions, pTenantProvider, pSharedTransaction)
            {
            }

            public DbSet<ERPxProfissionalCategoria> ERPxProfissionalCategoria{get; set;}
            public DbSet<ERPxCategoria> ERPxCategoria{get; set;}

        private void ConfigureERPxProfissionalCategoria(ModelBuilder pBuilder)
        {
            pBuilder.Entity<ERPxProfissionalCategoria>(ett =>
            {
                ett.HasKey(e => e.ERPxProfissionalCategoriaID).HasName("PK_ERPxProfissionalCategoria");

                ett.Property(d => d.ERPxCategoriaID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.ERPxProfissionalID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.ERPxProfissionalCategoriaID).HasColumnType(GetDBType("Guid"));
                ett.ToTable("ERPxProfissionalCategoria");
            });
        }
        private void ConfigureERPxCategoria(ModelBuilder pBuilder)
        {
            pBuilder.Entity<ERPxCategoria>(ett =>
            {
                ett.HasKey(e => e.ERPxCategoriaID).HasName("PK_ERPxCategoria");

                ett.Property(d => d.ERPxCategoriaID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.Categoria).HasColumnType(GetDBType("String", 35));
                ett.ToTable("ERPxCategoria");
                ett.HasOne(d => d.ERPxProfissionalCategoria)
                   .WithMany(p => p.ERPxCategoria)
                   .HasForeignKey(d => d.ERPxCategoriaID)
                   .OnDelete(DeleteBehavior.Restrict);
            });
        }

            protected override void OnModelCreating(ModelBuilder pBuilder)
            {
                ConfigureERPxProfissionalCategoria(pBuilder);
                ConfigureERPxCategoria(pBuilder);
                base.OnModelCreating(pBuilder);
            }

            protected override string GetConnectionString()
            {
                if (ConnectionString != null)
                    return ConnectionString;
                return XEnvironment.Read("SQL_SERVER_TFX", base.GetConnectionString());
            }
        }

        public abstract class BaseINFCategoriaServiceRule : XServiceINFRule<CategoriaService, CategoriaTuple>
        {
            public BaseINFCategoriaServiceRule(CategoriaService pService)
                : base(pService)
            {
            }
            protected DBContext Context
            {
                get;
                private set;
            }
            protected internal virtual T GetWhere<T>(T pQuery)
            {
                return pQuery;
            }
            internal void SetContext(DBContext pContext)
            {
                Context = pContext;
            }

        }

        public CategoriaService(ILogger<XService> pLogger, DBContext pContext)
               :base(pLogger)
        {
            Rule = new CategoriaRule(this);
            _INFRule = new INFCategoriaServiceRule(this);
            Context = pContext;
            _INFRule.SetContext(Context);
        }

        internal XIServiceRule<CategoriaTuple, CategoriaTuple> Rule;
        private INFCategoriaServiceRule _INFRule;

        public override Guid ID => new Guid("59D73CAE-2254-4721-9DE0-97F54D83391E");

        public DBContext Context
        {
            get;
        }

        public override void GracefullyClose()
        {
            Context.Commit();
        }
        public IQueryable<CategoriaTuple> ExecuteQuery(CategoriaFilter pFilter)
        {
            var ctx = Context;
            var query = from ERPxProfissionalCategoria in ctx.ERPxProfissionalCategoria
                        join ERPxCategoria in ctx.ERPxCategoria on ERPxProfissionalCategoria.ERPxCategoriaID equals ERPxCategoria.ERPxCategoriaID
                        
                        select new {ERPxProfissionalCategoria, ERPxCategoria};
            query = _INFRule.GetWhere(query);


            if (!LoadAll)
            {
                if (pFilter?.SkipRows > 0)
                    query = query.Skip(pFilter.SkipRows.Value);

                if (pFilter?.TakeRows > 0)
                    query = query.Take(pFilter.TakeRows.Value);
                else
                    query = query.Take(75);
            }

            var qry = query.Select(q => new CategoriaTuple(q.ERPxProfissionalCategoria.ERPxCategoriaID,
                               q.ERPxCategoria.Categoria,
                               q.ERPxProfissionalCategoria.ERPxProfissionalCategoriaID,
                               q.ERPxProfissionalCategoria.ERPxProfissionalID));
            return qry;
        }

        public CategoriaDataSet Execute(CategoriaFilter pFilter)
        {
            _INFRule.InternalBeforeExecute();
            var qry = ExecuteQuery(pFilter);
            var tuples = qry.ToList();
            tuples = Rule.InternalAfterSelect(tuples);
            _INFRule.InternalAfterExecute(tuples);
            var dataset = new CategoriaDataSet { Tuples = tuples };
            return dataset;
        }

        public object Flush(CategoriaDataSet pDataSet)
        {
            if (pDataSet?.Tuples.Count == 0)
                throw new XUnconformity("Não é permitido Flush sem Tuplas.");
            using (var scope = XEnvironment.Services.CreateScope())
            using (var ctx = scope.ServiceProvider.GetRequiredService<DBContext>())
            {
                Rule?.InternalBeforeFlush(pDataSet.Tuples);

                SetCategoriaValues(ctx, pDataSet);
                ctx.SaveChanges();

                Rule?.InternalAfterFlush(pDataSet.Tuples);

                return XEndPointMessage.Ok;
            }
        }

        private void SetCategoriaValues(DBContext ctx, CategoriaDataSet pDataSet)
        {
            if (pDataSet == null || pDataSet.Tuples == null)
                return;
            foreach (CategoriaTuple stpl in pDataSet.Tuples)
            {
                var sb = new StringBuilder();
                var ERPxProfissionalCategoriatpl = new ERPxProfissionalCategoria();
                ERPxProfissionalCategoriatpl.ERPxCategoriaID = stpl.ERPxCategoriaID.Value;
                ERPxProfissionalCategoriatpl.ERPxProfissionalID = stpl.ERPxProfissionalID.Value;
                if (stpl.ERPxProfissionalCategoriaID.Value != null)
                    ERPxProfissionalCategoriatpl.ERPxProfissionalCategoriaID = stpl.ERPxProfissionalCategoriaID.Value;
                ERPxProfissionalCategoriatpl.Validate(sb);
                ctx.ERPxProfissionalCategoria.Add(ERPxProfissionalCategoriatpl);
                if (!ERPxProfissionalCategoriatpl.IsPKEmpty)
                    ctx.Entry(ERPxProfissionalCategoriatpl).State = EntityState.Modified;
                else
                    ctx.Entry(ERPxProfissionalCategoriatpl).State = EntityState.Added;
                if (sb.Length > 0)
                    throw new Exception(sb.ToString());
            }
        }
    }
}