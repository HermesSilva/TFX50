//<auto-generated/>
using System;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Microsoft.AspNetCore.Mvc;
using TFX.Core.Reflections;
using TFX.Core.Model;
using TFX.Core.Interfaces;
using TFX.Core;
using TFX.Core.Services;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Http;
using TFX.Core.Lzma;
using TFX.Core.Model.FRM;
using TFX.Core.DB;
using TFX.Core.Model.Service;

namespace Projecao.Core.ERP.Profissional
{
    public class ProfissionalServiceModel : XServiceModel
    {
        public static Guid CID = new Guid("1FE2AF42-35CF-4570-BB64-AA3B352EF067");
        public ProfissionalServiceModel()
        {
            SearchPath = "Profissional/Search";
            DataView.Columns.Add(new XColumnModel() { Name = "CPF", Title = "CPF", Type = "String", Mask = "000.000.000-00", 
                                                      Visible = false });
            DataView.Columns.Add(new XColumnModel() { Name = "Categoria", Title = "Categoria", Type = "String", Mask = "", 
                                                      Visible = true });
            DataView.Columns.Add(new XColumnModel() { Name = "CORxStatusID", Title = "Estado", Type = "Int16", Mask = "", 
                                                      Visible = true });
            DataView.Columns.Add(new XColumnModel() { Name = "CORxPessoaID", Title = "Pessoa", Type = "Guid", Mask = "", 
                                                      Visible = false });
            DataView.Columns.Add(new XColumnModel() { Name = "Nome", Title = "Nome", Type = "String", Mask = "", 
                                                      Visible = false });
            DataView.Columns.Add(new XColumnModel() { Name = "CEPxLocalidadePrincipalID", Title = "Localidade", Type = "Int32", Mask = "", 
                                                      Visible = false });
            DataView.Columns.Add(new XColumnModel() { Name = "ERPxGeneroID", Title = "Gênero", Type = "Int16", Mask = "", 
                                                      Visible = false });
            DataView.Columns.Add(new XColumnModel() { Name = "Nascimento", Title = "Data de Nascimento", Type = "DateTime", Mask = "", 
                                                      Visible = false });
            DataView.Columns.Add(new XColumnModel() { Name = "Genero", Title = "Gênero", Type = "String", Mask = "", 
                                                      Visible = true });
            Forms.Add(new FRMProfissionalFilter());
        }
    }
    public class CategoriaTuple : XServiceDataTuple
    {
        public CategoriaTuple()
        {
            Initialize();
        }

        public CategoriaTuple(Int16 pERPxCategoriaID, String pCategoria, Guid? pERPxProfissionalCategoriaID, Guid pERPxProfissionalID)
            : this()
        {
            ERPxCategoriaID.Value = pERPxCategoriaID;
            Categoria.Value = pCategoria;
            ERPxProfissionalCategoriaID.Value = pERPxProfissionalCategoriaID;
            ERPxProfissionalID.Value = pERPxProfissionalID;
        }

        public override void Initialize()
        {
            ERPxCategoriaID = new XInt16DataField();
            Categoria = new XStringDataField();
            ERPxProfissionalCategoriaID = new XGuidNullableDataField();
            ERPxProfissionalID = new XGuidDataField();
        }

        [Display(Name = "Categoria de Profissional")]
        public XInt16DataField ERPxCategoriaID {get;set;}
        public XStringDataField Categoria {get;set;}
        [Display(Name = "Categorias por Profissional")]
        public XGuidNullableDataField ERPxProfissionalCategoriaID {get;set;}
        [Display(Name = "Profissionais")]
        public XGuidDataField ERPxProfissionalID {get;set;}
    }
    public class ContatoTuple : XServiceDataTuple
    {
        public ContatoTuple()
        {
            Initialize();
        }

        public ContatoTuple(Boolean pValidar, String pContato, Guid? pERPxContatoID, Int16 pERPxContatoTipoID, Boolean pValidado, Int16 pERPxFinalidadeID, Int16 pCORxStatusID, Guid pCORxPessoaID, String pObservacao, String pMascara, String pTipo, String pFinalidade)
            : this()
        {
            Validar.Value = pValidar;
            Contato.Value = pContato;
            ERPxContatoID.Value = pERPxContatoID;
            ERPxContatoTipoID.Value = pERPxContatoTipoID;
            Validado.Value = pValidado;
            ERPxFinalidadeID.Value = pERPxFinalidadeID;
            CORxStatusID.Value = pCORxStatusID;
            CORxPessoaID.Value = pCORxPessoaID;
            Observacao.Value = pObservacao;
            Mascara.Value = pMascara;
            Tipo.Value = pTipo;
            Finalidade.Value = pFinalidade;
        }

        public override void Initialize()
        {
            Validar = new XBooleanDataField();
            Contato = new XStringDataField();
            ERPxContatoID = new XGuidNullableDataField();
            ERPxContatoTipoID = new XInt16DataField();
            Validado = new XBooleanDataField();
            ERPxFinalidadeID = new XInt16DataField();
            CORxStatusID = new XInt16DataField();
            CORxPessoaID = new XGuidDataField();
            Observacao = new XStringDataField();
            Mascara = new XStringDataField();
            Tipo = new XStringDataField();
            Finalidade = new XStringDataField();
        }

        public XBooleanDataField Validar {get;set;}
        [Display(Name = "E-Mail, Telefone e ETC.")]
        public XStringDataField Contato {get;set;}
        [Display(Name = "Meios de Contato")]
        public XGuidNullableDataField ERPxContatoID {get;set;}
        [Display(Name = "Tipo de Contato")]
        public XInt16DataField ERPxContatoTipoID {get;set;}
        public XBooleanDataField Validado {get;set;}
        [Display(Name = "Finalidade")]
        public XInt16DataField ERPxFinalidadeID {get;set;}
        [Display(Name = "Estado")]
        public XInt16DataField CORxStatusID {get;set;}
        [Display(Name = "Pessoas")]
        public XGuidDataField CORxPessoaID {get;set;}
        [Display(Name = "Observação")]
        public XStringDataField Observacao {get;set;}
        [Display(Name = "Máscara")]
        public XStringDataField Mascara {get;set;}
        public XStringDataField Tipo {get;set;}
        public XStringDataField Finalidade {get;set;}
    }
    public class DocumentoTuple : XServiceDataTuple
    {
        public DocumentoTuple()
        {
            Initialize();
        }

        public DocumentoTuple(Guid? pERPxDocumentoID, Int16 pERPxDocumentoTipoID, String pNumero, Int16 pCORxStatusID, Guid pCORxPessoaID, String pMascara, String pTipo)
            : this()
        {
            ERPxDocumentoID.Value = pERPxDocumentoID;
            ERPxDocumentoTipoID.Value = pERPxDocumentoTipoID;
            Numero.Value = pNumero;
            CORxStatusID.Value = pCORxStatusID;
            CORxPessoaID.Value = pCORxPessoaID;
            Mascara.Value = pMascara;
            Tipo.Value = pTipo;
        }

        public override void Initialize()
        {
            ERPxDocumentoID = new XGuidNullableDataField();
            ERPxDocumentoTipoID = new XInt16DataField();
            Numero = new XStringDataField();
            CORxStatusID = new XInt16DataField();
            CORxPessoaID = new XGuidDataField();
            Mascara = new XStringDataField();
            Tipo = new XStringDataField();
        }

        [Display(Name = "Documento")]
        public XGuidNullableDataField ERPxDocumentoID {get;set;}
        [Display(Name = "Tipo de Documento")]
        public XInt16DataField ERPxDocumentoTipoID {get;set;}
        [Display(Name = "Doc. Nº")]
        public XStringDataField Numero {get;set;}
        [Display(Name = "Estado")]
        public XInt16DataField CORxStatusID {get;set;}
        [Display(Name = "Pessoas")]
        public XGuidDataField CORxPessoaID {get;set;}
        [Display(Name = "Máscara")]
        public XStringDataField Mascara {get;set;}
        [Display(Name = "Tipo de Documento")]
        public XStringDataField Tipo {get;set;}
    }
    public class EnderecoTuple : XServiceDataTuple
    {
        public EnderecoTuple()
        {
            Initialize();
        }

        public EnderecoTuple(String pLocalidade, Int32 pCEPxLogradouroID, String pComplemento, String pLogradouro, String pTipo, String pCEP, String pBairro, Decimal pLongitude, Decimal pLatitude, String pEndereco, String pSigla, String pNomeUF, String pCodigoIBGE, Guid? pERPxEnderecoID, Int16 pERPxFinalidadeID, String pLote, String pNumero, String pObservacao, String pQuadra, Int16 pCORxStatusID, Guid pCORxPessoaID, String pFinalidade)
            : this()
        {
            Localidade.Value = pLocalidade;
            CEPxLogradouroID.Value = pCEPxLogradouroID;
            Complemento.Value = pComplemento;
            Logradouro.Value = pLogradouro;
            Tipo.Value = pTipo;
            CEP.Value = pCEP;
            Bairro.Value = pBairro;
            Longitude.Value = pLongitude;
            Latitude.Value = pLatitude;
            Endereco.Value = pEndereco;
            Sigla.Value = pSigla;
            NomeUF.Value = pNomeUF;
            CodigoIBGE.Value = pCodigoIBGE;
            ERPxEnderecoID.Value = pERPxEnderecoID;
            ERPxFinalidadeID.Value = pERPxFinalidadeID;
            Lote.Value = pLote;
            Numero.Value = pNumero;
            Observacao.Value = pObservacao;
            Quadra.Value = pQuadra;
            CORxStatusID.Value = pCORxStatusID;
            CORxPessoaID.Value = pCORxPessoaID;
            Finalidade.Value = pFinalidade;
        }

        public override void Initialize()
        {
            Localidade = new XStringDataField();
            CEPxLogradouroID = new XInt32DataField();
            Complemento = new XStringDataField();
            Logradouro = new XStringDataField();
            Tipo = new XStringDataField();
            CEP = new XStringDataField();
            Bairro = new XStringDataField();
            Longitude = new XDecimalDataField();
            Latitude = new XDecimalDataField();
            Endereco = new XStringDataField();
            Sigla = new XStringDataField();
            NomeUF = new XStringDataField();
            CodigoIBGE = new XStringDataField();
            ERPxEnderecoID = new XGuidNullableDataField();
            ERPxFinalidadeID = new XInt16DataField();
            Lote = new XStringDataField();
            Numero = new XStringDataField();
            Observacao = new XStringDataField();
            Quadra = new XStringDataField();
            CORxStatusID = new XInt16DataField();
            CORxPessoaID = new XGuidDataField();
            Finalidade = new XStringDataField();
        }

        [Display(Name = "Nome da Localidade")]
        public XStringDataField Localidade {get;set;}
        [Display(Name = "Logradouro")]
        public XInt32DataField CEPxLogradouroID {get;set;}
        public XStringDataField Complemento {get;set;}
        public XStringDataField Logradouro {get;set;}
        public XStringDataField Tipo {get;set;}
        [DisplayFormat(DataFormatString = "00.000-000")]
        public XStringDataField CEP {get;set;}
        public XStringDataField Bairro {get;set;}
        public XDecimalDataField Longitude {get;set;}
        public XDecimalDataField Latitude {get;set;}
        [Display(Name = "Endereço")]
        public XStringDataField Endereco {get;set;}
        [Display(Name = "Sigla da UF")]
        public XStringDataField Sigla {get;set;}
        [Display(Name = "Nome da UF")]
        public XStringDataField NomeUF {get;set;}
        [DisplayFormat(DataFormatString = "0000000")]
        [Display(Name = "Código no IBGE")]
        public XStringDataField CodigoIBGE {get;set;}
        [Display(Name = "Endereço")]
        public XGuidNullableDataField ERPxEnderecoID {get;set;}
        [Display(Name = "Finalidade")]
        public XInt16DataField ERPxFinalidadeID {get;set;}
        public XStringDataField Lote {get;set;}
        [Display(Name = "Número")]
        public XStringDataField Numero {get;set;}
        [Display(Name = "Observação")]
        public XStringDataField Observacao {get;set;}
        public XStringDataField Quadra {get;set;}
        [Display(Name = "Estado")]
        public XInt16DataField CORxStatusID {get;set;}
        [Display(Name = "Pessoas")]
        public XGuidDataField CORxPessoaID {get;set;}
        public XStringDataField Finalidade {get;set;}
    }
    public class HorariosTuple : XServiceDataTuple
    {
        public HorariosTuple()
        {
            Initialize();
        }

        public HorariosTuple(DateTime pInicio, Guid pERPxProfissionalID, String pHorario, Guid? pERPxProfissionalHorarioID, Int16 pERPxProfissionalHorarioTipoID, DateTime pFim)
            : this()
        {
            Inicio.Value = pInicio;
            ERPxProfissionalID.Value = pERPxProfissionalID;
            Horario.Value = pHorario;
            ERPxProfissionalHorarioID.Value = pERPxProfissionalHorarioID;
            ERPxProfissionalHorarioTipoID.Value = pERPxProfissionalHorarioTipoID;
            Fim.Value = pFim;
        }

        public override void Initialize()
        {
            Inicio = new XDateTimeDataField();
            ERPxProfissionalID = new XGuidDataField();
            Horario = new XStringDataField();
            ERPxProfissionalHorarioID = new XGuidNullableDataField();
            ERPxProfissionalHorarioTipoID = new XInt16DataField();
            Fim = new XDateTimeDataField();
        }

        [Display(Name = "Início")]
        public XDateTimeDataField Inicio {get;set;}
        [Display(Name = "Profissionais")]
        public XGuidDataField ERPxProfissionalID {get;set;}
        [Display(Name = "Tipo de Horário")]
        public XStringDataField Horario {get;set;}
        [Display(Name = "Itens de Horário")]
        public XGuidNullableDataField ERPxProfissionalHorarioID {get;set;}
        [Display(Name = "Tipos de Horários")]
        public XInt16DataField ERPxProfissionalHorarioTipoID {get;set;}
        public XDateTimeDataField Fim {get;set;}
    }
    public class ProfissionalTuple : XServiceDataTuple
    {
        public ProfissionalTuple()
        {
            Initialize();
        }

        public ProfissionalTuple(String pCPF, String pCategoria, Int16 pCORxStatusID, Guid? pCORxPessoaID, String pNome, Int32 pCEPxLocalidadePrincipalID, Int16 pERPxGeneroID, DateTime pNascimento, String pGenero, CategoriaTuple pCategoria, ContatoTuple pContato, DocumentoTuple pDocumento, EnderecoTuple pEndereco, HorariosTuple pHorarios)
            : this()
        {
            CPF.Value = pCPF;
            Categoria.Value = pCategoria;
            CORxStatusID.Value = pCORxStatusID;
            CORxPessoaID.Value = pCORxPessoaID;
            Nome.Value = pNome;
            CEPxLocalidadePrincipalID.Value = pCEPxLocalidadePrincipalID;
            ERPxGeneroID.Value = pERPxGeneroID;
            Nascimento.Value = pNascimento;
            Genero.Value = pGenero;
        }

        public override void Initialize()
        {
            CPF = new XStringDataField();
            Categoria = new XStringDataField();
            CORxStatusID = new XInt16DataField();
            CORxPessoaID = new XGuidNullableDataField();
            Nome = new XStringDataField();
            CEPxLocalidadePrincipalID = new XInt32DataField();
            ERPxGeneroID = new XInt16DataField();
            Nascimento = new XDateTimeDataField();
            Genero = new XStringDataField();
        }

        public XStringDataField CPF {get;set;}
        public XStringDataField Categoria {get;set;}
        [Display(Name = "Estado")]
        public XInt16DataField CORxStatusID {get;set;}
        [Display(Name = "Pessoa")]
        public XGuidNullableDataField CORxPessoaID {get;set;}
        public XStringDataField Nome {get;set;}
        [Display(Name = "Localidade")]
        public XInt32DataField CEPxLocalidadePrincipalID {get;set;}
        [Display(Name = "Gênero")]
        public XInt16DataField ERPxGeneroID {get;set;}
        [Display(Name = "Data de Nascimento")]
        public XDateTimeDataField Nascimento {get;set;}
        [Display(Name = "Gênero")]
        public XStringDataField Genero {get;set;}
        public CategoriaTuple[] Categoria {get;set;}
        public ContatoTuple[] Contato {get;set;}
        public DocumentoTuple[] Documento {get;set;}
        public EnderecoTuple[] Endereco {get;set;}
        public HorariosTuple[] Horarios {get;set;}
    }

    public class ProfissionalFilter : XFilter
    {

        public ProfissionalFilter()
        {
        }
    }
    public class FRMProfissionalFilter : XFRMModel
    {
        public FRMProfissionalFilter()
        {
            ID = new Guid("D0F4B99B-F4FD-4486-AFAD-40143C51361F");
            Name = "ProfissionalFilter";
            Title = "";
            MinRows = 0;
            Style = XFRMStyle.Normal;
            Type = XFRMType.SVCFilter;
            XFRMField fld;
        }
    }


    public class ProfissionalRequest : XRequest
    {
        public Guid CORxPessoaID {get;set;}
    }

    public interface IProfissionalService : XIService
    {
        object Flush(ProfissionalDataSet pDataSet);

        ProfissionalDataSet Execute(ProfissionalFilter pFilter, Boolean pFull);
        IQueryable<ProfissionalTuple> ExecuteQuery(ProfissionalFilter pFilter, Boolean pFull);
    }

    public abstract class BaseProfissionalRule : XServiceRule<ProfissionalTuple, ProfissionalTuple>
    {
        public BaseProfissionalRule(XService pOwner)
            :base(pOwner)
        {
        }

        public virtual ProfissionalFilter Execute(ProfissionalFilter pFilter)
        {
            return pFilter;
        }
    }

    public class ProfissionalDataSet : XDataSet<ProfissionalTuple>
    {
        public override Guid ID => new Guid("1FE2AF42-35CF-4570-BB64-AA3B352EF067");
    }
}