//<auto-generated/>
using System;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using TFX.Core;
using TFX.Core.Model;
using TFX.Core.Services;
using TFX.Core.Reflections;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.Extensions.DependencyInjection;
using TFX.Core.Exceptions;
using Microsoft.AspNetCore.Http;
using System.Data;
using TFX.Core.Lzma;
using TFX.Core.Identity;
using System.Text;
using Projecao.Core.ERP.Profissional.Rules;
using Projecao.Core.ERP.Profissional;

namespace Projecao.Core.ERP.Profissional
{
    [XGuid("1FE2AF42-35CF-4570-BB64-AA3B352EF067", typeof(IProfissionalService))]
    public class ProfissionalService : XService, IProfissionalService
    {
        public class ERPxPessoaFisica : XEntity
        {
            [Display(Name = "Estado")]
            [Required()]
            public Int16 CORxStatusID {get; set;}

            [Display(Name = "Gênero")]
            [Required()]
            public Int16 ERPxGeneroID {get; set;}

            public Boolean IsPKEmpty => !ERPxPessoaFisicaID.HasValue;
            [Display(Name = "Pessoa Física")]
            [Required()]
            public Guid? ERPxPessoaFisicaID {get; set;}

            [Display(Name = "Data de Nascimento")]
            [Required()]
            public DateTime Nascimento {get; set;}


            public List<ERPxGenero> ERPxGenero {get; set;} = new List<ERPxGenero>();

            public CORxPessoa CORxPessoa {get; set;}
        }
        public class ERPxProfissional : XEntity
        {
            [Display(Name = "Estado")]
            [Required()]
            public Int16 CORxStatusID {get; set;}

            public Boolean IsPKEmpty => !ERPxProfissionalID.HasValue;
            [Display(Name = "Profissionais")]
            [Required()]
            public Guid? ERPxProfissionalID {get; set;}


            public CORxPessoa CORxPessoa {get; set;}
        }
        public class ERPxGenero : XEntity
        {
            [Display(Name = "Designação")]
            [MaxLength(20)]
            [Required()]
            public String Designacao {get; set;}

            public Boolean IsPKEmpty => Object.Equals(ERPxGeneroID, typeof(Int16).GetDefault());
            [Display(Name = "Gênero")]
            [Required()]
            [DatabaseGenerated(DatabaseGeneratedOption.None)]
            public Int16 ERPxGeneroID {get; set;}

            [Display(Name = "Gênero")]
            [MaxLength(15)]
            [Required()]
            public String Genero {get; set;}

            [Display(Name = "Invisível")]
            [Required()]
            public Boolean Invisivel {get; set;}


            public ERPxPessoaFisica ERPxPessoaFisica {get; set;}
        }
        public class CORxPessoa : XEntity
        {
            [Display(Name = "Localidade")]
            [Required()]
            public Int32 CEPxLocalidadePrincipalID {get; set;}

            public Boolean IsPKEmpty => !CORxPessoaID.HasValue;
            [Display(Name = "Pessoa")]
            [Required()]
            public Guid? CORxPessoaID {get; set;}

            [MaxLength(180)]
            [Required()]
            public String Nome {get; set;}


            public List<ERPxPessoaFisica> ERPxPessoaFisica {get; set;} = new List<ERPxPessoaFisica>();

            public List<ERPxProfissional> ERPxProfissional {get; set;} = new List<ERPxProfissional>();
        }
        public class ERPxDocumento : XEntity
        {
            [Display(Name = "Pessoas")]
            [Required()]
            public Guid CORxPessoaID {get; set;}

            [Display(Name = "Estado")]
            [Required()]
            public Int16 CORxStatusID {get; set;}

            public Boolean IsPKEmpty => !ERPxDocumentoID.HasValue;
            [Display(Name = "Documento")]
            [Required()]
            public Guid? ERPxDocumentoID {get; set;}

            [Display(Name = "Tipo de Documento")]
            [Required()]
            public Int16 ERPxDocumentoTipoID {get; set;}

            [Display(Name = "Número")]
            [MaxLength(25)]
            [Required()]
            public String Numero {get; set;}

        }
        public class ERPxDocumentoTipo : XEntity
        {
            public Boolean IsPKEmpty => Object.Equals(ERPxDocumentoTipoID, typeof(Int16).GetDefault());
            [Display(Name = "Tipo de Documento")]
            [Required()]
            [DatabaseGenerated(DatabaseGeneratedOption.None)]
            public Int16 ERPxDocumentoTipoID {get; set;}

            [Required()]
            public Int32 Filtro {get; set;}

            [Display(Name = "Máscara")]
            [MaxLength(30)]
            public String Mascara {get; set;}

            [Display(Name = "Tipo de Documento")]
            [MaxLength(25)]
            [Required()]
            public String Tipo {get; set;}

        }
        public class ERPxEndereco : XEntity
        {
            [Display(Name = "Logradouro")]
            [Required()]
            public Int32 CEPxLogradouroID {get; set;}

            [MaxLength(30)]
            public String Complemento {get; set;}

            [Display(Name = "Pessoas")]
            [Required()]
            public Guid CORxPessoaID {get; set;}

            [Display(Name = "Estado")]
            [Required()]
            public Int16 CORxStatusID {get; set;}

            public Boolean IsPKEmpty => !ERPxEnderecoID.HasValue;
            [Display(Name = "Endereço")]
            [Required()]
            public Guid? ERPxEnderecoID {get; set;}

            [Display(Name = "Finalidade")]
            [Required()]
            public Int16 ERPxFinalidadeID {get; set;}

            [Required()]
            public Decimal Latitude {get; set;}

            [Required()]
            public Decimal Longitude {get; set;}

            [MaxLength(4)]
            public String Lote {get; set;}

            [Display(Name = "Número")]
            [MaxLength(10)]
            public String Numero {get; set;}

            [Display(Name = "Observação")]
            [MaxLength(50)]
            public String Observacao {get; set;}

            [MaxLength(4)]
            public String Quadra {get; set;}

        }
        public class ERPxFinalidade : XEntity
        {
            public Boolean IsPKEmpty => Object.Equals(ERPxFinalidadeID, typeof(Int16).GetDefault());
            [Display(Name = "Finalidade")]
            [Required()]
            [DatabaseGenerated(DatabaseGeneratedOption.None)]
            public Int16 ERPxFinalidadeID {get; set;}

            [MaxLength(30)]
            [Required()]
            public String Finalidade {get; set;}

        }
        public class CEPxUF : XEntity
        {
            [Display(Name = "CEP Final")]
            [MaxLength(8)]
            [Required()]
            public String CEPFinal {get; set;}

            [Display(Name = "CEP Inicial")]
            [MaxLength(8)]
            [Required()]
            public String CEPInicial {get; set;}

            [Display(Name = "País")]
            [Required()]
            public Int16 CEPxPaisID {get; set;}

            public Boolean IsPKEmpty => Object.Equals(CEPxUFID, typeof(Int16).GetDefault());
            [Display(Name = "UF")]
            [Required()]
            [DatabaseGenerated(DatabaseGeneratedOption.None)]
            public Int16 CEPxUFID {get; set;}

            [Display(Name = "Nome da UF")]
            [MaxLength(45)]
            [Required()]
            public String Nome {get; set;}

            [Display(Name = "Sigla da UF")]
            [MaxLength(2)]
            [Required()]
            public String Sigla {get; set;}

        }
        public class CEPxLocalidade : XEntity
        {
            [Display(Name = "CEP Geral")]
            [MaxLength(8)]
            public String CEPGeral {get; set;}

            public Boolean IsPKEmpty => Object.Equals(CEPxLocalidadeID, typeof(Int32).GetDefault());
            [Display(Name = "Localidade")]
            [Required()]
            [DatabaseGenerated(DatabaseGeneratedOption.None)]
            public Int32 CEPxLocalidadeID {get; set;}

            [Display(Name = "Tipo de Localidade")]
            [Required()]
            public Int16 CEPxLocalidadeTipoID {get; set;}

            [Display(Name = "Município")]
            [Required()]
            public Int32 CEPxMunicipioID {get; set;}

            [Display(Name = "Unidade Federativa")]
            [Required()]
            public Int16 CEPxUFID {get; set;}

            [Display(Name = "Código no IBGE")]
            [MaxLength(7)]
            [DisplayFormat(DataFormatString = "0000000")]
            public String CodigoIBGE {get; set;}

            [Display(Name = "Nome da Localidade")]
            [MaxLength(128)]
            [Required()]
            public String Nome {get; set;}

            [Display(Name = "Número")]
            [Required()]
            public Int32 Numero {get; set;}

        }
        public class CEPxLogradouro : XEntity
        {
            [MaxLength(8)]
            [DisplayFormat(DataFormatString = "00.000-000")]
            public String CEP {get; set;}

            [Display(Name = "Bairro")]
            [Required()]
            public Int32 CEPxBairroID {get; set;}

            [Display(Name = "Localidade")]
            [Required()]
            public Int32 CEPxLocalidadeID {get; set;}

            public Boolean IsPKEmpty => Object.Equals(CEPxLogradouroID, typeof(Int32).GetDefault());
            [Display(Name = "Logradouro")]
            [Required()]
            [DatabaseGenerated(DatabaseGeneratedOption.None)]
            public Int32 CEPxLogradouroID {get; set;}

            [MaxLength(128)]
            [Required()]
            public String Nome {get; set;}

            [Display(Name = "Número")]
            [Required()]
            public Int32 Numero {get; set;}

            [MaxLength(30)]
            [Required()]
            public String Tipo {get; set;}

        }
        public class CEPxBairro : XEntity
        {
            [Display(Name = "Abreviatura")]
            [MaxLength(25)]
            public String Breviatura {get; set;}

            public Boolean IsPKEmpty => Object.Equals(CEPxBairroID, typeof(Int32).GetDefault());
            [Display(Name = "Bairro")]
            [Required()]
            [DatabaseGenerated(DatabaseGeneratedOption.None)]
            public Int32 CEPxBairroID {get; set;}

            [Display(Name = "Localidade")]
            [Required()]
            public Int32 CEPxLocalidadeID {get; set;}

            [MaxLength(128)]
            [Required()]
            public String Nome {get; set;}

            [Display(Name = "Número")]
            [Required()]
            public Int32 Numero {get; set;}

        }
        public class ERPxContato : XEntity
        {
            [Display(Name = "E-Mail, Telefone e ETC.")]
            [MaxLength(50)]
            [Required()]
            public String Contato {get; set;}

            [Display(Name = "Pessoas")]
            [Required()]
            public Guid CORxPessoaID {get; set;}

            [Display(Name = "Estado")]
            [Required()]
            public Int16 CORxStatusID {get; set;}

            public Boolean IsPKEmpty => !ERPxContatoID.HasValue;
            [Display(Name = "Meios de Contato")]
            [Required()]
            public Guid? ERPxContatoID {get; set;}

            [Display(Name = "Tipo de Contato")]
            [Required()]
            public Int16 ERPxContatoTipoID {get; set;}

            [Display(Name = "Finalidade")]
            [Required()]
            public Int16 ERPxFinalidadeID {get; set;}

            [Display(Name = "Observação")]
            [MaxLength(30)]
            public String Observacao {get; set;}

            [Required()]
            public Boolean Validado {get; set;}

        }
        public class ERPxContatoTipo : XEntity
        {
            public Boolean IsPKEmpty => Object.Equals(ERPxContatoTipoID, typeof(Int16).GetDefault());
            [Display(Name = "Tipo de Contato")]
            [Required()]
            [DatabaseGenerated(DatabaseGeneratedOption.None)]
            public Int16 ERPxContatoTipoID {get; set;}

            [Display(Name = "Máscara")]
            [MaxLength(128)]
            public String Mascara {get; set;}

            [MaxLength(20)]
            [Required()]
            public String Tipo {get; set;}

        }
        public class ERPxProfissionalCategoria : XEntity
        {
            [Display(Name = "Categoria de Profissional")]
            [Required()]
            public Int16 ERPxCategoriaID {get; set;}

            public Boolean IsPKEmpty => !ERPxProfissionalCategoriaID.HasValue;
            [Display(Name = "Categorias por Profissional")]
            [Required()]
            public Guid? ERPxProfissionalCategoriaID {get; set;}

            [Display(Name = "Profissionais")]
            [Required()]
            public Guid ERPxProfissionalID {get; set;}

        }
        public class ERPxCategoria : XEntity
        {
            [MaxLength(35)]
            [Required()]
            public String Categoria {get; set;}

            public Boolean IsPKEmpty => Object.Equals(ERPxCategoriaID, typeof(Int16).GetDefault());
            [Display(Name = "Categoria de Profissional")]
            [Required()]
            [DatabaseGenerated(DatabaseGeneratedOption.None)]
            public Int16 ERPxCategoriaID {get; set;}

        }
        public class ERPxProfissionalHorario : XEntity
        {
            [Display(Name = "Estado")]
            [Required()]
            public Int16 CORxStatusID {get; set;}

            public Boolean IsPKEmpty => !ERPxProfissionalHorarioID.HasValue;
            [Display(Name = "Itens de Horário")]
            [Required()]
            public Guid? ERPxProfissionalHorarioID {get; set;}

            [Display(Name = "Tipos de Horários")]
            [Required()]
            public Int16 ERPxProfissionalHorarioTipoID {get; set;}

            [Display(Name = "Profissionais")]
            [Required()]
            public Guid ERPxProfissionalID {get; set;}

            [Required()]
            public DateTime Fim {get; set;}

            [Display(Name = "Início")]
            [Required()]
            public DateTime Inicio {get; set;}

        }
        public class ERPxProfissionalHorarioTipo : XEntity
        {
            public Boolean IsPKEmpty => Object.Equals(ERPxProfissionalHorarioTipoID, typeof(Int16).GetDefault());
            [Display(Name = "Tipos de Horários")]
            [Required()]
            [DatabaseGenerated(DatabaseGeneratedOption.None)]
            public Int16 ERPxProfissionalHorarioTipoID {get; set;}

            [Display(Name = "Tipo de Horário")]
            [MaxLength(35)]
            [Required()]
            public String Horario {get; set;}

        }
        public class DBContext : XDBContext
        {
            public DBContext(DbContextOptions<DBContext> pOptions, XITenantProvider pTenantProvider, XISharedTransaction pSharedTransaction)
                   : base(pOptions, pTenantProvider, pSharedTransaction)
            {
            }

            public DbSet<ERPxPessoaFisica> ERPxPessoaFisica{get; set;}
            public DbSet<ERPxProfissional> ERPxProfissional{get; set;}
            public DbSet<ERPxGenero> ERPxGenero{get; set;}
            public DbSet<CORxPessoa> CORxPessoa{get; set;}
            public DbSet<ERPxDocumento> ERPxDocumento{get; set;}
            public DbSet<ERPxDocumentoTipo> ERPxDocumentoTipo{get; set;}
            public DbSet<ERPxEndereco> ERPxEndereco{get; set;}
            public DbSet<ERPxFinalidade> ERPxFinalidade{get; set;}
            public DbSet<CEPxUF> CEPxUF{get; set;}
            public DbSet<CEPxLocalidade> CEPxLocalidade{get; set;}
            public DbSet<CEPxLogradouro> CEPxLogradouro{get; set;}
            public DbSet<CEPxBairro> CEPxBairro{get; set;}
            public DbSet<ERPxContato> ERPxContato{get; set;}
            public DbSet<ERPxContatoTipo> ERPxContatoTipo{get; set;}
            public DbSet<ERPxProfissionalCategoria> ERPxProfissionalCategoria{get; set;}
            public DbSet<ERPxCategoria> ERPxCategoria{get; set;}
            public DbSet<ERPxProfissionalHorario> ERPxProfissionalHorario{get; set;}
            public DbSet<ERPxProfissionalHorarioTipo> ERPxProfissionalHorarioTipo{get; set;}

        private void ConfigureERPxPessoaFisica(ModelBuilder pBuilder)
        {
            pBuilder.Entity<ERPxPessoaFisica>(ett =>
            {
                ett.HasKey(e => e.ERPxPessoaFisicaID).HasName("PK_ERPxPessoaFisica");

                ett.Property(d => d.ERPxPessoaFisicaID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.CORxStatusID).HasColumnType(GetDBType("Int16"))
                    .HasDefaultValue(GetDBValue("Int16", (Int16)0));
                ett.Property(d => d.ERPxGeneroID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.Nascimento).HasColumnType(GetDBType("DateTime"));
                ett.ToTable("ERPxPessoaFisica");
                ett.HasOne(d => d.CORxPessoa)
                   .WithMany(p => p.ERPxPessoaFisica)
                   .HasForeignKey(d => d.ERPxPessoaFisicaID)
                   .OnDelete(DeleteBehavior.Restrict);
            });
        }
        private void ConfigureERPxProfissional(ModelBuilder pBuilder)
        {
            pBuilder.Entity<ERPxProfissional>(ett =>
            {
                ett.HasKey(e => e.ERPxProfissionalID).HasName("PK_ERPxProfissional");

                ett.Property(d => d.ERPxProfissionalID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.CORxStatusID).HasColumnType(GetDBType("Int16"));
                ett.ToTable("ERPxProfissional");
                ett.HasOne(d => d.CORxPessoa)
                   .WithMany(p => p.ERPxProfissional)
                   .HasForeignKey(d => d.ERPxProfissionalID)
                   .OnDelete(DeleteBehavior.Restrict);
            });
        }
        private void ConfigureERPxGenero(ModelBuilder pBuilder)
        {
            pBuilder.Entity<ERPxGenero>(ett =>
            {
                ett.HasKey(e => e.ERPxGeneroID).HasName("PK_ERPxGenero");

                ett.Property(d => d.Genero).HasColumnType(GetDBType("String", 15));
                ett.Property(d => d.ERPxGeneroID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.Invisivel).HasColumnType(GetDBType("Boolean"));
                ett.Property(d => d.Designacao).HasColumnType(GetDBType("String", 20));
                ett.ToTable("ERPxGenero");
                ett.HasOne(d => d.ERPxPessoaFisica)
                   .WithMany(p => p.ERPxGenero)
                   .HasForeignKey(d => d.ERPxGeneroID)
                   .OnDelete(DeleteBehavior.Restrict);
            });
        }
        private void ConfigureCORxPessoa(ModelBuilder pBuilder)
        {
            pBuilder.Entity<CORxPessoa>(ett =>
            {
                ett.HasKey(e => e.CORxPessoaID).HasName("PK_CORxPessoa");

                ett.Property(d => d.CORxPessoaID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.Nome).HasColumnType(GetDBType("String", 180));
                ett.Property(d => d.CEPxLocalidadePrincipalID).HasColumnType(GetDBType("Int32"));
                ett.ToTable("CORxPessoa");
            });
        }
        private void ConfigureERPxDocumento(ModelBuilder pBuilder)
        {
            pBuilder.Entity<ERPxDocumento>(ett =>
            {
                ett.HasKey(e => e.ERPxDocumentoID).HasName("PK_ERPxDocumento");

                ett.Property(d => d.ERPxDocumentoID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.ERPxDocumentoTipoID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.CORxPessoaID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.Numero).HasColumnType(GetDBType("String", 25));
                ett.Property(d => d.CORxStatusID).HasColumnType(GetDBType("Int16"))
                    .HasDefaultValue(GetDBValue("Int16", (Int16)0));
                ett.ToTable("ERPxDocumento");
            });
        }
        private void ConfigureERPxDocumentoTipo(ModelBuilder pBuilder)
        {
            pBuilder.Entity<ERPxDocumentoTipo>(ett =>
            {
                ett.HasKey(e => e.ERPxDocumentoTipoID).HasName("PK_ERPxDocumentoTipo");

                ett.Property(d => d.Tipo).HasColumnType(GetDBType("String", 25));
                ett.Property(d => d.ERPxDocumentoTipoID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.Mascara).HasColumnType(GetDBType("String", 30)).IsRequired(false);
                ett.Property(d => d.Filtro).HasColumnType(GetDBType("Int32"));
                ett.ToTable("ERPxDocumentoTipo");
            });
        }
        private void ConfigureERPxEndereco(ModelBuilder pBuilder)
        {
            pBuilder.Entity<ERPxEndereco>(ett =>
            {
                ett.HasKey(e => e.ERPxEnderecoID).HasName("PK_ERPxEndereco");

                ett.Property(d => d.CORxPessoaID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.ERPxEnderecoID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.CORxStatusID).HasColumnType(GetDBType("Int16"))
                    .HasDefaultValue(GetDBValue("Int16", (Int16)0));
                ett.Property(d => d.Lote).HasColumnType(GetDBType("String", 4)).IsRequired(false)
                    .HasDefaultValue(GetDBValue("String", null));
                ett.Property(d => d.Quadra).HasColumnType(GetDBType("String", 4)).IsRequired(false)
                    .HasDefaultValue(GetDBValue("String", null));
                ett.Property(d => d.Numero).HasColumnType(GetDBType("String", 10)).IsRequired(false)
                    .HasDefaultValue(GetDBValue("String", null));
                ett.Property(d => d.ERPxFinalidadeID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.Observacao).HasColumnType(GetDBType("String", 50)).IsRequired(false);
                ett.Property(d => d.CEPxLogradouroID).HasColumnType(GetDBType("Int32"));
                ett.Property(d => d.Complemento).HasColumnType(GetDBType("String", 30)).IsRequired(false);
                ett.Property(d => d.Latitude).HasColumnType(GetDBType("Decimal", 20, 10));
                ett.Property(d => d.Longitude).HasColumnType(GetDBType("Decimal", 20, 10));
                ett.ToTable("ERPxEndereco");
            });
        }
        private void ConfigureERPxFinalidade(ModelBuilder pBuilder)
        {
            pBuilder.Entity<ERPxFinalidade>(ett =>
            {
                ett.HasKey(e => e.ERPxFinalidadeID).HasName("PK_ERPxFinalidade");

                ett.Property(d => d.Finalidade).HasColumnType(GetDBType("String", 30));
                ett.Property(d => d.ERPxFinalidadeID).HasColumnType(GetDBType("Int16"));
                ett.ToTable("ERPxFinalidade");
            });
        }
        private void ConfigureCEPxUF(ModelBuilder pBuilder)
        {
            pBuilder.Entity<CEPxUF>(ett =>
            {
                ett.HasKey(e => e.CEPxUFID).HasName("PK_CEPxUF");

                ett.Property(d => d.CEPxUFID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.Nome).HasColumnType(GetDBType("String", 45));
                ett.Property(d => d.Sigla).HasColumnType(GetDBType("String", 2));
                ett.Property(d => d.CEPxPaisID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.CEPInicial).HasColumnType(GetDBType("String", 8));
                ett.Property(d => d.CEPFinal).HasColumnType(GetDBType("String", 8));
                ett.ToTable("CEPxUF");
            });
        }
        private void ConfigureCEPxLocalidade(ModelBuilder pBuilder)
        {
            pBuilder.Entity<CEPxLocalidade>(ett =>
            {
                ett.HasKey(e => e.CEPxLocalidadeID).HasName("PK_CEPxLocalidade");

                ett.Property(d => d.CEPxLocalidadeID).HasColumnType(GetDBType("Int32"));
                ett.Property(d => d.CEPxUFID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.Nome).HasColumnType(GetDBType("String", 128));
                ett.Property(d => d.CEPxMunicipioID).HasColumnType(GetDBType("Int32"));
                ett.Property(d => d.CodigoIBGE).HasColumnType(GetDBType("String", 7)).IsRequired(false);
                ett.Property(d => d.CEPxLocalidadeTipoID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.CEPGeral).HasColumnType(GetDBType("String", 8)).IsRequired(false)
                    .HasDefaultValue(GetDBValue("String", null));
                ett.Property(d => d.Numero).HasColumnType(GetDBType("Int32"));
                ett.ToTable("CEPxLocalidade");
            });
        }
        private void ConfigureCEPxLogradouro(ModelBuilder pBuilder)
        {
            pBuilder.Entity<CEPxLogradouro>(ett =>
            {
                ett.HasKey(e => e.CEPxLogradouroID).HasName("PK_CEPxLogradouro");

                ett.Property(d => d.CEPxBairroID).HasColumnType(GetDBType("Int32"));
                ett.Property(d => d.CEPxLogradouroID).HasColumnType(GetDBType("Int32"));
                ett.Property(d => d.Nome).HasColumnType(GetDBType("String", 128));
                ett.Property(d => d.CEPxLocalidadeID).HasColumnType(GetDBType("Int32"));
                ett.Property(d => d.Tipo).HasColumnType(GetDBType("String", 30));
                ett.Property(d => d.Numero).HasColumnType(GetDBType("Int32"));
                ett.Property(d => d.CEP).HasColumnType(GetDBType("String", 8)).IsRequired(false);
                ett.ToTable("CEPxLogradouro");
            });
        }
        private void ConfigureCEPxBairro(ModelBuilder pBuilder)
        {
            pBuilder.Entity<CEPxBairro>(ett =>
            {
                ett.HasKey(e => e.CEPxBairroID).HasName("PK_CEPxBairro");

                ett.Property(d => d.CEPxLocalidadeID).HasColumnType(GetDBType("Int32"));
                ett.Property(d => d.CEPxBairroID).HasColumnType(GetDBType("Int32"));
                ett.Property(d => d.Nome).HasColumnType(GetDBType("String", 128));
                ett.Property(d => d.Breviatura).HasColumnType(GetDBType("String", 25)).IsRequired(false);
                ett.Property(d => d.Numero).HasColumnType(GetDBType("Int32"));
                ett.ToTable("CEPxBairro");
            });
        }
        private void ConfigureERPxContato(ModelBuilder pBuilder)
        {
            pBuilder.Entity<ERPxContato>(ett =>
            {
                ett.HasKey(e => e.ERPxContatoID).HasName("PK_ERPxContato");

                ett.Property(d => d.Contato).HasColumnType(GetDBType("String", 50));
                ett.Property(d => d.CORxPessoaID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.ERPxContatoID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.ERPxContatoTipoID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.ERPxFinalidadeID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.CORxStatusID).HasColumnType(GetDBType("Int16"))
                    .HasDefaultValue(GetDBValue("Int16", (Int16)0));
                ett.Property(d => d.Validado).HasColumnType(GetDBType("Boolean"))
                    .HasDefaultValue(GetDBValue("Boolean", false));
                ett.Property(d => d.Observacao).HasColumnType(GetDBType("String", 30)).IsRequired(false);
                ett.ToTable("ERPxContato");
            });
        }
        private void ConfigureERPxContatoTipo(ModelBuilder pBuilder)
        {
            pBuilder.Entity<ERPxContatoTipo>(ett =>
            {
                ett.HasKey(e => e.ERPxContatoTipoID).HasName("PK_ERPxContatoTipo");

                ett.Property(d => d.Tipo).HasColumnType(GetDBType("String", 20));
                ett.Property(d => d.ERPxContatoTipoID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.Mascara).HasColumnType(GetDBType("String", 128)).IsRequired(false);
                ett.ToTable("ERPxContatoTipo");
            });
        }
        private void ConfigureERPxProfissionalCategoria(ModelBuilder pBuilder)
        {
            pBuilder.Entity<ERPxProfissionalCategoria>(ett =>
            {
                ett.HasKey(e => e.ERPxProfissionalCategoriaID).HasName("PK_ERPxProfissionalCategoria");

                ett.Property(d => d.ERPxCategoriaID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.ERPxProfissionalID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.ERPxProfissionalCategoriaID).HasColumnType(GetDBType("Guid"));
                ett.ToTable("ERPxProfissionalCategoria");
            });
        }
        private void ConfigureERPxCategoria(ModelBuilder pBuilder)
        {
            pBuilder.Entity<ERPxCategoria>(ett =>
            {
                ett.HasKey(e => e.ERPxCategoriaID).HasName("PK_ERPxCategoria");

                ett.Property(d => d.ERPxCategoriaID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.Categoria).HasColumnType(GetDBType("String", 35));
                ett.ToTable("ERPxCategoria");
            });
        }
        private void ConfigureERPxProfissionalHorario(ModelBuilder pBuilder)
        {
            pBuilder.Entity<ERPxProfissionalHorario>(ett =>
            {
                ett.HasKey(e => e.ERPxProfissionalHorarioID).HasName("PK_ERPxProfissionalHorario");

                ett.Property(d => d.ERPxProfissionalHorarioTipoID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.ERPxProfissionalID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.ERPxProfissionalHorarioID).HasColumnType(GetDBType("Guid"));
                ett.Property(d => d.Inicio).HasColumnType(GetDBType("DateTime"));
                ett.Property(d => d.Fim).HasColumnType(GetDBType("DateTime"));
                ett.Property(d => d.CORxStatusID).HasColumnType(GetDBType("Int16"));
                ett.ToTable("ERPxProfissionalHorario");
            });
        }
        private void ConfigureERPxProfissionalHorarioTipo(ModelBuilder pBuilder)
        {
            pBuilder.Entity<ERPxProfissionalHorarioTipo>(ett =>
            {
                ett.HasKey(e => e.ERPxProfissionalHorarioTipoID).HasName("PK_ERPxProfissionalHorarioTipo");

                ett.Property(d => d.ERPxProfissionalHorarioTipoID).HasColumnType(GetDBType("Int16"));
                ett.Property(d => d.Horario).HasColumnType(GetDBType("String", 35));
                ett.ToTable("ERPxProfissionalHorarioTipo");
            });
        }

            protected override void OnModelCreating(ModelBuilder pBuilder)
            {
                ConfigureERPxPessoaFisica(pBuilder);
                ConfigureERPxProfissional(pBuilder);
                ConfigureERPxGenero(pBuilder);
                ConfigureCORxPessoa(pBuilder);
                ConfigureERPxDocumento(pBuilder);
                ConfigureERPxDocumentoTipo(pBuilder);
                ConfigureERPxEndereco(pBuilder);
                ConfigureERPxFinalidade(pBuilder);
                ConfigureCEPxUF(pBuilder);
                ConfigureCEPxLocalidade(pBuilder);
                ConfigureCEPxLogradouro(pBuilder);
                ConfigureCEPxBairro(pBuilder);
                ConfigureERPxContato(pBuilder);
                ConfigureERPxContatoTipo(pBuilder);
                ConfigureERPxProfissionalCategoria(pBuilder);
                ConfigureERPxCategoria(pBuilder);
                ConfigureERPxProfissionalHorario(pBuilder);
                ConfigureERPxProfissionalHorarioTipo(pBuilder);
                base.OnModelCreating(pBuilder);
            }

            protected override string GetConnectionString()
            {
                if (ConnectionString != null)
                    return ConnectionString;
                return XEnvironment.Read("SQL_SERVER_TFX", base.GetConnectionString());
            }
        }

        public abstract class BaseINFProfissionalServiceRule : XServiceINFRule<ProfissionalService, ProfissionalTuple>
        {
            public BaseINFProfissionalServiceRule(ProfissionalService pService)
                : base(pService)
            {
            }
            protected DBContext Context
            {
                get;
                private set;
            }
            protected internal virtual T GetWhere<T>(T pQuery)
            {
                return pQuery;
            }
            internal void SetContext(DBContext pContext)
            {
                Context = pContext;
            }

        }

        public ProfissionalService(ILogger<XService> pLogger, DBContext pContext)
               :base(pLogger)
        {
            Rule = new ProfissionalRule(this);
            _INFRule = new INFProfissionalServiceRule(this);
            Context = pContext;
            _INFRule.SetContext(Context);
        }

        internal XIServiceRule<ProfissionalTuple, ProfissionalTuple> Rule;
        private INFProfissionalServiceRule _INFRule;

        public override Guid ID => new Guid("1FE2AF42-35CF-4570-BB64-AA3B352EF067");

        public DBContext Context
        {
            get;
        }

        public override void GracefullyClose()
        {
            Context.Commit();
        }
        public IQueryable<ProfissionalTuple> ExecuteQuery(ProfissionalFilter pFilter, Boolean pFull)
        {
            var ctx = Context;
            var query = from CORxPessoa in ctx.CORxPessoa
                        join ERPxPessoaFisica in ctx.ERPxPessoaFisica on CORxPessoa.CORxPessoaID equals ERPxPessoaFisica.ERPxPessoaFisicaID
                        join ERPxGenero in ctx.ERPxGenero on ERPxPessoaFisica.ERPxGeneroID equals ERPxGenero.ERPxGeneroID
                        join ERPxProfissional in ctx.ERPxProfissional on CORxPessoa.CORxPessoaID equals ERPxProfissional.ERPxProfissionalID
                        
                        select new {ERPxPessoaFisica, ERPxProfissional, ERPxGenero, CORxPessoa};
            query = _INFRule.GetWhere(query);


            if (!LoadAll)
            {
                if (pFilter?.SkipRows > 0)
                    query = query.Skip(pFilter.SkipRows.Value);

                if (pFilter?.TakeRows > 0)
                    query = query.Take(pFilter.TakeRows.Value);
                else
                    query = query.Take(75);
            }

            var Documento = pFull ? from ERPxDocumento in ctx.ERPxDocumento
                        join ERPxDocumentoTipo in ctx.ERPxDocumentoTipo on ERPxDocumento.ERPxDocumentoTipoID equals ERPxDocumentoTipo.ERPxDocumentoTipoID
                        
                        select new {ERPxDocumento, ERPxDocumentoTipo} : null; 

            var Endereco = pFull ? from ERPxEndereco in ctx.ERPxEndereco
                        join ERPxFinalidade in ctx.ERPxFinalidade on ERPxEndereco.ERPxFinalidadeID equals ERPxFinalidade.ERPxFinalidadeID
                        join CEPxLogradouro in ctx.CEPxLogradouro on ERPxEndereco.CEPxLogradouroID equals CEPxLogradouro.CEPxLogradouroID
                        join CEPxLocalidade in ctx.CEPxLocalidade on CEPxLogradouro.CEPxLocalidadeID equals CEPxLocalidade.CEPxLocalidadeID
                        join CEPxUF in ctx.CEPxUF on CEPxLocalidade.CEPxUFID equals CEPxUF.CEPxUFID
                        join CEPxBairro in ctx.CEPxBairro on CEPxLogradouro.CEPxBairroID equals CEPxBairro.CEPxBairroID
                        
                        select new {ERPxEndereco, ERPxFinalidade, CEPxUF, CEPxLocalidade, CEPxLogradouro, CEPxBairro} : null; 

            var Contato = pFull ? from ERPxContato in ctx.ERPxContato
                        join ERPxContatoTipo in ctx.ERPxContatoTipo on ERPxContato.ERPxContatoTipoID equals ERPxContatoTipo.ERPxContatoTipoID
                        join ERPxFinalidade in ctx.ERPxFinalidade on ERPxContato.ERPxFinalidadeID equals ERPxFinalidade.ERPxFinalidadeID
                        
                        select new {ERPxContato, ERPxContatoTipo, ERPxFinalidade} : null; 

            var Categoria = pFull ? from ERPxProfissionalCategoria in ctx.ERPxProfissionalCategoria
                        join ERPxCategoria in ctx.ERPxCategoria on ERPxProfissionalCategoria.ERPxCategoriaID equals ERPxCategoria.ERPxCategoriaID
                        
                        select new {ERPxProfissionalCategoria, ERPxCategoria} : null; 

            var Horarios = pFull ? from ERPxProfissionalHorario in ctx.ERPxProfissionalHorario
                        join ERPxProfissionalHorarioTipo in ctx.ERPxProfissionalHorarioTipo on ERPxProfissionalHorario.ERPxProfissionalHorarioTipoID equals ERPxProfissionalHorarioTipo.ERPxProfissionalHorarioTipoID
                        
                        select new {ERPxProfissionalHorario, ERPxProfissionalHorarioTipo} : null; 

            var qry = query.Select(q => new ProfissionalTuple(null,
                                  null,
                                  q.ERPxProfissional.CORxStatusID,
                                  q.CORxPessoa.CORxPessoaID,
                                  q.CORxPessoa.Nome,
                                  q.CORxPessoa.CEPxLocalidadePrincipalID,
                                  q.ERPxPessoaFisica.ERPxGeneroID,
                                  q.ERPxPessoaFisica.Nascimento,
                                  q.ERPxGenero.Genero, Categoria = 
                                  pFull ? Categoria.Where(q1 => q1.ERPxProfissionalCategoria.ERPxProfissionalID == q.CORxPessoa.CORxPessoaID )
                            .Select(q => new CategoriaTuple(){ERPxCategoriaID = q.ERPxProfissionalCategoria.ERPxCategoriaID,
                                 Categoria = q.ERPxCategoria.Categoria,
                                 ERPxProfissionalCategoriaID = q.ERPxProfissionalCategoria.ERPxProfissionalCategoriaID,
                                 ERPxProfissionalID = q.ERPxProfissionalCategoria.ERPxProfissionalID}).ToArray() : null, Contato = 
                                  pFull ? Contato.Where(q2 => q2.ERPxContato.CORxPessoaID == q.CORxPessoa.CORxPessoaID )
                            .Select(q => new ContatoTuple(){Validar = false,
                               Contato = q.ERPxContato.Contato,
                               ERPxContatoID = q.ERPxContato.ERPxContatoID,
                               ERPxContatoTipoID = q.ERPxContato.ERPxContatoTipoID,
                               Validado = q.ERPxContato.Validado,
                               ERPxFinalidadeID = q.ERPxContato.ERPxFinalidadeID,
                               CORxStatusID = q.ERPxContato.CORxStatusID,
                               CORxPessoaID = q.ERPxContato.CORxPessoaID,
                               Observacao = q.ERPxContato.Observacao,
                               Mascara = q.ERPxContatoTipo.Mascara,
                               Tipo = q.ERPxContatoTipo.Tipo,
                               Finalidade = q.ERPxFinalidade.Finalidade}).ToArray() : null, Documento = 
                                  pFull ? Documento.Where(q3 => q3.ERPxDocumento.CORxPessoaID == q.CORxPessoa.CORxPessoaID )
                            .Select(q => new DocumentoTuple(){ERPxDocumentoID = q.ERPxDocumento.ERPxDocumentoID,
                                 ERPxDocumentoTipoID = q.ERPxDocumento.ERPxDocumentoTipoID,
                                 Numero = q.ERPxDocumento.Numero,
                                 CORxStatusID = q.ERPxDocumento.CORxStatusID,
                                 CORxPessoaID = q.ERPxDocumento.CORxPessoaID,
                                 Mascara = q.ERPxDocumentoTipo.Mascara,
                                 Tipo = q.ERPxDocumentoTipo.Tipo}).ToArray() : null, Endereco = 
                                  pFull ? Endereco.Where(q4 => q4.ERPxEndereco.CORxPessoaID == q.CORxPessoa.CORxPessoaID )
                            .Select(q => new EnderecoTuple(){Localidade = q.CEPxLocalidade.Nome,
                                CEPxLogradouroID = q.ERPxEndereco.CEPxLogradouroID,
                                Complemento = q.ERPxEndereco.Complemento,
                                Logradouro = q.CEPxLogradouro.Nome,
                                Tipo = q.CEPxLogradouro.Tipo,
                                CEP = q.CEPxLogradouro.CEP,
                                Bairro = q.CEPxBairro.Nome,
                                Longitude = q.ERPxEndereco.Longitude,
                                Latitude = q.ERPxEndereco.Latitude,
                                Endereco = null,
                                Sigla = q.CEPxUF.Sigla,
                                NomeUF = q.CEPxUF.Nome,
                                CodigoIBGE = q.CEPxLocalidade.CodigoIBGE,
                                ERPxEnderecoID = q.ERPxEndereco.ERPxEnderecoID,
                                ERPxFinalidadeID = q.ERPxEndereco.ERPxFinalidadeID,
                                Lote = q.ERPxEndereco.Lote,
                                Numero = q.ERPxEndereco.Numero,
                                Observacao = q.ERPxEndereco.Observacao,
                                Quadra = q.ERPxEndereco.Quadra,
                                CORxStatusID = q.ERPxEndereco.CORxStatusID,
                                CORxPessoaID = q.ERPxEndereco.CORxPessoaID,
                                Finalidade = q.ERPxFinalidade.Finalidade}).ToArray() : null, Horarios = 
                                  pFull ? Horarios.Where(q5 => q5.ERPxProfissionalHorario.ERPxProfissionalID == q.CORxPessoa.CORxPessoaID )
                            .Select(q => new HorariosTuple(){Inicio = q.ERPxProfissionalHorario.Inicio,
                                ERPxProfissionalID = q.ERPxProfissionalHorario.ERPxProfissionalID,
                                Horario = q.ERPxProfissionalHorarioTipo.Horario,
                                ERPxProfissionalHorarioID = q.ERPxProfissionalHorario.ERPxProfissionalHorarioID,
                                ERPxProfissionalHorarioTipoID = q.ERPxProfissionalHorario.ERPxProfissionalHorarioTipoID,
                                Fim = q.ERPxProfissionalHorario.Fim}).ToArray() : null));
            return qry;
        }

        public ProfissionalDataSet Execute(ProfissionalFilter pFilter, Boolean pFull)
        {
            _INFRule.InternalBeforeExecute();
            var qry = ExecuteQuery(pFilter, pFull);
            var tuples = qry.ToList();
            tuples = Rule.InternalAfterSelect(tuples);
            _INFRule.InternalAfterExecute(tuples);
            var dataset = new ProfissionalDataSet { Tuples = tuples };
            return dataset;
        }

        public object Flush(ProfissionalDataSet pDataSet)
        {
            if (pDataSet?.Tuples.Count == 0)
                throw new XUnconformity("Não é permitido Flush sem Tuplas.");
            using (var scope = XEnvironment.Services.CreateScope())
            using (var ctx = scope.ServiceProvider.GetRequiredService<DBContext>())
            {
                Rule?.InternalBeforeFlush(pDataSet.Tuples);

                SetProfissionalValues(ctx, pDataSet);
                ctx.SaveChanges();

                Rule?.InternalAfterFlush(pDataSet.Tuples);

                return XEndPointMessage.Ok;
            }
        }

        private void SetProfissionalValues(DBContext ctx, ProfissionalDataSet pDataSet)
        {
            if (pDataSet == null || pDataSet.Tuples == null)
                return;
            foreach (ProfissionalTuple stpl in pDataSet.Tuples)
            {
                var sb = new StringBuilder();
                var ERPxProfissionaltpl = new ERPxProfissional();
                if (stpl.CORxPessoaID.Value != null)
                    ERPxProfissionaltpl.ERPxProfissionalID = stpl.CORxPessoaID.Value;
                ERPxProfissionaltpl.CORxStatusID = stpl.CORxStatusID.Value;
                ERPxProfissionaltpl.Validate(sb);
                ctx.ERPxProfissional.Add(ERPxProfissionaltpl);
                if (!ERPxProfissionaltpl.IsPKEmpty)
                    ctx.Entry(ERPxProfissionaltpl).State = EntityState.Modified;
                else
                    ctx.Entry(ERPxProfissionaltpl).State = EntityState.Added;

                var ERPxPessoaFisicatpl = new ERPxPessoaFisica();
                if (stpl.CORxPessoaID.Value != null)
                    ERPxPessoaFisicatpl.ERPxPessoaFisicaID = stpl.CORxPessoaID.Value;
                ERPxPessoaFisicatpl.ERPxGeneroID = stpl.ERPxGeneroID.Value;
                ERPxPessoaFisicatpl.Nascimento = stpl.Nascimento.Value;
                ERPxPessoaFisicatpl.Validate(sb);
                ctx.ERPxPessoaFisica.Add(ERPxPessoaFisicatpl);
                if (!ERPxPessoaFisicatpl.IsPKEmpty)
                    ctx.Entry(ERPxPessoaFisicatpl).State = EntityState.Modified;
                else
                    ctx.Entry(ERPxPessoaFisicatpl).State = EntityState.Added;

                var CORxPessoatpl = new CORxPessoa();
                if (stpl.CORxPessoaID.Value != null)
                    CORxPessoatpl.CORxPessoaID = stpl.CORxPessoaID.Value;
                CORxPessoatpl.Nome = stpl.Nome.Value;
                CORxPessoatpl.CEPxLocalidadePrincipalID = stpl.CEPxLocalidadePrincipalID.Value;
                CORxPessoatpl.Validate(sb);
                ctx.CORxPessoa.Add(CORxPessoatpl);
                if (!CORxPessoatpl.IsPKEmpty)
                    ctx.Entry(CORxPessoatpl).State = EntityState.Modified;
                else
                    ctx.Entry(CORxPessoatpl).State = EntityState.Added;
                ERPxProfissionaltpl.CORxPessoa = CORxPessoatpl;
                ERPxPessoaFisicatpl.CORxPessoa = CORxPessoatpl;
                SetDocumentoValues(ctx, stpl.Documento);
                SetEnderecoValues(ctx, stpl.Endereco);
                SetContatoValues(ctx, stpl.Contato);
                SetCategoriaValues(ctx, stpl.Categoria);
                SetHorariosValues(ctx, stpl.Horarios);

                void SetDocumentoValues(DBContext ctx, DocumentoTuple[] pTuples)
                {
                    if (pTuples == null)
                        return;
                    foreach (DocumentoTuple stpl in pTuples)
                    {
                        var sb = new StringBuilder();
                        var ERPxDocumentotpl = new ERPxDocumento();
                        if (stpl.ERPxDocumentoID.Value != null)
                            ERPxDocumentotpl.ERPxDocumentoID = stpl.ERPxDocumentoID.Value;
                        ERPxDocumentotpl.ERPxDocumentoTipoID = stpl.ERPxDocumentoTipoID.Value;
                        ERPxDocumentotpl.CORxPessoaID = stpl.CORxPessoaID.Value;
                        ERPxDocumentotpl.Numero = stpl.Numero.Value;
                        ERPxDocumentotpl.CORxStatusID = stpl.CORxStatusID.Value;
                        ERPxDocumentotpl.Validate(sb);
                        ctx.ERPxDocumento.Add(ERPxDocumentotpl);
                        if (!ERPxDocumentotpl.IsPKEmpty)
                            ctx.Entry(ERPxDocumentotpl).State = EntityState.Modified;
                        else
                            ctx.Entry(ERPxDocumentotpl).State = EntityState.Added;
                        if (sb.Length > 0)
                            throw new Exception(sb.ToString());
                    }
                }

                void SetEnderecoValues(DBContext ctx, EnderecoTuple[] pTuples)
                {
                    if (pTuples == null)
                        return;
                    foreach (EnderecoTuple stpl in pTuples)
                    {
                        var sb = new StringBuilder();
                        var ERPxEnderecotpl = new ERPxEndereco();
                        ERPxEnderecotpl.CORxPessoaID = stpl.CORxPessoaID.Value;
                        if (stpl.ERPxEnderecoID.Value != null)
                            ERPxEnderecotpl.ERPxEnderecoID = stpl.ERPxEnderecoID.Value;
                        ERPxEnderecotpl.CORxStatusID = stpl.CORxStatusID.Value;
                        ERPxEnderecotpl.Lote = stpl.Lote.Value;
                        ERPxEnderecotpl.Quadra = stpl.Quadra.Value;
                        ERPxEnderecotpl.Numero = stpl.Numero.Value;
                        ERPxEnderecotpl.ERPxFinalidadeID = stpl.ERPxFinalidadeID.Value;
                        ERPxEnderecotpl.Observacao = stpl.Observacao.Value;
                        ERPxEnderecotpl.CEPxLogradouroID = stpl.CEPxLogradouroID.Value;
                        ERPxEnderecotpl.Complemento = stpl.Complemento.Value;
                        ERPxEnderecotpl.Latitude = stpl.Latitude.Value;
                        ERPxEnderecotpl.Longitude = stpl.Longitude.Value;
                        ERPxEnderecotpl.Validate(sb);
                        ctx.ERPxEndereco.Add(ERPxEnderecotpl);
                        if (!ERPxEnderecotpl.IsPKEmpty)
                            ctx.Entry(ERPxEnderecotpl).State = EntityState.Modified;
                        else
                            ctx.Entry(ERPxEnderecotpl).State = EntityState.Added;
                        if (sb.Length > 0)
                            throw new Exception(sb.ToString());
                    }
                }

                void SetContatoValues(DBContext ctx, ContatoTuple[] pTuples)
                {
                    if (pTuples == null)
                        return;
                    foreach (ContatoTuple stpl in pTuples)
                    {
                        var sb = new StringBuilder();
                        var ERPxContatotpl = new ERPxContato();
                        ERPxContatotpl.Contato = stpl.Contato.Value;
                        ERPxContatotpl.CORxPessoaID = stpl.CORxPessoaID.Value;
                        if (stpl.ERPxContatoID.Value != null)
                            ERPxContatotpl.ERPxContatoID = stpl.ERPxContatoID.Value;
                        ERPxContatotpl.ERPxContatoTipoID = stpl.ERPxContatoTipoID.Value;
                        ERPxContatotpl.ERPxFinalidadeID = stpl.ERPxFinalidadeID.Value;
                        ERPxContatotpl.CORxStatusID = stpl.CORxStatusID.Value;
                        ERPxContatotpl.Validado = stpl.Validado.Value;
                        ERPxContatotpl.Observacao = stpl.Observacao.Value;
                        ERPxContatotpl.Validate(sb);
                        ctx.ERPxContato.Add(ERPxContatotpl);
                        if (!ERPxContatotpl.IsPKEmpty)
                            ctx.Entry(ERPxContatotpl).State = EntityState.Modified;
                        else
                            ctx.Entry(ERPxContatotpl).State = EntityState.Added;
                        if (sb.Length > 0)
                            throw new Exception(sb.ToString());
                    }
                }

                void SetCategoriaValues(DBContext ctx, CategoriaTuple[] pTuples)
                {
                    if (pTuples == null)
                        return;
                    foreach (CategoriaTuple stpl in pTuples)
                    {
                        var sb = new StringBuilder();
                        var ERPxProfissionalCategoriatpl = new ERPxProfissionalCategoria();
                        ERPxProfissionalCategoriatpl.ERPxCategoriaID = stpl.ERPxCategoriaID.Value;
                        ERPxProfissionalCategoriatpl.ERPxProfissionalID = stpl.ERPxProfissionalID.Value;
                        if (stpl.ERPxProfissionalCategoriaID.Value != null)
                            ERPxProfissionalCategoriatpl.ERPxProfissionalCategoriaID = stpl.ERPxProfissionalCategoriaID.Value;
                        ERPxProfissionalCategoriatpl.Validate(sb);
                        ctx.ERPxProfissionalCategoria.Add(ERPxProfissionalCategoriatpl);
                        if (!ERPxProfissionalCategoriatpl.IsPKEmpty)
                            ctx.Entry(ERPxProfissionalCategoriatpl).State = EntityState.Modified;
                        else
                            ctx.Entry(ERPxProfissionalCategoriatpl).State = EntityState.Added;
                        if (sb.Length > 0)
                            throw new Exception(sb.ToString());
                    }
                }

                void SetHorariosValues(DBContext ctx, HorariosTuple[] pTuples)
                {
                    if (pTuples == null)
                        return;
                    foreach (HorariosTuple stpl in pTuples)
                    {
                        var sb = new StringBuilder();
                        var ERPxProfissionalHorariotpl = new ERPxProfissionalHorario();
                        ERPxProfissionalHorariotpl.ERPxProfissionalHorarioTipoID = stpl.ERPxProfissionalHorarioTipoID.Value;
                        ERPxProfissionalHorariotpl.ERPxProfissionalID = stpl.ERPxProfissionalID.Value;
                        if (stpl.ERPxProfissionalHorarioID.Value != null)
                            ERPxProfissionalHorariotpl.ERPxProfissionalHorarioID = stpl.ERPxProfissionalHorarioID.Value;
                        ERPxProfissionalHorariotpl.Inicio = stpl.Inicio.Value;
                        ERPxProfissionalHorariotpl.Fim = stpl.Fim.Value;
                        ERPxProfissionalHorariotpl.Validate(sb);
                        ctx.ERPxProfissionalHorario.Add(ERPxProfissionalHorariotpl);
                        if (!ERPxProfissionalHorariotpl.IsPKEmpty)
                            ctx.Entry(ERPxProfissionalHorariotpl).State = EntityState.Modified;
                        else
                            ctx.Entry(ERPxProfissionalHorariotpl).State = EntityState.Added;
                        if (sb.Length > 0)
                            throw new Exception(sb.ToString());
                    }
                }
                if (sb.Length > 0)
                    throw new Exception(sb.ToString());
            }
        }
    }
}