//<auto-generated/>
using System;
using System.Linq;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using Newtonsoft.Json;
using TFX.Core.Model.Cache;
using TFX.Core.Model.Data;
using TFX.Core.Model.DIC.SVC;
using TFX.Core.Model.DIC.ORM;
using TFX.Core.Model.DIC.Types;
using TFX.Core.Model.Interfaces;
using TFX.Core.Model.Services;
using TFX.Core.Reflections;
using TFX.Core.Objects;
#if !OnlyDef
using TFX.Core.Service.Job;
using TFX.Core.Service.SVC;
#endif
using TFX.Core.Model.DIC.FRM;
using TFX.Core.Model.DIC.APP;
using TFX.Core.Model.DIC.RPT;
using Projecao.Core.ISE.DB;

namespace Projecao.Core.ISE.ReadOnly
{
    [XDASESource(@"D:\Tootega\Source\TFX20\Modules\Projecao.Core.ISE\Projecao.Core.ISE.csproj", @"D:\Tootega\Source\TFX20\Modules\Projecao.Core.ISE\ReadOnly\Marca.dssvc")]
    [XRegister(typeof(MarcaSVC), sCID)]
    public class MarcaSVC : XSVCModel
    {
        #region MarcaFilterFRM

        [XRegister(typeof(MarcaFilterFRM), sCID)]
        public class MarcaFilterFRM : XFRMModel
        {
            public const String sCID = "3587D355-E1DB-40C2-90C2-A06D1984A531";
            public static new readonly Guid gCID = new Guid(sCID);
            static MarcaFilterFRM()
            {
                gCID = new Guid(sCID);
            }
            public MarcaFilterFRM()
            {
                ID = gCID;
                Name = "MarcaFilter";
                Title = "";
                MinRows = 2;
                ConfigCID = new Guid("00000000-0000-0000-0000-000000000000");
                ConfigPKFilter = false;
                ReferenceScripts = new String[] { "TFX.Core.Service.js", "Projecao.Core.CEP.js", "Projecao.Core.ERP.js", "Projecao.Core.ISE.js" };
                Rect = new XRect(0, 0, 1237, 92);
                Style = XFRMStyle.Normal;
                ActionContext = XActionContext.All;
                AddItem(Marca);
                Marca.ForceRW = true;
                Marca.CanInsert = true;
                Marca.CanUpdate = true;
                Marca.RowCount = 2;
                Marca.ColCount = 32;
                Marca.RowCountSmall = 2;
                Marca.ColCountSmall = 32;
                Marca.IsHidden = false;
                Marca.IsHiddenSmall = false;
                Marca.AdditionalTitle = "";
                Marca.Icon = "";
                Marca.Location = 1;
                Marca.EditorCID = new Guid("F5982E79-BA45-40FB-85E1-9F2C8B90B6EF");
                Marca.Operator = XOperator.Like;
                Marca.ShowSpin = false;
                Marca.HotkeyChar = "";
                Marca.JustifyHeight = false;
                Marca.AllowEmpty = true;
                Marca.FontColor = "#000000";
                Marca.FontStyle = XFontStyle.Normal;
                Marca.ShowFooter = false;
                Marca.ViewSAM = new Guid("00000000-0000-0000-0000-000000000000");
                Marca.Order = 1;
                Marca.Scale = -1;
                Marca.Length = -1;
                Marca.SearchAction = XSearchAction.Default;
                Marca.TypeID = XString.CID;
                Marca.AdditionalFieldsID = new Guid[] {  };
                Marca.AdditionalDataFieldsID = new Guid[] {  };
                Marca.TargetFilterFieldID = new Guid[] {  };
                Marca.SourceFilterFieldID = new Guid[] {  };
                Marca.TargetDisplayFieldID = new Guid[] {  };
                Marca.SourceDisplayFieldID = new Guid[] {  };
                Marca.AutoLoad = false;
                Marca.FilterInative = true;
                Marca.IsAnswer = false;
                Marca.AllowMultiSelect = false;
            }
            public XFRMField Marca = new XFRMField(new Guid("91440A08-8F85-417B-BAA7-2ABE37F53364"), "Marca", "Marca", XString.CID, 2, 32, false, gCID, null, new Guid("DF510F30-7C20-4DE5-9BD7-9E145830999E")); // String;
            public static class Fields
            {
                public static XFieldInfo Marca = new XFieldInfo(new Guid("91440A08-8F85-417B-BAA7-2ABE37F53364"), "Marca", "Marca", typeof(String), false, "");
            }
        }

        #endregion MarcaFilterFRM

        public const String sCID = "33AA5B2B-3C57-46EA-8688-E90C1F40C052";
        public static Guid gCID = new Guid(sCID);

        #region xISExMarca 
        public class xISExMarca : XSVCTable
        {

            public static Guid gCID => new Guid("E68D33FF-ED67-48BB-AE60-EDA05603F533");

            public xISExMarca()
            {
                Name = "ISExMarca";
                Alias = "ISExMarca";
                ID = gCID;
                ParentID =  global::Projecao.Core.ISE.DB.ISEx.ISExMarca.gCID;

                Items.Add(Marca, Marca.ID);
                Marca.Owner = this;
                Marca.OwnerID = ID;
                Marca.TableName = Name;
                Marca.Alias = "Marca";
                Items.Add(ISExMarcaID, ISExMarcaID.ID);
                ISExMarcaID.Owner = this;
                ISExMarcaID.OwnerID = ID;
                ISExMarcaID.TableName = Name;
                ISExMarcaID.Alias = "ISExMarcaID";
                Items.Add(MarcaID, MarcaID.ID);
                MarcaID.Owner = this;
                MarcaID.OwnerID = ID;
                MarcaID.TableName = Name;
            }

            public static XORMField Marca = new XORMField(global::Projecao.Core.ISE.DB.ISEx.ISExMarca.Marca, new Guid("DF510F30-7C20-4DE5-9BD7-9E145830999E"), "Marca", "Marca");
            public static XORMFaceField ISExMarcaID = new XORMFaceField(global::Projecao.Core.ISE.DB.ISEx.ISExMarca.ISExMarcaID, new Guid("CAF0AD39-B7CF-45E1-8433-6C7147729381"), "ISExMarcaID", "Marca");
            public static XORMField MarcaID = new XORMField(global::Projecao.Core.ISE.DB.ISEx.ISExMarca.MarcaID, new Guid("C8EECDAF-08F0-4415-A719-71E9CC9CA343"), "MarcaID", "CÃ³digo Legado");
        }
        #endregion xISExMarca 


        public xISExMarca ISExMarca;

        public MarcaSVC()
        {
            TupleType = typeof(MarcaSVC.XTuple);
            DataSetType = typeof(MarcaSVC.XDataSet);
            ServiceRuleCID = new Guid("A85A3DC5-8D32-413D-8EDE-38C2EF7239C2");
            OnlyActives = false;
            Actions = XSVCAction.All;
            Type = XServiceType.Default;
            ID = new Guid("33AA5B2B-3C57-46EA-8688-E90C1F40C052");
            Name = "Marca";
            Title = "Marca";
            IsCacheable = false;
            CompanyControl = false;
            IsJob = false;
            AutoLoad = true;
            FreeForUsers = false;
            ServerSideNewRecord = false;
            UseDistinct = false;
            CheckTenant = true;
            JobType = XJobType.Default;
            ModuleID = new Guid("F28C7462-44A8-4233-9A88-4B89761423D3");
            Rights = new Int16[] { 1 }; 
            FilterFormID = new Guid("3587D355-E1DB-40C2-90C2-A06D1984A531");
            IsReadOnly = true;
            ReferenceScripts = new String[] { "TFX.Core.Service.js", "Projecao.Core.CEP.js", "Projecao.Core.ERP.js", "Projecao.Core.ISE.js" };
            GridFields = new Guid[] { xISExMarca.Marca.ID };
            OrderByFields = new Guid[] { xISExMarca.Marca.ID };
            DataSetFields = new Guid[] { xISExMarca.Marca.ID, xISExMarca.ISExMarcaID.ID };
            PKField = xISExMarca.ISExMarcaID.ID;
            ConfigTableID = new Guid("CDE89A60-264F-481E-B7E4-E52D93DED124");
            MasterRuleCID = new Guid("A85A3DC5-8D32-413D-8EDE-38C2EF7239C2");
            ISExMarca = new xISExMarca();
            ISExMarca.IsReadOnly = true;
            AddTable(ISExMarca);
            MasterTableID = ISExMarca.ID;
            xISExMarca.ISExMarcaID.IsReadOnly = true;
            xISExMarca.ISExMarcaID.IsDataField = true;
            xISExMarca.ISExMarcaID.AllowEmpty = true;
            xISExMarca.Marca.IsReadOnly = true;
            xISExMarca.Marca.OrderType = XOrderType.Asc;
            xISExMarca.Marca.Length = 50;
            xISExMarca.Marca.IsDataField = true;
            xISExMarca.Marca.AllowEmpty = true;
        }

        #region XFields

        public class XFields
        {
        public XORMField ISExMarcaID => xISExMarca.ISExMarcaID;
        public XORMField Marca => xISExMarca.Marca;
        }
        #endregion XFields
        #region MarcaSVC.XTuple

        public  class XTuple : XDataTuple
        {

            public XTuple()
            {
            }

            public XTuple(Object[] pSource)
                : base(pSource)
            {
            }

            public XTuple(Int32 pColCount)
               : this(new Object[pColCount])
            {
            }

            public readonly XFields Fields = new XFields();

            #nullable enable

        public Int32 ISExMarcaID
        {
            get
            {
                return (Int32)Value[MarcaSVC.xISExMarca.ISExMarcaID.ID];
            }
            set
            {
                Value[MarcaSVC.xISExMarca.ISExMarcaID.ID] = value;
            }
        }
        public Int32? oISExMarcaID
        {
            get
            {
                GetOldValue(MarcaSVC.xISExMarca.ISExMarcaID, out Object ovlr);
                return (Int32?)ovlr;
            }
        }

        public String Marca
        {
            get
            {
                return (String)Value[MarcaSVC.xISExMarca.Marca.ID];
            }
            set
            {
                Value[MarcaSVC.xISExMarca.Marca.ID] = value;
            }
        }
        public String? oMarca
        {
            get
            {
                GetOldValue(MarcaSVC.xISExMarca.Marca, out Object ovlr);
                return (String?)ovlr;
            }
        }

            #nullable disable
        }
        #endregion MarcaSVC.XTuple

        #region MarcaSVC.XDataSet

        public class XDataSet : XDataSet<MarcaSVC.XTuple>
        {
            public XDataSet()
            {
                DataSetType = typeof(MarcaSVC.XDataSet);
            }
        }

        public class XDataSet<T> : XServiceDataSet<MarcaSVC.XTuple> where T : XDataTuple
        {

            public class xFLDs{
                public Guid ISExMarcaID => MarcaSVC.xISExMarca.ISExMarcaID.ID;
                public Guid Marca => MarcaSVC.xISExMarca.Marca.ID;
            }

            public xFLDs FLDs = new xFLDs();

            public XDataSet()
            {
                DataSetType = typeof(MarcaSVC.XDataSet);
            }

        }
        #endregion MarcaSVC.XDataSet
        #if !OnlyDef
        #region MarcaSVC.XRule
        public abstract class XRule : XServiceRule<MarcaSVC.XDataSet, MarcaSVC, MarcaSVC.XTuple>
        {
        }
        #endregion MarcaSVC.XRule

        [Guid(MarcaSVC.sCID)]
        public  interface XService : XIBaseService
        {
            new XDataSet DataSet
            {
                get;
            }
            new XTuple NewTuple(Object pPKValue = null);
             IEnumerable<XTuple> Tuples
            {
                get;
            }
             XTuple Current
            {
                get;
            }
            new XDataSet Get(XServiceData pData);
             XDataSet Get(params Object[] pWhere);
        }
        [XRegister(typeof(_Service), _Service.sCID, typeof(MarcaSVC))]
        protected class _Service : Service<MarcaSVC, XDataSet, XTuple>
        {
            public const String sCID = "9CF5F89D-FC25-4945-B9BC-731C0C509A29";
            public Guid gCID = new Guid(sCID);
        }

        public class Service<TModel, TDataSet, TTuple> : XBaseService<MarcaSVC, XDataSet, XTuple>, XService
             where TModel : MarcaSVC, new()
             where TDataSet : XDataSet, new()
             where TTuple : XTuple
        {
            XDataSet XService.DataSet => (XDataSet)DataSet;
            XTuple XService.NewTuple(Object pPKValue)
            {
                return (XTuple)NewTuple(pPKValue);
            }
            public new XDataTuple NewTuple(Object pPKValue = null)
            {
                return (XTuple)base.NewTuple(pPKValue);
            }
            IEnumerable<XTuple> XService.Tuples => (IEnumerable<XTuple>)Tuples;
            XTuple XService.Current => (XTuple )Current;
            XDataSet XService.Get(XServiceData pData)
            {
                return (XDataSet)Get(pData);
            }
            XDataSet XService.Get(params Object[] pWhere)
            {
                return (XDataSet)Get(pWhere);
            }
            public Service()
            {
                ID = gCID;
            }
        }
        #endif
    }

}