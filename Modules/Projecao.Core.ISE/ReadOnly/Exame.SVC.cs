//<auto-generated/>
using System;
using System.Linq;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using Newtonsoft.Json;
using TFX.Core.Model.Cache;
using TFX.Core.Model.Data;
using TFX.Core.Model.DIC.SVC;
using TFX.Core.Model.DIC.ORM;
using TFX.Core.Model.DIC.Types;
using TFX.Core.Model.Interfaces;
using TFX.Core.Model.Services;
using TFX.Core.Reflections;
using TFX.Core.Objects;
#if !OnlyDef
using TFX.Core.Service.Job;
using TFX.Core.Service.SVC;
#endif
using TFX.Core.Model.DIC.FRM;
using TFX.Core.Model.DIC.APP;
using TFX.Core.Model.DIC.RPT;
using Projecao.Core.ISE.DB;

namespace Projecao.Core.ISE.ReadOnly
{
    [XDASESource(@"D:\Tootega\Source\TFX20\Modules\Projecao.Core.ISE\Projecao.Core.ISE.csproj", @"D:\Tootega\Source\TFX20\Modules\Projecao.Core.ISE\ReadOnly\Exame.dssvc")]
    [XRegister(typeof(ExameSVC), sCID)]
    public class ExameSVC : XSVCModel
    {
        #region ExameFilterFRM

        [XRegister(typeof(ExameFilterFRM), sCID)]
        public class ExameFilterFRM : XFRMModel
        {
            public const String sCID = "9C3D7CB7-C670-41BA-823F-95608C33C8D8";
            public static new readonly Guid gCID = new Guid(sCID);
            static ExameFilterFRM()
            {
                gCID = new Guid(sCID);
            }
            public ExameFilterFRM()
            {
                ID = gCID;
                Name = "ExameFilter";
                Title = "";
                MinRows = 2;
                ConfigCID = new Guid("00000000-0000-0000-0000-000000000000");
                ConfigPKFilter = false;
                ReferenceScripts = new String[] { "TFX.Core.Service.js", "Projecao.Core.CEP.js", "Projecao.Core.ERP.js", "Projecao.Core.ISE.js" };
                Rect = new XRect(20, 20, 1244, 696);
                Style = XFRMStyle.Normal;
                ActionContext = XActionContext.All;
                AddItem(Nome);
                Nome.ForceRW = true;
                Nome.CanInsert = true;
                Nome.CanUpdate = true;
                Nome.RowCount = 2;
                Nome.ColCount = 32;
                Nome.RowCountSmall = 2;
                Nome.ColCountSmall = 32;
                Nome.IsHidden = false;
                Nome.IsHiddenSmall = false;
                Nome.AdditionalTitle = "";
                Nome.Icon = "";
                Nome.Location = 1;
                Nome.EditorCID = new Guid("AA2A0DB9-2C59-4833-994D-3DBF2AA0CB3C");
                Nome.Operator = XOperator.Like;
                Nome.ShowSpin = false;
                Nome.HotkeyChar = "";
                Nome.JustifyHeight = false;
                Nome.AllowEmpty = true;
                Nome.FontColor = "#000000";
                Nome.FontStyle = XFontStyle.Normal;
                Nome.ShowFooter = false;
                Nome.ViewSAM = new Guid("00000000-0000-0000-0000-000000000000");
                Nome.Order = 1;
                Nome.Scale = -1;
                Nome.Length = -1;
                Nome.SearchAction = XSearchAction.Default;
                Nome.TypeID = XString.CID;
                Nome.AdditionalFieldsID = new Guid[] {  };
                Nome.AdditionalDataFieldsID = new Guid[] {  };
                Nome.TargetFilterFieldID = new Guid[] {  };
                Nome.SourceFilterFieldID = new Guid[] {  };
                Nome.TargetDisplayFieldID = new Guid[] {  };
                Nome.SourceDisplayFieldID = new Guid[] {  };
                Nome.AutoLoad = false;
                Nome.FilterInative = true;
                Nome.IsAnswer = false;
                Nome.AllowMultiSelect = false;
            }
            public XFRMField Nome = new XFRMField(new Guid("C1166D6D-9EEE-41A7-8D4F-2BF6168C1700"), "Nome", "Pesquisar Exame", XString.CID, 2, 32, false, gCID, null, new Guid("71FDC39B-B608-4A19-B7BF-686CC64B40A6")); // String;
            public static class Fields
            {
                public static XFieldInfo Nome = new XFieldInfo(new Guid("C1166D6D-9EEE-41A7-8D4F-2BF6168C1700"), "Nome", "Pesquisar Exame", typeof(String), false, "");
            }
        }

        #endregion ExameFilterFRM

        public const String sCID = "F6F12A1C-06F5-49A4-8496-1C2FF8EB9DEC";
        public static Guid gCID = new Guid(sCID);
        public static XSVCReference ISExExame_ISExExameID_ISExItem_ISExItemID; // ISExExame.ISExExameID --> ISExItem.ISExItemID

        #region xISExExame 
        public class xISExExame : XSVCTable
        {

            public static Guid gCID => new Guid("565B72C8-2F7B-4B00-85DE-7313418197A0");

            public xISExExame()
            {
                Name = "ISExExame";
                Alias = "ISExExame";
                ID = gCID;
                ParentID =  global::Projecao.Core.ISE.DB.ISEx.ISExExame.gCID;

                Items.Add(ISExExameID, ISExExameID.ID);
                ISExExameID.Owner = this;
                ISExExameID.OwnerID = ID;
                ISExExameID.TableName = Name;
                ISExExameID.Alias = "ISExExameID";
            }

            public static XORMPKField ISExExameID = new XORMPKField(global::Projecao.Core.ISE.DB.ISEx.ISExExame.ISExExameID, new Guid("C2BA18B6-22D4-4A79-AD0A-55AAFF4F1C87"), "ISExExameID", "Exames");
        }
        #endregion xISExExame 


        #region xISExItem 
        public class xISExItem : XSVCTable
        {

            public static Guid gCID => new Guid("FC18A277-9CA8-4E19-8B34-FAA6EBD8592C");

            public xISExItem()
            {
                Name = "ISExItem";
                Alias = "ISExItem";
                ID = gCID;
                ParentID =  global::Projecao.Core.ISE.DB.ISEx.ISExItem.gCID;

                Items.Add(ISExLinhaID, ISExLinhaID.ID);
                ISExLinhaID.Owner = this;
                ISExLinhaID.OwnerID = ID;
                ISExLinhaID.TableName = Name;
                Items.Add(ISExTabelaID, ISExTabelaID.ID);
                ISExTabelaID.Owner = this;
                ISExTabelaID.OwnerID = ID;
                ISExTabelaID.TableName = Name;
                Items.Add(ISExItemID, ISExItemID.ID);
                ISExItemID.Owner = this;
                ISExItemID.OwnerID = ID;
                ISExItemID.TableName = Name;
                Items.Add(ISExFabricanteID, ISExFabricanteID.ID);
                ISExFabricanteID.Owner = this;
                ISExFabricanteID.OwnerID = ID;
                ISExFabricanteID.TableName = Name;
                Items.Add(ISExMarcaID, ISExMarcaID.ID);
                ISExMarcaID.Owner = this;
                ISExMarcaID.OwnerID = ID;
                ISExMarcaID.TableName = Name;
                Items.Add(ISExGrupoID, ISExGrupoID.ID);
                ISExGrupoID.Owner = this;
                ISExGrupoID.OwnerID = ID;
                ISExGrupoID.TableName = Name;
                Items.Add(Nome, Nome.ID);
                Nome.Owner = this;
                Nome.OwnerID = ID;
                Nome.TableName = Name;
                Nome.Alias = "Nome";
                Items.Add(SYSxEstadoID, SYSxEstadoID.ID);
                SYSxEstadoID.Owner = this;
                SYSxEstadoID.OwnerID = ID;
                SYSxEstadoID.TableName = Name;
                SYSxEstadoID.Alias = "SYSxEstadoID";
                Items.Add(ProdutoID, ProdutoID.ID);
                ProdutoID.Owner = this;
                ProdutoID.OwnerID = ID;
                ProdutoID.TableName = Name;
            }

            public static XORMFKField ISExLinhaID = new XORMFKField(global::Projecao.Core.ISE.DB.ISEx.ISExItem.ISExLinhaID, new Guid("532DC4EC-F307-42F6-A606-23883EAC4FFF"), "ISExLinhaID", "Linha");
            public static XORMFKField ISExTabelaID = new XORMFKField(global::Projecao.Core.ISE.DB.ISEx.ISExItem.ISExTabelaID, new Guid("2405EB55-7E40-4D5E-881C-C09D354C20A0"), "ISExTabelaID", "Tabela");
            public static XORMFaceField ISExItemID = new XORMFaceField(global::Projecao.Core.ISE.DB.ISEx.ISExItem.ISExItemID, new Guid("4A8E94BB-4AC2-4D5D-A7CA-34A57574FF17"), "ISExItemID", "Item de Estoque");
            public static XORMFKField ISExFabricanteID = new XORMFKField(global::Projecao.Core.ISE.DB.ISEx.ISExItem.ISExFabricanteID, new Guid("37DF5971-DA59-49C0-BE21-F7FCC11E923C"), "ISExFabricanteID", "Fabricante");
            public static XORMFKField ISExMarcaID = new XORMFKField(global::Projecao.Core.ISE.DB.ISEx.ISExItem.ISExMarcaID, new Guid("888027F0-32A7-41E5-8234-E7FC298D38A9"), "ISExMarcaID", "Marca");
            public static XORMFKField ISExGrupoID = new XORMFKField(global::Projecao.Core.ISE.DB.ISEx.ISExItem.ISExGrupoID, new Guid("31CBCD8C-53DF-4512-A7C9-35B5D7589617"), "ISExGrupoID", "Grupo");
            public static XORMField Nome = new XORMField(global::Projecao.Core.ISE.DB.ISEx.ISExItem.Nome, new Guid("71FDC39B-B608-4A19-B7BF-686CC64B40A6"), "Nome", "Nome");
            public static XORMStateField SYSxEstadoID = new XORMStateField(global::Projecao.Core.ISE.DB.ISEx.ISExItem.SYSxEstadoID, new Guid("D35062F5-E22D-40BB-86C7-DED4250C6AE3"), "SYSxEstadoID", "Estado");
            public static XORMField ProdutoID = new XORMField(global::Projecao.Core.ISE.DB.ISEx.ISExItem.ProdutoID, new Guid("FB4E89C5-0E27-44A3-B398-47212E1DF36D"), "ProdutoID", "CÃ³digo Legado");
        }
        #endregion xISExItem 


        public xISExExame ISExExame;
        public xISExItem ISExItem;
        public static readonly XORMParameterField Valor = new XORMParameterField(new Guid("79A69398-D9BA-42FC-87B4-6FF73F3B592F"), "Valor", "Valor de Tabela", XDecimal.CID, 25, 2, false, gCID, null);

        public ExameSVC()
        {
            TupleType = typeof(ExameSVC.XTuple);
            DataSetType = typeof(ExameSVC.XDataSet);
            ServiceRuleCID = new Guid("6B2B148C-8E5A-462B-B3A1-D5B1FA9C229F");
            OnlyActives = true;
            Actions = XSVCAction.All;
            Type = XServiceType.Default;
            ID = new Guid("F6F12A1C-06F5-49A4-8496-1C2FF8EB9DEC");
            Name = "Exame";
            Title = "Exame";
            IsCacheable = false;
            CompanyControl = false;
            IsJob = false;
            AutoLoad = true;
            FreeForUsers = false;
            ServerSideNewRecord = false;
            UseDistinct = false;
            CheckTenant = true;
            JobType = XJobType.Default;
            ModuleID = new Guid("F28C7462-44A8-4233-9A88-4B89761423D3");
            Rights = new Int16[] { 1, 2, 3, 4, 5, 6, 7 }; 
            FilterFormID = new Guid("9C3D7CB7-C670-41BA-823F-95608C33C8D8");
            IsReadOnly = false;
            ReferenceScripts = new String[] { "TFX.Core.Service.js", "Projecao.Core.CEP.js", "Projecao.Core.ERP.js", "Projecao.Core.ISE.js" };
            GridFields = new Guid[] { xISExItem.Nome.ID, Valor.ID };
            OrderByFields = new Guid[] { xISExItem.Nome.ID };
            DataSetFields = new Guid[] { Valor.ID, xISExExame.ISExExameID.ID, xISExItem.Nome.ID, xISExItem.SYSxEstadoID.ID };
            PKField = xISExExame.ISExExameID.ID;
            ConfigTableID = new Guid("595ACC56-167F-4F55-A641-CDCEA3EF9F16");
            StateField = xISExItem.SYSxEstadoID.ID;
            MasterRuleCID = new Guid("6B2B148C-8E5A-462B-B3A1-D5B1FA9C229F");
            ISExExame = new xISExExame();
            ISExExame.IsReadOnly = true;
            AddTable(ISExExame);
            ISExItem = new xISExItem();
            ISExItem.IsReadOnly = true;
            AddTable(ISExItem);
            MasterTableID = ISExItem.ID;
            ISExExame_ISExExameID_ISExItem_ISExItemID = AddReference(new XSVCReference(new Guid("B9B5D2B4-C196-434F-AD3A-8C1CF23E8AD8"), "FK_B9B5D2B4C196434FAD3A8C1CF23E8AD8", ExameSVC.xISExExame.gCID, xISExExame.ISExExameID.ID, ExameSVC.xISExItem.gCID, xISExItem.ISExItemID.ID, XJoinType.Inner)); // ISExExame.ISExExameID --> ISExItem.ISExItemID
            AddField(Valor);
            Valor.IsParam = true;
            xISExExame.ISExExameID.IsReadOnly = true;
            xISExExame.ISExExameID.IsDataField = true;
            xISExExame.ISExExameID.AllowEmpty = true;
            xISExItem.Nome.IsReadOnly = true;
            xISExItem.Nome.OrderType = XOrderType.Asc;
            xISExItem.Nome.Length = 60;
            xISExItem.Nome.IsDataField = true;
            xISExItem.Nome.FilterUse = true;
            xISExItem.Nome.AllowEmpty = true;
            xISExItem.SYSxEstadoID.IsReadOnly = true;
            xISExItem.SYSxEstadoID.IsDataField = true;
            xISExItem.SYSxEstadoID.AllowEmpty = true;
            Valor.IsReadOnly = false;
            Valor.Length = 25;
            Valor.Scale = 2;
            Valor.IsDataField = true;
            Valor.AllowEmpty = true;
            xISExItem.SYSxEstadoID.DefaultValue = (Int16)1;
        }

        #region XFields

        public class XFields
        {
        public XORMField ISExExameID => xISExExame.ISExExameID;
        public XORMField Nome => xISExItem.Nome;
        public XORMField SYSxEstadoID => xISExItem.SYSxEstadoID;
        public XORMField Valor => ExameSVC.Valor;
        }
        #endregion XFields
        #region ExameSVC.XTuple

        public  class XTuple : XDataTuple
        {

            public XTuple()
            {
            }

            public XTuple(Object[] pSource)
                : base(pSource)
            {
            }

            public XTuple(Int32 pColCount)
               : this(new Object[pColCount])
            {
            }

            public readonly XFields Fields = new XFields();

            #nullable enable

        public Guid ISExExameID
        {
            get
            {
                return (Guid)Value[ExameSVC.xISExExame.ISExExameID.ID];
            }
            set
            {
                Value[ExameSVC.xISExExame.ISExExameID.ID] = value;
            }
        }
        public Guid? oISExExameID
        {
            get
            {
                GetOldValue(ExameSVC.xISExExame.ISExExameID, out Object ovlr);
                return (Guid?)ovlr;
            }
        }

        public String Nome
        {
            get
            {
                return (String)Value[ExameSVC.xISExItem.Nome.ID];
            }
            set
            {
                Value[ExameSVC.xISExItem.Nome.ID] = value;
            }
        }
        public String? oNome
        {
            get
            {
                GetOldValue(ExameSVC.xISExItem.Nome, out Object ovlr);
                return (String?)ovlr;
            }
        }

        public Int16 SYSxEstadoID
        {
            get
            {
                return (Int16)Value[ExameSVC.xISExItem.SYSxEstadoID.ID];
            }
            set
            {
                Value[ExameSVC.xISExItem.SYSxEstadoID.ID] = value;
            }
        }
        public Int16? oSYSxEstadoID
        {
            get
            {
                GetOldValue(ExameSVC.xISExItem.SYSxEstadoID, out Object ovlr);
                return (Int16?)ovlr;
            }
        }

        public Decimal Valor
        {
            get
            {
                return (Decimal)Value[ExameSVC.Valor.ID];
            }
            set
            {
                Value[ExameSVC.Valor.ID] = value;
            }
        }
        public Decimal? oValor
        {
            get
            {
                GetOldValue(ExameSVC.Valor, out Object ovlr);
                return (Decimal?)ovlr;
            }
        }

            #nullable disable
        }
        #endregion ExameSVC.XTuple

        #region ExameSVC.XDataSet

        public class XDataSet : XDataSet<ExameSVC.XTuple>
        {
            public XDataSet()
            {
                DataSetType = typeof(ExameSVC.XDataSet);
            }
        }

        public class XDataSet<T> : XServiceDataSet<ExameSVC.XTuple> where T : XDataTuple
        {

            public class xFLDs{
                public Guid ISExExameID => ExameSVC.xISExExame.ISExExameID.ID;
                public Guid Nome => ExameSVC.xISExItem.Nome.ID;
                public Guid SYSxEstadoID => ExameSVC.xISExItem.SYSxEstadoID.ID;
                public Guid Valor => ExameSVC.Valor.ID;
            }

            public xFLDs FLDs = new xFLDs();

            public XDataSet()
            {
                DataSetType = typeof(ExameSVC.XDataSet);
            }

        }
        #endregion ExameSVC.XDataSet
        #if !OnlyDef
        #region ExameSVC.XRule
        public abstract class XRule : XServiceRule<ExameSVC.XDataSet, ExameSVC, ExameSVC.XTuple>
        {
        }
        #endregion ExameSVC.XRule

        [Guid(ExameSVC.sCID)]
        public  interface XService : XIBaseService
        {
            new XDataSet DataSet
            {
                get;
            }
            new XTuple NewTuple(Object pPKValue = null);
             IEnumerable<XTuple> Tuples
            {
                get;
            }
             XTuple Current
            {
                get;
            }
            new XDataSet Get(XServiceData pData);
             XDataSet Get(params Object[] pWhere);
        }
        [XRegister(typeof(_Service), _Service.sCID, typeof(ExameSVC))]
        protected class _Service : Service<ExameSVC, XDataSet, XTuple>
        {
            public const String sCID = "715000D0-9DBB-4977-B080-C9EE4317288A";
            public Guid gCID = new Guid(sCID);
        }

        public class Service<TModel, TDataSet, TTuple> : XBaseService<ExameSVC, XDataSet, XTuple>, XService
             where TModel : ExameSVC, new()
             where TDataSet : XDataSet, new()
             where TTuple : XTuple
        {
            XDataSet XService.DataSet => (XDataSet)DataSet;
            XTuple XService.NewTuple(Object pPKValue)
            {
                return (XTuple)NewTuple(pPKValue);
            }
            public new XDataTuple NewTuple(Object pPKValue = null)
            {
                return (XTuple)base.NewTuple(pPKValue);
            }
            IEnumerable<XTuple> XService.Tuples => (IEnumerable<XTuple>)Tuples;
            XTuple XService.Current => (XTuple )Current;
            XDataSet XService.Get(XServiceData pData)
            {
                return (XDataSet)Get(pData);
            }
            XDataSet XService.Get(params Object[] pWhere)
            {
                return (XDataSet)Get(pWhere);
            }
            public Service()
            {
                ID = gCID;
            }
        }
        #endif
    }

}