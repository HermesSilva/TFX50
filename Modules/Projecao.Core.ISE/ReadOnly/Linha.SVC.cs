//<auto-generated/>
using System;
using System.Linq;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using Newtonsoft.Json;
using TFX.Core.Model.Cache;
using TFX.Core.Model.Data;
using TFX.Core.Model.DIC.SVC;
using TFX.Core.Model.DIC.ORM;
using TFX.Core.Model.DIC.Types;
using TFX.Core.Model.Interfaces;
using TFX.Core.Model.Services;
using TFX.Core.Reflections;
using TFX.Core.Objects;
#if !OnlyDef
using TFX.Core.Service.Job;
using TFX.Core.Service.SVC;
#endif
using TFX.Core.Model.DIC.FRM;
using TFX.Core.Model.DIC.APP;
using TFX.Core.Model.DIC.RPT;
using Projecao.Core.ISE.DB;

namespace Projecao.Core.ISE.ReadOnly
{
    [XDASESource(@"D:\Tootega\Source\TFX20\Modules\Projecao.Core.ISE\Projecao.Core.ISE.csproj", @"D:\Tootega\Source\TFX20\Modules\Projecao.Core.ISE\ReadOnly\Linha.dssvc")]
    [XRegister(typeof(LinhaSVC), sCID)]
    public class LinhaSVC : XSVCModel
    {
        #region LinhaFilterFRM

        [XRegister(typeof(LinhaFilterFRM), sCID)]
        public class LinhaFilterFRM : XFRMModel
        {
            public const String sCID = "F7A270FE-2DE3-4BC8-A130-8A32E06E72D8";
            public static new readonly Guid gCID = new Guid(sCID);
            static LinhaFilterFRM()
            {
                gCID = new Guid(sCID);
            }
            public LinhaFilterFRM()
            {
                ID = gCID;
                Name = "LinhaFilter";
                Title = "";
                MinRows = 2;
                ConfigCID = new Guid("00000000-0000-0000-0000-000000000000");
                ConfigPKFilter = false;
                ReferenceScripts = new String[] { "TFX.Core.Service.js", "Projecao.Core.CEP.js", "Projecao.Core.ERP.js", "Projecao.Core.ISE.js" };
                Rect = new XRect(0, 0, 1237, 92);
                Style = XFRMStyle.Normal;
                ActionContext = XActionContext.All;
                AddItem(Linha);
                Linha.ForceRW = true;
                Linha.CanInsert = true;
                Linha.CanUpdate = true;
                Linha.RowCount = 2;
                Linha.ColCount = 32;
                Linha.RowCountSmall = 2;
                Linha.ColCountSmall = 32;
                Linha.IsHidden = false;
                Linha.IsHiddenSmall = false;
                Linha.AdditionalTitle = "";
                Linha.Icon = "";
                Linha.Location = 1;
                Linha.EditorCID = new Guid("F5982E79-BA45-40FB-85E1-9F2C8B90B6EF");
                Linha.Operator = XOperator.Like;
                Linha.ShowSpin = false;
                Linha.HotkeyChar = "";
                Linha.JustifyHeight = false;
                Linha.AllowEmpty = true;
                Linha.FontColor = "#000000";
                Linha.FontStyle = XFontStyle.Normal;
                Linha.ShowFooter = false;
                Linha.ViewSAM = new Guid("00000000-0000-0000-0000-000000000000");
                Linha.Order = 1;
                Linha.Scale = -1;
                Linha.Length = -1;
                Linha.SearchAction = XSearchAction.Default;
                Linha.TypeID = XString.CID;
                Linha.AdditionalFieldsID = new Guid[] {  };
                Linha.AdditionalDataFieldsID = new Guid[] {  };
                Linha.TargetFilterFieldID = new Guid[] {  };
                Linha.SourceFilterFieldID = new Guid[] {  };
                Linha.TargetDisplayFieldID = new Guid[] {  };
                Linha.SourceDisplayFieldID = new Guid[] {  };
                Linha.AutoLoad = false;
                Linha.FilterInative = true;
                Linha.IsAnswer = false;
                Linha.AllowMultiSelect = false;
            }
            public XFRMField Linha = new XFRMField(new Guid("4A95BEEE-12F7-4545-B43B-03E64D2CA929"), "Linha", "Linha", XString.CID, 2, 32, false, gCID, null, new Guid("DF0AB9F8-4D9A-4ABA-A7F1-EE0738ACA212")); // String;
            public static class Fields
            {
                public static XFieldInfo Linha = new XFieldInfo(new Guid("4A95BEEE-12F7-4545-B43B-03E64D2CA929"), "Linha", "Linha", typeof(String), false, "");
            }
        }

        #endregion LinhaFilterFRM

        public const String sCID = "2F0E2CA2-F2A7-4908-ACBE-7C85B5B84620";
        public static Guid gCID = new Guid(sCID);

        #region xISExLinha 
        public class xISExLinha : XSVCTable
        {

            public static Guid gCID => new Guid("2CB09A27-0FB7-4B43-92D9-738FF7D1B602");

            public xISExLinha()
            {
                Name = "ISExLinha";
                Alias = "ISExLinha";
                ID = gCID;
                ParentID =  global::Projecao.Core.ISE.DB.ISEx.ISExLinha.gCID;

                Items.Add(Linha, Linha.ID);
                Linha.Owner = this;
                Linha.OwnerID = ID;
                Linha.TableName = Name;
                Linha.Alias = "Linha";
                Items.Add(ISExLinhaID, ISExLinhaID.ID);
                ISExLinhaID.Owner = this;
                ISExLinhaID.OwnerID = ID;
                ISExLinhaID.TableName = Name;
                ISExLinhaID.Alias = "ISExLinhaID";
                Items.Add(LinhaID, LinhaID.ID);
                LinhaID.Owner = this;
                LinhaID.OwnerID = ID;
                LinhaID.TableName = Name;
            }

            public static XORMField Linha = new XORMField(global::Projecao.Core.ISE.DB.ISEx.ISExLinha.Linha, new Guid("DF0AB9F8-4D9A-4ABA-A7F1-EE0738ACA212"), "Linha", "Linha");
            public static XORMFaceField ISExLinhaID = new XORMFaceField(global::Projecao.Core.ISE.DB.ISEx.ISExLinha.ISExLinhaID, new Guid("22A7EE37-9623-423A-80CF-D9736CB7EF71"), "ISExLinhaID", "Linha");
            public static XORMField LinhaID = new XORMField(global::Projecao.Core.ISE.DB.ISEx.ISExLinha.LinhaID, new Guid("C10D2E70-702A-489F-A20A-4D2300E046AD"), "LinhaID", "CÃ³digo Legado");
        }
        #endregion xISExLinha 


        public xISExLinha ISExLinha;

        public LinhaSVC()
        {
            TupleType = typeof(LinhaSVC.XTuple);
            DataSetType = typeof(LinhaSVC.XDataSet);
            ServiceRuleCID = new Guid("38B5F0FC-C934-4D68-9DCA-2C384A15D476");
            OnlyActives = false;
            Actions = XSVCAction.All;
            Type = XServiceType.Default;
            ID = new Guid("2F0E2CA2-F2A7-4908-ACBE-7C85B5B84620");
            Name = "Linha";
            Title = "Linha";
            IsCacheable = false;
            CompanyControl = false;
            IsJob = false;
            AutoLoad = true;
            FreeForUsers = false;
            ServerSideNewRecord = false;
            UseDistinct = false;
            CheckTenant = true;
            JobType = XJobType.Default;
            ModuleID = new Guid("F28C7462-44A8-4233-9A88-4B89761423D3");
            Rights = new Int16[] { 1 }; 
            FilterFormID = new Guid("F7A270FE-2DE3-4BC8-A130-8A32E06E72D8");
            IsReadOnly = true;
            ReferenceScripts = new String[] { "TFX.Core.Service.js", "Projecao.Core.CEP.js", "Projecao.Core.ERP.js", "Projecao.Core.ISE.js" };
            GridFields = new Guid[] { xISExLinha.Linha.ID };
            OrderByFields = new Guid[] { xISExLinha.Linha.ID };
            DataSetFields = new Guid[] { xISExLinha.Linha.ID, xISExLinha.ISExLinhaID.ID };
            PKField = xISExLinha.ISExLinhaID.ID;
            ConfigTableID = new Guid("E9411661-357F-480D-98CE-37287483B55B");
            MasterRuleCID = new Guid("38B5F0FC-C934-4D68-9DCA-2C384A15D476");
            ISExLinha = new xISExLinha();
            ISExLinha.IsReadOnly = true;
            AddTable(ISExLinha);
            MasterTableID = ISExLinha.ID;
            xISExLinha.ISExLinhaID.IsReadOnly = true;
            xISExLinha.ISExLinhaID.IsDataField = true;
            xISExLinha.ISExLinhaID.AllowEmpty = true;
            xISExLinha.Linha.IsReadOnly = true;
            xISExLinha.Linha.OrderType = XOrderType.Asc;
            xISExLinha.Linha.Length = 40;
            xISExLinha.Linha.IsDataField = true;
            xISExLinha.Linha.AllowEmpty = true;
        }

        #region XFields

        public class XFields
        {
        public XORMField ISExLinhaID => xISExLinha.ISExLinhaID;
        public XORMField Linha => xISExLinha.Linha;
        }
        #endregion XFields
        #region LinhaSVC.XTuple

        public  class XTuple : XDataTuple
        {

            public XTuple()
            {
            }

            public XTuple(Object[] pSource)
                : base(pSource)
            {
            }

            public XTuple(Int32 pColCount)
               : this(new Object[pColCount])
            {
            }

            public readonly XFields Fields = new XFields();

            #nullable enable

        public Int32 ISExLinhaID
        {
            get
            {
                return (Int32)Value[LinhaSVC.xISExLinha.ISExLinhaID.ID];
            }
            set
            {
                Value[LinhaSVC.xISExLinha.ISExLinhaID.ID] = value;
            }
        }
        public Int32? oISExLinhaID
        {
            get
            {
                GetOldValue(LinhaSVC.xISExLinha.ISExLinhaID, out Object ovlr);
                return (Int32?)ovlr;
            }
        }

        public String Linha
        {
            get
            {
                return (String)Value[LinhaSVC.xISExLinha.Linha.ID];
            }
            set
            {
                Value[LinhaSVC.xISExLinha.Linha.ID] = value;
            }
        }
        public String? oLinha
        {
            get
            {
                GetOldValue(LinhaSVC.xISExLinha.Linha, out Object ovlr);
                return (String?)ovlr;
            }
        }

            #nullable disable
        }
        #endregion LinhaSVC.XTuple

        #region LinhaSVC.XDataSet

        public class XDataSet : XDataSet<LinhaSVC.XTuple>
        {
            public XDataSet()
            {
                DataSetType = typeof(LinhaSVC.XDataSet);
            }
        }

        public class XDataSet<T> : XServiceDataSet<LinhaSVC.XTuple> where T : XDataTuple
        {

            public class xFLDs{
                public Guid ISExLinhaID => LinhaSVC.xISExLinha.ISExLinhaID.ID;
                public Guid Linha => LinhaSVC.xISExLinha.Linha.ID;
            }

            public xFLDs FLDs = new xFLDs();

            public XDataSet()
            {
                DataSetType = typeof(LinhaSVC.XDataSet);
            }

        }
        #endregion LinhaSVC.XDataSet
        #if !OnlyDef
        #region LinhaSVC.XRule
        public abstract class XRule : XServiceRule<LinhaSVC.XDataSet, LinhaSVC, LinhaSVC.XTuple>
        {
        }
        #endregion LinhaSVC.XRule

        [Guid(LinhaSVC.sCID)]
        public  interface XService : XIBaseService
        {
            new XDataSet DataSet
            {
                get;
            }
            new XTuple NewTuple(Object pPKValue = null);
             IEnumerable<XTuple> Tuples
            {
                get;
            }
             XTuple Current
            {
                get;
            }
            new XDataSet Get(XServiceData pData);
             XDataSet Get(params Object[] pWhere);
        }
        [XRegister(typeof(_Service), _Service.sCID, typeof(LinhaSVC))]
        protected class _Service : Service<LinhaSVC, XDataSet, XTuple>
        {
            public const String sCID = "71D17375-0D98-4AAF-A33A-A3F73DA8B0A4";
            public Guid gCID = new Guid(sCID);
        }

        public class Service<TModel, TDataSet, TTuple> : XBaseService<LinhaSVC, XDataSet, XTuple>, XService
             where TModel : LinhaSVC, new()
             where TDataSet : XDataSet, new()
             where TTuple : XTuple
        {
            XDataSet XService.DataSet => (XDataSet)DataSet;
            XTuple XService.NewTuple(Object pPKValue)
            {
                return (XTuple)NewTuple(pPKValue);
            }
            public new XDataTuple NewTuple(Object pPKValue = null)
            {
                return (XTuple)base.NewTuple(pPKValue);
            }
            IEnumerable<XTuple> XService.Tuples => (IEnumerable<XTuple>)Tuples;
            XTuple XService.Current => (XTuple )Current;
            XDataSet XService.Get(XServiceData pData)
            {
                return (XDataSet)Get(pData);
            }
            XDataSet XService.Get(params Object[] pWhere)
            {
                return (XDataSet)Get(pWhere);
            }
            public Service()
            {
                ID = gCID;
            }
        }
        #endif
    }

}