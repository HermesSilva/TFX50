//<auto-generated/>
using System;
using System.Linq;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using Newtonsoft.Json;
using TFX.Core.Model.Cache;
using TFX.Core.Model.Data;
using TFX.Core.Model.DIC.SVC;
using TFX.Core.Model.DIC.ORM;
using TFX.Core.Model.DIC.Types;
using TFX.Core.Model.Interfaces;
using TFX.Core.Model.Services;
using TFX.Core.Reflections;
using TFX.Core.Objects;
#if !OnlyDef
using TFX.Core.Service.Job;
using TFX.Core.Service.SVC;
#endif
using TFX.Core.Model.DIC.FRM;
using TFX.Core.Model.DIC.APP;
using TFX.Core.Model.DIC.RPT;
using Projecao.Core.ISE.DB;

namespace Projecao.Core.ISE.ReadOnly
{
    [XDASESource(@"D:\Tootega\Source\TFX20\Modules\Projecao.Core.ISE\Projecao.Core.ISE.csproj", @"D:\Tootega\Source\TFX20\Modules\Projecao.Core.ISE\ReadOnly\Grupo.dssvc")]
    [XRegister(typeof(GrupoSVC), sCID)]
    public class GrupoSVC : XSVCModel
    {
        #region GrupoFilterFRM

        [XRegister(typeof(GrupoFilterFRM), sCID)]
        public class GrupoFilterFRM : XFRMModel
        {
            public const String sCID = "F254B60F-94D7-42D6-8F76-71167C534D0E";
            public static new readonly Guid gCID = new Guid(sCID);
            static GrupoFilterFRM()
            {
                gCID = new Guid(sCID);
            }
            public GrupoFilterFRM()
            {
                ID = gCID;
                Name = "GrupoFilter";
                Title = "";
                MinRows = 2;
                ConfigCID = new Guid("00000000-0000-0000-0000-000000000000");
                ConfigPKFilter = false;
                ReferenceScripts = new String[] { "TFX.Core.Service.js", "Projecao.Core.CEP.js", "Projecao.Core.ERP.js", "Projecao.Core.ISE.js" };
                Rect = new XRect(20, 20, 1018, 696);
                Style = XFRMStyle.Normal;
                ActionContext = XActionContext.All;
                AddItem(Grupo);
                Grupo.ForceRW = true;
                Grupo.CanInsert = true;
                Grupo.CanUpdate = true;
                Grupo.RowCount = 2;
                Grupo.ColCount = 32;
                Grupo.RowCountSmall = 2;
                Grupo.ColCountSmall = 32;
                Grupo.IsHidden = false;
                Grupo.IsHiddenSmall = false;
                Grupo.AdditionalTitle = "";
                Grupo.Icon = "";
                Grupo.Location = 1;
                Grupo.EditorCID = new Guid("AA2A0DB9-2C59-4833-994D-3DBF2AA0CB3C");
                Grupo.Operator = XOperator.Like;
                Grupo.ShowSpin = false;
                Grupo.HotkeyChar = "";
                Grupo.JustifyHeight = false;
                Grupo.AllowEmpty = true;
                Grupo.FontColor = "#000000";
                Grupo.FontStyle = XFontStyle.Normal;
                Grupo.ShowFooter = false;
                Grupo.ViewSAM = new Guid("00000000-0000-0000-0000-000000000000");
                Grupo.Order = 1;
                Grupo.Scale = -1;
                Grupo.Length = -1;
                Grupo.SearchAction = XSearchAction.Default;
                Grupo.TypeID = XString.CID;
                Grupo.AdditionalFieldsID = new Guid[] {  };
                Grupo.AdditionalDataFieldsID = new Guid[] {  };
                Grupo.TargetFilterFieldID = new Guid[] {  };
                Grupo.SourceFilterFieldID = new Guid[] {  };
                Grupo.TargetDisplayFieldID = new Guid[] {  };
                Grupo.SourceDisplayFieldID = new Guid[] {  };
                Grupo.AutoLoad = false;
                Grupo.FilterInative = true;
                Grupo.IsAnswer = false;
                Grupo.AllowMultiSelect = false;
            }
            public XFRMField Grupo = new XFRMField(new Guid("C495C006-FFC7-4C3D-85BE-422DA679CEC1"), "Grupo", "Grupo", XString.CID, 2, 32, false, gCID, null, new Guid("273941FE-CE1D-4B62-A054-383DEBDF5584")); // String;
            public static class Fields
            {
                public static XFieldInfo Grupo = new XFieldInfo(new Guid("C495C006-FFC7-4C3D-85BE-422DA679CEC1"), "Grupo", "Grupo", typeof(String), false, "");
            }
        }

        #endregion GrupoFilterFRM

        public const String sCID = "93774BF7-E48C-4048-A60D-421E4B478F66";
        public static Guid gCID = new Guid(sCID);

        #region xISExGrupo 
        public class xISExGrupo : XSVCTable
        {

            public static Guid gCID => new Guid("4E469601-58C5-4B54-9685-18E4BEBDB799");

            public xISExGrupo()
            {
                Name = "ISExGrupo";
                Alias = "ISExGrupo";
                ID = gCID;
                ParentID =  global::Projecao.Core.ISE.DB.ISEx.ISExGrupo.gCID;

                Items.Add(Grupo, Grupo.ID);
                Grupo.Owner = this;
                Grupo.OwnerID = ID;
                Grupo.TableName = Name;
                Grupo.Alias = "Grupo";
                Items.Add(ISExGrupoID, ISExGrupoID.ID);
                ISExGrupoID.Owner = this;
                ISExGrupoID.OwnerID = ID;
                ISExGrupoID.TableName = Name;
                ISExGrupoID.Alias = "ISExGrupoID";
                Items.Add(GrupoID, GrupoID.ID);
                GrupoID.Owner = this;
                GrupoID.OwnerID = ID;
                GrupoID.TableName = Name;
                GrupoID.Alias = "GrupoID";
            }

            public static XORMField Grupo = new XORMField(global::Projecao.Core.ISE.DB.ISEx.ISExGrupo.Grupo, new Guid("273941FE-CE1D-4B62-A054-383DEBDF5584"), "Grupo", "Grupo");
            public static XORMFaceField ISExGrupoID = new XORMFaceField(global::Projecao.Core.ISE.DB.ISEx.ISExGrupo.ISExGrupoID, new Guid("264DA5FC-680E-483F-8F05-CC48DF19FDDD"), "ISExGrupoID", "Grupo");
            public static XORMField GrupoID = new XORMField(global::Projecao.Core.ISE.DB.ISEx.ISExGrupo.GrupoID, new Guid("2096B324-4560-4B71-AE4F-8F04399A9CBE"), "GrupoID", "CÃ³digo Legado");
        }
        #endregion xISExGrupo 


        public xISExGrupo ISExGrupo;

        public GrupoSVC()
        {
            TupleType = typeof(GrupoSVC.XTuple);
            DataSetType = typeof(GrupoSVC.XDataSet);
            ServiceRuleCID = new Guid("B3661DD6-C135-4126-B367-5DA7EDCFEFA1");
            OnlyActives = false;
            Actions = XSVCAction.All;
            Type = XServiceType.Default;
            ID = new Guid("93774BF7-E48C-4048-A60D-421E4B478F66");
            Name = "Grupo";
            Title = "Grupo";
            IsCacheable = false;
            CompanyControl = false;
            IsJob = false;
            AutoLoad = true;
            FreeForUsers = false;
            ServerSideNewRecord = false;
            UseDistinct = false;
            CheckTenant = true;
            JobType = XJobType.Default;
            ModuleID = new Guid("F28C7462-44A8-4233-9A88-4B89761423D3");
            Rights = new Int16[] { 1 }; 
            FilterFormID = new Guid("F254B60F-94D7-42D6-8F76-71167C534D0E");
            IsReadOnly = true;
            ReferenceScripts = new String[] { "TFX.Core.Service.js", "Projecao.Core.CEP.js", "Projecao.Core.ERP.js", "Projecao.Core.ISE.js" };
            GridFields = new Guid[] { xISExGrupo.Grupo.ID, xISExGrupo.GrupoID.ID };
            OrderByFields = new Guid[] { xISExGrupo.Grupo.ID };
            DataSetFields = new Guid[] { xISExGrupo.ISExGrupoID.ID, xISExGrupo.GrupoID.ID, xISExGrupo.Grupo.ID };
            PKField = xISExGrupo.ISExGrupoID.ID;
            ConfigTableID = new Guid("EE759945-8A0B-4CC2-AD54-D08E6A49A0A1");
            MasterRuleCID = new Guid("B3661DD6-C135-4126-B367-5DA7EDCFEFA1");
            ISExGrupo = new xISExGrupo();
            ISExGrupo.IsReadOnly = true;
            AddTable(ISExGrupo);
            MasterTableID = ISExGrupo.ID;
            xISExGrupo.Grupo.IsReadOnly = true;
            xISExGrupo.Grupo.OrderType = XOrderType.Asc;
            xISExGrupo.Grupo.Length = 40;
            xISExGrupo.Grupo.IsDataField = true;
            xISExGrupo.Grupo.FilterUse = true;
            xISExGrupo.Grupo.AllowEmpty = true;
            xISExGrupo.GrupoID.IsReadOnly = true;
            xISExGrupo.GrupoID.Length = 8;
            xISExGrupo.GrupoID.IsDataField = true;
            xISExGrupo.GrupoID.AllowEmpty = true;
            xISExGrupo.ISExGrupoID.IsReadOnly = true;
            xISExGrupo.ISExGrupoID.IsDataField = true;
            xISExGrupo.ISExGrupoID.AllowEmpty = true;
            xISExGrupo.GrupoID.DefaultValue = @"NA";
        }

        #region XFields

        public class XFields
        {
        public XORMField Grupo => xISExGrupo.Grupo;
        public XORMField GrupoID => xISExGrupo.GrupoID;
        public XORMField ISExGrupoID => xISExGrupo.ISExGrupoID;
        }
        #endregion XFields
        #region GrupoSVC.XTuple

        public  class XTuple : XDataTuple
        {

            public XTuple()
            {
            }

            public XTuple(Object[] pSource)
                : base(pSource)
            {
            }

            public XTuple(Int32 pColCount)
               : this(new Object[pColCount])
            {
            }

            public readonly XFields Fields = new XFields();

            #nullable enable

        public String Grupo
        {
            get
            {
                return (String)Value[GrupoSVC.xISExGrupo.Grupo.ID];
            }
            set
            {
                Value[GrupoSVC.xISExGrupo.Grupo.ID] = value;
            }
        }
        public String? oGrupo
        {
            get
            {
                GetOldValue(GrupoSVC.xISExGrupo.Grupo, out Object ovlr);
                return (String?)ovlr;
            }
        }

        public String GrupoID
        {
            get
            {
                return (String)Value[GrupoSVC.xISExGrupo.GrupoID.ID];
            }
            set
            {
                Value[GrupoSVC.xISExGrupo.GrupoID.ID] = value;
            }
        }
        public String? oGrupoID
        {
            get
            {
                GetOldValue(GrupoSVC.xISExGrupo.GrupoID, out Object ovlr);
                return (String?)ovlr;
            }
        }

        public Int32 ISExGrupoID
        {
            get
            {
                return (Int32)Value[GrupoSVC.xISExGrupo.ISExGrupoID.ID];
            }
            set
            {
                Value[GrupoSVC.xISExGrupo.ISExGrupoID.ID] = value;
            }
        }
        public Int32? oISExGrupoID
        {
            get
            {
                GetOldValue(GrupoSVC.xISExGrupo.ISExGrupoID, out Object ovlr);
                return (Int32?)ovlr;
            }
        }

            #nullable disable
        }
        #endregion GrupoSVC.XTuple

        #region GrupoSVC.XDataSet

        public class XDataSet : XDataSet<GrupoSVC.XTuple>
        {
            public XDataSet()
            {
                DataSetType = typeof(GrupoSVC.XDataSet);
            }
        }

        public class XDataSet<T> : XServiceDataSet<GrupoSVC.XTuple> where T : XDataTuple
        {

            public class xFLDs{
                public Guid Grupo => GrupoSVC.xISExGrupo.Grupo.ID;
                public Guid GrupoID => GrupoSVC.xISExGrupo.GrupoID.ID;
                public Guid ISExGrupoID => GrupoSVC.xISExGrupo.ISExGrupoID.ID;
            }

            public xFLDs FLDs = new xFLDs();

            public XDataSet()
            {
                DataSetType = typeof(GrupoSVC.XDataSet);
            }

        }
        #endregion GrupoSVC.XDataSet
        #if !OnlyDef
        #region GrupoSVC.XRule
        public abstract class XRule : XServiceRule<GrupoSVC.XDataSet, GrupoSVC, GrupoSVC.XTuple>
        {
        }
        #endregion GrupoSVC.XRule

        [Guid(GrupoSVC.sCID)]
        public  interface XService : XIBaseService
        {
            new XDataSet DataSet
            {
                get;
            }
            new XTuple NewTuple(Object pPKValue = null);
             IEnumerable<XTuple> Tuples
            {
                get;
            }
             XTuple Current
            {
                get;
            }
            new XDataSet Get(XServiceData pData);
             XDataSet Get(params Object[] pWhere);
        }
        [XRegister(typeof(_Service), _Service.sCID, typeof(GrupoSVC))]
        protected class _Service : Service<GrupoSVC, XDataSet, XTuple>
        {
            public const String sCID = "5FE29201-8F84-49F9-8C0B-601BAC166A13";
            public Guid gCID = new Guid(sCID);
        }

        public class Service<TModel, TDataSet, TTuple> : XBaseService<GrupoSVC, XDataSet, XTuple>, XService
             where TModel : GrupoSVC, new()
             where TDataSet : XDataSet, new()
             where TTuple : XTuple
        {
            XDataSet XService.DataSet => (XDataSet)DataSet;
            XTuple XService.NewTuple(Object pPKValue)
            {
                return (XTuple)NewTuple(pPKValue);
            }
            public new XDataTuple NewTuple(Object pPKValue = null)
            {
                return (XTuple)base.NewTuple(pPKValue);
            }
            IEnumerable<XTuple> XService.Tuples => (IEnumerable<XTuple>)Tuples;
            XTuple XService.Current => (XTuple )Current;
            XDataSet XService.Get(XServiceData pData)
            {
                return (XDataSet)Get(pData);
            }
            XDataSet XService.Get(params Object[] pWhere)
            {
                return (XDataSet)Get(pWhere);
            }
            public Service()
            {
                ID = gCID;
            }
        }
        #endif
    }

}