//<auto-generated/>
using System;
using System.Linq;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using Newtonsoft.Json;
using TFX.Core.Model.Cache;
using TFX.Core.Model.Data;
using TFX.Core.Model.DIC.SVC;
using TFX.Core.Model.DIC.ORM;
using TFX.Core.Model.DIC.Types;
using TFX.Core.Model.Interfaces;
using TFX.Core.Model.Services;
using TFX.Core.Reflections;
using TFX.Core.Objects;
#if !OnlyDef
using TFX.Core.Service.Job;
using TFX.Core.Service.SVC;
#endif
using TFX.Core.Model.DIC.FRM;
using TFX.Core.Model.DIC.APP;
using TFX.Core.Model.DIC.RPT;
using Projecao.Core.ISE.DB;

namespace Projecao.Core.ISE.ReadOnly
{
    [XDASESource(@"D:\Tootega\Source\TFX20\Modules\Projecao.Core.ISE\Projecao.Core.ISE.csproj", @"D:\Tootega\Source\TFX20\Modules\Projecao.Core.ISE\ReadOnly\ModeloCaculo.dssvc")]
    [XRegister(typeof(ModeloCaculoSVC), sCID)]
    public class ModeloCaculoSVC : XSVCModel
    {
        #region ModeloCaculoFilterFRM

        [XRegister(typeof(ModeloCaculoFilterFRM), sCID)]
        public class ModeloCaculoFilterFRM : XFRMModel
        {
            public const String sCID = "682005CE-7D00-4A3E-8926-DD9C33207F1F";
            public static new readonly Guid gCID = new Guid(sCID);
            static ModeloCaculoFilterFRM()
            {
                gCID = new Guid(sCID);
            }
            public ModeloCaculoFilterFRM()
            {
                ID = gCID;
                Name = "ModeloCaculoFilter";
                Title = "";
                MinRows = 2;
                ConfigCID = new Guid("00000000-0000-0000-0000-000000000000");
                ConfigPKFilter = false;
                ReferenceScripts = new String[] { "TFX.Core.Service.js", "Projecao.Core.CEP.js", "Projecao.Core.ERP.js", "Projecao.Core.ISE.js" };
                Rect = new XRect(0, 0, 250, 92);
                Style = XFRMStyle.Normal;
                ActionContext = XActionContext.All;
                AddItem(Nome);
                Nome.ForceRW = true;
                Nome.CanInsert = true;
                Nome.CanUpdate = true;
                Nome.RowCount = 2;
                Nome.ColCount = 32;
                Nome.RowCountSmall = 2;
                Nome.ColCountSmall = 32;
                Nome.IsHidden = false;
                Nome.IsHiddenSmall = false;
                Nome.AdditionalTitle = "";
                Nome.Icon = "";
                Nome.Location = 1;
                Nome.EditorCID = new Guid("F5982E79-BA45-40FB-85E1-9F2C8B90B6EF");
                Nome.Operator = XOperator.Like;
                Nome.ShowSpin = false;
                Nome.HotkeyChar = "";
                Nome.JustifyHeight = false;
                Nome.AllowEmpty = true;
                Nome.FontColor = "#000000";
                Nome.FontStyle = XFontStyle.Normal;
                Nome.ShowFooter = false;
                Nome.ViewSAM = new Guid("00000000-0000-0000-0000-000000000000");
                Nome.Order = 1;
                Nome.Scale = -1;
                Nome.Length = -1;
                Nome.SearchAction = XSearchAction.Default;
                Nome.TypeID = XString.CID;
                Nome.AdditionalFieldsID = new Guid[] {  };
                Nome.AdditionalDataFieldsID = new Guid[] {  };
                Nome.TargetFilterFieldID = new Guid[] {  };
                Nome.SourceFilterFieldID = new Guid[] {  };
                Nome.TargetDisplayFieldID = new Guid[] {  };
                Nome.SourceDisplayFieldID = new Guid[] {  };
                Nome.AutoLoad = false;
                Nome.FilterInative = true;
                Nome.IsAnswer = false;
                Nome.AllowMultiSelect = false;
            }
            public XFRMField Nome = new XFRMField(new Guid("A3E9C159-2287-43FF-A974-6FD1D96486FF"), "Nome", "Nome", XString.CID, 2, 32, false, gCID, null, new Guid("EADF3784-26A6-40F2-A91D-3D8868F361AA")); // String;
            public static class Fields
            {
                public static XFieldInfo Nome = new XFieldInfo(new Guid("A3E9C159-2287-43FF-A974-6FD1D96486FF"), "Nome", "Nome", typeof(String), false, "");
            }
        }

        #endregion ModeloCaculoFilterFRM

        public const String sCID = "0255223A-07AF-4846-B32D-D51BEA28C9AD";
        public static Guid gCID = new Guid(sCID);

        #region xCSTxModeloCalculo 
        public class xCSTxModeloCalculo : XSVCTable
        {

            public static Guid gCID => new Guid("03C6ADB6-2F55-4559-8AB0-C43BCB1970D0");

            public xCSTxModeloCalculo()
            {
                Name = "CSTxModeloCalculo";
                Alias = "CSTxModeloCalculo";
                ID = gCID;
                ParentID =  global::Projecao.Core.ISE.DB.CSTx.CSTxModeloCalculo.gCID;

                Items.Add(Nome, Nome.ID);
                Nome.Owner = this;
                Nome.OwnerID = ID;
                Nome.TableName = Name;
                Nome.Alias = "Nome";
                Items.Add(CSTxModeloCalculoID, CSTxModeloCalculoID.ID);
                CSTxModeloCalculoID.Owner = this;
                CSTxModeloCalculoID.OwnerID = ID;
                CSTxModeloCalculoID.TableName = Name;
                CSTxModeloCalculoID.Alias = "CSTxModeloCalculoID";
                Items.Add(SYSxEmpresaMatrizID, SYSxEmpresaMatrizID.ID);
                SYSxEmpresaMatrizID.Owner = this;
                SYSxEmpresaMatrizID.OwnerID = ID;
                SYSxEmpresaMatrizID.TableName = Name;
                Items.Add(SYSxEstadoID, SYSxEstadoID.ID);
                SYSxEstadoID.Owner = this;
                SYSxEstadoID.OwnerID = ID;
                SYSxEstadoID.TableName = Name;
            }

            public static XORMField Nome = new XORMField(global::Projecao.Core.ISE.DB.CSTx.CSTxModeloCalculo.Nome, new Guid("EADF3784-26A6-40F2-A91D-3D8868F361AA"), "Nome", "Nome");
            public static XORMFaceField CSTxModeloCalculoID = new XORMFaceField(global::Projecao.Core.ISE.DB.CSTx.CSTxModeloCalculo.CSTxModeloCalculoID, new Guid("BABEFE17-C939-4C15-82D1-A587CE36FABC"), "CSTxModeloCalculoID", "Modelo para Cáculo de Custo");
            public static XORMFKField SYSxEmpresaMatrizID = new XORMFKField(global::Projecao.Core.ISE.DB.CSTx.CSTxModeloCalculo.SYSxEmpresaMatrizID, new Guid("208D4C80-CE27-4618-9B3E-2B58E28D9570"), "SYSxEmpresaMatrizID", "Empresa Principal");
            public static XORMStateField SYSxEstadoID = new XORMStateField(global::Projecao.Core.ISE.DB.CSTx.CSTxModeloCalculo.SYSxEstadoID, new Guid("02AD7E64-F939-488D-A392-4ABC9C0DCEA3"), "SYSxEstadoID", "Estado");
        }
        #endregion xCSTxModeloCalculo 


        public xCSTxModeloCalculo CSTxModeloCalculo;

        public ModeloCaculoSVC()
        {
            TupleType = typeof(ModeloCaculoSVC.XTuple);
            DataSetType = typeof(ModeloCaculoSVC.XDataSet);
            ServiceRuleCID = new Guid("2409779E-E287-4BC0-9E0D-A329D3DBA02D");
            OnlyActives = false;
            Actions = XSVCAction.All;
            Type = XServiceType.Default;
            ID = new Guid("0255223A-07AF-4846-B32D-D51BEA28C9AD");
            Name = "ModeloCaculo";
            Title = "Modelo de Cálculo";
            IsCacheable = false;
            CompanyControl = false;
            IsJob = false;
            AutoLoad = true;
            FreeForUsers = false;
            ServerSideNewRecord = false;
            UseDistinct = false;
            CheckTenant = true;
            JobType = XJobType.Default;
            ModuleID = new Guid("F28C7462-44A8-4233-9A88-4B89761423D3");
            Rights = new Int16[] { 1 }; 
            FilterFormID = new Guid("682005CE-7D00-4A3E-8926-DD9C33207F1F");
            IsReadOnly = true;
            ReferenceScripts = new String[] { "TFX.Core.Service.js", "Projecao.Core.CEP.js", "Projecao.Core.ERP.js", "Projecao.Core.ISE.js" };
            GridFields = new Guid[] { xCSTxModeloCalculo.Nome.ID };
            OrderByFields = new Guid[] { xCSTxModeloCalculo.Nome.ID };
            DataSetFields = new Guid[] { xCSTxModeloCalculo.CSTxModeloCalculoID.ID, xCSTxModeloCalculo.Nome.ID };
            PKField = xCSTxModeloCalculo.CSTxModeloCalculoID.ID;
            ConfigTableID = new Guid("A7A37925-9A53-4019-885C-4D8A2CD2A198");
            MasterRuleCID = new Guid("2409779E-E287-4BC0-9E0D-A329D3DBA02D");
            CSTxModeloCalculo = new xCSTxModeloCalculo();
            CSTxModeloCalculo.IsReadOnly = true;
            AddTable(CSTxModeloCalculo);
            MasterTableID = CSTxModeloCalculo.ID;
            xCSTxModeloCalculo.CSTxModeloCalculoID.IsReadOnly = true;
            xCSTxModeloCalculo.CSTxModeloCalculoID.IsDataField = true;
            xCSTxModeloCalculo.CSTxModeloCalculoID.AllowEmpty = true;
            xCSTxModeloCalculo.Nome.IsReadOnly = true;
            xCSTxModeloCalculo.Nome.OrderType = XOrderType.Asc;
            xCSTxModeloCalculo.Nome.Length = 50;
            xCSTxModeloCalculo.Nome.IsDataField = true;
            xCSTxModeloCalculo.Nome.AllowEmpty = true;
        }

        #region XFields

        public class XFields
        {
        public XORMField CSTxModeloCalculoID => xCSTxModeloCalculo.CSTxModeloCalculoID;
        public XORMField Nome => xCSTxModeloCalculo.Nome;
        }
        #endregion XFields
        #region ModeloCaculoSVC.XTuple

        public  class XTuple : XDataTuple
        {

            public XTuple()
            {
            }

            public XTuple(Object[] pSource)
                : base(pSource)
            {
            }

            public XTuple(Int32 pColCount)
               : this(new Object[pColCount])
            {
            }

            public readonly XFields Fields = new XFields();

            #nullable enable

        public Guid CSTxModeloCalculoID
        {
            get
            {
                return (Guid)Value[ModeloCaculoSVC.xCSTxModeloCalculo.CSTxModeloCalculoID.ID];
            }
            set
            {
                Value[ModeloCaculoSVC.xCSTxModeloCalculo.CSTxModeloCalculoID.ID] = value;
            }
        }
        public Guid? oCSTxModeloCalculoID
        {
            get
            {
                GetOldValue(ModeloCaculoSVC.xCSTxModeloCalculo.CSTxModeloCalculoID, out Object ovlr);
                return (Guid?)ovlr;
            }
        }

        public String Nome
        {
            get
            {
                return (String)Value[ModeloCaculoSVC.xCSTxModeloCalculo.Nome.ID];
            }
            set
            {
                Value[ModeloCaculoSVC.xCSTxModeloCalculo.Nome.ID] = value;
            }
        }
        public String? oNome
        {
            get
            {
                GetOldValue(ModeloCaculoSVC.xCSTxModeloCalculo.Nome, out Object ovlr);
                return (String?)ovlr;
            }
        }

            #nullable disable
        }
        #endregion ModeloCaculoSVC.XTuple

        #region ModeloCaculoSVC.XDataSet

        public class XDataSet : XDataSet<ModeloCaculoSVC.XTuple>
        {
            public XDataSet()
            {
                DataSetType = typeof(ModeloCaculoSVC.XDataSet);
            }
        }

        public class XDataSet<T> : XServiceDataSet<ModeloCaculoSVC.XTuple> where T : XDataTuple
        {

            public class xFLDs{
                public Guid CSTxModeloCalculoID => ModeloCaculoSVC.xCSTxModeloCalculo.CSTxModeloCalculoID.ID;
                public Guid Nome => ModeloCaculoSVC.xCSTxModeloCalculo.Nome.ID;
            }

            public xFLDs FLDs = new xFLDs();

            public XDataSet()
            {
                DataSetType = typeof(ModeloCaculoSVC.XDataSet);
            }

        }
        #endregion ModeloCaculoSVC.XDataSet
        #if !OnlyDef
        #region ModeloCaculoSVC.XRule
        public abstract class XRule : XServiceRule<ModeloCaculoSVC.XDataSet, ModeloCaculoSVC, ModeloCaculoSVC.XTuple>
        {
        }
        #endregion ModeloCaculoSVC.XRule

        [Guid(ModeloCaculoSVC.sCID)]
        public  interface XService : XIBaseService
        {
            new XDataSet DataSet
            {
                get;
            }
            new XTuple NewTuple(Object pPKValue = null);
             IEnumerable<XTuple> Tuples
            {
                get;
            }
             XTuple Current
            {
                get;
            }
            new XDataSet Get(XServiceData pData);
             XDataSet Get(params Object[] pWhere);
        }
        [XRegister(typeof(_Service), _Service.sCID, typeof(ModeloCaculoSVC))]
        protected class _Service : Service<ModeloCaculoSVC, XDataSet, XTuple>
        {
            public const String sCID = "B0CA5220-633A-4842-AD11-21EC9DFECCEC";
            public Guid gCID = new Guid(sCID);
        }

        public class Service<TModel, TDataSet, TTuple> : XBaseService<ModeloCaculoSVC, XDataSet, XTuple>, XService
             where TModel : ModeloCaculoSVC, new()
             where TDataSet : XDataSet, new()
             where TTuple : XTuple
        {
            XDataSet XService.DataSet => (XDataSet)DataSet;
            XTuple XService.NewTuple(Object pPKValue)
            {
                return (XTuple)NewTuple(pPKValue);
            }
            public new XDataTuple NewTuple(Object pPKValue = null)
            {
                return (XTuple)base.NewTuple(pPKValue);
            }
            IEnumerable<XTuple> XService.Tuples => (IEnumerable<XTuple>)Tuples;
            XTuple XService.Current => (XTuple )Current;
            XDataSet XService.Get(XServiceData pData)
            {
                return (XDataSet)Get(pData);
            }
            XDataSet XService.Get(params Object[] pWhere)
            {
                return (XDataSet)Get(pWhere);
            }
            public Service()
            {
                ID = gCID;
            }
        }
        #endif
    }

}